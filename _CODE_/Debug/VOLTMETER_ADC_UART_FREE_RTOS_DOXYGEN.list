
VOLTMETER_ADC_UART_FREE_RTOS_DOXYGEN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be2c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000714  0800bfd0  0800bfd0  0001bfd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6e4  0800c6e4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6e4  0800c6e4  0001c6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6ec  0800c6ec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6ec  0800c6ec  0001c6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6f0  0800c6f0  0001c6f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c6f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049c4  200001e0  0800c8d4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ba4  0800c8d4  00024ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b192  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004131  00000000  00000000  0003b3a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  0003f4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001480  00000000  00000000  00040b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b218  00000000  00000000  00041f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc3f  00000000  00000000  0005d1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a43bd  00000000  00000000  0007ade7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f1a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c94  00000000  00000000  0011f1f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bfb4 	.word	0x0800bfb4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800bfb4 	.word	0x0800bfb4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ece:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ed0:	4a21      	ldr	r2, [pc, #132]	; (8000f58 <MX_ADC1_Init+0x9c>)
 8000ed2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ed6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000edc:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000efe:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <MX_ADC1_Init+0xa0>)
 8000f00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f1e:	f001 fba7 	bl	8002670 <HAL_ADC_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f28:	f000 ffb4 	bl	8001e94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f30:	2301      	movs	r3, #1
 8000f32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f3e:	f001 fe55 	bl	8002bec <HAL_ADC_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f48:	f000 ffa4 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200001fc 	.word	0x200001fc
 8000f58:	40012000 	.word	0x40012000
 8000f5c:	0f000001 	.word	0x0f000001

08000f60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <HAL_ADC_MspInit+0x8c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d12f      	bne.n	8000fe2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <HAL_ADC_MspInit+0x90>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a19      	ldr	r2, [pc, #100]	; (8000ff0 <HAL_ADC_MspInit+0x90>)
 8000f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <HAL_ADC_MspInit+0x90>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <HAL_ADC_MspInit+0x90>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <HAL_ADC_MspInit+0x90>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <HAL_ADC_MspInit+0x90>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <HAL_ADC_MspInit+0x94>)
 8000fce:	f002 fd19 	bl	8003a04 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2105      	movs	r1, #5
 8000fd6:	2012      	movs	r0, #18
 8000fd8:	f002 f8e8 	bl	80031ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000fdc:	2012      	movs	r0, #18
 8000fde:	f002 f901 	bl	80031e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	; 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40012000 	.word	0x40012000
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <MX_DMA_Init+0x4c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <MX_DMA_Init+0x4c>)
 8001008:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <MX_DMA_Init+0x4c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2105      	movs	r1, #5
 800101e:	203a      	movs	r0, #58	; 0x3a
 8001020:	f002 f8c4 	bl	80031ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001024:	203a      	movs	r0, #58	; 0x3a
 8001026:	f002 f8dd 	bl	80031e4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2105      	movs	r1, #5
 800102e:	2046      	movs	r0, #70	; 0x46
 8001030:	f002 f8bc 	bl	80031ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001034:	2046      	movs	r0, #70	; 0x46
 8001036:	f002 f8d5 	bl	80031e4 <HAL_NVIC_EnableIRQ>

}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800

08001048 <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationTickHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4a07      	ldr	r2, [pc, #28]	; (8001090 <vApplicationGetIdleTaskMemory+0x2c>)
 8001074:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <vApplicationGetIdleTaskMemory+0x30>)
 800107a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2280      	movs	r2, #128	; 0x80
 8001080:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000478 	.word	0x20000478
 8001094:	200004cc 	.word	0x200004cc

08001098 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80010a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <vApplicationGetTimerTaskMemory+0x30>)
 80010ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	200006cc 	.word	0x200006cc
 80010c8:	20000720 	.word	0x20000720

080010cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b0c8      	sub	sp, #288	; 0x120
 80010d0:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of RTOS_TIMER_1 */
  osTimerDef(RTOS_TIMER_1, TIMER_CALLBACK);
 80010d2:	4b75      	ldr	r3, [pc, #468]	; (80012a8 <MX_FREERTOS_Init+0x1dc>)
 80010d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RTOS_TIMER_1Handle = osTimerCreate(osTimer(RTOS_TIMER_1), osTimerPeriodic, NULL);
 80010de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010e2:	2200      	movs	r2, #0
 80010e4:	2101      	movs	r1, #1
 80010e6:	4618      	mov	r0, r3
 80010e8:	f005 f9c8 	bl	800647c <osTimerCreate>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a6f      	ldr	r2, [pc, #444]	; (80012ac <MX_FREERTOS_Init+0x1e0>)
 80010f0:	6013      	str	r3, [r2, #0]
	/// CREATE QUEUES:
	///------------------------------------------------------------------------------------------------------------------------------

  /* Create the queue(s) */
  /* definition and creation of ADC_QUEUE_UART_TX */
  osMessageQDef(ADC_QUEUE_UART_TX, 1, uint16_t);
 80010f2:	4b6f      	ldr	r3, [pc, #444]	; (80012b0 <MX_FREERTOS_Init+0x1e4>)
 80010f4:	f507 7484 	add.w	r4, r7, #264	; 0x108
 80010f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ADC_QUEUE_UART_TXHandle = osMessageCreate(osMessageQ(ADC_QUEUE_UART_TX), NULL);
 80010fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f005 f9ed 	bl	80064e4 <osMessageCreate>
 800110a:	4603      	mov	r3, r0
 800110c:	4a69      	ldr	r2, [pc, #420]	; (80012b4 <MX_FREERTOS_Init+0x1e8>)
 800110e:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_RX_QUEUE_ADC_TAKE */
  osMessageQDef(UART_RX_QUEUE_ADC_TAK, 16, uint16_t);
 8001110:	4b69      	ldr	r3, [pc, #420]	; (80012b8 <MX_FREERTOS_Init+0x1ec>)
 8001112:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 8001116:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001118:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UART_RX_QUEUE_ADC_TAKHandle = osMessageCreate(osMessageQ(UART_RX_QUEUE_ADC_TAK), NULL);
 800111c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f005 f9de 	bl	80064e4 <osMessageCreate>
 8001128:	4603      	mov	r3, r0
 800112a:	4a64      	ldr	r2, [pc, #400]	; (80012bc <MX_FREERTOS_Init+0x1f0>)
 800112c:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_RX_QUEUE_UART_TX */
  osMessageQDef(UART_RX_QUEUE_UART_TX, 1, uint8_t);
 800112e:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <MX_FREERTOS_Init+0x1f4>)
 8001130:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 8001134:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001136:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UART_RX_QUEUE_UART_TXHandle = osMessageCreate(osMessageQ(UART_RX_QUEUE_UART_TX), NULL);
 800113a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f005 f9cf 	bl	80064e4 <osMessageCreate>
 8001146:	4603      	mov	r3, r0
 8001148:	4a5e      	ldr	r2, [pc, #376]	; (80012c4 <MX_FREERTOS_Init+0x1f8>)
 800114a:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_RX_QUEUE_ADC_CONFIG */
  osMessageQDef(UART_RX_QUEUE_ADC_CONFIG, 1, uint8_t);
 800114c:	4b5c      	ldr	r3, [pc, #368]	; (80012c0 <MX_FREERTOS_Init+0x1f4>)
 800114e:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8001152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001154:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UART_RX_QUEUE_ADC_CONFIGHandle = osMessageCreate(osMessageQ(UART_RX_QUEUE_ADC_CONFIG), NULL);
 8001158:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f005 f9c0 	bl	80064e4 <osMessageCreate>
 8001164:	4603      	mov	r3, r0
 8001166:	4a58      	ldr	r2, [pc, #352]	; (80012c8 <MX_FREERTOS_Init+0x1fc>)
 8001168:	6013      	str	r3, [r2, #0]

  /* definition and creation of INT_UART_QUEUE_UART_RX */
  osMessageQDef(INT_UART_QUEUE_UART_RX, 1, uint8_t);
 800116a:	4b55      	ldr	r3, [pc, #340]	; (80012c0 <MX_FREERTOS_Init+0x1f4>)
 800116c:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8001170:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001172:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  INT_UART_QUEUE_UART_RXHandle = osMessageCreate(osMessageQ(INT_UART_QUEUE_UART_RX), NULL);
 8001176:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f005 f9b1 	bl	80064e4 <osMessageCreate>
 8001182:	4603      	mov	r3, r0
 8001184:	4a51      	ldr	r2, [pc, #324]	; (80012cc <MX_FREERTOS_Init+0x200>)
 8001186:	6013      	str	r3, [r2, #0]
	/// CREATE THREADS:
	///------------------------------------------------------------------------------------------------------------------------------

  /* Create the thread(s) */
  /* definition and creation of IDLE_DEBUG_TASK */
  osThreadDef(IDLE_DEBUG_TASK, IDLE_DEBUG_TASK_INIT, osPriorityIdle, 0, 128);
 8001188:	4b51      	ldr	r3, [pc, #324]	; (80012d0 <MX_FREERTOS_Init+0x204>)
 800118a:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 800118e:	461d      	mov	r5, r3
 8001190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001194:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001198:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IDLE_DEBUG_TASKHandle = osThreadCreate(osThread(IDLE_DEBUG_TASK), NULL);
 800119c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f005 f909 	bl	80063ba <osThreadCreate>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a4a      	ldr	r2, [pc, #296]	; (80012d4 <MX_FREERTOS_Init+0x208>)
 80011ac:	6013      	str	r3, [r2, #0]

  /* definition and creation of ADC_TAKE_TASK */
  osThreadDef(ADC_TAKE_TASK, ADC_TAKE_TASK_INIT, osPriorityNormal, 0, 128);
 80011ae:	4b4a      	ldr	r3, [pc, #296]	; (80012d8 <MX_FREERTOS_Init+0x20c>)
 80011b0:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80011b4:	461d      	mov	r5, r3
 80011b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_TAKE_TASKHandle = osThreadCreate(osThread(ADC_TAKE_TASK), NULL);
 80011c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f005 f8f6 	bl	80063ba <osThreadCreate>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a42      	ldr	r2, [pc, #264]	; (80012dc <MX_FREERTOS_Init+0x210>)
 80011d2:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_TX_TASK */
  osThreadDef(UART_TX_TASK, UART_TX_TASK_INIT, osPriorityNormal, 0, 2048);
 80011d4:	4b42      	ldr	r3, [pc, #264]	; (80012e0 <MX_FREERTOS_Init+0x214>)
 80011d6:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80011da:	461d      	mov	r5, r3
 80011dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_TX_TASKHandle = osThreadCreate(osThread(UART_TX_TASK), NULL);
 80011e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f005 f8e3 	bl	80063ba <osThreadCreate>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a3b      	ldr	r2, [pc, #236]	; (80012e4 <MX_FREERTOS_Init+0x218>)
 80011f8:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_RX_TASK */
  osThreadDef(UART_RX_TASK, UART_RX_TASK_INIT, osPriorityNormal, 0, 128);
 80011fa:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <MX_FREERTOS_Init+0x21c>)
 80011fc:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001200:	461d      	mov	r5, r3
 8001202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001206:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800120a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_RX_TASKHandle = osThreadCreate(osThread(UART_RX_TASK), NULL);
 800120e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f005 f8d0 	bl	80063ba <osThreadCreate>
 800121a:	4603      	mov	r3, r0
 800121c:	4a33      	ldr	r2, [pc, #204]	; (80012ec <MX_FREERTOS_Init+0x220>)
 800121e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ADC_CONFIG_TASK */
  osThreadDef(ADC_CONFIG_TASK, ADC_CONFIG_TASK_INIT, osPriorityBelowNormal, 0, 128);
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <MX_FREERTOS_Init+0x224>)
 8001222:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001226:	461d      	mov	r5, r3
 8001228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001230:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_CONFIG_TASKHandle = osThreadCreate(osThread(ADC_CONFIG_TASK), NULL);
 8001234:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f005 f8bd 	bl	80063ba <osThreadCreate>
 8001240:	4603      	mov	r3, r0
 8001242:	4a2c      	ldr	r2, [pc, #176]	; (80012f4 <MX_FREERTOS_Init+0x228>)
 8001244:	6013      	str	r3, [r2, #0]

  /* definition and creation of INT_TIMER_TASK */
  osThreadDef(INT_TIMER_TASK, INT_TIMER_TASK_INIT, osPriorityAboveNormal, 0, 128);
 8001246:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800124a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800124e:	4a2a      	ldr	r2, [pc, #168]	; (80012f8 <MX_FREERTOS_Init+0x22c>)
 8001250:	461c      	mov	r4, r3
 8001252:	4615      	mov	r5, r2
 8001254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001258:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800125c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  INT_TIMER_TASKHandle = osThreadCreate(osThread(INT_TIMER_TASK), NULL);
 8001260:	f107 0320 	add.w	r3, r7, #32
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f005 f8a7 	bl	80063ba <osThreadCreate>
 800126c:	4603      	mov	r3, r0
 800126e:	4a23      	ldr	r2, [pc, #140]	; (80012fc <MX_FREERTOS_Init+0x230>)
 8001270:	6013      	str	r3, [r2, #0]

  /* definition and creation of INT_UART_TASK */
  osThreadDef(INT_UART_TASK, INT_UART_TASK_INIT, osPriorityAboveNormal, 0, 128);
 8001272:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001276:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800127a:	4a21      	ldr	r2, [pc, #132]	; (8001300 <MX_FREERTOS_Init+0x234>)
 800127c:	461c      	mov	r4, r3
 800127e:	4615      	mov	r5, r2
 8001280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001284:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001288:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  INT_UART_TASKHandle = osThreadCreate(osThread(INT_UART_TASK), NULL);
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f005 f892 	bl	80063ba <osThreadCreate>
 8001296:	4603      	mov	r3, r0
 8001298:	4a1a      	ldr	r2, [pc, #104]	; (8001304 <MX_FREERTOS_Init+0x238>)
 800129a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800129c:	bf00      	nop
 800129e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bdb0      	pop	{r4, r5, r7, pc}
 80012a6:	bf00      	nop
 80012a8:	08001c91 	.word	0x08001c91
 80012ac:	20000474 	.word	0x20000474
 80012b0:	0800c040 	.word	0x0800c040
 80012b4:	20000460 	.word	0x20000460
 80012b8:	0800c050 	.word	0x0800c050
 80012bc:	20000464 	.word	0x20000464
 80012c0:	0800c060 	.word	0x0800c060
 80012c4:	20000468 	.word	0x20000468
 80012c8:	2000046c 	.word	0x2000046c
 80012cc:	20000470 	.word	0x20000470
 80012d0:	0800c070 	.word	0x0800c070
 80012d4:	20000444 	.word	0x20000444
 80012d8:	0800c08c 	.word	0x0800c08c
 80012dc:	20000448 	.word	0x20000448
 80012e0:	0800c0a8 	.word	0x0800c0a8
 80012e4:	2000044c 	.word	0x2000044c
 80012e8:	0800c0c4 	.word	0x0800c0c4
 80012ec:	20000450 	.word	0x20000450
 80012f0:	0800c0e0 	.word	0x0800c0e0
 80012f4:	20000454 	.word	0x20000454
 80012f8:	0800c0fc 	.word	0x0800c0fc
 80012fc:	20000458 	.word	0x20000458
 8001300:	0800c118 	.word	0x0800c118
 8001304:	2000045c 	.word	0x2000045c

08001308 <IDLE_DEBUG_TASK_INIT>:
/* USER CODE END Header_IDLE_DEBUG_TASK_INIT */



void IDLE_DEBUG_TASK_INIT(void const * argument)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

	///------------------------------------------------------------------------------------------------------------------------------
	/// TASK TO DEBUG - TOGGLE DIODE:
	///------------------------------------------------------------------------------------------------------------------------------

  int i = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	  osDelay(1);
 8001314:	2001      	movs	r0, #1
 8001316:	f005 f89c 	bl	8006452 <osDelay>
	  i = i + 1;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3301      	adds	r3, #1
 800131e:	60fb      	str	r3, [r7, #12]

	  if(i == 1000)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001326:	d1f5      	bne.n	8001314 <IDLE_DEBUG_TASK_INIT+0xc>
	  {
		 i = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]

		 /// TOGGLE FIRST RED DIODE (DEBUG DIODE):
		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800132c:	2101      	movs	r1, #1
 800132e:	4802      	ldr	r0, [pc, #8]	; (8001338 <IDLE_DEBUG_TASK_INIT+0x30>)
 8001330:	f002 fd05 	bl	8003d3e <HAL_GPIO_TogglePin>
	  osDelay(1);
 8001334:	e7ee      	b.n	8001314 <IDLE_DEBUG_TASK_INIT+0xc>
 8001336:	bf00      	nop
 8001338:	40020400 	.word	0x40020400

0800133c <ADC_TAKE_TASK_INIT>:
/* USER CODE END Header_ADC_TAKE_TASK_INIT */



void ADC_TAKE_TASK_INIT(void const * argument)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	char MSG[10]; //10 CHARACTER BUFFER TO TRANSMIT OVER QUEUE TO UART TASK (80bits):

	  /* Infinite loop */
	  for(;;)
	  {
		  osDelay(1);
 8001344:	2001      	movs	r0, #1
 8001346:	f005 f884 	bl	8006452 <osDelay>

		  ///START ADC CONVERSION:
		  HAL_ADC_Start(&hadc1); /// PASSING ADC HANDLING ADDRES
 800134a:	480c      	ldr	r0, [pc, #48]	; (800137c <ADC_TAKE_TASK_INIT+0x40>)
 800134c:	f001 f9d4 	bl	80026f8 <HAL_ADC_Start>

		  /// WAIT TO ADC CONVERSION TO COMPLETE:
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001350:	f04f 31ff 	mov.w	r1, #4294967295
 8001354:	4809      	ldr	r0, [pc, #36]	; (800137c <ADC_TAKE_TASK_INIT+0x40>)
 8001356:	f001 fa83 	bl	8002860 <HAL_ADC_PollForConversion>

		  ///WHEN CONVERSION IS DONE GET 12bit VALUE: (FROM 0 TO 4095)
		  RAW_ADC_VALUE = HAL_ADC_GetValue(&hadc1);
 800135a:	4808      	ldr	r0, [pc, #32]	; (800137c <ADC_TAKE_TASK_INIT+0x40>)
 800135c:	f001 fc1b 	bl	8002b96 <HAL_ADC_GetValue>
 8001360:	4603      	mov	r3, r0
 8001362:	b29b      	uxth	r3, r3
 8001364:	82fb      	strh	r3, [r7, #22]

		  /// SEND DATA TO QUEUE:
		  xQueueSend(ADC_QUEUE_UART_TXHandle, &RAW_ADC_VALUE, portMAX_DELAY);
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <ADC_TAKE_TASK_INIT+0x44>)
 8001368:	6818      	ldr	r0, [r3, #0]
 800136a:	f107 0116 	add.w	r1, r7, #22
 800136e:	2300      	movs	r3, #0
 8001370:	f04f 32ff 	mov.w	r2, #4294967295
 8001374:	f005 facc 	bl	8006910 <xQueueGenericSend>
		  osDelay(1);
 8001378:	e7e4      	b.n	8001344 <ADC_TAKE_TASK_INIT+0x8>
 800137a:	bf00      	nop
 800137c:	200001fc 	.word	0x200001fc
 8001380:	20000460 	.word	0x20000460

08001384 <UART_TX_TASK_INIT>:



/// TASK FOR TERMINAL INTERFACE IN PC - UART TRANSFER DATA TASK:
void UART_TX_TASK_INIT(void const * argument)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	///@param RAW_ADC_VALUE 12bit VALU OF ADC MEASUREMENT
	///@param VOLTAGE VARIABLE FOR OUTCOME VOLTAGE VALUE
	///@param  CONTINOUS
	///@param  MSG[10] 10 CHARACTER BUFFER (80bits) TO TRANSMIT OVER UART

		uint8_t MODE = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	75fb      	strb	r3, [r7, #23]
		uint16_t RAW_ADC_VALUE; /// 12bit ADC READING
		float VOLTAGE;
		uint8_t CONTINOUS = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	77fb      	strb	r3, [r7, #31]
		char MSG[10]; //10 CHARACTER BUFFER (80bits) TO TRANSMIT OVER UART

		xQueueReceive(ADC_QUEUE_UART_TXHandle, &RAW_ADC_VALUE, portMAX_DELAY);
 8001394:	4bd1      	ldr	r3, [pc, #836]	; (80016dc <UART_TX_TASK_INIT+0x358>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f107 0114 	add.w	r1, r7, #20
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	4618      	mov	r0, r3
 80013a2:	f005 fc4f 	bl	8006c44 <xQueueReceive>
		xQueueReceive( UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 80013a6:	4bce      	ldr	r3, [pc, #824]	; (80016e0 <UART_TX_TASK_INIT+0x35c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f107 0117 	add.w	r1, r7, #23
 80013ae:	f04f 32ff 	mov.w	r2, #4294967295
 80013b2:	4618      	mov	r0, r3
 80013b4:	f005 fc46 	bl	8006c44 <xQueueReceive>

	  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 80013b8:	2001      	movs	r0, #1
 80013ba:	f005 f84a 	bl	8006452 <osDelay>

	    /// START PAGE:
	    if(MODE == 0)
 80013be:	7dfb      	ldrb	r3, [r7, #23]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d16f      	bne.n	80014a4 <UART_TX_TASK_INIT+0x120>
	    {
	    	CONTINOUS = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	77fb      	strb	r3, [r7, #31]

	        sprintf(MSG,"\033c"); /// CLEAR TERMINAL WINDOW COMAND
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	49c5      	ldr	r1, [pc, #788]	; (80016e4 <UART_TX_TASK_INIT+0x360>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f008 fb86 	bl	8009ae0 <siprintf>
	        HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	4618      	mov	r0, r3
 80013da:	f7fe ff01 	bl	80001e0 <strlen>
 80013de:	4603      	mov	r3, r0
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	f107 0108 	add.w	r1, r7, #8
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	48bf      	ldr	r0, [pc, #764]	; (80016e8 <UART_TX_TASK_INIT+0x364>)
 80013ec:	f003 fddf 	bl	8004fae <HAL_UART_Transmit>

			sprintf(MSG,"SELECT MODE:  %\r\n");
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	49bd      	ldr	r1, [pc, #756]	; (80016ec <UART_TX_TASK_INIT+0x368>)
 80013f6:	4618      	mov	r0, r3
 80013f8:	f008 fb72 	bl	8009ae0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	4618      	mov	r0, r3
 8001402:	f7fe feed 	bl	80001e0 <strlen>
 8001406:	4603      	mov	r3, r0
 8001408:	b29a      	uxth	r2, r3
 800140a:	f107 0108 	add.w	r1, r7, #8
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	48b5      	ldr	r0, [pc, #724]	; (80016e8 <UART_TX_TASK_INIT+0x364>)
 8001414:	f003 fdcb 	bl	8004fae <HAL_UART_Transmit>

			sprintf(MSG,"CLICK S TO SINGLE MEASUREMENT  %\r\n");
 8001418:	f107 0308 	add.w	r3, r7, #8
 800141c:	49b4      	ldr	r1, [pc, #720]	; (80016f0 <UART_TX_TASK_INIT+0x36c>)
 800141e:	4618      	mov	r0, r3
 8001420:	f008 fb5e 	bl	8009ae0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8001424:	f107 0308 	add.w	r3, r7, #8
 8001428:	4618      	mov	r0, r3
 800142a:	f7fe fed9 	bl	80001e0 <strlen>
 800142e:	4603      	mov	r3, r0
 8001430:	b29a      	uxth	r2, r3
 8001432:	f107 0108 	add.w	r1, r7, #8
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	48ab      	ldr	r0, [pc, #684]	; (80016e8 <UART_TX_TASK_INIT+0x364>)
 800143c:	f003 fdb7 	bl	8004fae <HAL_UART_Transmit>

			sprintf(MSG,"CLICK C TO CONTINOUS MEASUREMENT %\r\n");
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	49ab      	ldr	r1, [pc, #684]	; (80016f4 <UART_TX_TASK_INIT+0x370>)
 8001446:	4618      	mov	r0, r3
 8001448:	f008 fb4a 	bl	8009ae0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	4618      	mov	r0, r3
 8001452:	f7fe fec5 	bl	80001e0 <strlen>
 8001456:	4603      	mov	r3, r0
 8001458:	b29a      	uxth	r2, r3
 800145a:	f107 0108 	add.w	r1, r7, #8
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	48a1      	ldr	r0, [pc, #644]	; (80016e8 <UART_TX_TASK_INIT+0x364>)
 8001464:	f003 fda3 	bl	8004fae <HAL_UART_Transmit>

			sprintf(MSG,"CLICK I TO SELECT ADC INPUT %\r\n");
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	49a2      	ldr	r1, [pc, #648]	; (80016f8 <UART_TX_TASK_INIT+0x374>)
 800146e:	4618      	mov	r0, r3
 8001470:	f008 fb36 	bl	8009ae0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe feb1 	bl	80001e0 <strlen>
 800147e:	4603      	mov	r3, r0
 8001480:	b29a      	uxth	r2, r3
 8001482:	f107 0108 	add.w	r1, r7, #8
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	4897      	ldr	r0, [pc, #604]	; (80016e8 <UART_TX_TASK_INIT+0x364>)
 800148c:	f003 fd8f 	bl	8004fae <HAL_UART_Transmit>

			xQueueReceive( UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 8001490:	4b93      	ldr	r3, [pc, #588]	; (80016e0 <UART_TX_TASK_INIT+0x35c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f107 0117 	add.w	r1, r7, #23
 8001498:	f04f 32ff 	mov.w	r2, #4294967295
 800149c:	4618      	mov	r0, r3
 800149e:	f005 fbd1 	bl	8006c44 <xQueueReceive>
 80014a2:	e1d6      	b.n	8001852 <UART_TX_TASK_INIT+0x4ce>
	    }

	    ///SINGLE ADC MEASUREMENT PAGE:
	    else if(MODE==1)
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d147      	bne.n	800153a <UART_TX_TASK_INIT+0x1b6>
	    {
	    	CONTINOUS = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	77fb      	strb	r3, [r7, #31]

	    	sprintf(MSG,"\033c"); /// CLEAR TERMINAL WINDOW COMAND
 80014ae:	f107 0308 	add.w	r3, r7, #8
 80014b2:	498c      	ldr	r1, [pc, #560]	; (80016e4 <UART_TX_TASK_INIT+0x360>)
 80014b4:	4618      	mov	r0, r3
 80014b6:	f008 fb13 	bl	8009ae0 <siprintf>
	        HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe fe8e 	bl	80001e0 <strlen>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	f107 0108 	add.w	r1, r7, #8
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295
 80014d0:	4885      	ldr	r0, [pc, #532]	; (80016e8 <UART_TX_TASK_INIT+0x364>)
 80014d2:	f003 fd6c 	bl	8004fae <HAL_UART_Transmit>

	    	sprintf(MSG," CLICK S TO START %\r\n");
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	4988      	ldr	r1, [pc, #544]	; (80016fc <UART_TX_TASK_INIT+0x378>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f008 faff 	bl	8009ae0 <siprintf>
	    	HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80014e2:	f107 0308 	add.w	r3, r7, #8
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe fe7a 	bl	80001e0 <strlen>
 80014ec:	4603      	mov	r3, r0
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	f107 0108 	add.w	r1, r7, #8
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295
 80014f8:	487b      	ldr	r0, [pc, #492]	; (80016e8 <UART_TX_TASK_INIT+0x364>)
 80014fa:	f003 fd58 	bl	8004fae <HAL_UART_Transmit>

	    	sprintf(MSG,"CLICK Q TO QUIT %\r\n");
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	497f      	ldr	r1, [pc, #508]	; (8001700 <UART_TX_TASK_INIT+0x37c>)
 8001504:	4618      	mov	r0, r3
 8001506:	f008 faeb 	bl	8009ae0 <siprintf>
	    	HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe fe66 	bl	80001e0 <strlen>
 8001514:	4603      	mov	r3, r0
 8001516:	b29a      	uxth	r2, r3
 8001518:	f107 0108 	add.w	r1, r7, #8
 800151c:	f04f 33ff 	mov.w	r3, #4294967295
 8001520:	4871      	ldr	r0, [pc, #452]	; (80016e8 <UART_TX_TASK_INIT+0x364>)
 8001522:	f003 fd44 	bl	8004fae <HAL_UART_Transmit>

	    	xQueueReceive( UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 8001526:	4b6e      	ldr	r3, [pc, #440]	; (80016e0 <UART_TX_TASK_INIT+0x35c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f107 0117 	add.w	r1, r7, #23
 800152e:	f04f 32ff 	mov.w	r2, #4294967295
 8001532:	4618      	mov	r0, r3
 8001534:	f005 fb86 	bl	8006c44 <xQueueReceive>
 8001538:	e18b      	b.n	8001852 <UART_TX_TASK_INIT+0x4ce>
	    }

	    /// START SINGLE ADC MEASUREMENT AND DISPLAY OUTCOMES:
	    else if(MODE==2)
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	2b02      	cmp	r3, #2
 800153e:	f040 80be 	bne.w	80016be <UART_TX_TASK_INIT+0x33a>
	    {
	    	CONTINOUS = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	77fb      	strb	r3, [r7, #31]

		   ///WAIT TO NEXT CLICK:
		   xQueueReceive( UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 8001546:	4b66      	ldr	r3, [pc, #408]	; (80016e0 <UART_TX_TASK_INIT+0x35c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f107 0117 	add.w	r1, r7, #23
 800154e:	f04f 32ff 	mov.w	r2, #4294967295
 8001552:	4618      	mov	r0, r3
 8001554:	f005 fb76 	bl	8006c44 <xQueueReceive>

		   xQueueReceive(ADC_QUEUE_UART_TXHandle, &RAW_ADC_VALUE, portMAX_DELAY);
 8001558:	4b60      	ldr	r3, [pc, #384]	; (80016dc <UART_TX_TASK_INIT+0x358>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f107 0114 	add.w	r1, r7, #20
 8001560:	f04f 32ff 	mov.w	r2, #4294967295
 8001564:	4618      	mov	r0, r3
 8001566:	f005 fb6d 	bl	8006c44 <xQueueReceive>

		   RAW_ADC_VALUE = (float)RAW_ADC_VALUE;
 800156a:	8abb      	ldrh	r3, [r7, #20]
 800156c:	ee07 3a90 	vmov	s15, r3
 8001570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001578:	ee17 3a90 	vmov	r3, s15
 800157c:	b29b      	uxth	r3, r3
 800157e:	82bb      	strh	r3, [r7, #20]
		   VOLTAGE = RAW_ADC_VALUE/820;
 8001580:	8abb      	ldrh	r3, [r7, #20]
 8001582:	4a60      	ldr	r2, [pc, #384]	; (8001704 <UART_TX_TASK_INIT+0x380>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	b29b      	uxth	r3, r3
 800158c:	ee07 3a90 	vmov	s15, r3
 8001590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001594:	edc7 7a06 	vstr	s15, [r7, #24]

		   sprintf(MSG,"\033c");/// CLEAR TERMINAL WINDOW COMAND
 8001598:	f107 0308 	add.w	r3, r7, #8
 800159c:	4951      	ldr	r1, [pc, #324]	; (80016e4 <UART_TX_TASK_INIT+0x360>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f008 fa9e 	bl	8009ae0 <siprintf>
		   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80015a4:	f107 0308 	add.w	r3, r7, #8
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe fe19 	bl	80001e0 <strlen>
 80015ae:	4603      	mov	r3, r0
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	f107 0108 	add.w	r1, r7, #8
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	484b      	ldr	r0, [pc, #300]	; (80016e8 <UART_TX_TASK_INIT+0x364>)
 80015bc:	f003 fcf7 	bl	8004fae <HAL_UART_Transmit>

		   sprintf(MSG,"ADC VALUE: %hu\r\n", RAW_ADC_VALUE);
 80015c0:	8abb      	ldrh	r3, [r7, #20]
 80015c2:	461a      	mov	r2, r3
 80015c4:	f107 0308 	add.w	r3, r7, #8
 80015c8:	494f      	ldr	r1, [pc, #316]	; (8001708 <UART_TX_TASK_INIT+0x384>)
 80015ca:	4618      	mov	r0, r3
 80015cc:	f008 fa88 	bl	8009ae0 <siprintf>
		   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe fe03 	bl	80001e0 <strlen>
 80015da:	4603      	mov	r3, r0
 80015dc:	b29a      	uxth	r2, r3
 80015de:	f107 0108 	add.w	r1, r7, #8
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	4840      	ldr	r0, [pc, #256]	; (80016e8 <UART_TX_TASK_INIT+0x364>)
 80015e8:	f003 fce1 	bl	8004fae <HAL_UART_Transmit>

		   sprintf(MSG,"VOLTAGE:  ");
 80015ec:	f107 0308 	add.w	r3, r7, #8
 80015f0:	4946      	ldr	r1, [pc, #280]	; (800170c <UART_TX_TASK_INIT+0x388>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f008 fa74 	bl	8009ae0 <siprintf>
		   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80015f8:	f107 0308 	add.w	r3, r7, #8
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe fdef 	bl	80001e0 <strlen>
 8001602:	4603      	mov	r3, r0
 8001604:	b29a      	uxth	r2, r3
 8001606:	f107 0108 	add.w	r1, r7, #8
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	4836      	ldr	r0, [pc, #216]	; (80016e8 <UART_TX_TASK_INIT+0x364>)
 8001610:	f003 fccd 	bl	8004fae <HAL_UART_Transmit>

		   sprintf(MSG,"%.2f\n:  ", VOLTAGE);
 8001614:	69b8      	ldr	r0, [r7, #24]
 8001616:	f7fe ff9f 	bl	8000558 <__aeabi_f2d>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	f107 0008 	add.w	r0, r7, #8
 8001622:	493b      	ldr	r1, [pc, #236]	; (8001710 <UART_TX_TASK_INIT+0x38c>)
 8001624:	f008 fa5c 	bl	8009ae0 <siprintf>
		   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8001628:	f107 0308 	add.w	r3, r7, #8
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe fdd7 	bl	80001e0 <strlen>
 8001632:	4603      	mov	r3, r0
 8001634:	b29a      	uxth	r2, r3
 8001636:	f107 0108 	add.w	r1, r7, #8
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	482a      	ldr	r0, [pc, #168]	; (80016e8 <UART_TX_TASK_INIT+0x364>)
 8001640:	f003 fcb5 	bl	8004fae <HAL_UART_Transmit>

		   sprintf(MSG,"V  %\r ");
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	4932      	ldr	r1, [pc, #200]	; (8001714 <UART_TX_TASK_INIT+0x390>)
 800164a:	4618      	mov	r0, r3
 800164c:	f008 fa48 	bl	8009ae0 <siprintf>
		   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fdc3 	bl	80001e0 <strlen>
 800165a:	4603      	mov	r3, r0
 800165c:	b29a      	uxth	r2, r3
 800165e:	f107 0108 	add.w	r1, r7, #8
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	4820      	ldr	r0, [pc, #128]	; (80016e8 <UART_TX_TASK_INIT+0x364>)
 8001668:	f003 fca1 	bl	8004fae <HAL_UART_Transmit>

		   sprintf(MSG,"CLICK S TO NEXT MEASUREMENT %\r\n");
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	4929      	ldr	r1, [pc, #164]	; (8001718 <UART_TX_TASK_INIT+0x394>)
 8001672:	4618      	mov	r0, r3
 8001674:	f008 fa34 	bl	8009ae0 <siprintf>
		   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fdaf 	bl	80001e0 <strlen>
 8001682:	4603      	mov	r3, r0
 8001684:	b29a      	uxth	r2, r3
 8001686:	f107 0108 	add.w	r1, r7, #8
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
 800168e:	4816      	ldr	r0, [pc, #88]	; (80016e8 <UART_TX_TASK_INIT+0x364>)
 8001690:	f003 fc8d 	bl	8004fae <HAL_UART_Transmit>

		   sprintf(MSG,"CLICK Q TO QUIT %\r\n");
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	4919      	ldr	r1, [pc, #100]	; (8001700 <UART_TX_TASK_INIT+0x37c>)
 800169a:	4618      	mov	r0, r3
 800169c:	f008 fa20 	bl	8009ae0 <siprintf>
		   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80016a0:	f107 0308 	add.w	r3, r7, #8
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe fd9b 	bl	80001e0 <strlen>
 80016aa:	4603      	mov	r3, r0
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	f107 0108 	add.w	r1, r7, #8
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	480c      	ldr	r0, [pc, #48]	; (80016e8 <UART_TX_TASK_INIT+0x364>)
 80016b8:	f003 fc79 	bl	8004fae <HAL_UART_Transmit>
 80016bc:	e0c9      	b.n	8001852 <UART_TX_TASK_INIT+0x4ce>

	    }

	    /// CONTINOUS ADC MEASUREMENT SETTINGS:
	    else if(MODE == 4)
 80016be:	7dfb      	ldrb	r3, [r7, #23]
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d12b      	bne.n	800171c <UART_TX_TASK_INIT+0x398>
	    {
	    	 CONTINOUS = 1;
 80016c4:	2301      	movs	r3, #1
 80016c6:	77fb      	strb	r3, [r7, #31]
	    	 xQueueReceive( UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <UART_TX_TASK_INIT+0x35c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f107 0117 	add.w	r1, r7, #23
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295
 80016d4:	4618      	mov	r0, r3
 80016d6:	f005 fab5 	bl	8006c44 <xQueueReceive>
 80016da:	e0ba      	b.n	8001852 <UART_TX_TASK_INIT+0x4ce>
 80016dc:	20000460 	.word	0x20000460
 80016e0:	20000468 	.word	0x20000468
 80016e4:	0800c134 	.word	0x0800c134
 80016e8:	20000bfc 	.word	0x20000bfc
 80016ec:	0800c138 	.word	0x0800c138
 80016f0:	0800c14c 	.word	0x0800c14c
 80016f4:	0800c170 	.word	0x0800c170
 80016f8:	0800c198 	.word	0x0800c198
 80016fc:	0800c1b8 	.word	0x0800c1b8
 8001700:	0800c1d0 	.word	0x0800c1d0
 8001704:	4fec04ff 	.word	0x4fec04ff
 8001708:	0800c1e4 	.word	0x0800c1e4
 800170c:	0800c1f8 	.word	0x0800c1f8
 8001710:	0800c204 	.word	0x0800c204
 8001714:	0800c210 	.word	0x0800c210
 8001718:	0800c218 	.word	0x0800c218
	    }

	    /// ADC SELECT PIN MODE:
	    else if(MODE == 5)
 800171c:	7dfb      	ldrb	r3, [r7, #23]
 800171e:	2b05      	cmp	r3, #5
 8001720:	f040 8097 	bne.w	8001852 <UART_TX_TASK_INIT+0x4ce>
	    {
	    	CONTINOUS = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	77fb      	strb	r3, [r7, #31]

	    	sprintf(MSG,"\033c"); /// CLEAR TERMINAL WINDOW COMAND
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	4996      	ldr	r1, [pc, #600]	; (8001988 <UART_TX_TASK_INIT+0x604>)
 800172e:	4618      	mov	r0, r3
 8001730:	f008 f9d6 	bl	8009ae0 <siprintf>
	    	HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fd51 	bl	80001e0 <strlen>
 800173e:	4603      	mov	r3, r0
 8001740:	b29a      	uxth	r2, r3
 8001742:	f107 0108 	add.w	r1, r7, #8
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	4890      	ldr	r0, [pc, #576]	; (800198c <UART_TX_TASK_INIT+0x608>)
 800174c:	f003 fc2f 	bl	8004fae <HAL_UART_Transmit>

			sprintf(MSG,"SELECT PIN: %\r\n");
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	498e      	ldr	r1, [pc, #568]	; (8001990 <UART_TX_TASK_INIT+0x60c>)
 8001756:	4618      	mov	r0, r3
 8001758:	f008 f9c2 	bl	8009ae0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 800175c:	f107 0308 	add.w	r3, r7, #8
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fd3d 	bl	80001e0 <strlen>
 8001766:	4603      	mov	r3, r0
 8001768:	b29a      	uxth	r2, r3
 800176a:	f107 0108 	add.w	r1, r7, #8
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	4886      	ldr	r0, [pc, #536]	; (800198c <UART_TX_TASK_INIT+0x608>)
 8001774:	f003 fc1b 	bl	8004fae <HAL_UART_Transmit>

			sprintf(MSG,"CLICK 1 TO SELECT PIN 1 %\r\n");
 8001778:	f107 0308 	add.w	r3, r7, #8
 800177c:	4985      	ldr	r1, [pc, #532]	; (8001994 <UART_TX_TASK_INIT+0x610>)
 800177e:	4618      	mov	r0, r3
 8001780:	f008 f9ae 	bl	8009ae0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fd29 	bl	80001e0 <strlen>
 800178e:	4603      	mov	r3, r0
 8001790:	b29a      	uxth	r2, r3
 8001792:	f107 0108 	add.w	r1, r7, #8
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	487c      	ldr	r0, [pc, #496]	; (800198c <UART_TX_TASK_INIT+0x608>)
 800179c:	f003 fc07 	bl	8004fae <HAL_UART_Transmit>

			sprintf(MSG,"CLICK 2 TO SELECT PIN 2 %\r\n");
 80017a0:	f107 0308 	add.w	r3, r7, #8
 80017a4:	497c      	ldr	r1, [pc, #496]	; (8001998 <UART_TX_TASK_INIT+0x614>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f008 f99a 	bl	8009ae0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fd15 	bl	80001e0 <strlen>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	f107 0108 	add.w	r1, r7, #8
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
 80017c2:	4872      	ldr	r0, [pc, #456]	; (800198c <UART_TX_TASK_INIT+0x608>)
 80017c4:	f003 fbf3 	bl	8004fae <HAL_UART_Transmit>

			sprintf(MSG,"CLICK 3 TO SELECT PIN 3 %\r\n");
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	4973      	ldr	r1, [pc, #460]	; (800199c <UART_TX_TASK_INIT+0x618>)
 80017ce:	4618      	mov	r0, r3
 80017d0:	f008 f986 	bl	8009ae0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80017d4:	f107 0308 	add.w	r3, r7, #8
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fd01 	bl	80001e0 <strlen>
 80017de:	4603      	mov	r3, r0
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	f107 0108 	add.w	r1, r7, #8
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	4868      	ldr	r0, [pc, #416]	; (800198c <UART_TX_TASK_INIT+0x608>)
 80017ec:	f003 fbdf 	bl	8004fae <HAL_UART_Transmit>

			sprintf(MSG,"CLICK 4 TO SELECT PIN 4 %\r\n");
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	496a      	ldr	r1, [pc, #424]	; (80019a0 <UART_TX_TASK_INIT+0x61c>)
 80017f6:	4618      	mov	r0, r3
 80017f8:	f008 f972 	bl	8009ae0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80017fc:	f107 0308 	add.w	r3, r7, #8
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fced 	bl	80001e0 <strlen>
 8001806:	4603      	mov	r3, r0
 8001808:	b29a      	uxth	r2, r3
 800180a:	f107 0108 	add.w	r1, r7, #8
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	485e      	ldr	r0, [pc, #376]	; (800198c <UART_TX_TASK_INIT+0x608>)
 8001814:	f003 fbcb 	bl	8004fae <HAL_UART_Transmit>

			sprintf(MSG,"CLICK Q TO QUIT %\r\n");
 8001818:	f107 0308 	add.w	r3, r7, #8
 800181c:	4961      	ldr	r1, [pc, #388]	; (80019a4 <UART_TX_TASK_INIT+0x620>)
 800181e:	4618      	mov	r0, r3
 8001820:	f008 f95e 	bl	8009ae0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8001824:	f107 0308 	add.w	r3, r7, #8
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fcd9 	bl	80001e0 <strlen>
 800182e:	4603      	mov	r3, r0
 8001830:	b29a      	uxth	r2, r3
 8001832:	f107 0108 	add.w	r1, r7, #8
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	4854      	ldr	r0, [pc, #336]	; (800198c <UART_TX_TASK_INIT+0x608>)
 800183c:	f003 fbb7 	bl	8004fae <HAL_UART_Transmit>

			xQueueReceive( UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 8001840:	4b59      	ldr	r3, [pc, #356]	; (80019a8 <UART_TX_TASK_INIT+0x624>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f107 0117 	add.w	r1, r7, #23
 8001848:	f04f 32ff 	mov.w	r2, #4294967295
 800184c:	4618      	mov	r0, r3
 800184e:	f005 f9f9 	bl	8006c44 <xQueueReceive>
	    }

	    /// CONTINUES MEASUREMENT MODE:
	    if (CONTINOUS == 1)
 8001852:	7ffb      	ldrb	r3, [r7, #31]
 8001854:	2b01      	cmp	r3, #1
 8001856:	f47f adaf 	bne.w	80013b8 <UART_TX_TASK_INIT+0x34>
	    {
	       /// OUTCOME - VOLTAGE VALUE - DIPLAYED EVERY 300ms

	       osDelay(300); /// DELAY INSTEAD OF TIMER
 800185a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800185e:	f004 fdf8 	bl	8006452 <osDelay>
	       xQueueReceive(ADC_QUEUE_UART_TXHandle, &RAW_ADC_VALUE, portMAX_DELAY);
 8001862:	4b52      	ldr	r3, [pc, #328]	; (80019ac <UART_TX_TASK_INIT+0x628>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f107 0114 	add.w	r1, r7, #20
 800186a:	f04f 32ff 	mov.w	r2, #4294967295
 800186e:	4618      	mov	r0, r3
 8001870:	f005 f9e8 	bl	8006c44 <xQueueReceive>

		   RAW_ADC_VALUE = (float)RAW_ADC_VALUE;
 8001874:	8abb      	ldrh	r3, [r7, #20]
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800187e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001882:	ee17 3a90 	vmov	r3, s15
 8001886:	b29b      	uxth	r3, r3
 8001888:	82bb      	strh	r3, [r7, #20]
		   VOLTAGE = RAW_ADC_VALUE/820;
 800188a:	8abb      	ldrh	r3, [r7, #20]
 800188c:	4a48      	ldr	r2, [pc, #288]	; (80019b0 <UART_TX_TASK_INIT+0x62c>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	0a1b      	lsrs	r3, r3, #8
 8001894:	b29b      	uxth	r3, r3
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189e:	edc7 7a06 	vstr	s15, [r7, #24]

		   sprintf(MSG,"\033c"); /// CLEAR TERMINAL WINDOW COMAND
 80018a2:	f107 0308 	add.w	r3, r7, #8
 80018a6:	4938      	ldr	r1, [pc, #224]	; (8001988 <UART_TX_TASK_INIT+0x604>)
 80018a8:	4618      	mov	r0, r3
 80018aa:	f008 f919 	bl	8009ae0 <siprintf>
		   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80018ae:	f107 0308 	add.w	r3, r7, #8
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fc94 	bl	80001e0 <strlen>
 80018b8:	4603      	mov	r3, r0
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	f107 0108 	add.w	r1, r7, #8
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295
 80018c4:	4831      	ldr	r0, [pc, #196]	; (800198c <UART_TX_TASK_INIT+0x608>)
 80018c6:	f003 fb72 	bl	8004fae <HAL_UART_Transmit>

		   sprintf(MSG,"ADC VALUE: %hu\r\n", RAW_ADC_VALUE);
 80018ca:	8abb      	ldrh	r3, [r7, #20]
 80018cc:	461a      	mov	r2, r3
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	4938      	ldr	r1, [pc, #224]	; (80019b4 <UART_TX_TASK_INIT+0x630>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f008 f903 	bl	8009ae0 <siprintf>
		   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fc7e 	bl	80001e0 <strlen>
 80018e4:	4603      	mov	r3, r0
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	f107 0108 	add.w	r1, r7, #8
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	4826      	ldr	r0, [pc, #152]	; (800198c <UART_TX_TASK_INIT+0x608>)
 80018f2:	f003 fb5c 	bl	8004fae <HAL_UART_Transmit>

		   sprintf(MSG,"VOLTAGE: %f ", VOLTAGE);
 80018f6:	69b8      	ldr	r0, [r7, #24]
 80018f8:	f7fe fe2e 	bl	8000558 <__aeabi_f2d>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	f107 0008 	add.w	r0, r7, #8
 8001904:	492c      	ldr	r1, [pc, #176]	; (80019b8 <UART_TX_TASK_INIT+0x634>)
 8001906:	f008 f8eb 	bl	8009ae0 <siprintf>
		   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fc66 	bl	80001e0 <strlen>
 8001914:	4603      	mov	r3, r0
 8001916:	b29a      	uxth	r2, r3
 8001918:	f107 0108 	add.w	r1, r7, #8
 800191c:	f04f 33ff 	mov.w	r3, #4294967295
 8001920:	481a      	ldr	r0, [pc, #104]	; (800198c <UART_TX_TASK_INIT+0x608>)
 8001922:	f003 fb44 	bl	8004fae <HAL_UART_Transmit>

		   sprintf(MSG,"V  %\r\n ");
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	4924      	ldr	r1, [pc, #144]	; (80019bc <UART_TX_TASK_INIT+0x638>)
 800192c:	4618      	mov	r0, r3
 800192e:	f008 f8d7 	bl	8009ae0 <siprintf>
		   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8001932:	f107 0308 	add.w	r3, r7, #8
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fc52 	bl	80001e0 <strlen>
 800193c:	4603      	mov	r3, r0
 800193e:	b29a      	uxth	r2, r3
 8001940:	f107 0108 	add.w	r1, r7, #8
 8001944:	f04f 33ff 	mov.w	r3, #4294967295
 8001948:	4810      	ldr	r0, [pc, #64]	; (800198c <UART_TX_TASK_INIT+0x608>)
 800194a:	f003 fb30 	bl	8004fae <HAL_UART_Transmit>

		   sprintf(MSG,"CLICK Q TO QUIT %\r\n");
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	4914      	ldr	r1, [pc, #80]	; (80019a4 <UART_TX_TASK_INIT+0x620>)
 8001954:	4618      	mov	r0, r3
 8001956:	f008 f8c3 	bl	8009ae0 <siprintf>
		   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fc3e 	bl	80001e0 <strlen>
 8001964:	4603      	mov	r3, r0
 8001966:	b29a      	uxth	r2, r3
 8001968:	f107 0108 	add.w	r1, r7, #8
 800196c:	f04f 33ff 	mov.w	r3, #4294967295
 8001970:	4806      	ldr	r0, [pc, #24]	; (800198c <UART_TX_TASK_INIT+0x608>)
 8001972:	f003 fb1c 	bl	8004fae <HAL_UART_Transmit>

		  /// IF THERE IS NO DATA IN 10 TICKS GO FURTHER:
	   	   xQueueReceive( UART_RX_QUEUE_UART_TXHandle, &MODE, 10);
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <UART_TX_TASK_INIT+0x624>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f107 0117 	add.w	r1, r7, #23
 800197e:	220a      	movs	r2, #10
 8001980:	4618      	mov	r0, r3
 8001982:	f005 f95f 	bl	8006c44 <xQueueReceive>
	    osDelay(1);
 8001986:	e517      	b.n	80013b8 <UART_TX_TASK_INIT+0x34>
 8001988:	0800c134 	.word	0x0800c134
 800198c:	20000bfc 	.word	0x20000bfc
 8001990:	0800c238 	.word	0x0800c238
 8001994:	0800c248 	.word	0x0800c248
 8001998:	0800c264 	.word	0x0800c264
 800199c:	0800c280 	.word	0x0800c280
 80019a0:	0800c29c 	.word	0x0800c29c
 80019a4:	0800c1d0 	.word	0x0800c1d0
 80019a8:	20000468 	.word	0x20000468
 80019ac:	20000460 	.word	0x20000460
 80019b0:	4fec04ff 	.word	0x4fec04ff
 80019b4:	0800c1e4 	.word	0x0800c1e4
 80019b8:	0800c2b8 	.word	0x0800c2b8
 80019bc:	0800c2c8 	.word	0x0800c2c8

080019c0 <UART_RX_TASK_INIT>:




void UART_RX_TASK_INIT(void const * argument)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	///@param RX_DATA RECEIVED 8bit DATA FROM UART
	///@param ADC_PIN VARIABLE TO SELECT ADC INPUT PIN

	// VARIABLES FOR THIS TASK:
	uint8_t RX_DATA; //RECEIVED 8bit DATA FROM UART
	uint8_t MODE = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73bb      	strb	r3, [r7, #14]
	uint8_t ADC_PIN;

	  /* Infinite loop */
	  for(;;)
	  {
		  osDelay(10);
 80019cc:	200a      	movs	r0, #10
 80019ce:	f004 fd40 	bl	8006452 <osDelay>

		  /// RECEIVING DATA FROM QUEUE - DATA FROM UART INTERRUPT TASK:
		  xQueueReceive(INT_UART_QUEUE_UART_RXHandle, &RX_DATA, portMAX_DELAY);
 80019d2:	4b4e      	ldr	r3, [pc, #312]	; (8001b0c <UART_RX_TASK_INIT+0x14c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f107 010f 	add.w	r1, r7, #15
 80019da:	f04f 32ff 	mov.w	r2, #4294967295
 80019de:	4618      	mov	r0, r3
 80019e0:	f005 f930 	bl	8006c44 <xQueueReceive>

		  if(MODE == 0)
 80019e4:	7bbb      	ldrb	r3, [r7, #14]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d136      	bne.n	8001a58 <UART_RX_TASK_INIT+0x98>
		  {
			  /// 'S'- SINGLE MEASUREMENT 'S' - START
			  if(RX_DATA == 's' || RX_DATA == 'S')
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	2b73      	cmp	r3, #115	; 0x73
 80019ee:	d002      	beq.n	80019f6 <UART_RX_TASK_INIT+0x36>
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	2b53      	cmp	r3, #83	; 0x53
 80019f4:	d10d      	bne.n	8001a12 <UART_RX_TASK_INIT+0x52>
			  {
				MODE = 1; ///SINGLE MEASUREMENT PAGE MODE
 80019f6:	2301      	movs	r3, #1
 80019f8:	73bb      	strb	r3, [r7, #14]
				xQueueSend(UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 80019fa:	4b45      	ldr	r3, [pc, #276]	; (8001b10 <UART_RX_TASK_INIT+0x150>)
 80019fc:	6818      	ldr	r0, [r3, #0]
 80019fe:	f107 010e 	add.w	r1, r7, #14
 8001a02:	2300      	movs	r3, #0
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295
 8001a08:	f004 ff82 	bl	8006910 <xQueueGenericSend>
				RX_DATA = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	e022      	b.n	8001a58 <UART_RX_TASK_INIT+0x98>
			  }

			  /// 'C' - CONTINOUS MEASUREMENT
			  else if(RX_DATA == 'c' || RX_DATA == 'C')
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	2b63      	cmp	r3, #99	; 0x63
 8001a16:	d002      	beq.n	8001a1e <UART_RX_TASK_INIT+0x5e>
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	2b43      	cmp	r3, #67	; 0x43
 8001a1c:	d10b      	bne.n	8001a36 <UART_RX_TASK_INIT+0x76>
			  {
				MODE = 4; ///CONTINOUS MEASUREMENT MODE
 8001a1e:	2304      	movs	r3, #4
 8001a20:	73bb      	strb	r3, [r7, #14]
				xQueueSend(UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 8001a22:	4b3b      	ldr	r3, [pc, #236]	; (8001b10 <UART_RX_TASK_INIT+0x150>)
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	f107 010e 	add.w	r1, r7, #14
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	f004 ff6e 	bl	8006910 <xQueueGenericSend>
 8001a34:	e010      	b.n	8001a58 <UART_RX_TASK_INIT+0x98>
			  }

			  /// 'I' - INPUT
			  else if(RX_DATA == 'i' || RX_DATA == 'I')
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	2b69      	cmp	r3, #105	; 0x69
 8001a3a:	d002      	beq.n	8001a42 <UART_RX_TASK_INIT+0x82>
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	2b49      	cmp	r3, #73	; 0x49
 8001a40:	d10a      	bne.n	8001a58 <UART_RX_TASK_INIT+0x98>
			  {
				MODE = 5; /// SELECT ADC PIN MODE
 8001a42:	2305      	movs	r3, #5
 8001a44:	73bb      	strb	r3, [r7, #14]
				xQueueSend(UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 8001a46:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <UART_RX_TASK_INIT+0x150>)
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	f107 010e 	add.w	r1, r7, #14
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295
 8001a54:	f004 ff5c 	bl	8006910 <xQueueGenericSend>
			  }
		  }

		  /// IF MODE IS: SINGLE MEASUREMENT PAGE - THEN MAKE SINGLE MEASUREMENT:
		  if(MODE == 1)
 8001a58:	7bbb      	ldrb	r3, [r7, #14]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d110      	bne.n	8001a80 <UART_RX_TASK_INIT+0xc0>
		  {
			  if(RX_DATA == 's' || RX_DATA == 'S')
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	2b73      	cmp	r3, #115	; 0x73
 8001a62:	d002      	beq.n	8001a6a <UART_RX_TASK_INIT+0xaa>
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	2b53      	cmp	r3, #83	; 0x53
 8001a68:	d10a      	bne.n	8001a80 <UART_RX_TASK_INIT+0xc0>
			  {
				MODE = 2; ///SINGLE MEASUREMENT 'START' MODE
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	73bb      	strb	r3, [r7, #14]
				xQueueSend(UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 8001a6e:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <UART_RX_TASK_INIT+0x150>)
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	f107 010e 	add.w	r1, r7, #14
 8001a76:	2300      	movs	r3, #0
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	f004 ff48 	bl	8006910 <xQueueGenericSend>
			  }
		  }

		  /// TAKE NEXT SINGLE MEASUREMENT:
		  if(MODE == 2)
 8001a80:	7bbb      	ldrb	r3, [r7, #14]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d10e      	bne.n	8001aa4 <UART_RX_TASK_INIT+0xe4>
		  {
			  if(RX_DATA == 's' || RX_DATA == 'S')
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	2b73      	cmp	r3, #115	; 0x73
 8001a8a:	d002      	beq.n	8001a92 <UART_RX_TASK_INIT+0xd2>
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	2b53      	cmp	r3, #83	; 0x53
 8001a90:	d108      	bne.n	8001aa4 <UART_RX_TASK_INIT+0xe4>
			  {
				xQueueSend(UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 8001a92:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <UART_RX_TASK_INIT+0x150>)
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	f107 010e 	add.w	r1, r7, #14
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa0:	f004 ff36 	bl	8006910 <xQueueGenericSend>
			  }
		  }

		  /// SELECT ADC PIN NUMBER FROM 1 TO 4:
		  if(MODE == 5)
 8001aa4:	7bbb      	ldrb	r3, [r7, #14]
 8001aa6:	2b05      	cmp	r3, #5
 8001aa8:	d112      	bne.n	8001ad0 <UART_RX_TASK_INIT+0x110>
		  {
			  if(RX_DATA > 47 && RX_DATA < 53) /// ASCI: 0,1,2,3
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	2b2f      	cmp	r3, #47	; 0x2f
 8001aae:	d90f      	bls.n	8001ad0 <UART_RX_TASK_INIT+0x110>
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	2b34      	cmp	r3, #52	; 0x34
 8001ab4:	d80c      	bhi.n	8001ad0 <UART_RX_TASK_INIT+0x110>
			  {
				 ADC_PIN = (RX_DATA - 48);
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	3b30      	subs	r3, #48	; 0x30
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	737b      	strb	r3, [r7, #13]
				 xQueueSend(UART_RX_QUEUE_ADC_CONFIGHandle, &ADC_PIN, portMAX_DELAY);
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <UART_RX_TASK_INIT+0x154>)
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	f107 010d 	add.w	r1, r7, #13
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8001acc:	f004 ff20 	bl	8006910 <xQueueGenericSend>
			  }
		  }

		  /// RECEIVING 'Q' - BACK TO START PAGE (Q = QUIT)
		  if(RX_DATA == 'q' || RX_DATA == 'Q')
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	2b71      	cmp	r3, #113	; 0x71
 8001ad4:	d002      	beq.n	8001adc <UART_RX_TASK_INIT+0x11c>
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	2b51      	cmp	r3, #81	; 0x51
 8001ada:	d10a      	bne.n	8001af2 <UART_RX_TASK_INIT+0x132>
		  {
			  MODE = 0; /// START PAGE MODE
 8001adc:	2300      	movs	r3, #0
 8001ade:	73bb      	strb	r3, [r7, #14]
			  /// SEND DATA TO QUEUE - SELECTED WORK MODE:
			  xQueueSend(UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <UART_RX_TASK_INIT+0x150>)
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	f107 010e 	add.w	r1, r7, #14
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f04f 32ff 	mov.w	r2, #4294967295
 8001aee:	f004 ff0f 	bl	8006910 <xQueueGenericSend>
		  }

		  RX_DATA = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	73fb      	strb	r3, [r7, #15]

		  /// SEND DATA TO QUEUE - SELECTED WORK MODE:
		  xQueueSend(UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <UART_RX_TASK_INIT+0x150>)
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	f107 010e 	add.w	r1, r7, #14
 8001afe:	2300      	movs	r3, #0
 8001b00:	f04f 32ff 	mov.w	r2, #4294967295
 8001b04:	f004 ff04 	bl	8006910 <xQueueGenericSend>
		  osDelay(10);
 8001b08:	e760      	b.n	80019cc <UART_RX_TASK_INIT+0xc>
 8001b0a:	bf00      	nop
 8001b0c:	20000470 	.word	0x20000470
 8001b10:	20000468 	.word	0x20000468
 8001b14:	2000046c 	.word	0x2000046c

08001b18 <ADC_CONFIG_TASK_INIT>:


///
/// ADC_CONFIG_TASK_INIT
void ADC_CONFIG_TASK_INIT(void const * argument)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	/// TASK TO SELECT ADC PIN (DIODES INSTEAD OF RELAYS):
	///------------------------------------------------------------------------------------------------------------------------------

	///@param ADC_PIN VARIABLE TO SELECT ADC INPUT PIN

  uint8_t ADC_PIN = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	73fb      	strb	r3, [r7, #15]

  for(;;)
  {
    osDelay(1);
 8001b24:	2001      	movs	r0, #1
 8001b26:	f004 fc94 	bl	8006452 <osDelay>

    /// RECEIVING DATA FORM QUEUE:
    xQueueReceive( UART_RX_QUEUE_ADC_CONFIGHandle, &ADC_PIN, portMAX_DELAY);
 8001b2a:	4b39      	ldr	r3, [pc, #228]	; (8001c10 <ADC_CONFIG_TASK_INIT+0xf8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f107 010f 	add.w	r1, r7, #15
 8001b32:	f04f 32ff 	mov.w	r2, #4294967295
 8001b36:	4618      	mov	r0, r3
 8001b38:	f005 f884 	bl	8006c44 <xQueueReceive>

    if(ADC_PIN == 1)
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d116      	bne.n	8001b70 <ADC_CONFIG_TASK_INIT+0x58>
    {
    	/// GREEN DIODE ON - THE REST OFF:
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET); //GREEN DIODE
 8001b42:	2200      	movs	r2, #0
 8001b44:	2102      	movs	r1, #2
 8001b46:	4833      	ldr	r0, [pc, #204]	; (8001c14 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001b48:	f002 f8e0 	bl	8003d0c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,GPIO_PIN_SET); //RED DIODE
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b52:	4830      	ldr	r0, [pc, #192]	; (8001c14 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001b54:	f002 f8da 	bl	8003d0c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET); //BLUE DIODE
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b5e:	482d      	ldr	r0, [pc, #180]	; (8001c14 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001b60:	f002 f8d4 	bl	8003d0c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET); //YELLOW DIODE
 8001b64:	2201      	movs	r2, #1
 8001b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b6a:	482a      	ldr	r0, [pc, #168]	; (8001c14 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001b6c:	f002 f8ce 	bl	8003d0c <HAL_GPIO_WritePin>
    }
    if(ADC_PIN == 2)
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d116      	bne.n	8001ba4 <ADC_CONFIG_TASK_INIT+0x8c>
   {
    	/// RED DIODE ON - THE REST OFF:
     	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET); //GREEN DIODE
 8001b76:	2201      	movs	r2, #1
 8001b78:	2102      	movs	r1, #2
 8001b7a:	4826      	ldr	r0, [pc, #152]	; (8001c14 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001b7c:	f002 f8c6 	bl	8003d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,GPIO_PIN_RESET); //RED DIODE
 8001b80:	2200      	movs	r2, #0
 8001b82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b86:	4823      	ldr	r0, [pc, #140]	; (8001c14 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001b88:	f002 f8c0 	bl	8003d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET); //BLUE DIODE
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b92:	4820      	ldr	r0, [pc, #128]	; (8001c14 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001b94:	f002 f8ba 	bl	8003d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET); //YELLOW DIODE
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b9e:	481d      	ldr	r0, [pc, #116]	; (8001c14 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001ba0:	f002 f8b4 	bl	8003d0c <HAL_GPIO_WritePin>

   }
    if(ADC_PIN == 3)
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d116      	bne.n	8001bd8 <ADC_CONFIG_TASK_INIT+0xc0>
   {
    	/// BLUE DIODE ON - THE REST OFF:
     	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET); //GREEN DIODE
 8001baa:	2201      	movs	r2, #1
 8001bac:	2102      	movs	r1, #2
 8001bae:	4819      	ldr	r0, [pc, #100]	; (8001c14 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001bb0:	f002 f8ac 	bl	8003d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,GPIO_PIN_SET); //RED DIODE
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bba:	4816      	ldr	r0, [pc, #88]	; (8001c14 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001bbc:	f002 f8a6 	bl	8003d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET); //BLUE DIODE
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bc6:	4813      	ldr	r0, [pc, #76]	; (8001c14 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001bc8:	f002 f8a0 	bl	8003d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET); //YELLOW DIODE
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bd2:	4810      	ldr	r0, [pc, #64]	; (8001c14 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001bd4:	f002 f89a 	bl	8003d0c <HAL_GPIO_WritePin>

   }
    if(ADC_PIN == 4)
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d1a2      	bne.n	8001b24 <ADC_CONFIG_TASK_INIT+0xc>
   {
    	/// YELLLOW DIODE ON - THE REST OFF:
     	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET); //GREEN DIODE
 8001bde:	2201      	movs	r2, #1
 8001be0:	2102      	movs	r1, #2
 8001be2:	480c      	ldr	r0, [pc, #48]	; (8001c14 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001be4:	f002 f892 	bl	8003d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,GPIO_PIN_SET); //RED DIODE
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bee:	4809      	ldr	r0, [pc, #36]	; (8001c14 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001bf0:	f002 f88c 	bl	8003d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET); //BLUE DIODE
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bfa:	4806      	ldr	r0, [pc, #24]	; (8001c14 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001bfc:	f002 f886 	bl	8003d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET); //YELLOW DIODE
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c06:	4803      	ldr	r0, [pc, #12]	; (8001c14 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001c08:	f002 f880 	bl	8003d0c <HAL_GPIO_WritePin>
    osDelay(1);
 8001c0c:	e78a      	b.n	8001b24 <ADC_CONFIG_TASK_INIT+0xc>
 8001c0e:	bf00      	nop
 8001c10:	2000046c 	.word	0x2000046c
 8001c14:	40020400 	.word	0x40020400

08001c18 <INT_TIMER_TASK_INIT>:
/* USER CODE END Header_INT_TIMER_TASK_INIT */



void INT_TIMER_TASK_INIT(void const * argument)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  {

	  /// TASK IS WAITING AND WILL RUN WHEN ISR OCCOUR

	  ///TASK SUSPENDS ITSELF:
	  vTaskSuspend(NULL);
 8001c20:	2000      	movs	r0, #0
 8001c22:	f005 fc25 	bl	8007470 <vTaskSuspend>

	  ///HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);

	  /// START TIMER AGAIN:
	  HAL_TIM_Base_Start_IT(&htim11);
 8001c26:	4802      	ldr	r0, [pc, #8]	; (8001c30 <INT_TIMER_TASK_INIT+0x18>)
 8001c28:	f002 fd7e 	bl	8004728 <HAL_TIM_Base_Start_IT>
	  vTaskSuspend(NULL);
 8001c2c:	e7f8      	b.n	8001c20 <INT_TIMER_TASK_INIT+0x8>
 8001c2e:	bf00      	nop
 8001c30:	20000bb4 	.word	0x20000bb4

08001c34 <INT_UART_TASK_INIT>:
/* USER CODE END Header_INT_UART_TASK_INIT */



void INT_UART_TASK_INIT(void const * argument)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	///@param RX_DATA RECEIVED 8bit DATA FROM UART

	uint8_t RX_DATA; // 8bit DATA RECEIVED FROM UART:

	/// START THE DMA:
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) RxBuf, RxBuf_SIZE);
 8001c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c40:	490f      	ldr	r1, [pc, #60]	; (8001c80 <INT_UART_TASK_INIT+0x4c>)
 8001c42:	4810      	ldr	r0, [pc, #64]	; (8001c84 <INT_UART_TASK_INIT+0x50>)
 8001c44:	f003 fa45 	bl	80050d2 <HAL_UARTEx_ReceiveToIdle_DMA>
  for(;;)
  {
	  /// TASK IS WAITING AND WILL RUN WHEN ISR OCCOUR

	  ///TASK SUSPENDS ITSELF:
	  vTaskSuspend(NULL);
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f005 fc11 	bl	8007470 <vTaskSuspend>

	  ///TOGGLE BLUE DIODE FOR DEBUG:
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001c4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c52:	480d      	ldr	r0, [pc, #52]	; (8001c88 <INT_UART_TASK_INIT+0x54>)
 8001c54:	f002 f873 	bl	8003d3e <HAL_GPIO_TogglePin>

	  RX_DATA = RxBuf[0];
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <INT_UART_TASK_INIT+0x4c>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	73fb      	strb	r3, [r7, #15]

	  /// SEND RECEIVED DATA TO QUEUE:
	  xQueueSend(INT_UART_QUEUE_UART_RXHandle, &RX_DATA, portMAX_DELAY);
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <INT_UART_TASK_INIT+0x58>)
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	f107 010f 	add.w	r1, r7, #15
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6e:	f004 fe4f 	bl	8006910 <xQueueGenericSend>

	  /// START THE DMA AGAIN:
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) RxBuf, RxBuf_SIZE);
 8001c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c76:	4902      	ldr	r1, [pc, #8]	; (8001c80 <INT_UART_TASK_INIT+0x4c>)
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <INT_UART_TASK_INIT+0x50>)
 8001c7a:	f003 fa2a 	bl	80050d2 <HAL_UARTEx_ReceiveToIdle_DMA>
	  vTaskSuspend(NULL);
 8001c7e:	e7e3      	b.n	8001c48 <INT_UART_TASK_INIT+0x14>
 8001c80:	20000244 	.word	0x20000244
 8001c84:	20000bfc 	.word	0x20000bfc
 8001c88:	40020400 	.word	0x40020400
 8001c8c:	20000470 	.word	0x20000470

08001c90 <TIMER_CALLBACK>:
  /* USER CODE END INT_UART_TASK_INIT */
}

/* TIMER_CALLBACK function */
void TIMER_CALLBACK(void const * argument)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_CALLBACK */

  /* USER CODE END TIMER_CALLBACK */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_UARTEx_RxEventCallback>:
	}
}

/// CALLBAC FROM UART RECEIVING DATA INTERRUPT:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	807b      	strh	r3, [r7, #2]
 ///-------------------------------------------------------
 /// WZNAWIANIE ZADANIA DO OBSLUGI TEGO PRZERWANIA:
    BaseType_t CHECK_VAR;
 /// xTaskResumeFromISR( TASK_HANDLER)
	CHECK_VAR = xTaskResumeFromISR(INT_UART_TASKHandle);
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_UARTEx_RxEventCallback+0x38>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f005 fc9f 	bl	80075f8 <xTaskResumeFromISR>
 8001cba:	60f8      	str	r0, [r7, #12]
	portYIELD_FROM_ISR(CHECK_VAR);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <HAL_UARTEx_RxEventCallback+0x2e>
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	f3bf 8f4f 	dsb	sy
 8001cce:	f3bf 8f6f 	isb	sy
 ///-------------------------------------------------------
}
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000045c 	.word	0x2000045c
 8001ce0:	e000ed04 	.word	0xe000ed04

08001ce4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cea:	f107 030c 	add.w	r3, r7, #12
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
 8001cf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <MX_GPIO_Init+0x80>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a18      	ldr	r2, [pc, #96]	; (8001d64 <MX_GPIO_Init+0x80>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <MX_GPIO_Init+0x80>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <MX_GPIO_Init+0x80>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a11      	ldr	r2, [pc, #68]	; (8001d64 <MX_GPIO_Init+0x80>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <MX_GPIO_Init+0x80>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14
 8001d32:	2200      	movs	r2, #0
 8001d34:	f24e 0103 	movw	r1, #57347	; 0xe003
 8001d38:	480b      	ldr	r0, [pc, #44]	; (8001d68 <MX_GPIO_Init+0x84>)
 8001d3a:	f001 ffe7 	bl	8003d0c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14
 8001d3e:	f24e 0303 	movw	r3, #57347	; 0xe003
 8001d42:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001d44:	2311      	movs	r3, #17
 8001d46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	4619      	mov	r1, r3
 8001d56:	4804      	ldr	r0, [pc, #16]	; (8001d68 <MX_GPIO_Init+0x84>)
 8001d58:	f001 fe54 	bl	8003a04 <HAL_GPIO_Init>

}
 8001d5c:	bf00      	nop
 8001d5e:	3720      	adds	r7, #32
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020400 	.word	0x40020400

08001d6c <main>:
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

 8001d70:	f000 fc3c 	bl	80025ec <HAL_Init>
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
 8001d74:	f000 f812 	bl	8001d9c <SystemClock_Config>
/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM10 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 8001d78:	f7ff ffb4 	bl	8001ce4 <MX_GPIO_Init>
  * a global variable "uwTick" used as application time base.
 8001d7c:	f7ff f93c 	bl	8000ff8 <MX_DMA_Init>
  * @param  htim : TIM handle
 8001d80:	f7ff f89c 	bl	8000ebc <MX_ADC1_Init>
  * @retval None
 8001d84:	f000 fb26 	bl	80023d4 <MX_USART1_UART_Init>
  */
 8001d88:	f000 fa62 	bl	8002250 <MX_TIM1_Init>
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8001d8c:	f000 fab0 	bl	80022f0 <MX_TIM11_Init>
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
 8001d90:	f7ff f99c 	bl	80010cc <MX_FREERTOS_Init>
  /* USER CODE END Error_Handler_Debug */
}

 8001d94:	f004 fb0a 	bl	80063ac <osKernelStart>
#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
 8001d98:	e7fe      	b.n	8001d98 <main+0x2c>
	...

08001d9c <SystemClock_Config>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b094      	sub	sp, #80	; 0x50
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	f107 0320 	add.w	r3, r7, #32
 8001da6:	2230      	movs	r2, #48	; 0x30
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f007 fa26 	bl	80091fc <memset>
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <SystemClock_Config+0xcc>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	4a27      	ldr	r2, [pc, #156]	; (8001e68 <SystemClock_Config+0xcc>)
 8001dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dce:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd0:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <SystemClock_Config+0xcc>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2300      	movs	r3, #0
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <SystemClock_Config+0xd0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001de8:	4a20      	ldr	r2, [pc, #128]	; (8001e6c <SystemClock_Config+0xd0>)
 8001dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <SystemClock_Config+0xd0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	623b      	str	r3, [r7, #32]
 8001e00:	2301      	movs	r3, #1
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e04:	2310      	movs	r3, #16
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
 8001e08:	2302      	movs	r3, #2
 8001e0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e10:	2310      	movs	r3, #16
 8001e12:	643b      	str	r3, [r7, #64]	; 0x40
 8001e14:	23a8      	movs	r3, #168	; 0xa8
 8001e16:	647b      	str	r3, [r7, #68]	; 0x44
 8001e18:	2302      	movs	r3, #2
 8001e1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e1c:	2304      	movs	r3, #4
 8001e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e20:	f107 0320 	add.w	r3, r7, #32
 8001e24:	4618      	mov	r0, r3
 8001e26:	f001 ffa5 	bl	8003d74 <HAL_RCC_OscConfig>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <SystemClock_Config+0x98>
 8001e30:	f000 f830 	bl	8001e94 <Error_Handler>
 8001e34:	230f      	movs	r3, #15
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	2302      	movs	r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	2102      	movs	r1, #2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f002 fa07 	bl	8004264 <HAL_RCC_ClockConfig>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <SystemClock_Config+0xc4>
 8001e5c:	f000 f81a 	bl	8001e94 <Error_Handler>
 8001e60:	bf00      	nop
 8001e62:	3750      	adds	r7, #80	; 0x50
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40007000 	.word	0x40007000

08001e70 <HAL_TIM_PeriodElapsedCallback>:
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d101      	bne.n	8001e86 <HAL_TIM_PeriodElapsedCallback+0x16>
 8001e82:	f000 fbd5 	bl	8002630 <HAL_IncTick>
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40014400 	.word	0x40014400

08001e94 <Error_Handler>:
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e98:	b672      	cpsid	i
}
 8001e9a:	bf00      	nop
 8001e9c:	e7fe      	b.n	8001e9c <Error_Handler+0x8>
	...

08001ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_MspInit+0x54>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a11      	ldr	r2, [pc, #68]	; (8001ef4 <HAL_MspInit+0x54>)
 8001eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <HAL_MspInit+0x54>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_MspInit+0x54>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <HAL_MspInit+0x54>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <HAL_MspInit+0x54>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	210f      	movs	r1, #15
 8001ee2:	f06f 0001 	mvn.w	r0, #1
 8001ee6:	f001 f961 	bl	80031ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800

08001ef8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08c      	sub	sp, #48	; 0x30
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <HAL_InitTick+0xd0>)
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f10:	4a2d      	ldr	r2, [pc, #180]	; (8001fc8 <HAL_InitTick+0xd0>)
 8001f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f16:	6453      	str	r3, [r2, #68]	; 0x44
 8001f18:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <HAL_InitTick+0xd0>)
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f24:	f107 020c 	add.w	r2, r7, #12
 8001f28:	f107 0310 	add.w	r3, r7, #16
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f002 fb78 	bl	8004624 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f34:	f002 fb62 	bl	80045fc <HAL_RCC_GetPCLK2Freq>
 8001f38:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3c:	4a23      	ldr	r2, [pc, #140]	; (8001fcc <HAL_InitTick+0xd4>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	0c9b      	lsrs	r3, r3, #18
 8001f44:	3b01      	subs	r3, #1
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <HAL_InitTick+0xd8>)
 8001f4a:	4a22      	ldr	r2, [pc, #136]	; (8001fd4 <HAL_InitTick+0xdc>)
 8001f4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <HAL_InitTick+0xd8>)
 8001f50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f54:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001f56:	4a1e      	ldr	r2, [pc, #120]	; (8001fd0 <HAL_InitTick+0xd8>)
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <HAL_InitTick+0xd8>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_InitTick+0xd8>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f68:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_InitTick+0xd8>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001f6e:	4818      	ldr	r0, [pc, #96]	; (8001fd0 <HAL_InitTick+0xd8>)
 8001f70:	f002 fb8a 	bl	8004688 <HAL_TIM_Base_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001f7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d11b      	bne.n	8001fba <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001f82:	4813      	ldr	r0, [pc, #76]	; (8001fd0 <HAL_InitTick+0xd8>)
 8001f84:	f002 fbd0 	bl	8004728 <HAL_TIM_Base_Start_IT>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d111      	bne.n	8001fba <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f96:	2019      	movs	r0, #25
 8001f98:	f001 f924 	bl	80031e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b0f      	cmp	r3, #15
 8001fa0:	d808      	bhi.n	8001fb4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	2019      	movs	r0, #25
 8001fa8:	f001 f900 	bl	80031ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fac:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <HAL_InitTick+0xe0>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	e002      	b.n	8001fba <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001fba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3730      	adds	r7, #48	; 0x30
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	431bde83 	.word	0x431bde83
 8001fd0:	20000b20 	.word	0x20000b20
 8001fd4:	40014400 	.word	0x40014400
 8001fd8:	20000004 	.word	0x20000004

08001fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <NMI_Handler+0x4>

08001fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe6:	e7fe      	b.n	8001fe6 <HardFault_Handler+0x4>

08001fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fec:	e7fe      	b.n	8001fec <MemManage_Handler+0x4>

08001fee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff2:	e7fe      	b.n	8001ff2 <BusFault_Handler+0x4>

08001ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <UsageFault_Handler+0x4>

08001ffa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <ADC_IRQHandler+0x10>)
 800200e:	f000 fcb2 	bl	8002976 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200001fc 	.word	0x200001fc

0800201c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002020:	4803      	ldr	r0, [pc, #12]	; (8002030 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002022:	f002 fbe3 	bl	80047ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002026:	4803      	ldr	r0, [pc, #12]	; (8002034 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002028:	f002 fbe0 	bl	80047ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000b6c 	.word	0x20000b6c
 8002034:	20000b20 	.word	0x20000b20

08002038 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800203c:	4806      	ldr	r0, [pc, #24]	; (8002058 <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 800203e:	f002 fbd5 	bl	80047ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002042:	4806      	ldr	r0, [pc, #24]	; (800205c <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 8002044:	f002 fbd2 	bl	80047ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */


  	  // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 	 // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002048:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800204c:	4804      	ldr	r0, [pc, #16]	; (8002060 <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 800204e:	f001 fe76 	bl	8003d3e <HAL_GPIO_TogglePin>
 	 // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000b6c 	.word	0x20000b6c
 800205c:	20000bb4 	.word	0x20000bb4
 8002060:	40020400 	.word	0x40020400

08002064 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <USART1_IRQHandler+0x10>)
 800206a:	f003 f897 	bl	800519c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000bfc 	.word	0x20000bfc

08002078 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <DMA2_Stream2_IRQHandler+0x10>)
 800207e:	f001 fa57 	bl	8003530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000c40 	.word	0x20000c40

0800208c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <DMA2_Stream7_IRQHandler+0x10>)
 8002092:	f001 fa4d 	bl	8003530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000ca0 	.word	0x20000ca0

080020a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return 1;
 80020a4:	2301      	movs	r3, #1
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <_kill>:

int _kill(int pid, int sig)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020ba:	f007 f867 	bl	800918c <__errno>
 80020be:	4603      	mov	r3, r0
 80020c0:	2216      	movs	r2, #22
 80020c2:	601a      	str	r2, [r3, #0]
  return -1;
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_exit>:

void _exit (int status)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ffe7 	bl	80020b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020e2:	e7fe      	b.n	80020e2 <_exit+0x12>

080020e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	e00a      	b.n	800210c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020f6:	f3af 8000 	nop.w
 80020fa:	4601      	mov	r1, r0
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	60ba      	str	r2, [r7, #8]
 8002102:	b2ca      	uxtb	r2, r1
 8002104:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3301      	adds	r3, #1
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	429a      	cmp	r2, r3
 8002112:	dbf0      	blt.n	80020f6 <_read+0x12>
  }

  return len;
 8002114:	687b      	ldr	r3, [r7, #4]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b086      	sub	sp, #24
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	e009      	b.n	8002144 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	60ba      	str	r2, [r7, #8]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	3301      	adds	r3, #1
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	429a      	cmp	r2, r3
 800214a:	dbf1      	blt.n	8002130 <_write+0x12>
  }
  return len;
 800214c:	687b      	ldr	r3, [r7, #4]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <_close>:

int _close(int file)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800215e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800217e:	605a      	str	r2, [r3, #4]
  return 0;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <_isatty>:

int _isatty(int file)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002196:	2301      	movs	r3, #1
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021c8:	4a14      	ldr	r2, [pc, #80]	; (800221c <_sbrk+0x5c>)
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <_sbrk+0x60>)
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021d4:	4b13      	ldr	r3, [pc, #76]	; (8002224 <_sbrk+0x64>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d102      	bne.n	80021e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021dc:	4b11      	ldr	r3, [pc, #68]	; (8002224 <_sbrk+0x64>)
 80021de:	4a12      	ldr	r2, [pc, #72]	; (8002228 <_sbrk+0x68>)
 80021e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <_sbrk+0x64>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d207      	bcs.n	8002200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021f0:	f006 ffcc 	bl	800918c <__errno>
 80021f4:	4603      	mov	r3, r0
 80021f6:	220c      	movs	r2, #12
 80021f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295
 80021fe:	e009      	b.n	8002214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002200:	4b08      	ldr	r3, [pc, #32]	; (8002224 <_sbrk+0x64>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002206:	4b07      	ldr	r3, [pc, #28]	; (8002224 <_sbrk+0x64>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	4a05      	ldr	r2, [pc, #20]	; (8002224 <_sbrk+0x64>)
 8002210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002212:	68fb      	ldr	r3, [r7, #12]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20018000 	.word	0x20018000
 8002220:	00000400 	.word	0x00000400
 8002224:	20000b68 	.word	0x20000b68
 8002228:	20004ba8 	.word	0x20004ba8

0800222c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <SystemInit+0x20>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002236:	4a05      	ldr	r2, [pc, #20]	; (800224c <SystemInit+0x20>)
 8002238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800223c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002256:	f107 0308 	add.w	r3, r7, #8
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002264:	463b      	mov	r3, r7
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800226c:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <MX_TIM1_Init+0x98>)
 800226e:	4a1f      	ldr	r2, [pc, #124]	; (80022ec <MX_TIM1_Init+0x9c>)
 8002270:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <MX_TIM1_Init+0x98>)
 8002274:	2200      	movs	r2, #0
 8002276:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <MX_TIM1_Init+0x98>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800227e:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <MX_TIM1_Init+0x98>)
 8002280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002284:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <MX_TIM1_Init+0x98>)
 8002288:	2200      	movs	r2, #0
 800228a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800228c:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <MX_TIM1_Init+0x98>)
 800228e:	2200      	movs	r2, #0
 8002290:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <MX_TIM1_Init+0x98>)
 8002294:	2200      	movs	r2, #0
 8002296:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002298:	4813      	ldr	r0, [pc, #76]	; (80022e8 <MX_TIM1_Init+0x98>)
 800229a:	f002 f9f5 	bl	8004688 <HAL_TIM_Base_Init>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80022a4:	f7ff fdf6 	bl	8001e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022ae:	f107 0308 	add.w	r3, r7, #8
 80022b2:	4619      	mov	r1, r3
 80022b4:	480c      	ldr	r0, [pc, #48]	; (80022e8 <MX_TIM1_Init+0x98>)
 80022b6:	f002 fba1 	bl	80049fc <HAL_TIM_ConfigClockSource>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80022c0:	f7ff fde8 	bl	8001e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c4:	2300      	movs	r3, #0
 80022c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022cc:	463b      	mov	r3, r7
 80022ce:	4619      	mov	r1, r3
 80022d0:	4805      	ldr	r0, [pc, #20]	; (80022e8 <MX_TIM1_Init+0x98>)
 80022d2:	f002 fd9d 	bl	8004e10 <HAL_TIMEx_MasterConfigSynchronization>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80022dc:	f7ff fdda 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80022e0:	bf00      	nop
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000b6c 	.word	0x20000b6c
 80022ec:	40010000 	.word	0x40010000

080022f0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <MX_TIM11_Init+0x40>)
 80022f6:	4a0f      	ldr	r2, [pc, #60]	; (8002334 <MX_TIM11_Init+0x44>)
 80022f8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8399;
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <MX_TIM11_Init+0x40>)
 80022fc:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002300:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <MX_TIM11_Init+0x40>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <MX_TIM11_Init+0x40>)
 800230a:	f242 720f 	movw	r2, #9999	; 0x270f
 800230e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002310:	4b07      	ldr	r3, [pc, #28]	; (8002330 <MX_TIM11_Init+0x40>)
 8002312:	2200      	movs	r2, #0
 8002314:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <MX_TIM11_Init+0x40>)
 8002318:	2280      	movs	r2, #128	; 0x80
 800231a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800231c:	4804      	ldr	r0, [pc, #16]	; (8002330 <MX_TIM11_Init+0x40>)
 800231e:	f002 f9b3 	bl	8004688 <HAL_TIM_Base_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002328:	f7ff fdb4 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800232c:	bf00      	nop
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000bb4 	.word	0x20000bb4
 8002334:	40014800 	.word	0x40014800

08002338 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a20      	ldr	r2, [pc, #128]	; (80023c8 <HAL_TIM_Base_MspInit+0x90>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d11e      	bne.n	8002388 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <HAL_TIM_Base_MspInit+0x94>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	4a1e      	ldr	r2, [pc, #120]	; (80023cc <HAL_TIM_Base_MspInit+0x94>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6453      	str	r3, [r2, #68]	; 0x44
 800235a:	4b1c      	ldr	r3, [pc, #112]	; (80023cc <HAL_TIM_Base_MspInit+0x94>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2105      	movs	r1, #5
 800236a:	2019      	movs	r0, #25
 800236c:	f000 ff1e 	bl	80031ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002370:	2019      	movs	r0, #25
 8002372:	f000 ff37 	bl	80031e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2105      	movs	r1, #5
 800237a:	201a      	movs	r0, #26
 800237c:	f000 ff16 	bl	80031ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002380:	201a      	movs	r0, #26
 8002382:	f000 ff2f 	bl	80031e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002386:	e01a      	b.n	80023be <HAL_TIM_Base_MspInit+0x86>
  else if(tim_baseHandle->Instance==TIM11)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a10      	ldr	r2, [pc, #64]	; (80023d0 <HAL_TIM_Base_MspInit+0x98>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d115      	bne.n	80023be <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <HAL_TIM_Base_MspInit+0x94>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	4a0c      	ldr	r2, [pc, #48]	; (80023cc <HAL_TIM_Base_MspInit+0x94>)
 800239c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a0:	6453      	str	r3, [r2, #68]	; 0x44
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <HAL_TIM_Base_MspInit+0x94>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2105      	movs	r1, #5
 80023b2:	201a      	movs	r0, #26
 80023b4:	f000 fefa 	bl	80031ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80023b8:	201a      	movs	r0, #26
 80023ba:	f000 ff13 	bl	80031e4 <HAL_NVIC_EnableIRQ>
}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40010000 	.word	0x40010000
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40014800 	.word	0x40014800

080023d4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <MX_USART1_UART_Init+0x4c>)
 80023da:	4a12      	ldr	r2, [pc, #72]	; (8002424 <MX_USART1_UART_Init+0x50>)
 80023dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <MX_USART1_UART_Init+0x4c>)
 80023e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <MX_USART1_UART_Init+0x4c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <MX_USART1_UART_Init+0x4c>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <MX_USART1_UART_Init+0x4c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <MX_USART1_UART_Init+0x4c>)
 80023fa:	220c      	movs	r2, #12
 80023fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fe:	4b08      	ldr	r3, [pc, #32]	; (8002420 <MX_USART1_UART_Init+0x4c>)
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <MX_USART1_UART_Init+0x4c>)
 8002406:	2200      	movs	r2, #0
 8002408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800240a:	4805      	ldr	r0, [pc, #20]	; (8002420 <MX_USART1_UART_Init+0x4c>)
 800240c:	f002 fd82 	bl	8004f14 <HAL_UART_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002416:	f7ff fd3d 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000bfc 	.word	0x20000bfc
 8002424:	40011000 	.word	0x40011000

08002428 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a4d      	ldr	r2, [pc, #308]	; (800257c <HAL_UART_MspInit+0x154>)
 8002446:	4293      	cmp	r3, r2
 8002448:	f040 8093 	bne.w	8002572 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	4b4b      	ldr	r3, [pc, #300]	; (8002580 <HAL_UART_MspInit+0x158>)
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	4a4a      	ldr	r2, [pc, #296]	; (8002580 <HAL_UART_MspInit+0x158>)
 8002456:	f043 0310 	orr.w	r3, r3, #16
 800245a:	6453      	str	r3, [r2, #68]	; 0x44
 800245c:	4b48      	ldr	r3, [pc, #288]	; (8002580 <HAL_UART_MspInit+0x158>)
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	4b44      	ldr	r3, [pc, #272]	; (8002580 <HAL_UART_MspInit+0x158>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	4a43      	ldr	r2, [pc, #268]	; (8002580 <HAL_UART_MspInit+0x158>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6313      	str	r3, [r2, #48]	; 0x30
 8002478:	4b41      	ldr	r3, [pc, #260]	; (8002580 <HAL_UART_MspInit+0x158>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002484:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248a:	2302      	movs	r3, #2
 800248c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002492:	2303      	movs	r3, #3
 8002494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002496:	2307      	movs	r3, #7
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249a:	f107 0314 	add.w	r3, r7, #20
 800249e:	4619      	mov	r1, r3
 80024a0:	4838      	ldr	r0, [pc, #224]	; (8002584 <HAL_UART_MspInit+0x15c>)
 80024a2:	f001 faaf 	bl	8003a04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80024a6:	4b38      	ldr	r3, [pc, #224]	; (8002588 <HAL_UART_MspInit+0x160>)
 80024a8:	4a38      	ldr	r2, [pc, #224]	; (800258c <HAL_UART_MspInit+0x164>)
 80024aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80024ac:	4b36      	ldr	r3, [pc, #216]	; (8002588 <HAL_UART_MspInit+0x160>)
 80024ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024b2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024b4:	4b34      	ldr	r3, [pc, #208]	; (8002588 <HAL_UART_MspInit+0x160>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ba:	4b33      	ldr	r3, [pc, #204]	; (8002588 <HAL_UART_MspInit+0x160>)
 80024bc:	2200      	movs	r2, #0
 80024be:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024c0:	4b31      	ldr	r3, [pc, #196]	; (8002588 <HAL_UART_MspInit+0x160>)
 80024c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024c8:	4b2f      	ldr	r3, [pc, #188]	; (8002588 <HAL_UART_MspInit+0x160>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024ce:	4b2e      	ldr	r3, [pc, #184]	; (8002588 <HAL_UART_MspInit+0x160>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80024d4:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <HAL_UART_MspInit+0x160>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024da:	4b2b      	ldr	r3, [pc, #172]	; (8002588 <HAL_UART_MspInit+0x160>)
 80024dc:	2200      	movs	r2, #0
 80024de:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024e0:	4b29      	ldr	r3, [pc, #164]	; (8002588 <HAL_UART_MspInit+0x160>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80024e6:	4828      	ldr	r0, [pc, #160]	; (8002588 <HAL_UART_MspInit+0x160>)
 80024e8:	f000 fe8a 	bl	8003200 <HAL_DMA_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80024f2:	f7ff fccf 	bl	8001e94 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a23      	ldr	r2, [pc, #140]	; (8002588 <HAL_UART_MspInit+0x160>)
 80024fa:	639a      	str	r2, [r3, #56]	; 0x38
 80024fc:	4a22      	ldr	r2, [pc, #136]	; (8002588 <HAL_UART_MspInit+0x160>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002502:	4b23      	ldr	r3, [pc, #140]	; (8002590 <HAL_UART_MspInit+0x168>)
 8002504:	4a23      	ldr	r2, [pc, #140]	; (8002594 <HAL_UART_MspInit+0x16c>)
 8002506:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002508:	4b21      	ldr	r3, [pc, #132]	; (8002590 <HAL_UART_MspInit+0x168>)
 800250a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800250e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002510:	4b1f      	ldr	r3, [pc, #124]	; (8002590 <HAL_UART_MspInit+0x168>)
 8002512:	2240      	movs	r2, #64	; 0x40
 8002514:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002516:	4b1e      	ldr	r3, [pc, #120]	; (8002590 <HAL_UART_MspInit+0x168>)
 8002518:	2200      	movs	r2, #0
 800251a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800251c:	4b1c      	ldr	r3, [pc, #112]	; (8002590 <HAL_UART_MspInit+0x168>)
 800251e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002522:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002524:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <HAL_UART_MspInit+0x168>)
 8002526:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800252a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800252c:	4b18      	ldr	r3, [pc, #96]	; (8002590 <HAL_UART_MspInit+0x168>)
 800252e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002532:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002534:	4b16      	ldr	r3, [pc, #88]	; (8002590 <HAL_UART_MspInit+0x168>)
 8002536:	2200      	movs	r2, #0
 8002538:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <HAL_UART_MspInit+0x168>)
 800253c:	2200      	movs	r2, #0
 800253e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <HAL_UART_MspInit+0x168>)
 8002542:	2200      	movs	r2, #0
 8002544:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002546:	4812      	ldr	r0, [pc, #72]	; (8002590 <HAL_UART_MspInit+0x168>)
 8002548:	f000 fe5a 	bl	8003200 <HAL_DMA_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002552:	f7ff fc9f 	bl	8001e94 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a0d      	ldr	r2, [pc, #52]	; (8002590 <HAL_UART_MspInit+0x168>)
 800255a:	635a      	str	r2, [r3, #52]	; 0x34
 800255c:	4a0c      	ldr	r2, [pc, #48]	; (8002590 <HAL_UART_MspInit+0x168>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002562:	2200      	movs	r2, #0
 8002564:	2105      	movs	r1, #5
 8002566:	2025      	movs	r0, #37	; 0x25
 8002568:	f000 fe20 	bl	80031ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800256c:	2025      	movs	r0, #37	; 0x25
 800256e:	f000 fe39 	bl	80031e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002572:	bf00      	nop
 8002574:	3728      	adds	r7, #40	; 0x28
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40011000 	.word	0x40011000
 8002580:	40023800 	.word	0x40023800
 8002584:	40020000 	.word	0x40020000
 8002588:	20000c40 	.word	0x20000c40
 800258c:	40026440 	.word	0x40026440
 8002590:	20000ca0 	.word	0x20000ca0
 8002594:	400264b8 	.word	0x400264b8

08002598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800259c:	480d      	ldr	r0, [pc, #52]	; (80025d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800259e:	490e      	ldr	r1, [pc, #56]	; (80025d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025a0:	4a0e      	ldr	r2, [pc, #56]	; (80025dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a4:	e002      	b.n	80025ac <LoopCopyDataInit>

080025a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025aa:	3304      	adds	r3, #4

080025ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b0:	d3f9      	bcc.n	80025a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025b2:	4a0b      	ldr	r2, [pc, #44]	; (80025e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025b4:	4c0b      	ldr	r4, [pc, #44]	; (80025e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b8:	e001      	b.n	80025be <LoopFillZerobss>

080025ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025bc:	3204      	adds	r2, #4

080025be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c0:	d3fb      	bcc.n	80025ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025c2:	f7ff fe33 	bl	800222c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025c6:	f006 fde7 	bl	8009198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ca:	f7ff fbcf 	bl	8001d6c <main>
  bx  lr    
 80025ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80025d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80025dc:	0800c6f4 	.word	0x0800c6f4
  ldr r2, =_sbss
 80025e0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80025e4:	20004ba4 	.word	0x20004ba4

080025e8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025e8:	e7fe      	b.n	80025e8 <DMA1_Stream0_IRQHandler>
	...

080025ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025f0:	4b0e      	ldr	r3, [pc, #56]	; (800262c <HAL_Init+0x40>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a0d      	ldr	r2, [pc, #52]	; (800262c <HAL_Init+0x40>)
 80025f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_Init+0x40>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0a      	ldr	r2, [pc, #40]	; (800262c <HAL_Init+0x40>)
 8002602:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002606:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <HAL_Init+0x40>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a07      	ldr	r2, [pc, #28]	; (800262c <HAL_Init+0x40>)
 800260e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002612:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002614:	2003      	movs	r0, #3
 8002616:	f000 fdbe 	bl	8003196 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800261a:	2005      	movs	r0, #5
 800261c:	f7ff fc6c 	bl	8001ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002620:	f7ff fc3e 	bl	8001ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023c00 	.word	0x40023c00

08002630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_IncTick+0x20>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_IncTick+0x24>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4413      	add	r3, r2
 8002640:	4a04      	ldr	r2, [pc, #16]	; (8002654 <HAL_IncTick+0x24>)
 8002642:	6013      	str	r3, [r2, #0]
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20000008 	.word	0x20000008
 8002654:	20000d00 	.word	0x20000d00

08002658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return uwTick;
 800265c:	4b03      	ldr	r3, [pc, #12]	; (800266c <HAL_GetTick+0x14>)
 800265e:	681b      	ldr	r3, [r3, #0]
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	20000d00 	.word	0x20000d00

08002670 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e033      	b.n	80026ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe fc66 	bl	8000f60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d118      	bne.n	80026e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026b6:	f023 0302 	bic.w	r3, r3, #2
 80026ba:	f043 0202 	orr.w	r2, r3, #2
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fbb4 	bl	8002e30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f023 0303 	bic.w	r3, r3, #3
 80026d6:	f043 0201 	orr.w	r2, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40
 80026de:	e001      	b.n	80026e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_ADC_Start+0x1a>
 800270e:	2302      	movs	r3, #2
 8002710:	e097      	b.n	8002842 <HAL_ADC_Start+0x14a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b01      	cmp	r3, #1
 8002726:	d018      	beq.n	800275a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002738:	4b45      	ldr	r3, [pc, #276]	; (8002850 <HAL_ADC_Start+0x158>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a45      	ldr	r2, [pc, #276]	; (8002854 <HAL_ADC_Start+0x15c>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	0c9a      	lsrs	r2, r3, #18
 8002744:	4613      	mov	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4413      	add	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800274c:	e002      	b.n	8002754 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	3b01      	subs	r3, #1
 8002752:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f9      	bne.n	800274e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b01      	cmp	r3, #1
 8002766:	d15f      	bne.n	8002828 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002792:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a6:	d106      	bne.n	80027b6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ac:	f023 0206 	bic.w	r2, r3, #6
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	645a      	str	r2, [r3, #68]	; 0x44
 80027b4:	e002      	b.n	80027bc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027c4:	4b24      	ldr	r3, [pc, #144]	; (8002858 <HAL_ADC_Start+0x160>)
 80027c6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80027d0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10f      	bne.n	80027fe <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d129      	bne.n	8002840 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	e020      	b.n	8002840 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a16      	ldr	r2, [pc, #88]	; (800285c <HAL_ADC_Start+0x164>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d11b      	bne.n	8002840 <HAL_ADC_Start+0x148>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d114      	bne.n	8002840 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002824:	609a      	str	r2, [r3, #8]
 8002826:	e00b      	b.n	8002840 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f043 0210 	orr.w	r2, r3, #16
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	f043 0201 	orr.w	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000000 	.word	0x20000000
 8002854:	431bde83 	.word	0x431bde83
 8002858:	40012300 	.word	0x40012300
 800285c:	40012000 	.word	0x40012000

08002860 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287c:	d113      	bne.n	80028a6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800288c:	d10b      	bne.n	80028a6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f043 0220 	orr.w	r2, r3, #32
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e063      	b.n	800296e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80028a6:	f7ff fed7 	bl	8002658 <HAL_GetTick>
 80028aa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028ac:	e021      	b.n	80028f2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d01d      	beq.n	80028f2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d007      	beq.n	80028cc <HAL_ADC_PollForConversion+0x6c>
 80028bc:	f7ff fecc 	bl	8002658 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d212      	bcs.n	80028f2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d00b      	beq.n	80028f2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f043 0204 	orr.w	r2, r3, #4
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e03d      	b.n	800296e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d1d6      	bne.n	80028ae <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0212 	mvn.w	r2, #18
 8002908:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d123      	bne.n	800296c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002928:	2b00      	cmp	r3, #0
 800292a:	d11f      	bne.n	800296c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002936:	2b00      	cmp	r3, #0
 8002938:	d006      	beq.n	8002948 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002944:	2b00      	cmp	r3, #0
 8002946:	d111      	bne.n	800296c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f043 0201 	orr.w	r2, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b086      	sub	sp, #24
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f003 0320 	and.w	r3, r3, #32
 80029a4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d049      	beq.n	8002a40 <HAL_ADC_IRQHandler+0xca>
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d046      	beq.n	8002a40 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d105      	bne.n	80029ca <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d12b      	bne.n	8002a30 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d127      	bne.n	8002a30 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d006      	beq.n	80029fc <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d119      	bne.n	8002a30 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0220 	bic.w	r2, r2, #32
 8002a0a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d105      	bne.n	8002a30 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	f043 0201 	orr.w	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f8bd 	bl	8002bb0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f06f 0212 	mvn.w	r2, #18
 8002a3e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d057      	beq.n	8002b06 <HAL_ADC_IRQHandler+0x190>
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d054      	beq.n	8002b06 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d105      	bne.n	8002a74 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d139      	bne.n	8002af6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d006      	beq.n	8002a9e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d12b      	bne.n	8002af6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d124      	bne.n	8002af6 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d11d      	bne.n	8002af6 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d119      	bne.n	8002af6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ad0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d105      	bne.n	8002af6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f043 0201 	orr.w	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fa96 	bl	8003028 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 020c 	mvn.w	r2, #12
 8002b04:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b14:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d017      	beq.n	8002b4c <HAL_ADC_IRQHandler+0x1d6>
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d014      	beq.n	8002b4c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d10d      	bne.n	8002b4c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f841 	bl	8002bc4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f06f 0201 	mvn.w	r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b5a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d015      	beq.n	8002b8e <HAL_ADC_IRQHandler+0x218>
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d012      	beq.n	8002b8e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6c:	f043 0202 	orr.w	r2, r3, #2
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0220 	mvn.w	r2, #32
 8002b7c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f82a 	bl	8002bd8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0220 	mvn.w	r2, #32
 8002b8c:	601a      	str	r2, [r3, #0]
  }
}
 8002b8e:	bf00      	nop
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x1c>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e105      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x228>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b09      	cmp	r3, #9
 8002c16:	d925      	bls.n	8002c64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68d9      	ldr	r1, [r3, #12]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	4613      	mov	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3b1e      	subs	r3, #30
 8002c2e:	2207      	movs	r2, #7
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43da      	mvns	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	400a      	ands	r2, r1
 8002c3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68d9      	ldr	r1, [r3, #12]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	4618      	mov	r0, r3
 8002c50:	4603      	mov	r3, r0
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4403      	add	r3, r0
 8002c56:	3b1e      	subs	r3, #30
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	e022      	b.n	8002caa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6919      	ldr	r1, [r3, #16]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	461a      	mov	r2, r3
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	2207      	movs	r2, #7
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	400a      	ands	r2, r1
 8002c86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6919      	ldr	r1, [r3, #16]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	4618      	mov	r0, r3
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	4403      	add	r3, r0
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d824      	bhi.n	8002cfc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3b05      	subs	r3, #5
 8002cc4:	221f      	movs	r2, #31
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	3b05      	subs	r3, #5
 8002cee:	fa00 f203 	lsl.w	r2, r0, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	635a      	str	r2, [r3, #52]	; 0x34
 8002cfa:	e04c      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b0c      	cmp	r3, #12
 8002d02:	d824      	bhi.n	8002d4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	3b23      	subs	r3, #35	; 0x23
 8002d16:	221f      	movs	r2, #31
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43da      	mvns	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	400a      	ands	r2, r1
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	4618      	mov	r0, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3b23      	subs	r3, #35	; 0x23
 8002d40:	fa00 f203 	lsl.w	r2, r0, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d4c:	e023      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3b41      	subs	r3, #65	; 0x41
 8002d60:	221f      	movs	r2, #31
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43da      	mvns	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	400a      	ands	r2, r1
 8002d6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	3b41      	subs	r3, #65	; 0x41
 8002d8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d96:	4b22      	ldr	r3, [pc, #136]	; (8002e20 <HAL_ADC_ConfigChannel+0x234>)
 8002d98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a21      	ldr	r2, [pc, #132]	; (8002e24 <HAL_ADC_ConfigChannel+0x238>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d109      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x1cc>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b12      	cmp	r3, #18
 8002daa:	d105      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a19      	ldr	r2, [pc, #100]	; (8002e24 <HAL_ADC_ConfigChannel+0x238>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d123      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x21e>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b10      	cmp	r3, #16
 8002dc8:	d003      	beq.n	8002dd2 <HAL_ADC_ConfigChannel+0x1e6>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b11      	cmp	r3, #17
 8002dd0:	d11b      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2b10      	cmp	r3, #16
 8002de4:	d111      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <HAL_ADC_ConfigChannel+0x23c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a10      	ldr	r2, [pc, #64]	; (8002e2c <HAL_ADC_ConfigChannel+0x240>)
 8002dec:	fba2 2303 	umull	r2, r3, r2, r3
 8002df0:	0c9a      	lsrs	r2, r3, #18
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002dfc:	e002      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f9      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	40012300 	.word	0x40012300
 8002e24:	40012000 	.word	0x40012000
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	431bde83 	.word	0x431bde83

08002e30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e38:	4b79      	ldr	r3, [pc, #484]	; (8003020 <ADC_Init+0x1f0>)
 8002e3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	431a      	orrs	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6859      	ldr	r1, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	021a      	lsls	r2, r3, #8
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6899      	ldr	r1, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec2:	4a58      	ldr	r2, [pc, #352]	; (8003024 <ADC_Init+0x1f4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d022      	beq.n	8002f0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ed6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6899      	ldr	r1, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ef8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6899      	ldr	r1, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	e00f      	b.n	8002f2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0202 	bic.w	r2, r2, #2
 8002f3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6899      	ldr	r1, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	7e1b      	ldrb	r3, [r3, #24]
 8002f48:	005a      	lsls	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d01b      	beq.n	8002f94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6859      	ldr	r1, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	3b01      	subs	r3, #1
 8002f88:	035a      	lsls	r2, r3, #13
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	e007      	b.n	8002fa4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	051a      	lsls	r2, r3, #20
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6899      	ldr	r1, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fe6:	025a      	lsls	r2, r3, #9
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6899      	ldr	r1, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	029a      	lsls	r2, r3, #10
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	609a      	str	r2, [r3, #8]
}
 8003014:	bf00      	nop
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40012300 	.word	0x40012300
 8003024:	0f000001 	.word	0x0f000001

08003028 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800304c:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <__NVIC_SetPriorityGrouping+0x44>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003058:	4013      	ands	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800306c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800306e:	4a04      	ldr	r2, [pc, #16]	; (8003080 <__NVIC_SetPriorityGrouping+0x44>)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	60d3      	str	r3, [r2, #12]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003088:	4b04      	ldr	r3, [pc, #16]	; (800309c <__NVIC_GetPriorityGrouping+0x18>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	f003 0307 	and.w	r3, r3, #7
}
 8003092:	4618      	mov	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	db0b      	blt.n	80030ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	f003 021f 	and.w	r2, r3, #31
 80030b8:	4907      	ldr	r1, [pc, #28]	; (80030d8 <__NVIC_EnableIRQ+0x38>)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	2001      	movs	r0, #1
 80030c2:	fa00 f202 	lsl.w	r2, r0, r2
 80030c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e000e100 	.word	0xe000e100

080030dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	6039      	str	r1, [r7, #0]
 80030e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	db0a      	blt.n	8003106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	490c      	ldr	r1, [pc, #48]	; (8003128 <__NVIC_SetPriority+0x4c>)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	0112      	lsls	r2, r2, #4
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	440b      	add	r3, r1
 8003100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003104:	e00a      	b.n	800311c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4908      	ldr	r1, [pc, #32]	; (800312c <__NVIC_SetPriority+0x50>)
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	3b04      	subs	r3, #4
 8003114:	0112      	lsls	r2, r2, #4
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	440b      	add	r3, r1
 800311a:	761a      	strb	r2, [r3, #24]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000e100 	.word	0xe000e100
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	; 0x24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f1c3 0307 	rsb	r3, r3, #7
 800314a:	2b04      	cmp	r3, #4
 800314c:	bf28      	it	cs
 800314e:	2304      	movcs	r3, #4
 8003150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3304      	adds	r3, #4
 8003156:	2b06      	cmp	r3, #6
 8003158:	d902      	bls.n	8003160 <NVIC_EncodePriority+0x30>
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3b03      	subs	r3, #3
 800315e:	e000      	b.n	8003162 <NVIC_EncodePriority+0x32>
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003164:	f04f 32ff 	mov.w	r2, #4294967295
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43da      	mvns	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	401a      	ands	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003178:	f04f 31ff 	mov.w	r1, #4294967295
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	fa01 f303 	lsl.w	r3, r1, r3
 8003182:	43d9      	mvns	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003188:	4313      	orrs	r3, r2
         );
}
 800318a:	4618      	mov	r0, r3
 800318c:	3724      	adds	r7, #36	; 0x24
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff ff4c 	bl	800303c <__NVIC_SetPriorityGrouping>
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031be:	f7ff ff61 	bl	8003084 <__NVIC_GetPriorityGrouping>
 80031c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	6978      	ldr	r0, [r7, #20]
 80031ca:	f7ff ffb1 	bl	8003130 <NVIC_EncodePriority>
 80031ce:	4602      	mov	r2, r0
 80031d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff ff80 	bl	80030dc <__NVIC_SetPriority>
}
 80031dc:	bf00      	nop
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff ff54 	bl	80030a0 <__NVIC_EnableIRQ>
}
 80031f8:	bf00      	nop
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800320c:	f7ff fa24 	bl	8002658 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e099      	b.n	8003350 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800323c:	e00f      	b.n	800325e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800323e:	f7ff fa0b 	bl	8002658 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b05      	cmp	r3, #5
 800324a:	d908      	bls.n	800325e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2220      	movs	r2, #32
 8003250:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2203      	movs	r2, #3
 8003256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e078      	b.n	8003350 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1e8      	bne.n	800323e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4b38      	ldr	r3, [pc, #224]	; (8003358 <HAL_DMA_Init+0x158>)
 8003278:	4013      	ands	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800328a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003296:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d107      	bne.n	80032c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	4313      	orrs	r3, r2
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f023 0307 	bic.w	r3, r3, #7
 80032de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d117      	bne.n	8003322 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00e      	beq.n	8003322 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 fb01 	bl	800390c <DMA_CheckFifoParam>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2240      	movs	r2, #64	; 0x40
 8003314:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800331e:	2301      	movs	r3, #1
 8003320:	e016      	b.n	8003350 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fab8 	bl	80038a0 <DMA_CalcBaseAndBitshift>
 8003330:	4603      	mov	r3, r0
 8003332:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	223f      	movs	r2, #63	; 0x3f
 800333a:	409a      	lsls	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	f010803f 	.word	0xf010803f

0800335c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003372:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_DMA_Start_IT+0x26>
 800337e:	2302      	movs	r3, #2
 8003380:	e040      	b.n	8003404 <HAL_DMA_Start_IT+0xa8>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b01      	cmp	r3, #1
 8003394:	d12f      	bne.n	80033f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2202      	movs	r2, #2
 800339a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 fa4a 	bl	8003844 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	223f      	movs	r2, #63	; 0x3f
 80033b6:	409a      	lsls	r2, r3
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0216 	orr.w	r2, r2, #22
 80033ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d007      	beq.n	80033e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0208 	orr.w	r2, r2, #8
 80033e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e005      	b.n	8003402 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033fe:	2302      	movs	r3, #2
 8003400:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003402:	7dfb      	ldrb	r3, [r7, #23]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800341a:	f7ff f91d 	bl	8002658 <HAL_GetTick>
 800341e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d008      	beq.n	800343e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e052      	b.n	80034e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0216 	bic.w	r2, r2, #22
 800344c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800345c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d103      	bne.n	800346e <HAL_DMA_Abort+0x62>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0208 	bic.w	r2, r2, #8
 800347c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0201 	bic.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800348e:	e013      	b.n	80034b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003490:	f7ff f8e2 	bl	8002658 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b05      	cmp	r3, #5
 800349c:	d90c      	bls.n	80034b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2203      	movs	r2, #3
 80034a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e015      	b.n	80034e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1e4      	bne.n	8003490 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ca:	223f      	movs	r2, #63	; 0x3f
 80034cc:	409a      	lsls	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d004      	beq.n	800350a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2280      	movs	r2, #128	; 0x80
 8003504:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e00c      	b.n	8003524 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2205      	movs	r2, #5
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0201 	bic.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800353c:	4b8e      	ldr	r3, [pc, #568]	; (8003778 <HAL_DMA_IRQHandler+0x248>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a8e      	ldr	r2, [pc, #568]	; (800377c <HAL_DMA_IRQHandler+0x24c>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	0a9b      	lsrs	r3, r3, #10
 8003548:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355a:	2208      	movs	r2, #8
 800355c:	409a      	lsls	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d01a      	beq.n	800359c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d013      	beq.n	800359c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0204 	bic.w	r2, r2, #4
 8003582:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	2208      	movs	r2, #8
 800358a:	409a      	lsls	r2, r3
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003594:	f043 0201 	orr.w	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a0:	2201      	movs	r2, #1
 80035a2:	409a      	lsls	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d012      	beq.n	80035d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035be:	2201      	movs	r2, #1
 80035c0:	409a      	lsls	r2, r3
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ca:	f043 0202 	orr.w	r2, r3, #2
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d6:	2204      	movs	r2, #4
 80035d8:	409a      	lsls	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4013      	ands	r3, r2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d012      	beq.n	8003608 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00b      	beq.n	8003608 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f4:	2204      	movs	r2, #4
 80035f6:	409a      	lsls	r2, r3
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	f043 0204 	orr.w	r2, r3, #4
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360c:	2210      	movs	r2, #16
 800360e:	409a      	lsls	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4013      	ands	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d043      	beq.n	80036a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d03c      	beq.n	80036a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362a:	2210      	movs	r2, #16
 800362c:	409a      	lsls	r2, r3
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d018      	beq.n	8003672 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d108      	bne.n	8003660 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d024      	beq.n	80036a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	4798      	blx	r3
 800365e:	e01f      	b.n	80036a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01b      	beq.n	80036a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	4798      	blx	r3
 8003670:	e016      	b.n	80036a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0208 	bic.w	r2, r2, #8
 800368e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a4:	2220      	movs	r2, #32
 80036a6:	409a      	lsls	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 808f 	beq.w	80037d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 8087 	beq.w	80037d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c6:	2220      	movs	r2, #32
 80036c8:	409a      	lsls	r2, r3
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b05      	cmp	r3, #5
 80036d8:	d136      	bne.n	8003748 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0216 	bic.w	r2, r2, #22
 80036e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d103      	bne.n	800370a <HAL_DMA_IRQHandler+0x1da>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003706:	2b00      	cmp	r3, #0
 8003708:	d007      	beq.n	800371a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0208 	bic.w	r2, r2, #8
 8003718:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371e:	223f      	movs	r2, #63	; 0x3f
 8003720:	409a      	lsls	r2, r3
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373a:	2b00      	cmp	r3, #0
 800373c:	d07e      	beq.n	800383c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	4798      	blx	r3
        }
        return;
 8003746:	e079      	b.n	800383c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d01d      	beq.n	8003792 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10d      	bne.n	8003780 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003768:	2b00      	cmp	r3, #0
 800376a:	d031      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
 8003774:	e02c      	b.n	80037d0 <HAL_DMA_IRQHandler+0x2a0>
 8003776:	bf00      	nop
 8003778:	20000000 	.word	0x20000000
 800377c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d023      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	4798      	blx	r3
 8003790:	e01e      	b.n	80037d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10f      	bne.n	80037c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0210 	bic.w	r2, r2, #16
 80037ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d032      	beq.n	800383e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d022      	beq.n	800382a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2205      	movs	r2, #5
 80037e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0201 	bic.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	3301      	adds	r3, #1
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	429a      	cmp	r2, r3
 8003806:	d307      	bcc.n	8003818 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f2      	bne.n	80037fc <HAL_DMA_IRQHandler+0x2cc>
 8003816:	e000      	b.n	800381a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003818:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4798      	blx	r3
 800383a:	e000      	b.n	800383e <HAL_DMA_IRQHandler+0x30e>
        return;
 800383c:	bf00      	nop
    }
  }
}
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003860:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b40      	cmp	r3, #64	; 0x40
 8003870:	d108      	bne.n	8003884 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003882:	e007      	b.n	8003894 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	60da      	str	r2, [r3, #12]
}
 8003894:	bf00      	nop
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	3b10      	subs	r3, #16
 80038b0:	4a14      	ldr	r2, [pc, #80]	; (8003904 <DMA_CalcBaseAndBitshift+0x64>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038ba:	4a13      	ldr	r2, [pc, #76]	; (8003908 <DMA_CalcBaseAndBitshift+0x68>)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4413      	add	r3, r2
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d909      	bls.n	80038e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	1d1a      	adds	r2, r3, #4
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	659a      	str	r2, [r3, #88]	; 0x58
 80038e0:	e007      	b.n	80038f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038ea:	f023 0303 	bic.w	r3, r3, #3
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	aaaaaaab 	.word	0xaaaaaaab
 8003908:	0800c304 	.word	0x0800c304

0800390c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d11f      	bne.n	8003966 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b03      	cmp	r3, #3
 800392a:	d856      	bhi.n	80039da <DMA_CheckFifoParam+0xce>
 800392c:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <DMA_CheckFifoParam+0x28>)
 800392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003932:	bf00      	nop
 8003934:	08003945 	.word	0x08003945
 8003938:	08003957 	.word	0x08003957
 800393c:	08003945 	.word	0x08003945
 8003940:	080039db 	.word	0x080039db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d046      	beq.n	80039de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003954:	e043      	b.n	80039de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800395e:	d140      	bne.n	80039e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003964:	e03d      	b.n	80039e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800396e:	d121      	bne.n	80039b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b03      	cmp	r3, #3
 8003974:	d837      	bhi.n	80039e6 <DMA_CheckFifoParam+0xda>
 8003976:	a201      	add	r2, pc, #4	; (adr r2, 800397c <DMA_CheckFifoParam+0x70>)
 8003978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397c:	0800398d 	.word	0x0800398d
 8003980:	08003993 	.word	0x08003993
 8003984:	0800398d 	.word	0x0800398d
 8003988:	080039a5 	.word	0x080039a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
      break;
 8003990:	e030      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d025      	beq.n	80039ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a2:	e022      	b.n	80039ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039ac:	d11f      	bne.n	80039ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039b2:	e01c      	b.n	80039ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d903      	bls.n	80039c2 <DMA_CheckFifoParam+0xb6>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d003      	beq.n	80039c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039c0:	e018      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
      break;
 80039c6:	e015      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00e      	beq.n	80039f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
      break;
 80039d8:	e00b      	b.n	80039f2 <DMA_CheckFifoParam+0xe6>
      break;
 80039da:	bf00      	nop
 80039dc:	e00a      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      break;
 80039de:	bf00      	nop
 80039e0:	e008      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      break;
 80039e2:	bf00      	nop
 80039e4:	e006      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      break;
 80039e6:	bf00      	nop
 80039e8:	e004      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      break;
 80039ea:	bf00      	nop
 80039ec:	e002      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80039ee:	bf00      	nop
 80039f0:	e000      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      break;
 80039f2:	bf00      	nop
    }
  } 
  
  return status; 
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop

08003a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b089      	sub	sp, #36	; 0x24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	e159      	b.n	8003cd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a20:	2201      	movs	r2, #1
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	f040 8148 	bne.w	8003cce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d005      	beq.n	8003a56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d130      	bne.n	8003ab8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	2203      	movs	r2, #3
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 0201 	and.w	r2, r3, #1
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d017      	beq.n	8003af4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	2203      	movs	r2, #3
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d123      	bne.n	8003b48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	08da      	lsrs	r2, r3, #3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3208      	adds	r2, #8
 8003b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	220f      	movs	r2, #15
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	08da      	lsrs	r2, r3, #3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3208      	adds	r2, #8
 8003b42:	69b9      	ldr	r1, [r7, #24]
 8003b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	2203      	movs	r2, #3
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 0203 	and.w	r2, r3, #3
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80a2 	beq.w	8003cce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	4b57      	ldr	r3, [pc, #348]	; (8003cec <HAL_GPIO_Init+0x2e8>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	4a56      	ldr	r2, [pc, #344]	; (8003cec <HAL_GPIO_Init+0x2e8>)
 8003b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b98:	6453      	str	r3, [r2, #68]	; 0x44
 8003b9a:	4b54      	ldr	r3, [pc, #336]	; (8003cec <HAL_GPIO_Init+0x2e8>)
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ba6:	4a52      	ldr	r2, [pc, #328]	; (8003cf0 <HAL_GPIO_Init+0x2ec>)
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	089b      	lsrs	r3, r3, #2
 8003bac:	3302      	adds	r3, #2
 8003bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	220f      	movs	r2, #15
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a49      	ldr	r2, [pc, #292]	; (8003cf4 <HAL_GPIO_Init+0x2f0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d019      	beq.n	8003c06 <HAL_GPIO_Init+0x202>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a48      	ldr	r2, [pc, #288]	; (8003cf8 <HAL_GPIO_Init+0x2f4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d013      	beq.n	8003c02 <HAL_GPIO_Init+0x1fe>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a47      	ldr	r2, [pc, #284]	; (8003cfc <HAL_GPIO_Init+0x2f8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00d      	beq.n	8003bfe <HAL_GPIO_Init+0x1fa>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a46      	ldr	r2, [pc, #280]	; (8003d00 <HAL_GPIO_Init+0x2fc>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d007      	beq.n	8003bfa <HAL_GPIO_Init+0x1f6>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a45      	ldr	r2, [pc, #276]	; (8003d04 <HAL_GPIO_Init+0x300>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d101      	bne.n	8003bf6 <HAL_GPIO_Init+0x1f2>
 8003bf2:	2304      	movs	r3, #4
 8003bf4:	e008      	b.n	8003c08 <HAL_GPIO_Init+0x204>
 8003bf6:	2307      	movs	r3, #7
 8003bf8:	e006      	b.n	8003c08 <HAL_GPIO_Init+0x204>
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e004      	b.n	8003c08 <HAL_GPIO_Init+0x204>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e002      	b.n	8003c08 <HAL_GPIO_Init+0x204>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <HAL_GPIO_Init+0x204>
 8003c06:	2300      	movs	r3, #0
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	f002 0203 	and.w	r2, r2, #3
 8003c0e:	0092      	lsls	r2, r2, #2
 8003c10:	4093      	lsls	r3, r2
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c18:	4935      	ldr	r1, [pc, #212]	; (8003cf0 <HAL_GPIO_Init+0x2ec>)
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	089b      	lsrs	r3, r3, #2
 8003c1e:	3302      	adds	r3, #2
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c26:	4b38      	ldr	r3, [pc, #224]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c4a:	4a2f      	ldr	r2, [pc, #188]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c50:	4b2d      	ldr	r3, [pc, #180]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c74:	4a24      	ldr	r2, [pc, #144]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c7a:	4b23      	ldr	r3, [pc, #140]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c9e:	4a1a      	ldr	r2, [pc, #104]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ca4:	4b18      	ldr	r3, [pc, #96]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cc8:	4a0f      	ldr	r2, [pc, #60]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	61fb      	str	r3, [r7, #28]
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	2b0f      	cmp	r3, #15
 8003cd8:	f67f aea2 	bls.w	8003a20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	3724      	adds	r7, #36	; 0x24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	40013800 	.word	0x40013800
 8003cf4:	40020000 	.word	0x40020000
 8003cf8:	40020400 	.word	0x40020400
 8003cfc:	40020800 	.word	0x40020800
 8003d00:	40020c00 	.word	0x40020c00
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40013c00 	.word	0x40013c00

08003d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	807b      	strh	r3, [r7, #2]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d1c:	787b      	ldrb	r3, [r7, #1]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d22:	887a      	ldrh	r2, [r7, #2]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d28:	e003      	b.n	8003d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d2a:	887b      	ldrh	r3, [r7, #2]
 8003d2c:	041a      	lsls	r2, r3, #16
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	619a      	str	r2, [r3, #24]
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b085      	sub	sp, #20
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	460b      	mov	r3, r1
 8003d48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d50:	887a      	ldrh	r2, [r7, #2]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4013      	ands	r3, r2
 8003d56:	041a      	lsls	r2, r3, #16
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	43d9      	mvns	r1, r3
 8003d5c:	887b      	ldrh	r3, [r7, #2]
 8003d5e:	400b      	ands	r3, r1
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	619a      	str	r2, [r3, #24]
}
 8003d66:	bf00      	nop
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e267      	b.n	8004256 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d075      	beq.n	8003e7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d92:	4b88      	ldr	r3, [pc, #544]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 030c 	and.w	r3, r3, #12
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d00c      	beq.n	8003db8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d9e:	4b85      	ldr	r3, [pc, #532]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d112      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003daa:	4b82      	ldr	r3, [pc, #520]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003db6:	d10b      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db8:	4b7e      	ldr	r3, [pc, #504]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d05b      	beq.n	8003e7c <HAL_RCC_OscConfig+0x108>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d157      	bne.n	8003e7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e242      	b.n	8004256 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd8:	d106      	bne.n	8003de8 <HAL_RCC_OscConfig+0x74>
 8003dda:	4b76      	ldr	r3, [pc, #472]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a75      	ldr	r2, [pc, #468]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	e01d      	b.n	8003e24 <HAL_RCC_OscConfig+0xb0>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003df0:	d10c      	bne.n	8003e0c <HAL_RCC_OscConfig+0x98>
 8003df2:	4b70      	ldr	r3, [pc, #448]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a6f      	ldr	r2, [pc, #444]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	4b6d      	ldr	r3, [pc, #436]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a6c      	ldr	r2, [pc, #432]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	e00b      	b.n	8003e24 <HAL_RCC_OscConfig+0xb0>
 8003e0c:	4b69      	ldr	r3, [pc, #420]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a68      	ldr	r2, [pc, #416]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	4b66      	ldr	r3, [pc, #408]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a65      	ldr	r2, [pc, #404]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d013      	beq.n	8003e54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2c:	f7fe fc14 	bl	8002658 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e34:	f7fe fc10 	bl	8002658 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b64      	cmp	r3, #100	; 0x64
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e207      	b.n	8004256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e46:	4b5b      	ldr	r3, [pc, #364]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0xc0>
 8003e52:	e014      	b.n	8003e7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e54:	f7fe fc00 	bl	8002658 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7fe fbfc 	bl	8002658 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e1f3      	b.n	8004256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6e:	4b51      	ldr	r3, [pc, #324]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0xe8>
 8003e7a:	e000      	b.n	8003e7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d063      	beq.n	8003f52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e8a:	4b4a      	ldr	r3, [pc, #296]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00b      	beq.n	8003eae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e96:	4b47      	ldr	r3, [pc, #284]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d11c      	bne.n	8003edc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ea2:	4b44      	ldr	r3, [pc, #272]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d116      	bne.n	8003edc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eae:	4b41      	ldr	r3, [pc, #260]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d005      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x152>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d001      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e1c7      	b.n	8004256 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec6:	4b3b      	ldr	r3, [pc, #236]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4937      	ldr	r1, [pc, #220]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eda:	e03a      	b.n	8003f52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d020      	beq.n	8003f26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee4:	4b34      	ldr	r3, [pc, #208]	; (8003fb8 <HAL_RCC_OscConfig+0x244>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eea:	f7fe fbb5 	bl	8002658 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ef2:	f7fe fbb1 	bl	8002658 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e1a8      	b.n	8004256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f04:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f0      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f10:	4b28      	ldr	r3, [pc, #160]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4925      	ldr	r1, [pc, #148]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	600b      	str	r3, [r1, #0]
 8003f24:	e015      	b.n	8003f52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f26:	4b24      	ldr	r3, [pc, #144]	; (8003fb8 <HAL_RCC_OscConfig+0x244>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fe fb94 	bl	8002658 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f34:	f7fe fb90 	bl	8002658 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e187      	b.n	8004256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f46:	4b1b      	ldr	r3, [pc, #108]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d036      	beq.n	8003fcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d016      	beq.n	8003f94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f66:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <HAL_RCC_OscConfig+0x248>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6c:	f7fe fb74 	bl	8002658 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f74:	f7fe fb70 	bl	8002658 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e167      	b.n	8004256 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f86:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <HAL_RCC_OscConfig+0x240>)
 8003f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0f0      	beq.n	8003f74 <HAL_RCC_OscConfig+0x200>
 8003f92:	e01b      	b.n	8003fcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f94:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <HAL_RCC_OscConfig+0x248>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f9a:	f7fe fb5d 	bl	8002658 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa0:	e00e      	b.n	8003fc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fa2:	f7fe fb59 	bl	8002658 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d907      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e150      	b.n	8004256 <HAL_RCC_OscConfig+0x4e2>
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	42470000 	.word	0x42470000
 8003fbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc0:	4b88      	ldr	r3, [pc, #544]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 8003fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1ea      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 8097 	beq.w	8004108 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fde:	4b81      	ldr	r3, [pc, #516]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10f      	bne.n	800400a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	4b7d      	ldr	r3, [pc, #500]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	4a7c      	ldr	r2, [pc, #496]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 8003ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8003ffa:	4b7a      	ldr	r3, [pc, #488]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004006:	2301      	movs	r3, #1
 8004008:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400a:	4b77      	ldr	r3, [pc, #476]	; (80041e8 <HAL_RCC_OscConfig+0x474>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004012:	2b00      	cmp	r3, #0
 8004014:	d118      	bne.n	8004048 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004016:	4b74      	ldr	r3, [pc, #464]	; (80041e8 <HAL_RCC_OscConfig+0x474>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a73      	ldr	r2, [pc, #460]	; (80041e8 <HAL_RCC_OscConfig+0x474>)
 800401c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004022:	f7fe fb19 	bl	8002658 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800402a:	f7fe fb15 	bl	8002658 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e10c      	b.n	8004256 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403c:	4b6a      	ldr	r3, [pc, #424]	; (80041e8 <HAL_RCC_OscConfig+0x474>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0f0      	beq.n	800402a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d106      	bne.n	800405e <HAL_RCC_OscConfig+0x2ea>
 8004050:	4b64      	ldr	r3, [pc, #400]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 8004052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004054:	4a63      	ldr	r2, [pc, #396]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	6713      	str	r3, [r2, #112]	; 0x70
 800405c:	e01c      	b.n	8004098 <HAL_RCC_OscConfig+0x324>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	2b05      	cmp	r3, #5
 8004064:	d10c      	bne.n	8004080 <HAL_RCC_OscConfig+0x30c>
 8004066:	4b5f      	ldr	r3, [pc, #380]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406a:	4a5e      	ldr	r2, [pc, #376]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 800406c:	f043 0304 	orr.w	r3, r3, #4
 8004070:	6713      	str	r3, [r2, #112]	; 0x70
 8004072:	4b5c      	ldr	r3, [pc, #368]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	4a5b      	ldr	r2, [pc, #364]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	6713      	str	r3, [r2, #112]	; 0x70
 800407e:	e00b      	b.n	8004098 <HAL_RCC_OscConfig+0x324>
 8004080:	4b58      	ldr	r3, [pc, #352]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 8004082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004084:	4a57      	ldr	r2, [pc, #348]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 8004086:	f023 0301 	bic.w	r3, r3, #1
 800408a:	6713      	str	r3, [r2, #112]	; 0x70
 800408c:	4b55      	ldr	r3, [pc, #340]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 800408e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004090:	4a54      	ldr	r2, [pc, #336]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 8004092:	f023 0304 	bic.w	r3, r3, #4
 8004096:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d015      	beq.n	80040cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a0:	f7fe fada 	bl	8002658 <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a6:	e00a      	b.n	80040be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a8:	f7fe fad6 	bl	8002658 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e0cb      	b.n	8004256 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040be:	4b49      	ldr	r3, [pc, #292]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0ee      	beq.n	80040a8 <HAL_RCC_OscConfig+0x334>
 80040ca:	e014      	b.n	80040f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040cc:	f7fe fac4 	bl	8002658 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d2:	e00a      	b.n	80040ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d4:	f7fe fac0 	bl	8002658 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e0b5      	b.n	8004256 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ea:	4b3e      	ldr	r3, [pc, #248]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 80040ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1ee      	bne.n	80040d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040f6:	7dfb      	ldrb	r3, [r7, #23]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d105      	bne.n	8004108 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040fc:	4b39      	ldr	r3, [pc, #228]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	4a38      	ldr	r2, [pc, #224]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 8004102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004106:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 80a1 	beq.w	8004254 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004112:	4b34      	ldr	r3, [pc, #208]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 030c 	and.w	r3, r3, #12
 800411a:	2b08      	cmp	r3, #8
 800411c:	d05c      	beq.n	80041d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d141      	bne.n	80041aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004126:	4b31      	ldr	r3, [pc, #196]	; (80041ec <HAL_RCC_OscConfig+0x478>)
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412c:	f7fe fa94 	bl	8002658 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004134:	f7fe fa90 	bl	8002658 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e087      	b.n	8004256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004146:	4b27      	ldr	r3, [pc, #156]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69da      	ldr	r2, [r3, #28]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	019b      	lsls	r3, r3, #6
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004168:	085b      	lsrs	r3, r3, #1
 800416a:	3b01      	subs	r3, #1
 800416c:	041b      	lsls	r3, r3, #16
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	061b      	lsls	r3, r3, #24
 8004176:	491b      	ldr	r1, [pc, #108]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 8004178:	4313      	orrs	r3, r2
 800417a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800417c:	4b1b      	ldr	r3, [pc, #108]	; (80041ec <HAL_RCC_OscConfig+0x478>)
 800417e:	2201      	movs	r2, #1
 8004180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004182:	f7fe fa69 	bl	8002658 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800418a:	f7fe fa65 	bl	8002658 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e05c      	b.n	8004256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800419c:	4b11      	ldr	r3, [pc, #68]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <HAL_RCC_OscConfig+0x416>
 80041a8:	e054      	b.n	8004254 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041aa:	4b10      	ldr	r3, [pc, #64]	; (80041ec <HAL_RCC_OscConfig+0x478>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b0:	f7fe fa52 	bl	8002658 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b8:	f7fe fa4e 	bl	8002658 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e045      	b.n	8004256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ca:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <HAL_RCC_OscConfig+0x470>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0x444>
 80041d6:	e03d      	b.n	8004254 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d107      	bne.n	80041f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e038      	b.n	8004256 <HAL_RCC_OscConfig+0x4e2>
 80041e4:	40023800 	.word	0x40023800
 80041e8:	40007000 	.word	0x40007000
 80041ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041f0:	4b1b      	ldr	r3, [pc, #108]	; (8004260 <HAL_RCC_OscConfig+0x4ec>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d028      	beq.n	8004250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004208:	429a      	cmp	r2, r3
 800420a:	d121      	bne.n	8004250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004216:	429a      	cmp	r2, r3
 8004218:	d11a      	bne.n	8004250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004220:	4013      	ands	r3, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004226:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004228:	4293      	cmp	r3, r2
 800422a:	d111      	bne.n	8004250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	085b      	lsrs	r3, r3, #1
 8004238:	3b01      	subs	r3, #1
 800423a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800423c:	429a      	cmp	r2, r3
 800423e:	d107      	bne.n	8004250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e000      	b.n	8004256 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40023800 	.word	0x40023800

08004264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0cc      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004278:	4b68      	ldr	r3, [pc, #416]	; (800441c <HAL_RCC_ClockConfig+0x1b8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d90c      	bls.n	80042a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004286:	4b65      	ldr	r3, [pc, #404]	; (800441c <HAL_RCC_ClockConfig+0x1b8>)
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800428e:	4b63      	ldr	r3, [pc, #396]	; (800441c <HAL_RCC_ClockConfig+0x1b8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d001      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0b8      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d020      	beq.n	80042ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042b8:	4b59      	ldr	r3, [pc, #356]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	4a58      	ldr	r2, [pc, #352]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042d0:	4b53      	ldr	r3, [pc, #332]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	4a52      	ldr	r2, [pc, #328]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042dc:	4b50      	ldr	r3, [pc, #320]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	494d      	ldr	r1, [pc, #308]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d044      	beq.n	8004384 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d107      	bne.n	8004312 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004302:	4b47      	ldr	r3, [pc, #284]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d119      	bne.n	8004342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e07f      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d003      	beq.n	8004322 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800431e:	2b03      	cmp	r3, #3
 8004320:	d107      	bne.n	8004332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004322:	4b3f      	ldr	r3, [pc, #252]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e06f      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004332:	4b3b      	ldr	r3, [pc, #236]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e067      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004342:	4b37      	ldr	r3, [pc, #220]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f023 0203 	bic.w	r2, r3, #3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	4934      	ldr	r1, [pc, #208]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	4313      	orrs	r3, r2
 8004352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004354:	f7fe f980 	bl	8002658 <HAL_GetTick>
 8004358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435a:	e00a      	b.n	8004372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800435c:	f7fe f97c 	bl	8002658 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	f241 3288 	movw	r2, #5000	; 0x1388
 800436a:	4293      	cmp	r3, r2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e04f      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004372:	4b2b      	ldr	r3, [pc, #172]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 020c 	and.w	r2, r3, #12
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	429a      	cmp	r2, r3
 8004382:	d1eb      	bne.n	800435c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004384:	4b25      	ldr	r3, [pc, #148]	; (800441c <HAL_RCC_ClockConfig+0x1b8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d20c      	bcs.n	80043ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004392:	4b22      	ldr	r3, [pc, #136]	; (800441c <HAL_RCC_ClockConfig+0x1b8>)
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800439a:	4b20      	ldr	r3, [pc, #128]	; (800441c <HAL_RCC_ClockConfig+0x1b8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d001      	beq.n	80043ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e032      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b8:	4b19      	ldr	r3, [pc, #100]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4916      	ldr	r1, [pc, #88]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043d6:	4b12      	ldr	r3, [pc, #72]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	490e      	ldr	r1, [pc, #56]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043ea:	f000 f821 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 80043ee:	4602      	mov	r2, r0
 80043f0:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	091b      	lsrs	r3, r3, #4
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	490a      	ldr	r1, [pc, #40]	; (8004424 <HAL_RCC_ClockConfig+0x1c0>)
 80043fc:	5ccb      	ldrb	r3, [r1, r3]
 80043fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004402:	4a09      	ldr	r2, [pc, #36]	; (8004428 <HAL_RCC_ClockConfig+0x1c4>)
 8004404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004406:	4b09      	ldr	r3, [pc, #36]	; (800442c <HAL_RCC_ClockConfig+0x1c8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f7fd fd74 	bl	8001ef8 <HAL_InitTick>

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40023c00 	.word	0x40023c00
 8004420:	40023800 	.word	0x40023800
 8004424:	0800c2ec 	.word	0x0800c2ec
 8004428:	20000000 	.word	0x20000000
 800442c:	20000004 	.word	0x20000004

08004430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004434:	b090      	sub	sp, #64	; 0x40
 8004436:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	637b      	str	r3, [r7, #52]	; 0x34
 800443c:	2300      	movs	r3, #0
 800443e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004440:	2300      	movs	r3, #0
 8004442:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004448:	4b59      	ldr	r3, [pc, #356]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 030c 	and.w	r3, r3, #12
 8004450:	2b08      	cmp	r3, #8
 8004452:	d00d      	beq.n	8004470 <HAL_RCC_GetSysClockFreq+0x40>
 8004454:	2b08      	cmp	r3, #8
 8004456:	f200 80a1 	bhi.w	800459c <HAL_RCC_GetSysClockFreq+0x16c>
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_RCC_GetSysClockFreq+0x34>
 800445e:	2b04      	cmp	r3, #4
 8004460:	d003      	beq.n	800446a <HAL_RCC_GetSysClockFreq+0x3a>
 8004462:	e09b      	b.n	800459c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004464:	4b53      	ldr	r3, [pc, #332]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004466:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004468:	e09b      	b.n	80045a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800446a:	4b53      	ldr	r3, [pc, #332]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800446c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800446e:	e098      	b.n	80045a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004470:	4b4f      	ldr	r3, [pc, #316]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004478:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800447a:	4b4d      	ldr	r3, [pc, #308]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d028      	beq.n	80044d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004486:	4b4a      	ldr	r3, [pc, #296]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	099b      	lsrs	r3, r3, #6
 800448c:	2200      	movs	r2, #0
 800448e:	623b      	str	r3, [r7, #32]
 8004490:	627a      	str	r2, [r7, #36]	; 0x24
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004498:	2100      	movs	r1, #0
 800449a:	4b47      	ldr	r3, [pc, #284]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800449c:	fb03 f201 	mul.w	r2, r3, r1
 80044a0:	2300      	movs	r3, #0
 80044a2:	fb00 f303 	mul.w	r3, r0, r3
 80044a6:	4413      	add	r3, r2
 80044a8:	4a43      	ldr	r2, [pc, #268]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80044aa:	fba0 1202 	umull	r1, r2, r0, r2
 80044ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044b0:	460a      	mov	r2, r1
 80044b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80044b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044b6:	4413      	add	r3, r2
 80044b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044bc:	2200      	movs	r2, #0
 80044be:	61bb      	str	r3, [r7, #24]
 80044c0:	61fa      	str	r2, [r7, #28]
 80044c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80044ca:	f7fc fb75 	bl	8000bb8 <__aeabi_uldivmod>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4613      	mov	r3, r2
 80044d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044d6:	e053      	b.n	8004580 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d8:	4b35      	ldr	r3, [pc, #212]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	099b      	lsrs	r3, r3, #6
 80044de:	2200      	movs	r2, #0
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	617a      	str	r2, [r7, #20]
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80044ea:	f04f 0b00 	mov.w	fp, #0
 80044ee:	4652      	mov	r2, sl
 80044f0:	465b      	mov	r3, fp
 80044f2:	f04f 0000 	mov.w	r0, #0
 80044f6:	f04f 0100 	mov.w	r1, #0
 80044fa:	0159      	lsls	r1, r3, #5
 80044fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004500:	0150      	lsls	r0, r2, #5
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	ebb2 080a 	subs.w	r8, r2, sl
 800450a:	eb63 090b 	sbc.w	r9, r3, fp
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800451a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800451e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004522:	ebb2 0408 	subs.w	r4, r2, r8
 8004526:	eb63 0509 	sbc.w	r5, r3, r9
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	f04f 0300 	mov.w	r3, #0
 8004532:	00eb      	lsls	r3, r5, #3
 8004534:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004538:	00e2      	lsls	r2, r4, #3
 800453a:	4614      	mov	r4, r2
 800453c:	461d      	mov	r5, r3
 800453e:	eb14 030a 	adds.w	r3, r4, sl
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	eb45 030b 	adc.w	r3, r5, fp
 8004548:	607b      	str	r3, [r7, #4]
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004556:	4629      	mov	r1, r5
 8004558:	028b      	lsls	r3, r1, #10
 800455a:	4621      	mov	r1, r4
 800455c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004560:	4621      	mov	r1, r4
 8004562:	028a      	lsls	r2, r1, #10
 8004564:	4610      	mov	r0, r2
 8004566:	4619      	mov	r1, r3
 8004568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800456a:	2200      	movs	r2, #0
 800456c:	60bb      	str	r3, [r7, #8]
 800456e:	60fa      	str	r2, [r7, #12]
 8004570:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004574:	f7fc fb20 	bl	8000bb8 <__aeabi_uldivmod>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4613      	mov	r3, r2
 800457e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	0c1b      	lsrs	r3, r3, #16
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	3301      	adds	r3, #1
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004590:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004594:	fbb2 f3f3 	udiv	r3, r2, r3
 8004598:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800459a:	e002      	b.n	80045a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800459c:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800459e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3740      	adds	r7, #64	; 0x40
 80045a8:	46bd      	mov	sp, r7
 80045aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ae:	bf00      	nop
 80045b0:	40023800 	.word	0x40023800
 80045b4:	00f42400 	.word	0x00f42400
 80045b8:	017d7840 	.word	0x017d7840

080045bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045c0:	4b03      	ldr	r3, [pc, #12]	; (80045d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045c2:	681b      	ldr	r3, [r3, #0]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000000 	.word	0x20000000

080045d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045d8:	f7ff fff0 	bl	80045bc <HAL_RCC_GetHCLKFreq>
 80045dc:	4602      	mov	r2, r0
 80045de:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	0a9b      	lsrs	r3, r3, #10
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	4903      	ldr	r1, [pc, #12]	; (80045f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ea:	5ccb      	ldrb	r3, [r1, r3]
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40023800 	.word	0x40023800
 80045f8:	0800c2fc 	.word	0x0800c2fc

080045fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004600:	f7ff ffdc 	bl	80045bc <HAL_RCC_GetHCLKFreq>
 8004604:	4602      	mov	r2, r0
 8004606:	4b05      	ldr	r3, [pc, #20]	; (800461c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	0b5b      	lsrs	r3, r3, #13
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	4903      	ldr	r1, [pc, #12]	; (8004620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004612:	5ccb      	ldrb	r3, [r1, r3]
 8004614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004618:	4618      	mov	r0, r3
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40023800 	.word	0x40023800
 8004620:	0800c2fc 	.word	0x0800c2fc

08004624 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	220f      	movs	r2, #15
 8004632:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004634:	4b12      	ldr	r3, [pc, #72]	; (8004680 <HAL_RCC_GetClockConfig+0x5c>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 0203 	and.w	r2, r3, #3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004640:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <HAL_RCC_GetClockConfig+0x5c>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800464c:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <HAL_RCC_GetClockConfig+0x5c>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004658:	4b09      	ldr	r3, [pc, #36]	; (8004680 <HAL_RCC_GetClockConfig+0x5c>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	08db      	lsrs	r3, r3, #3
 800465e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004666:	4b07      	ldr	r3, [pc, #28]	; (8004684 <HAL_RCC_GetClockConfig+0x60>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0207 	and.w	r2, r3, #7
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	601a      	str	r2, [r3, #0]
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40023800 	.word	0x40023800
 8004684:	40023c00 	.word	0x40023c00

08004688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e041      	b.n	800471e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fd fe42 	bl	8002338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4619      	mov	r1, r3
 80046c6:	4610      	mov	r0, r2
 80046c8:	f000 fa88 	bl	8004bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b01      	cmp	r3, #1
 800473a:	d001      	beq.n	8004740 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e044      	b.n	80047ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a1e      	ldr	r2, [pc, #120]	; (80047d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d018      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x6c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476a:	d013      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x6c>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1a      	ldr	r2, [pc, #104]	; (80047dc <HAL_TIM_Base_Start_IT+0xb4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00e      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x6c>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a19      	ldr	r2, [pc, #100]	; (80047e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d009      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x6c>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a17      	ldr	r2, [pc, #92]	; (80047e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d004      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x6c>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a16      	ldr	r2, [pc, #88]	; (80047e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d111      	bne.n	80047b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b06      	cmp	r3, #6
 80047a4:	d010      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0201 	orr.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b6:	e007      	b.n	80047c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0201 	orr.w	r2, r2, #1
 80047c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40010000 	.word	0x40010000
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40000800 	.word	0x40000800
 80047e4:	40000c00 	.word	0x40000c00
 80047e8:	40014000 	.word	0x40014000

080047ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d122      	bne.n	8004848 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b02      	cmp	r3, #2
 800480e:	d11b      	bne.n	8004848 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0202 	mvn.w	r2, #2
 8004818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f9b5 	bl	8004b9e <HAL_TIM_IC_CaptureCallback>
 8004834:	e005      	b.n	8004842 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f9a7 	bl	8004b8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f9b8 	bl	8004bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b04      	cmp	r3, #4
 8004854:	d122      	bne.n	800489c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b04      	cmp	r3, #4
 8004862:	d11b      	bne.n	800489c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0204 	mvn.w	r2, #4
 800486c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2202      	movs	r2, #2
 8004872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f98b 	bl	8004b9e <HAL_TIM_IC_CaptureCallback>
 8004888:	e005      	b.n	8004896 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f97d 	bl	8004b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f98e 	bl	8004bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d122      	bne.n	80048f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d11b      	bne.n	80048f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0208 	mvn.w	r2, #8
 80048c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2204      	movs	r2, #4
 80048c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f961 	bl	8004b9e <HAL_TIM_IC_CaptureCallback>
 80048dc:	e005      	b.n	80048ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f953 	bl	8004b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f964 	bl	8004bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f003 0310 	and.w	r3, r3, #16
 80048fa:	2b10      	cmp	r3, #16
 80048fc:	d122      	bne.n	8004944 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2b10      	cmp	r3, #16
 800490a:	d11b      	bne.n	8004944 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0210 	mvn.w	r2, #16
 8004914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2208      	movs	r2, #8
 800491a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f937 	bl	8004b9e <HAL_TIM_IC_CaptureCallback>
 8004930:	e005      	b.n	800493e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f929 	bl	8004b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f93a 	bl	8004bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b01      	cmp	r3, #1
 8004950:	d10e      	bne.n	8004970 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b01      	cmp	r3, #1
 800495e:	d107      	bne.n	8004970 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0201 	mvn.w	r2, #1
 8004968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fd fa80 	bl	8001e70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497a:	2b80      	cmp	r3, #128	; 0x80
 800497c:	d10e      	bne.n	800499c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004988:	2b80      	cmp	r3, #128	; 0x80
 800498a:	d107      	bne.n	800499c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fab2 	bl	8004f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d10e      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b4:	2b40      	cmp	r3, #64	; 0x40
 80049b6:	d107      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f8ff 	bl	8004bc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b20      	cmp	r3, #32
 80049d4:	d10e      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0320 	and.w	r3, r3, #32
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	d107      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0220 	mvn.w	r2, #32
 80049ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fa7c 	bl	8004eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049f4:	bf00      	nop
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_TIM_ConfigClockSource+0x1c>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e0b4      	b.n	8004b82 <HAL_TIM_ConfigClockSource+0x186>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a50:	d03e      	beq.n	8004ad0 <HAL_TIM_ConfigClockSource+0xd4>
 8004a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a56:	f200 8087 	bhi.w	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5e:	f000 8086 	beq.w	8004b6e <HAL_TIM_ConfigClockSource+0x172>
 8004a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a66:	d87f      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a68:	2b70      	cmp	r3, #112	; 0x70
 8004a6a:	d01a      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0xa6>
 8004a6c:	2b70      	cmp	r3, #112	; 0x70
 8004a6e:	d87b      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a70:	2b60      	cmp	r3, #96	; 0x60
 8004a72:	d050      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0x11a>
 8004a74:	2b60      	cmp	r3, #96	; 0x60
 8004a76:	d877      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a78:	2b50      	cmp	r3, #80	; 0x50
 8004a7a:	d03c      	beq.n	8004af6 <HAL_TIM_ConfigClockSource+0xfa>
 8004a7c:	2b50      	cmp	r3, #80	; 0x50
 8004a7e:	d873      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a80:	2b40      	cmp	r3, #64	; 0x40
 8004a82:	d058      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x13a>
 8004a84:	2b40      	cmp	r3, #64	; 0x40
 8004a86:	d86f      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a88:	2b30      	cmp	r3, #48	; 0x30
 8004a8a:	d064      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x15a>
 8004a8c:	2b30      	cmp	r3, #48	; 0x30
 8004a8e:	d86b      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	d060      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x15a>
 8004a94:	2b20      	cmp	r3, #32
 8004a96:	d867      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d05c      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x15a>
 8004a9c:	2b10      	cmp	r3, #16
 8004a9e:	d05a      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x15a>
 8004aa0:	e062      	b.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6899      	ldr	r1, [r3, #8]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f000 f98d 	bl	8004dd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ac4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	609a      	str	r2, [r3, #8]
      break;
 8004ace:	e04f      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6818      	ldr	r0, [r3, #0]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	6899      	ldr	r1, [r3, #8]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f000 f976 	bl	8004dd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004af2:	609a      	str	r2, [r3, #8]
      break;
 8004af4:	e03c      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6818      	ldr	r0, [r3, #0]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	6859      	ldr	r1, [r3, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	461a      	mov	r2, r3
 8004b04:	f000 f8ea 	bl	8004cdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2150      	movs	r1, #80	; 0x50
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 f943 	bl	8004d9a <TIM_ITRx_SetConfig>
      break;
 8004b14:	e02c      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6818      	ldr	r0, [r3, #0]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	6859      	ldr	r1, [r3, #4]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	461a      	mov	r2, r3
 8004b24:	f000 f909 	bl	8004d3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2160      	movs	r1, #96	; 0x60
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 f933 	bl	8004d9a <TIM_ITRx_SetConfig>
      break;
 8004b34:	e01c      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	6859      	ldr	r1, [r3, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	461a      	mov	r2, r3
 8004b44:	f000 f8ca 	bl	8004cdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2140      	movs	r1, #64	; 0x40
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 f923 	bl	8004d9a <TIM_ITRx_SetConfig>
      break;
 8004b54:	e00c      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4610      	mov	r0, r2
 8004b62:	f000 f91a 	bl	8004d9a <TIM_ITRx_SetConfig>
      break;
 8004b66:	e003      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b6c:	e000      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
	...

08004bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a34      	ldr	r2, [pc, #208]	; (8004cc0 <TIM_Base_SetConfig+0xe4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00f      	beq.n	8004c14 <TIM_Base_SetConfig+0x38>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfa:	d00b      	beq.n	8004c14 <TIM_Base_SetConfig+0x38>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a31      	ldr	r2, [pc, #196]	; (8004cc4 <TIM_Base_SetConfig+0xe8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d007      	beq.n	8004c14 <TIM_Base_SetConfig+0x38>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a30      	ldr	r2, [pc, #192]	; (8004cc8 <TIM_Base_SetConfig+0xec>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d003      	beq.n	8004c14 <TIM_Base_SetConfig+0x38>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a2f      	ldr	r2, [pc, #188]	; (8004ccc <TIM_Base_SetConfig+0xf0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d108      	bne.n	8004c26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a25      	ldr	r2, [pc, #148]	; (8004cc0 <TIM_Base_SetConfig+0xe4>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d01b      	beq.n	8004c66 <TIM_Base_SetConfig+0x8a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c34:	d017      	beq.n	8004c66 <TIM_Base_SetConfig+0x8a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a22      	ldr	r2, [pc, #136]	; (8004cc4 <TIM_Base_SetConfig+0xe8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d013      	beq.n	8004c66 <TIM_Base_SetConfig+0x8a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a21      	ldr	r2, [pc, #132]	; (8004cc8 <TIM_Base_SetConfig+0xec>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00f      	beq.n	8004c66 <TIM_Base_SetConfig+0x8a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a20      	ldr	r2, [pc, #128]	; (8004ccc <TIM_Base_SetConfig+0xf0>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00b      	beq.n	8004c66 <TIM_Base_SetConfig+0x8a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a1f      	ldr	r2, [pc, #124]	; (8004cd0 <TIM_Base_SetConfig+0xf4>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d007      	beq.n	8004c66 <TIM_Base_SetConfig+0x8a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a1e      	ldr	r2, [pc, #120]	; (8004cd4 <TIM_Base_SetConfig+0xf8>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d003      	beq.n	8004c66 <TIM_Base_SetConfig+0x8a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a1d      	ldr	r2, [pc, #116]	; (8004cd8 <TIM_Base_SetConfig+0xfc>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d108      	bne.n	8004c78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a08      	ldr	r2, [pc, #32]	; (8004cc0 <TIM_Base_SetConfig+0xe4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d103      	bne.n	8004cac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	691a      	ldr	r2, [r3, #16]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	615a      	str	r2, [r3, #20]
}
 8004cb2:	bf00      	nop
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40010000 	.word	0x40010000
 8004cc4:	40000400 	.word	0x40000400
 8004cc8:	40000800 	.word	0x40000800
 8004ccc:	40000c00 	.word	0x40000c00
 8004cd0:	40014000 	.word	0x40014000
 8004cd4:	40014400 	.word	0x40014400
 8004cd8:	40014800 	.word	0x40014800

08004cdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	f023 0201 	bic.w	r2, r3, #1
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f023 030a 	bic.w	r3, r3, #10
 8004d18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	621a      	str	r2, [r3, #32]
}
 8004d2e:	bf00      	nop
 8004d30:	371c      	adds	r7, #28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b087      	sub	sp, #28
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f023 0210 	bic.w	r2, r3, #16
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	031b      	lsls	r3, r3, #12
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	621a      	str	r2, [r3, #32]
}
 8004d8e:	bf00      	nop
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f043 0307 	orr.w	r3, r3, #7
 8004dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	609a      	str	r2, [r3, #8]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	021a      	lsls	r2, r3, #8
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	609a      	str	r2, [r3, #8]
}
 8004e04:	bf00      	nop
 8004e06:	371c      	adds	r7, #28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e24:	2302      	movs	r3, #2
 8004e26:	e050      	b.n	8004eca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a1c      	ldr	r2, [pc, #112]	; (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d018      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e74:	d013      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a18      	ldr	r2, [pc, #96]	; (8004edc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00e      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a16      	ldr	r2, [pc, #88]	; (8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d009      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a15      	ldr	r2, [pc, #84]	; (8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d004      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a13      	ldr	r2, [pc, #76]	; (8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40010000 	.word	0x40010000
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40000800 	.word	0x40000800
 8004ee4:	40000c00 	.word	0x40000c00
 8004ee8:	40014000 	.word	0x40014000

08004eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e03f      	b.n	8004fa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fd fa74 	bl	8002428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2224      	movs	r2, #36	; 0x24
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 ff9b 	bl	8005e94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695a      	ldr	r2, [r3, #20]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b08a      	sub	sp, #40	; 0x28
 8004fb2:	af02      	add	r7, sp, #8
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	603b      	str	r3, [r7, #0]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d17c      	bne.n	80050c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <HAL_UART_Transmit+0x2c>
 8004fd4:	88fb      	ldrh	r3, [r7, #6]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e075      	b.n	80050ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <HAL_UART_Transmit+0x3e>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e06e      	b.n	80050ca <HAL_UART_Transmit+0x11c>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2221      	movs	r2, #33	; 0x21
 8004ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005002:	f7fd fb29 	bl	8002658 <HAL_GetTick>
 8005006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	88fa      	ldrh	r2, [r7, #6]
 800500c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	88fa      	ldrh	r2, [r7, #6]
 8005012:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501c:	d108      	bne.n	8005030 <HAL_UART_Transmit+0x82>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d104      	bne.n	8005030 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005026:	2300      	movs	r3, #0
 8005028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	e003      	b.n	8005038 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005034:	2300      	movs	r3, #0
 8005036:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005040:	e02a      	b.n	8005098 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2200      	movs	r2, #0
 800504a:	2180      	movs	r1, #128	; 0x80
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 fc53 	bl	80058f8 <UART_WaitOnFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e036      	b.n	80050ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10b      	bne.n	800507a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005070:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	3302      	adds	r3, #2
 8005076:	61bb      	str	r3, [r7, #24]
 8005078:	e007      	b.n	800508a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	781a      	ldrb	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	3301      	adds	r3, #1
 8005088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1cf      	bne.n	8005042 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2200      	movs	r2, #0
 80050aa:	2140      	movs	r1, #64	; 0x40
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 fc23 	bl	80058f8 <UART_WaitOnFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e006      	b.n	80050ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	e000      	b.n	80050ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050c8:	2302      	movs	r3, #2
  }
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3720      	adds	r7, #32
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b08c      	sub	sp, #48	; 0x30
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	4613      	mov	r3, r2
 80050de:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d152      	bne.n	8005192 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e04b      	b.n	8005194 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005102:	2b01      	cmp	r3, #1
 8005104:	d101      	bne.n	800510a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005106:	2302      	movs	r3, #2
 8005108:	e044      	b.n	8005194 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005118:	88fb      	ldrh	r3, [r7, #6]
 800511a:	461a      	mov	r2, r3
 800511c:	68b9      	ldr	r1, [r7, #8]
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fc58 	bl	80059d4 <UART_Start_Receive_DMA>
 8005124:	4603      	mov	r3, r0
 8005126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800512a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800512e:	2b00      	cmp	r3, #0
 8005130:	d12c      	bne.n	800518c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	2b01      	cmp	r3, #1
 8005138:	d125      	bne.n	8005186 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800513a:	2300      	movs	r3, #0
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	330c      	adds	r3, #12
 8005156:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	e853 3f00 	ldrex	r3, [r3]
 800515e:	617b      	str	r3, [r7, #20]
   return(result);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f043 0310 	orr.w	r3, r3, #16
 8005166:	62bb      	str	r3, [r7, #40]	; 0x28
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005170:	627a      	str	r2, [r7, #36]	; 0x24
 8005172:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005174:	6a39      	ldr	r1, [r7, #32]
 8005176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005178:	e841 2300 	strex	r3, r2, [r1]
 800517c:	61fb      	str	r3, [r7, #28]
   return(result);
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1e5      	bne.n	8005150 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005184:	e002      	b.n	800518c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800518c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005190:	e000      	b.n	8005194 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005192:	2302      	movs	r3, #2
  }
}
 8005194:	4618      	mov	r0, r3
 8005196:	3730      	adds	r7, #48	; 0x30
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b0ba      	sub	sp, #232	; 0xe8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80051da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10f      	bne.n	8005202 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d009      	beq.n	8005202 <HAL_UART_IRQHandler+0x66>
 80051ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fd8f 	bl	8005d1e <UART_Receive_IT>
      return;
 8005200:	e256      	b.n	80056b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 80de 	beq.w	80053c8 <HAL_UART_IRQHandler+0x22c>
 800520c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	d106      	bne.n	8005226 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800521c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 80d1 	beq.w	80053c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00b      	beq.n	800524a <HAL_UART_IRQHandler+0xae>
 8005232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523a:	2b00      	cmp	r3, #0
 800523c:	d005      	beq.n	800524a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f043 0201 	orr.w	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800524a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00b      	beq.n	800526e <HAL_UART_IRQHandler+0xd2>
 8005256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f043 0202 	orr.w	r2, r3, #2
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800526e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00b      	beq.n	8005292 <HAL_UART_IRQHandler+0xf6>
 800527a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d005      	beq.n	8005292 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f043 0204 	orr.w	r2, r3, #4
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d011      	beq.n	80052c2 <HAL_UART_IRQHandler+0x126>
 800529e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d105      	bne.n	80052b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	f043 0208 	orr.w	r2, r3, #8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 81ed 	beq.w	80056a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d008      	beq.n	80052ea <HAL_UART_IRQHandler+0x14e>
 80052d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052dc:	f003 0320 	and.w	r3, r3, #32
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fd1a 	bl	8005d1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f4:	2b40      	cmp	r3, #64	; 0x40
 80052f6:	bf0c      	ite	eq
 80052f8:	2301      	moveq	r3, #1
 80052fa:	2300      	movne	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d103      	bne.n	8005316 <HAL_UART_IRQHandler+0x17a>
 800530e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005312:	2b00      	cmp	r3, #0
 8005314:	d04f      	beq.n	80053b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fc22 	bl	8005b60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005326:	2b40      	cmp	r3, #64	; 0x40
 8005328:	d141      	bne.n	80053ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3314      	adds	r3, #20
 8005330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3314      	adds	r3, #20
 8005352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005356:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800535a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800536e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1d9      	bne.n	800532a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537a:	2b00      	cmp	r3, #0
 800537c:	d013      	beq.n	80053a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005382:	4a7d      	ldr	r2, [pc, #500]	; (8005578 <HAL_UART_IRQHandler+0x3dc>)
 8005384:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538a:	4618      	mov	r0, r3
 800538c:	f7fe f8ae 	bl	80034ec <HAL_DMA_Abort_IT>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d016      	beq.n	80053c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053a0:	4610      	mov	r0, r2
 80053a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a4:	e00e      	b.n	80053c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f9a4 	bl	80056f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ac:	e00a      	b.n	80053c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f9a0 	bl	80056f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b4:	e006      	b.n	80053c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f99c 	bl	80056f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80053c2:	e170      	b.n	80056a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c4:	bf00      	nop
    return;
 80053c6:	e16e      	b.n	80056a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	f040 814a 	bne.w	8005666 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d6:	f003 0310 	and.w	r3, r3, #16
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 8143 	beq.w	8005666 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e4:	f003 0310 	and.w	r3, r3, #16
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 813c 	beq.w	8005666 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053ee:	2300      	movs	r3, #0
 80053f0:	60bb      	str	r3, [r7, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60bb      	str	r3, [r7, #8]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	60bb      	str	r3, [r7, #8]
 8005402:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b40      	cmp	r3, #64	; 0x40
 8005410:	f040 80b4 	bne.w	800557c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005420:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 8140 	beq.w	80056aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800542e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005432:	429a      	cmp	r2, r3
 8005434:	f080 8139 	bcs.w	80056aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800543e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544a:	f000 8088 	beq.w	800555e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	330c      	adds	r3, #12
 8005454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800546c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	330c      	adds	r3, #12
 8005476:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800547a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800547e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005486:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800548a:	e841 2300 	strex	r3, r2, [r1]
 800548e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1d9      	bne.n	800544e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3314      	adds	r3, #20
 80054a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054ac:	f023 0301 	bic.w	r3, r3, #1
 80054b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3314      	adds	r3, #20
 80054ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1e1      	bne.n	800549a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3314      	adds	r3, #20
 80054dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3314      	adds	r3, #20
 80054f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005500:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e3      	bne.n	80054d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	330c      	adds	r3, #12
 8005522:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005526:	e853 3f00 	ldrex	r3, [r3]
 800552a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800552c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800552e:	f023 0310 	bic.w	r3, r3, #16
 8005532:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	330c      	adds	r3, #12
 800553c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005540:	65ba      	str	r2, [r7, #88]	; 0x58
 8005542:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005544:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005546:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005548:	e841 2300 	strex	r3, r2, [r1]
 800554c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800554e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1e3      	bne.n	800551c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	4618      	mov	r0, r3
 800555a:	f7fd ff57 	bl	800340c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005566:	b29b      	uxth	r3, r3
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	b29b      	uxth	r3, r3
 800556c:	4619      	mov	r1, r3
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fc fb98 	bl	8001ca4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005574:	e099      	b.n	80056aa <HAL_UART_IRQHandler+0x50e>
 8005576:	bf00      	nop
 8005578:	08005c27 	.word	0x08005c27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005584:	b29b      	uxth	r3, r3
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 808b 	beq.w	80056ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 8086 	beq.w	80056ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	330c      	adds	r3, #12
 80055a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	330c      	adds	r3, #12
 80055c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80055c6:	647a      	str	r2, [r7, #68]	; 0x44
 80055c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e3      	bne.n	80055a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3314      	adds	r3, #20
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	623b      	str	r3, [r7, #32]
   return(result);
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	f023 0301 	bic.w	r3, r3, #1
 80055f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3314      	adds	r3, #20
 80055fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055fe:	633a      	str	r2, [r7, #48]	; 0x30
 8005600:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e3      	bne.n	80055da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	330c      	adds	r3, #12
 8005626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0310 	bic.w	r3, r3, #16
 8005636:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	330c      	adds	r3, #12
 8005640:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005644:	61fa      	str	r2, [r7, #28]
 8005646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005648:	69b9      	ldr	r1, [r7, #24]
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	e841 2300 	strex	r3, r2, [r1]
 8005650:	617b      	str	r3, [r7, #20]
   return(result);
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e3      	bne.n	8005620 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fc fb20 	bl	8001ca4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005664:	e023      	b.n	80056ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800566a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566e:	2b00      	cmp	r3, #0
 8005670:	d009      	beq.n	8005686 <HAL_UART_IRQHandler+0x4ea>
 8005672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fae5 	bl	8005c4e <UART_Transmit_IT>
    return;
 8005684:	e014      	b.n	80056b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00e      	beq.n	80056b0 <HAL_UART_IRQHandler+0x514>
 8005692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d008      	beq.n	80056b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fb25 	bl	8005cee <UART_EndTransmit_IT>
    return;
 80056a4:	e004      	b.n	80056b0 <HAL_UART_IRQHandler+0x514>
    return;
 80056a6:	bf00      	nop
 80056a8:	e002      	b.n	80056b0 <HAL_UART_IRQHandler+0x514>
      return;
 80056aa:	bf00      	nop
 80056ac:	e000      	b.n	80056b0 <HAL_UART_IRQHandler+0x514>
      return;
 80056ae:	bf00      	nop
  }
}
 80056b0:	37e8      	adds	r7, #232	; 0xe8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop

080056b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b09c      	sub	sp, #112	; 0x70
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005714:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005720:	2b00      	cmp	r3, #0
 8005722:	d172      	bne.n	800580a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005726:	2200      	movs	r2, #0
 8005728:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800572a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	330c      	adds	r3, #12
 8005730:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800573a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800573c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005740:	66bb      	str	r3, [r7, #104]	; 0x68
 8005742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	330c      	adds	r3, #12
 8005748:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800574a:	65ba      	str	r2, [r7, #88]	; 0x58
 800574c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005750:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e5      	bne.n	800572a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3314      	adds	r3, #20
 8005764:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800576e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005770:	f023 0301 	bic.w	r3, r3, #1
 8005774:	667b      	str	r3, [r7, #100]	; 0x64
 8005776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3314      	adds	r3, #20
 800577c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800577e:	647a      	str	r2, [r7, #68]	; 0x44
 8005780:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005784:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800578c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e5      	bne.n	800575e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3314      	adds	r3, #20
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	623b      	str	r3, [r7, #32]
   return(result);
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a8:	663b      	str	r3, [r7, #96]	; 0x60
 80057aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3314      	adds	r3, #20
 80057b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057b2:	633a      	str	r2, [r7, #48]	; 0x30
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e5      	bne.n	8005792 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d119      	bne.n	800580a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	330c      	adds	r3, #12
 80057dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f023 0310 	bic.w	r3, r3, #16
 80057ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	330c      	adds	r3, #12
 80057f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057f6:	61fa      	str	r2, [r7, #28]
 80057f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fa:	69b9      	ldr	r1, [r7, #24]
 80057fc:	69fa      	ldr	r2, [r7, #28]
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	617b      	str	r3, [r7, #20]
   return(result);
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1e5      	bne.n	80057d6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	2b01      	cmp	r3, #1
 8005810:	d106      	bne.n	8005820 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005814:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005816:	4619      	mov	r1, r3
 8005818:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800581a:	f7fc fa43 	bl	8001ca4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800581e:	e002      	b.n	8005826 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005820:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005822:	f7ff ff53 	bl	80056cc <HAL_UART_RxCpltCallback>
}
 8005826:	bf00      	nop
 8005828:	3770      	adds	r7, #112	; 0x70
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b084      	sub	sp, #16
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005840:	2b01      	cmp	r3, #1
 8005842:	d108      	bne.n	8005856 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005848:	085b      	lsrs	r3, r3, #1
 800584a:	b29b      	uxth	r3, r3
 800584c:	4619      	mov	r1, r3
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f7fc fa28 	bl	8001ca4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005854:	e002      	b.n	800585c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f7ff ff42 	bl	80056e0 <HAL_UART_RxHalfCpltCallback>
}
 800585c:	bf00      	nop
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005874:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005880:	2b80      	cmp	r3, #128	; 0x80
 8005882:	bf0c      	ite	eq
 8005884:	2301      	moveq	r3, #1
 8005886:	2300      	movne	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b21      	cmp	r3, #33	; 0x21
 8005896:	d108      	bne.n	80058aa <UART_DMAError+0x46>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d005      	beq.n	80058aa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2200      	movs	r2, #0
 80058a2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80058a4:	68b8      	ldr	r0, [r7, #8]
 80058a6:	f000 f933 	bl	8005b10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b4:	2b40      	cmp	r3, #64	; 0x40
 80058b6:	bf0c      	ite	eq
 80058b8:	2301      	moveq	r3, #1
 80058ba:	2300      	movne	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b22      	cmp	r3, #34	; 0x22
 80058ca:	d108      	bne.n	80058de <UART_DMAError+0x7a>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2200      	movs	r2, #0
 80058d6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80058d8:	68b8      	ldr	r0, [r7, #8]
 80058da:	f000 f941 	bl	8005b60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	f043 0210 	orr.w	r2, r3, #16
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058ea:	68b8      	ldr	r0, [r7, #8]
 80058ec:	f7ff ff02 	bl	80056f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f0:	bf00      	nop
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b090      	sub	sp, #64	; 0x40
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005908:	e050      	b.n	80059ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005910:	d04c      	beq.n	80059ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005914:	2b00      	cmp	r3, #0
 8005916:	d007      	beq.n	8005928 <UART_WaitOnFlagUntilTimeout+0x30>
 8005918:	f7fc fe9e 	bl	8002658 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005924:	429a      	cmp	r2, r3
 8005926:	d241      	bcs.n	80059ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	330c      	adds	r3, #12
 800592e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	e853 3f00 	ldrex	r3, [r3]
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800593e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	330c      	adds	r3, #12
 8005946:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005948:	637a      	str	r2, [r7, #52]	; 0x34
 800594a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800594e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005950:	e841 2300 	strex	r3, r2, [r1]
 8005954:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e5      	bne.n	8005928 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3314      	adds	r3, #20
 8005962:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	e853 3f00 	ldrex	r3, [r3]
 800596a:	613b      	str	r3, [r7, #16]
   return(result);
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f023 0301 	bic.w	r3, r3, #1
 8005972:	63bb      	str	r3, [r7, #56]	; 0x38
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3314      	adds	r3, #20
 800597a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800597c:	623a      	str	r2, [r7, #32]
 800597e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	69f9      	ldr	r1, [r7, #28]
 8005982:	6a3a      	ldr	r2, [r7, #32]
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	61bb      	str	r3, [r7, #24]
   return(result);
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e5      	bne.n	800595c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2220      	movs	r2, #32
 800599c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e00f      	b.n	80059cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	4013      	ands	r3, r2
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	bf0c      	ite	eq
 80059bc:	2301      	moveq	r3, #1
 80059be:	2300      	movne	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	461a      	mov	r2, r3
 80059c4:	79fb      	ldrb	r3, [r7, #7]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d09f      	beq.n	800590a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3740      	adds	r7, #64	; 0x40
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b098      	sub	sp, #96	; 0x60
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	4613      	mov	r3, r2
 80059e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	88fa      	ldrh	r2, [r7, #6]
 80059ec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2222      	movs	r2, #34	; 0x22
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	4a40      	ldr	r2, [pc, #256]	; (8005b04 <UART_Start_Receive_DMA+0x130>)
 8005a02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	4a3f      	ldr	r2, [pc, #252]	; (8005b08 <UART_Start_Receive_DMA+0x134>)
 8005a0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a10:	4a3e      	ldr	r2, [pc, #248]	; (8005b0c <UART_Start_Receive_DMA+0x138>)
 8005a12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	2200      	movs	r2, #0
 8005a1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005a1c:	f107 0308 	add.w	r3, r7, #8
 8005a20:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	88fb      	ldrh	r3, [r7, #6]
 8005a34:	f7fd fc92 	bl	800335c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005a38:	2300      	movs	r3, #0
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	613b      	str	r3, [r7, #16]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	613b      	str	r3, [r7, #16]
 8005a4c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d019      	beq.n	8005a92 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	330c      	adds	r3, #12
 8005a64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a68:	e853 3f00 	ldrex	r3, [r3]
 8005a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a74:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	330c      	adds	r3, #12
 8005a7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a7e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005a80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005a84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e5      	bne.n	8005a5e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3314      	adds	r3, #20
 8005a98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	f043 0301 	orr.w	r3, r3, #1
 8005aa8:	657b      	str	r3, [r7, #84]	; 0x54
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3314      	adds	r3, #20
 8005ab0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ab2:	63ba      	str	r2, [r7, #56]	; 0x38
 8005ab4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005ab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e5      	bne.n	8005a92 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3314      	adds	r3, #20
 8005acc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005adc:	653b      	str	r3, [r7, #80]	; 0x50
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3314      	adds	r3, #20
 8005ae4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ae6:	627a      	str	r2, [r7, #36]	; 0x24
 8005ae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	6a39      	ldr	r1, [r7, #32]
 8005aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1e5      	bne.n	8005ac6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3760      	adds	r7, #96	; 0x60
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	08005709 	.word	0x08005709
 8005b08:	0800582f 	.word	0x0800582f
 8005b0c:	08005865 	.word	0x08005865

08005b10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b089      	sub	sp, #36	; 0x24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	330c      	adds	r3, #12
 8005b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	e853 3f00 	ldrex	r3, [r3]
 8005b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005b2e:	61fb      	str	r3, [r7, #28]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	330c      	adds	r3, #12
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	61ba      	str	r2, [r7, #24]
 8005b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3c:	6979      	ldr	r1, [r7, #20]
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	e841 2300 	strex	r3, r2, [r1]
 8005b44:	613b      	str	r3, [r7, #16]
   return(result);
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1e5      	bne.n	8005b18 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005b54:	bf00      	nop
 8005b56:	3724      	adds	r7, #36	; 0x24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b095      	sub	sp, #84	; 0x54
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	330c      	adds	r3, #12
 8005b6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	330c      	adds	r3, #12
 8005b86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b88:	643a      	str	r2, [r7, #64]	; 0x40
 8005b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e5      	bne.n	8005b68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3314      	adds	r3, #20
 8005ba2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	e853 3f00 	ldrex	r3, [r3]
 8005baa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f023 0301 	bic.w	r3, r3, #1
 8005bb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3314      	adds	r3, #20
 8005bba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bc4:	e841 2300 	strex	r3, r2, [r1]
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e5      	bne.n	8005b9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d119      	bne.n	8005c0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	330c      	adds	r3, #12
 8005bde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	e853 3f00 	ldrex	r3, [r3]
 8005be6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f023 0310 	bic.w	r3, r3, #16
 8005bee:	647b      	str	r3, [r7, #68]	; 0x44
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bf8:	61ba      	str	r2, [r7, #24]
 8005bfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfc:	6979      	ldr	r1, [r7, #20]
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	e841 2300 	strex	r3, r2, [r1]
 8005c04:	613b      	str	r3, [r7, #16]
   return(result);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1e5      	bne.n	8005bd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c1a:	bf00      	nop
 8005c1c:	3754      	adds	r7, #84	; 0x54
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f7ff fd57 	bl	80056f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c46:	bf00      	nop
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b085      	sub	sp, #20
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b21      	cmp	r3, #33	; 0x21
 8005c60:	d13e      	bne.n	8005ce0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6a:	d114      	bne.n	8005c96 <UART_Transmit_IT+0x48>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d110      	bne.n	8005c96 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	1c9a      	adds	r2, r3, #2
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	621a      	str	r2, [r3, #32]
 8005c94:	e008      	b.n	8005ca8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	1c59      	adds	r1, r3, #1
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6211      	str	r1, [r2, #32]
 8005ca0:	781a      	ldrb	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10f      	bne.n	8005cdc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e000      	b.n	8005ce2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ce0:	2302      	movs	r3, #2
  }
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff fcd2 	bl	80056b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b08c      	sub	sp, #48	; 0x30
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b22      	cmp	r3, #34	; 0x22
 8005d30:	f040 80ab 	bne.w	8005e8a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3c:	d117      	bne.n	8005d6e <UART_Receive_IT+0x50>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d113      	bne.n	8005d6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d66:	1c9a      	adds	r2, r3, #2
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	629a      	str	r2, [r3, #40]	; 0x28
 8005d6c:	e026      	b.n	8005dbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d80:	d007      	beq.n	8005d92 <UART_Receive_IT+0x74>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10a      	bne.n	8005da0 <UART_Receive_IT+0x82>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d106      	bne.n	8005da0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	e008      	b.n	8005db2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db6:	1c5a      	adds	r2, r3, #1
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d15a      	bne.n	8005e86 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0220 	bic.w	r2, r2, #32
 8005dde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	695a      	ldr	r2, [r3, #20]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0201 	bic.w	r2, r2, #1
 8005dfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2220      	movs	r2, #32
 8005e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d135      	bne.n	8005e7c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	330c      	adds	r3, #12
 8005e1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	613b      	str	r3, [r7, #16]
   return(result);
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f023 0310 	bic.w	r3, r3, #16
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	330c      	adds	r3, #12
 8005e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e36:	623a      	str	r2, [r7, #32]
 8005e38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	69f9      	ldr	r1, [r7, #28]
 8005e3c:	6a3a      	ldr	r2, [r7, #32]
 8005e3e:	e841 2300 	strex	r3, r2, [r1]
 8005e42:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1e5      	bne.n	8005e16 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0310 	and.w	r3, r3, #16
 8005e54:	2b10      	cmp	r3, #16
 8005e56:	d10a      	bne.n	8005e6e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7fb ff15 	bl	8001ca4 <HAL_UARTEx_RxEventCallback>
 8005e7a:	e002      	b.n	8005e82 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff fc25 	bl	80056cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	e002      	b.n	8005e8c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	e000      	b.n	8005e8c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e8a:	2302      	movs	r3, #2
  }
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3730      	adds	r7, #48	; 0x30
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e98:	b0c0      	sub	sp, #256	; 0x100
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb0:	68d9      	ldr	r1, [r3, #12]
 8005eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	ea40 0301 	orr.w	r3, r0, r1
 8005ebc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005eec:	f021 010c 	bic.w	r1, r1, #12
 8005ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005efa:	430b      	orrs	r3, r1
 8005efc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0e:	6999      	ldr	r1, [r3, #24]
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	ea40 0301 	orr.w	r3, r0, r1
 8005f1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	4b8f      	ldr	r3, [pc, #572]	; (8006160 <UART_SetConfig+0x2cc>)
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d005      	beq.n	8005f34 <UART_SetConfig+0xa0>
 8005f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	4b8d      	ldr	r3, [pc, #564]	; (8006164 <UART_SetConfig+0x2d0>)
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d104      	bne.n	8005f3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f34:	f7fe fb62 	bl	80045fc <HAL_RCC_GetPCLK2Freq>
 8005f38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f3c:	e003      	b.n	8005f46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f3e:	f7fe fb49 	bl	80045d4 <HAL_RCC_GetPCLK1Freq>
 8005f42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f50:	f040 810c 	bne.w	800616c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f66:	4622      	mov	r2, r4
 8005f68:	462b      	mov	r3, r5
 8005f6a:	1891      	adds	r1, r2, r2
 8005f6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f6e:	415b      	adcs	r3, r3
 8005f70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f76:	4621      	mov	r1, r4
 8005f78:	eb12 0801 	adds.w	r8, r2, r1
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	eb43 0901 	adc.w	r9, r3, r1
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	f04f 0300 	mov.w	r3, #0
 8005f8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f96:	4690      	mov	r8, r2
 8005f98:	4699      	mov	r9, r3
 8005f9a:	4623      	mov	r3, r4
 8005f9c:	eb18 0303 	adds.w	r3, r8, r3
 8005fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fa4:	462b      	mov	r3, r5
 8005fa6:	eb49 0303 	adc.w	r3, r9, r3
 8005faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005fba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005fbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	18db      	adds	r3, r3, r3
 8005fc6:	653b      	str	r3, [r7, #80]	; 0x50
 8005fc8:	4613      	mov	r3, r2
 8005fca:	eb42 0303 	adc.w	r3, r2, r3
 8005fce:	657b      	str	r3, [r7, #84]	; 0x54
 8005fd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005fd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005fd8:	f7fa fdee 	bl	8000bb8 <__aeabi_uldivmod>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4b61      	ldr	r3, [pc, #388]	; (8006168 <UART_SetConfig+0x2d4>)
 8005fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8005fe6:	095b      	lsrs	r3, r3, #5
 8005fe8:	011c      	lsls	r4, r3, #4
 8005fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ff4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ff8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ffc:	4642      	mov	r2, r8
 8005ffe:	464b      	mov	r3, r9
 8006000:	1891      	adds	r1, r2, r2
 8006002:	64b9      	str	r1, [r7, #72]	; 0x48
 8006004:	415b      	adcs	r3, r3
 8006006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006008:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800600c:	4641      	mov	r1, r8
 800600e:	eb12 0a01 	adds.w	sl, r2, r1
 8006012:	4649      	mov	r1, r9
 8006014:	eb43 0b01 	adc.w	fp, r3, r1
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006024:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006028:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800602c:	4692      	mov	sl, r2
 800602e:	469b      	mov	fp, r3
 8006030:	4643      	mov	r3, r8
 8006032:	eb1a 0303 	adds.w	r3, sl, r3
 8006036:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800603a:	464b      	mov	r3, r9
 800603c:	eb4b 0303 	adc.w	r3, fp, r3
 8006040:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006050:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006054:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006058:	460b      	mov	r3, r1
 800605a:	18db      	adds	r3, r3, r3
 800605c:	643b      	str	r3, [r7, #64]	; 0x40
 800605e:	4613      	mov	r3, r2
 8006060:	eb42 0303 	adc.w	r3, r2, r3
 8006064:	647b      	str	r3, [r7, #68]	; 0x44
 8006066:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800606a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800606e:	f7fa fda3 	bl	8000bb8 <__aeabi_uldivmod>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4611      	mov	r1, r2
 8006078:	4b3b      	ldr	r3, [pc, #236]	; (8006168 <UART_SetConfig+0x2d4>)
 800607a:	fba3 2301 	umull	r2, r3, r3, r1
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	2264      	movs	r2, #100	; 0x64
 8006082:	fb02 f303 	mul.w	r3, r2, r3
 8006086:	1acb      	subs	r3, r1, r3
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800608e:	4b36      	ldr	r3, [pc, #216]	; (8006168 <UART_SetConfig+0x2d4>)
 8006090:	fba3 2302 	umull	r2, r3, r3, r2
 8006094:	095b      	lsrs	r3, r3, #5
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800609c:	441c      	add	r4, r3
 800609e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80060ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80060b0:	4642      	mov	r2, r8
 80060b2:	464b      	mov	r3, r9
 80060b4:	1891      	adds	r1, r2, r2
 80060b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80060b8:	415b      	adcs	r3, r3
 80060ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060c0:	4641      	mov	r1, r8
 80060c2:	1851      	adds	r1, r2, r1
 80060c4:	6339      	str	r1, [r7, #48]	; 0x30
 80060c6:	4649      	mov	r1, r9
 80060c8:	414b      	adcs	r3, r1
 80060ca:	637b      	str	r3, [r7, #52]	; 0x34
 80060cc:	f04f 0200 	mov.w	r2, #0
 80060d0:	f04f 0300 	mov.w	r3, #0
 80060d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80060d8:	4659      	mov	r1, fp
 80060da:	00cb      	lsls	r3, r1, #3
 80060dc:	4651      	mov	r1, sl
 80060de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060e2:	4651      	mov	r1, sl
 80060e4:	00ca      	lsls	r2, r1, #3
 80060e6:	4610      	mov	r0, r2
 80060e8:	4619      	mov	r1, r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	4642      	mov	r2, r8
 80060ee:	189b      	adds	r3, r3, r2
 80060f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060f4:	464b      	mov	r3, r9
 80060f6:	460a      	mov	r2, r1
 80060f8:	eb42 0303 	adc.w	r3, r2, r3
 80060fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800610c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006110:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006114:	460b      	mov	r3, r1
 8006116:	18db      	adds	r3, r3, r3
 8006118:	62bb      	str	r3, [r7, #40]	; 0x28
 800611a:	4613      	mov	r3, r2
 800611c:	eb42 0303 	adc.w	r3, r2, r3
 8006120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006122:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006126:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800612a:	f7fa fd45 	bl	8000bb8 <__aeabi_uldivmod>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4b0d      	ldr	r3, [pc, #52]	; (8006168 <UART_SetConfig+0x2d4>)
 8006134:	fba3 1302 	umull	r1, r3, r3, r2
 8006138:	095b      	lsrs	r3, r3, #5
 800613a:	2164      	movs	r1, #100	; 0x64
 800613c:	fb01 f303 	mul.w	r3, r1, r3
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	3332      	adds	r3, #50	; 0x32
 8006146:	4a08      	ldr	r2, [pc, #32]	; (8006168 <UART_SetConfig+0x2d4>)
 8006148:	fba2 2303 	umull	r2, r3, r2, r3
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	f003 0207 	and.w	r2, r3, #7
 8006152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4422      	add	r2, r4
 800615a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800615c:	e105      	b.n	800636a <UART_SetConfig+0x4d6>
 800615e:	bf00      	nop
 8006160:	40011000 	.word	0x40011000
 8006164:	40011400 	.word	0x40011400
 8006168:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800616c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006170:	2200      	movs	r2, #0
 8006172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006176:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800617a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800617e:	4642      	mov	r2, r8
 8006180:	464b      	mov	r3, r9
 8006182:	1891      	adds	r1, r2, r2
 8006184:	6239      	str	r1, [r7, #32]
 8006186:	415b      	adcs	r3, r3
 8006188:	627b      	str	r3, [r7, #36]	; 0x24
 800618a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800618e:	4641      	mov	r1, r8
 8006190:	1854      	adds	r4, r2, r1
 8006192:	4649      	mov	r1, r9
 8006194:	eb43 0501 	adc.w	r5, r3, r1
 8006198:	f04f 0200 	mov.w	r2, #0
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	00eb      	lsls	r3, r5, #3
 80061a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061a6:	00e2      	lsls	r2, r4, #3
 80061a8:	4614      	mov	r4, r2
 80061aa:	461d      	mov	r5, r3
 80061ac:	4643      	mov	r3, r8
 80061ae:	18e3      	adds	r3, r4, r3
 80061b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061b4:	464b      	mov	r3, r9
 80061b6:	eb45 0303 	adc.w	r3, r5, r3
 80061ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061ce:	f04f 0200 	mov.w	r2, #0
 80061d2:	f04f 0300 	mov.w	r3, #0
 80061d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80061da:	4629      	mov	r1, r5
 80061dc:	008b      	lsls	r3, r1, #2
 80061de:	4621      	mov	r1, r4
 80061e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061e4:	4621      	mov	r1, r4
 80061e6:	008a      	lsls	r2, r1, #2
 80061e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061ec:	f7fa fce4 	bl	8000bb8 <__aeabi_uldivmod>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4b60      	ldr	r3, [pc, #384]	; (8006378 <UART_SetConfig+0x4e4>)
 80061f6:	fba3 2302 	umull	r2, r3, r3, r2
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	011c      	lsls	r4, r3, #4
 80061fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006202:	2200      	movs	r2, #0
 8006204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006208:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800620c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006210:	4642      	mov	r2, r8
 8006212:	464b      	mov	r3, r9
 8006214:	1891      	adds	r1, r2, r2
 8006216:	61b9      	str	r1, [r7, #24]
 8006218:	415b      	adcs	r3, r3
 800621a:	61fb      	str	r3, [r7, #28]
 800621c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006220:	4641      	mov	r1, r8
 8006222:	1851      	adds	r1, r2, r1
 8006224:	6139      	str	r1, [r7, #16]
 8006226:	4649      	mov	r1, r9
 8006228:	414b      	adcs	r3, r1
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006238:	4659      	mov	r1, fp
 800623a:	00cb      	lsls	r3, r1, #3
 800623c:	4651      	mov	r1, sl
 800623e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006242:	4651      	mov	r1, sl
 8006244:	00ca      	lsls	r2, r1, #3
 8006246:	4610      	mov	r0, r2
 8006248:	4619      	mov	r1, r3
 800624a:	4603      	mov	r3, r0
 800624c:	4642      	mov	r2, r8
 800624e:	189b      	adds	r3, r3, r2
 8006250:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006254:	464b      	mov	r3, r9
 8006256:	460a      	mov	r2, r1
 8006258:	eb42 0303 	adc.w	r3, r2, r3
 800625c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	67bb      	str	r3, [r7, #120]	; 0x78
 800626a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006278:	4649      	mov	r1, r9
 800627a:	008b      	lsls	r3, r1, #2
 800627c:	4641      	mov	r1, r8
 800627e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006282:	4641      	mov	r1, r8
 8006284:	008a      	lsls	r2, r1, #2
 8006286:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800628a:	f7fa fc95 	bl	8000bb8 <__aeabi_uldivmod>
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	4b39      	ldr	r3, [pc, #228]	; (8006378 <UART_SetConfig+0x4e4>)
 8006294:	fba3 1302 	umull	r1, r3, r3, r2
 8006298:	095b      	lsrs	r3, r3, #5
 800629a:	2164      	movs	r1, #100	; 0x64
 800629c:	fb01 f303 	mul.w	r3, r1, r3
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	3332      	adds	r3, #50	; 0x32
 80062a6:	4a34      	ldr	r2, [pc, #208]	; (8006378 <UART_SetConfig+0x4e4>)
 80062a8:	fba2 2303 	umull	r2, r3, r2, r3
 80062ac:	095b      	lsrs	r3, r3, #5
 80062ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062b2:	441c      	add	r4, r3
 80062b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062b8:	2200      	movs	r2, #0
 80062ba:	673b      	str	r3, [r7, #112]	; 0x70
 80062bc:	677a      	str	r2, [r7, #116]	; 0x74
 80062be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80062c2:	4642      	mov	r2, r8
 80062c4:	464b      	mov	r3, r9
 80062c6:	1891      	adds	r1, r2, r2
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	415b      	adcs	r3, r3
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062d2:	4641      	mov	r1, r8
 80062d4:	1851      	adds	r1, r2, r1
 80062d6:	6039      	str	r1, [r7, #0]
 80062d8:	4649      	mov	r1, r9
 80062da:	414b      	adcs	r3, r1
 80062dc:	607b      	str	r3, [r7, #4]
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062ea:	4659      	mov	r1, fp
 80062ec:	00cb      	lsls	r3, r1, #3
 80062ee:	4651      	mov	r1, sl
 80062f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062f4:	4651      	mov	r1, sl
 80062f6:	00ca      	lsls	r2, r1, #3
 80062f8:	4610      	mov	r0, r2
 80062fa:	4619      	mov	r1, r3
 80062fc:	4603      	mov	r3, r0
 80062fe:	4642      	mov	r2, r8
 8006300:	189b      	adds	r3, r3, r2
 8006302:	66bb      	str	r3, [r7, #104]	; 0x68
 8006304:	464b      	mov	r3, r9
 8006306:	460a      	mov	r2, r1
 8006308:	eb42 0303 	adc.w	r3, r2, r3
 800630c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800630e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	663b      	str	r3, [r7, #96]	; 0x60
 8006318:	667a      	str	r2, [r7, #100]	; 0x64
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006326:	4649      	mov	r1, r9
 8006328:	008b      	lsls	r3, r1, #2
 800632a:	4641      	mov	r1, r8
 800632c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006330:	4641      	mov	r1, r8
 8006332:	008a      	lsls	r2, r1, #2
 8006334:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006338:	f7fa fc3e 	bl	8000bb8 <__aeabi_uldivmod>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <UART_SetConfig+0x4e4>)
 8006342:	fba3 1302 	umull	r1, r3, r3, r2
 8006346:	095b      	lsrs	r3, r3, #5
 8006348:	2164      	movs	r1, #100	; 0x64
 800634a:	fb01 f303 	mul.w	r3, r1, r3
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	011b      	lsls	r3, r3, #4
 8006352:	3332      	adds	r3, #50	; 0x32
 8006354:	4a08      	ldr	r2, [pc, #32]	; (8006378 <UART_SetConfig+0x4e4>)
 8006356:	fba2 2303 	umull	r2, r3, r2, r3
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	f003 020f 	and.w	r2, r3, #15
 8006360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4422      	add	r2, r4
 8006368:	609a      	str	r2, [r3, #8]
}
 800636a:	bf00      	nop
 800636c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006370:	46bd      	mov	sp, r7
 8006372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006376:	bf00      	nop
 8006378:	51eb851f 	.word	0x51eb851f

0800637c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	4603      	mov	r3, r0
 8006384:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006386:	2300      	movs	r3, #0
 8006388:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800638a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800638e:	2b84      	cmp	r3, #132	; 0x84
 8006390:	d005      	beq.n	800639e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006392:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4413      	add	r3, r2
 800639a:	3303      	adds	r3, #3
 800639c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800639e:	68fb      	ldr	r3, [r7, #12]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80063b0:	f001 f994 	bl	80076dc <vTaskStartScheduler>
  
  return osOK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	bd80      	pop	{r7, pc}

080063ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80063ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063bc:	b089      	sub	sp, #36	; 0x24
 80063be:	af04      	add	r7, sp, #16
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d020      	beq.n	800640e <osThreadCreate+0x54>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d01c      	beq.n	800640e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685c      	ldr	r4, [r3, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681d      	ldr	r5, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	691e      	ldr	r6, [r3, #16]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff ffc8 	bl	800637c <makeFreeRtosPriority>
 80063ec:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063f6:	9202      	str	r2, [sp, #8]
 80063f8:	9301      	str	r3, [sp, #4]
 80063fa:	9100      	str	r1, [sp, #0]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	4632      	mov	r2, r6
 8006400:	4629      	mov	r1, r5
 8006402:	4620      	mov	r0, r4
 8006404:	f000 fe6c 	bl	80070e0 <xTaskCreateStatic>
 8006408:	4603      	mov	r3, r0
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	e01c      	b.n	8006448 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685c      	ldr	r4, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800641a:	b29e      	uxth	r6, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006422:	4618      	mov	r0, r3
 8006424:	f7ff ffaa 	bl	800637c <makeFreeRtosPriority>
 8006428:	4602      	mov	r2, r0
 800642a:	f107 030c 	add.w	r3, r7, #12
 800642e:	9301      	str	r3, [sp, #4]
 8006430:	9200      	str	r2, [sp, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	4632      	mov	r2, r6
 8006436:	4629      	mov	r1, r5
 8006438:	4620      	mov	r0, r4
 800643a:	f000 feae 	bl	800719a <xTaskCreate>
 800643e:	4603      	mov	r3, r0
 8006440:	2b01      	cmp	r3, #1
 8006442:	d001      	beq.n	8006448 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006444:	2300      	movs	r3, #0
 8006446:	e000      	b.n	800644a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006448:	68fb      	ldr	r3, [r7, #12]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006452 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <osDelay+0x16>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	e000      	b.n	800646a <osDelay+0x18>
 8006468:	2301      	movs	r3, #1
 800646a:	4618      	mov	r0, r3
 800646c:	f000 ffcc 	bl	8007408 <vTaskDelay>
  
  return osOK;
 8006470:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af02      	add	r7, sp, #8
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	460b      	mov	r3, r1
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d013      	beq.n	80064ba <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8006492:	7afb      	ldrb	r3, [r7, #11]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d101      	bne.n	800649c <osTimerCreate+0x20>
 8006498:	2101      	movs	r1, #1
 800649a:	e000      	b.n	800649e <osTimerCreate+0x22>
 800649c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80064a6:	9201      	str	r2, [sp, #4]
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	460a      	mov	r2, r1
 80064ae:	2101      	movs	r1, #1
 80064b0:	480b      	ldr	r0, [pc, #44]	; (80064e0 <osTimerCreate+0x64>)
 80064b2:	f001 fed0 	bl	8008256 <xTimerCreateStatic>
 80064b6:	4603      	mov	r3, r0
 80064b8:	e00e      	b.n	80064d8 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80064ba:	7afb      	ldrb	r3, [r7, #11]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d101      	bne.n	80064c4 <osTimerCreate+0x48>
 80064c0:	2201      	movs	r2, #1
 80064c2:	e000      	b.n	80064c6 <osTimerCreate+0x4a>
 80064c4:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2101      	movs	r1, #1
 80064d0:	4803      	ldr	r0, [pc, #12]	; (80064e0 <osTimerCreate+0x64>)
 80064d2:	f001 fe9f 	bl	8008214 <xTimerCreate>
 80064d6:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	0800c2d0 	.word	0x0800c2d0

080064e4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80064e4:	b590      	push	{r4, r7, lr}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af02      	add	r7, sp, #8
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d011      	beq.n	800651a <osMessageCreate+0x36>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00d      	beq.n	800651a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6818      	ldr	r0, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6859      	ldr	r1, [r3, #4]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	2400      	movs	r4, #0
 8006510:	9400      	str	r4, [sp, #0]
 8006512:	f000 f92b 	bl	800676c <xQueueGenericCreateStatic>
 8006516:	4603      	mov	r3, r0
 8006518:	e008      	b.n	800652c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6818      	ldr	r0, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	4619      	mov	r1, r3
 8006526:	f000 f999 	bl	800685c <xQueueGenericCreate>
 800652a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800652c:	4618      	mov	r0, r3
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	bd90      	pop	{r4, r7, pc}

08006534 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f103 0208 	add.w	r2, r3, #8
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f04f 32ff 	mov.w	r2, #4294967295
 800654c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f103 0208 	add.w	r2, r3, #8
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f103 0208 	add.w	r2, r3, #8
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006582:	bf00      	nop
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800658e:	b480      	push	{r7}
 8006590:	b085      	sub	sp, #20
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	689a      	ldr	r2, [r3, #8]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	601a      	str	r2, [r3, #0]
}
 80065ca:	bf00      	nop
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065d6:	b480      	push	{r7}
 80065d8:	b085      	sub	sp, #20
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ec:	d103      	bne.n	80065f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	e00c      	b.n	8006610 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3308      	adds	r3, #8
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	e002      	b.n	8006604 <vListInsert+0x2e>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	429a      	cmp	r2, r3
 800660e:	d2f6      	bcs.n	80065fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	601a      	str	r2, [r3, #0]
}
 800663c:	bf00      	nop
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6892      	ldr	r2, [r2, #8]
 800665e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6852      	ldr	r2, [r2, #4]
 8006668:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	429a      	cmp	r2, r3
 8006672:	d103      	bne.n	800667c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	1e5a      	subs	r2, r3, #1
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10a      	bne.n	80066c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80066c2:	bf00      	nop
 80066c4:	e7fe      	b.n	80066c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80066c6:	f002 fa55 	bl	8008b74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d2:	68f9      	ldr	r1, [r7, #12]
 80066d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066d6:	fb01 f303 	mul.w	r3, r1, r3
 80066da:	441a      	add	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f6:	3b01      	subs	r3, #1
 80066f8:	68f9      	ldr	r1, [r7, #12]
 80066fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066fc:	fb01 f303 	mul.w	r3, r1, r3
 8006700:	441a      	add	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	22ff      	movs	r2, #255	; 0xff
 800670a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	22ff      	movs	r2, #255	; 0xff
 8006712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d114      	bne.n	8006746 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01a      	beq.n	800675a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	3310      	adds	r3, #16
 8006728:	4618      	mov	r0, r3
 800672a:	f001 fa63 	bl	8007bf4 <xTaskRemoveFromEventList>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d012      	beq.n	800675a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006734:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <xQueueGenericReset+0xcc>)
 8006736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	e009      	b.n	800675a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	3310      	adds	r3, #16
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff fef2 	bl	8006534 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	3324      	adds	r3, #36	; 0x24
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff feed 	bl	8006534 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800675a:	f002 fa3b 	bl	8008bd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800675e:	2301      	movs	r3, #1
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	e000ed04 	.word	0xe000ed04

0800676c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800676c:	b580      	push	{r7, lr}
 800676e:	b08e      	sub	sp, #56	; 0x38
 8006770:	af02      	add	r7, sp, #8
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10a      	bne.n	8006796 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006792:	bf00      	nop
 8006794:	e7fe      	b.n	8006794 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10a      	bne.n	80067b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067ae:	bf00      	nop
 80067b0:	e7fe      	b.n	80067b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <xQueueGenericCreateStatic+0x52>
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <xQueueGenericCreateStatic+0x56>
 80067be:	2301      	movs	r3, #1
 80067c0:	e000      	b.n	80067c4 <xQueueGenericCreateStatic+0x58>
 80067c2:	2300      	movs	r3, #0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10a      	bne.n	80067de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	623b      	str	r3, [r7, #32]
}
 80067da:	bf00      	nop
 80067dc:	e7fe      	b.n	80067dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d102      	bne.n	80067ea <xQueueGenericCreateStatic+0x7e>
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <xQueueGenericCreateStatic+0x82>
 80067ea:	2301      	movs	r3, #1
 80067ec:	e000      	b.n	80067f0 <xQueueGenericCreateStatic+0x84>
 80067ee:	2300      	movs	r3, #0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	61fb      	str	r3, [r7, #28]
}
 8006806:	bf00      	nop
 8006808:	e7fe      	b.n	8006808 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800680a:	2348      	movs	r3, #72	; 0x48
 800680c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2b48      	cmp	r3, #72	; 0x48
 8006812:	d00a      	beq.n	800682a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	61bb      	str	r3, [r7, #24]
}
 8006826:	bf00      	nop
 8006828:	e7fe      	b.n	8006828 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800682a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00d      	beq.n	8006852 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800683e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	4613      	mov	r3, r2
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 f83f 	bl	80068d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006854:	4618      	mov	r0, r3
 8006856:	3730      	adds	r7, #48	; 0x30
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08a      	sub	sp, #40	; 0x28
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	4613      	mov	r3, r2
 8006868:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10a      	bne.n	8006886 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	613b      	str	r3, [r7, #16]
}
 8006882:	bf00      	nop
 8006884:	e7fe      	b.n	8006884 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	fb02 f303 	mul.w	r3, r2, r3
 800688e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	3348      	adds	r3, #72	; 0x48
 8006894:	4618      	mov	r0, r3
 8006896:	f002 fa8f 	bl	8008db8 <pvPortMalloc>
 800689a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d011      	beq.n	80068c6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	3348      	adds	r3, #72	; 0x48
 80068aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068b4:	79fa      	ldrb	r2, [r7, #7]
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	4613      	mov	r3, r2
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	68b9      	ldr	r1, [r7, #8]
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 f805 	bl	80068d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068c6:	69bb      	ldr	r3, [r7, #24]
	}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3720      	adds	r7, #32
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d103      	bne.n	80068ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	e002      	b.n	80068f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068fe:	2101      	movs	r1, #1
 8006900:	69b8      	ldr	r0, [r7, #24]
 8006902:	f7ff fecb 	bl	800669c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006906:	bf00      	nop
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b08e      	sub	sp, #56	; 0x38
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
 800691c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800691e:	2300      	movs	r3, #0
 8006920:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10a      	bne.n	8006942 <xQueueGenericSend+0x32>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800693e:	bf00      	nop
 8006940:	e7fe      	b.n	8006940 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d103      	bne.n	8006950 <xQueueGenericSend+0x40>
 8006948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <xQueueGenericSend+0x44>
 8006950:	2301      	movs	r3, #1
 8006952:	e000      	b.n	8006956 <xQueueGenericSend+0x46>
 8006954:	2300      	movs	r3, #0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10a      	bne.n	8006970 <xQueueGenericSend+0x60>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800696c:	bf00      	nop
 800696e:	e7fe      	b.n	800696e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	2b02      	cmp	r3, #2
 8006974:	d103      	bne.n	800697e <xQueueGenericSend+0x6e>
 8006976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800697a:	2b01      	cmp	r3, #1
 800697c:	d101      	bne.n	8006982 <xQueueGenericSend+0x72>
 800697e:	2301      	movs	r3, #1
 8006980:	e000      	b.n	8006984 <xQueueGenericSend+0x74>
 8006982:	2300      	movs	r3, #0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10a      	bne.n	800699e <xQueueGenericSend+0x8e>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	623b      	str	r3, [r7, #32]
}
 800699a:	bf00      	nop
 800699c:	e7fe      	b.n	800699c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800699e:	f001 fae7 	bl	8007f70 <xTaskGetSchedulerState>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d102      	bne.n	80069ae <xQueueGenericSend+0x9e>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <xQueueGenericSend+0xa2>
 80069ae:	2301      	movs	r3, #1
 80069b0:	e000      	b.n	80069b4 <xQueueGenericSend+0xa4>
 80069b2:	2300      	movs	r3, #0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <xQueueGenericSend+0xbe>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	61fb      	str	r3, [r7, #28]
}
 80069ca:	bf00      	nop
 80069cc:	e7fe      	b.n	80069cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069ce:	f002 f8d1 	bl	8008b74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069da:	429a      	cmp	r2, r3
 80069dc:	d302      	bcc.n	80069e4 <xQueueGenericSend+0xd4>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d129      	bne.n	8006a38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	68b9      	ldr	r1, [r7, #8]
 80069e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069ea:	f000 fa0b 	bl	8006e04 <prvCopyDataToQueue>
 80069ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d010      	beq.n	8006a1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fa:	3324      	adds	r3, #36	; 0x24
 80069fc:	4618      	mov	r0, r3
 80069fe:	f001 f8f9 	bl	8007bf4 <xTaskRemoveFromEventList>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d013      	beq.n	8006a30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006a08:	4b3f      	ldr	r3, [pc, #252]	; (8006b08 <xQueueGenericSend+0x1f8>)
 8006a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	e00a      	b.n	8006a30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d007      	beq.n	8006a30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a20:	4b39      	ldr	r3, [pc, #228]	; (8006b08 <xQueueGenericSend+0x1f8>)
 8006a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a30:	f002 f8d0 	bl	8008bd4 <vPortExitCritical>
				return pdPASS;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e063      	b.n	8006b00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d103      	bne.n	8006a46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a3e:	f002 f8c9 	bl	8008bd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a42:	2300      	movs	r3, #0
 8006a44:	e05c      	b.n	8006b00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d106      	bne.n	8006a5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a4c:	f107 0314 	add.w	r3, r7, #20
 8006a50:	4618      	mov	r0, r3
 8006a52:	f001 f931 	bl	8007cb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a56:	2301      	movs	r3, #1
 8006a58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a5a:	f002 f8bb 	bl	8008bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a5e:	f000 fea3 	bl	80077a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a62:	f002 f887 	bl	8008b74 <vPortEnterCritical>
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a6c:	b25b      	sxtb	r3, r3
 8006a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a72:	d103      	bne.n	8006a7c <xQueueGenericSend+0x16c>
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a82:	b25b      	sxtb	r3, r3
 8006a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a88:	d103      	bne.n	8006a92 <xQueueGenericSend+0x182>
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a92:	f002 f89f 	bl	8008bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a96:	1d3a      	adds	r2, r7, #4
 8006a98:	f107 0314 	add.w	r3, r7, #20
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f001 f920 	bl	8007ce4 <xTaskCheckForTimeOut>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d124      	bne.n	8006af4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006aaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aac:	f000 faa2 	bl	8006ff4 <prvIsQueueFull>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d018      	beq.n	8006ae8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	3310      	adds	r3, #16
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	4611      	mov	r1, r2
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f001 f848 	bl	8007b54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ac6:	f000 fa2d 	bl	8006f24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006aca:	f000 fe7b 	bl	80077c4 <xTaskResumeAll>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f47f af7c 	bne.w	80069ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006ad6:	4b0c      	ldr	r3, [pc, #48]	; (8006b08 <xQueueGenericSend+0x1f8>)
 8006ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	e772      	b.n	80069ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aea:	f000 fa1b 	bl	8006f24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006aee:	f000 fe69 	bl	80077c4 <xTaskResumeAll>
 8006af2:	e76c      	b.n	80069ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006af6:	f000 fa15 	bl	8006f24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006afa:	f000 fe63 	bl	80077c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006afe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3738      	adds	r7, #56	; 0x38
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	e000ed04 	.word	0xe000ed04

08006b0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b090      	sub	sp, #64	; 0x40
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10a      	bne.n	8006b3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b36:	bf00      	nop
 8006b38:	e7fe      	b.n	8006b38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d103      	bne.n	8006b48 <xQueueGenericSendFromISR+0x3c>
 8006b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <xQueueGenericSendFromISR+0x40>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e000      	b.n	8006b4e <xQueueGenericSendFromISR+0x42>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10a      	bne.n	8006b68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b64:	bf00      	nop
 8006b66:	e7fe      	b.n	8006b66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d103      	bne.n	8006b76 <xQueueGenericSendFromISR+0x6a>
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d101      	bne.n	8006b7a <xQueueGenericSendFromISR+0x6e>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e000      	b.n	8006b7c <xQueueGenericSendFromISR+0x70>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10a      	bne.n	8006b96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	623b      	str	r3, [r7, #32]
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b96:	f002 f8cf 	bl	8008d38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b9a:	f3ef 8211 	mrs	r2, BASEPRI
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	61fa      	str	r2, [r7, #28]
 8006bb0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006bb2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006bb4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d302      	bcc.n	8006bc8 <xQueueGenericSendFromISR+0xbc>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d12f      	bne.n	8006c28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	68b9      	ldr	r1, [r7, #8]
 8006bdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006bde:	f000 f911 	bl	8006e04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006be2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bea:	d112      	bne.n	8006c12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d016      	beq.n	8006c22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf6:	3324      	adds	r3, #36	; 0x24
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 fffb 	bl	8007bf4 <xTaskRemoveFromEventList>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00e      	beq.n	8006c22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00b      	beq.n	8006c22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	e007      	b.n	8006c22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c16:	3301      	adds	r3, #1
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	b25a      	sxtb	r2, r3
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c22:	2301      	movs	r3, #1
 8006c24:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006c26:	e001      	b.n	8006c2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3740      	adds	r7, #64	; 0x40
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b08c      	sub	sp, #48	; 0x30
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c50:	2300      	movs	r3, #0
 8006c52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10a      	bne.n	8006c74 <xQueueReceive+0x30>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	623b      	str	r3, [r7, #32]
}
 8006c70:	bf00      	nop
 8006c72:	e7fe      	b.n	8006c72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d103      	bne.n	8006c82 <xQueueReceive+0x3e>
 8006c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <xQueueReceive+0x42>
 8006c82:	2301      	movs	r3, #1
 8006c84:	e000      	b.n	8006c88 <xQueueReceive+0x44>
 8006c86:	2300      	movs	r3, #0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10a      	bne.n	8006ca2 <xQueueReceive+0x5e>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	61fb      	str	r3, [r7, #28]
}
 8006c9e:	bf00      	nop
 8006ca0:	e7fe      	b.n	8006ca0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ca2:	f001 f965 	bl	8007f70 <xTaskGetSchedulerState>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d102      	bne.n	8006cb2 <xQueueReceive+0x6e>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <xQueueReceive+0x72>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e000      	b.n	8006cb8 <xQueueReceive+0x74>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10a      	bne.n	8006cd2 <xQueueReceive+0x8e>
	__asm volatile
 8006cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	61bb      	str	r3, [r7, #24]
}
 8006cce:	bf00      	nop
 8006cd0:	e7fe      	b.n	8006cd0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cd2:	f001 ff4f 	bl	8008b74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d01f      	beq.n	8006d22 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce6:	f000 f8f7 	bl	8006ed8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	1e5a      	subs	r2, r3, #1
 8006cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00f      	beq.n	8006d1a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	3310      	adds	r3, #16
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 ff78 	bl	8007bf4 <xTaskRemoveFromEventList>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d007      	beq.n	8006d1a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d0a:	4b3d      	ldr	r3, [pc, #244]	; (8006e00 <xQueueReceive+0x1bc>)
 8006d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d1a:	f001 ff5b 	bl	8008bd4 <vPortExitCritical>
				return pdPASS;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e069      	b.n	8006df6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d103      	bne.n	8006d30 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d28:	f001 ff54 	bl	8008bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	e062      	b.n	8006df6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d106      	bne.n	8006d44 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d36:	f107 0310 	add.w	r3, r7, #16
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 ffbc 	bl	8007cb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d40:	2301      	movs	r3, #1
 8006d42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d44:	f001 ff46 	bl	8008bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d48:	f000 fd2e 	bl	80077a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d4c:	f001 ff12 	bl	8008b74 <vPortEnterCritical>
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d56:	b25b      	sxtb	r3, r3
 8006d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5c:	d103      	bne.n	8006d66 <xQueueReceive+0x122>
 8006d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d6c:	b25b      	sxtb	r3, r3
 8006d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d72:	d103      	bne.n	8006d7c <xQueueReceive+0x138>
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d7c:	f001 ff2a 	bl	8008bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d80:	1d3a      	adds	r2, r7, #4
 8006d82:	f107 0310 	add.w	r3, r7, #16
 8006d86:	4611      	mov	r1, r2
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f000 ffab 	bl	8007ce4 <xTaskCheckForTimeOut>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d123      	bne.n	8006ddc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d96:	f000 f917 	bl	8006fc8 <prvIsQueueEmpty>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d017      	beq.n	8006dd0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da2:	3324      	adds	r3, #36	; 0x24
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	4611      	mov	r1, r2
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 fed3 	bl	8007b54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006db0:	f000 f8b8 	bl	8006f24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006db4:	f000 fd06 	bl	80077c4 <xTaskResumeAll>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d189      	bne.n	8006cd2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006dbe:	4b10      	ldr	r3, [pc, #64]	; (8006e00 <xQueueReceive+0x1bc>)
 8006dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	e780      	b.n	8006cd2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dd2:	f000 f8a7 	bl	8006f24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dd6:	f000 fcf5 	bl	80077c4 <xTaskResumeAll>
 8006dda:	e77a      	b.n	8006cd2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dde:	f000 f8a1 	bl	8006f24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006de2:	f000 fcef 	bl	80077c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006de8:	f000 f8ee 	bl	8006fc8 <prvIsQueueEmpty>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f43f af6f 	beq.w	8006cd2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006df4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3730      	adds	r7, #48	; 0x30
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	e000ed04 	.word	0xe000ed04

08006e04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e10:	2300      	movs	r3, #0
 8006e12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10d      	bne.n	8006e3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d14d      	bne.n	8006ec6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f001 f8bc 	bl	8007fac <xTaskPriorityDisinherit>
 8006e34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	609a      	str	r2, [r3, #8]
 8006e3c:	e043      	b.n	8006ec6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d119      	bne.n	8006e78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6858      	ldr	r0, [r3, #4]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	68b9      	ldr	r1, [r7, #8]
 8006e50:	f002 f9c6 	bl	80091e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5c:	441a      	add	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d32b      	bcc.n	8006ec6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	605a      	str	r2, [r3, #4]
 8006e76:	e026      	b.n	8006ec6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	68d8      	ldr	r0, [r3, #12]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e80:	461a      	mov	r2, r3
 8006e82:	68b9      	ldr	r1, [r7, #8]
 8006e84:	f002 f9ac 	bl	80091e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	68da      	ldr	r2, [r3, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e90:	425b      	negs	r3, r3
 8006e92:	441a      	add	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d207      	bcs.n	8006eb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eac:	425b      	negs	r3, r3
 8006eae:	441a      	add	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d105      	bne.n	8006ec6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d002      	beq.n	8006ec6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006ece:	697b      	ldr	r3, [r7, #20]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d018      	beq.n	8006f1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68da      	ldr	r2, [r3, #12]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	441a      	add	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68da      	ldr	r2, [r3, #12]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d303      	bcc.n	8006f0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68d9      	ldr	r1, [r3, #12]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f14:	461a      	mov	r2, r3
 8006f16:	6838      	ldr	r0, [r7, #0]
 8006f18:	f002 f962 	bl	80091e0 <memcpy>
	}
}
 8006f1c:	bf00      	nop
 8006f1e:	3708      	adds	r7, #8
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f2c:	f001 fe22 	bl	8008b74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f38:	e011      	b.n	8006f5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d012      	beq.n	8006f68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	3324      	adds	r3, #36	; 0x24
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fe54 	bl	8007bf4 <xTaskRemoveFromEventList>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f52:	f000 ff29 	bl	8007da8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	dce9      	bgt.n	8006f3a <prvUnlockQueue+0x16>
 8006f66:	e000      	b.n	8006f6a <prvUnlockQueue+0x46>
					break;
 8006f68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	22ff      	movs	r2, #255	; 0xff
 8006f6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006f72:	f001 fe2f 	bl	8008bd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f76:	f001 fdfd 	bl	8008b74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f82:	e011      	b.n	8006fa8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d012      	beq.n	8006fb2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3310      	adds	r3, #16
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 fe2f 	bl	8007bf4 <xTaskRemoveFromEventList>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f9c:	f000 ff04 	bl	8007da8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	dce9      	bgt.n	8006f84 <prvUnlockQueue+0x60>
 8006fb0:	e000      	b.n	8006fb4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006fb2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	22ff      	movs	r2, #255	; 0xff
 8006fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006fbc:	f001 fe0a 	bl	8008bd4 <vPortExitCritical>
}
 8006fc0:	bf00      	nop
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fd0:	f001 fdd0 	bl	8008b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d102      	bne.n	8006fe2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	e001      	b.n	8006fe6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fe6:	f001 fdf5 	bl	8008bd4 <vPortExitCritical>

	return xReturn;
 8006fea:	68fb      	ldr	r3, [r7, #12]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ffc:	f001 fdba 	bl	8008b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007008:	429a      	cmp	r2, r3
 800700a:	d102      	bne.n	8007012 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800700c:	2301      	movs	r3, #1
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	e001      	b.n	8007016 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007016:	f001 fddd 	bl	8008bd4 <vPortExitCritical>

	return xReturn;
 800701a:	68fb      	ldr	r3, [r7, #12]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	e014      	b.n	800705e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007034:	4a0f      	ldr	r2, [pc, #60]	; (8007074 <vQueueAddToRegistry+0x50>)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10b      	bne.n	8007058 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007040:	490c      	ldr	r1, [pc, #48]	; (8007074 <vQueueAddToRegistry+0x50>)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800704a:	4a0a      	ldr	r2, [pc, #40]	; (8007074 <vQueueAddToRegistry+0x50>)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	00db      	lsls	r3, r3, #3
 8007050:	4413      	add	r3, r2
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007056:	e006      	b.n	8007066 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3301      	adds	r3, #1
 800705c:	60fb      	str	r3, [r7, #12]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b07      	cmp	r3, #7
 8007062:	d9e7      	bls.n	8007034 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007064:	bf00      	nop
 8007066:	bf00      	nop
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20000d04 	.word	0x20000d04

08007078 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007088:	f001 fd74 	bl	8008b74 <vPortEnterCritical>
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007092:	b25b      	sxtb	r3, r3
 8007094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007098:	d103      	bne.n	80070a2 <vQueueWaitForMessageRestricted+0x2a>
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070a8:	b25b      	sxtb	r3, r3
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ae:	d103      	bne.n	80070b8 <vQueueWaitForMessageRestricted+0x40>
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070b8:	f001 fd8c 	bl	8008bd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d106      	bne.n	80070d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	3324      	adds	r3, #36	; 0x24
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f000 fd65 	bl	8007b9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80070d2:	6978      	ldr	r0, [r7, #20]
 80070d4:	f7ff ff26 	bl	8006f24 <prvUnlockQueue>
	}
 80070d8:	bf00      	nop
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b08e      	sub	sp, #56	; 0x38
 80070e4:	af04      	add	r7, sp, #16
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
 80070ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10a      	bne.n	800710a <xTaskCreateStatic+0x2a>
	__asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	623b      	str	r3, [r7, #32]
}
 8007106:	bf00      	nop
 8007108:	e7fe      	b.n	8007108 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <xTaskCreateStatic+0x46>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	61fb      	str	r3, [r7, #28]
}
 8007122:	bf00      	nop
 8007124:	e7fe      	b.n	8007124 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007126:	2354      	movs	r3, #84	; 0x54
 8007128:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	2b54      	cmp	r3, #84	; 0x54
 800712e:	d00a      	beq.n	8007146 <xTaskCreateStatic+0x66>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	61bb      	str	r3, [r7, #24]
}
 8007142:	bf00      	nop
 8007144:	e7fe      	b.n	8007144 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007146:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714a:	2b00      	cmp	r3, #0
 800714c:	d01e      	beq.n	800718c <xTaskCreateStatic+0xac>
 800714e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007150:	2b00      	cmp	r3, #0
 8007152:	d01b      	beq.n	800718c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007156:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800715c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	2202      	movs	r2, #2
 8007162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007166:	2300      	movs	r3, #0
 8007168:	9303      	str	r3, [sp, #12]
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	9302      	str	r3, [sp, #8]
 800716e:	f107 0314 	add.w	r3, r7, #20
 8007172:	9301      	str	r3, [sp, #4]
 8007174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	68b9      	ldr	r1, [r7, #8]
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 f850 	bl	8007224 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007186:	f000 f8d5 	bl	8007334 <prvAddNewTaskToReadyList>
 800718a:	e001      	b.n	8007190 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800718c:	2300      	movs	r3, #0
 800718e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007190:	697b      	ldr	r3, [r7, #20]
	}
 8007192:	4618      	mov	r0, r3
 8007194:	3728      	adds	r7, #40	; 0x28
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800719a:	b580      	push	{r7, lr}
 800719c:	b08c      	sub	sp, #48	; 0x30
 800719e:	af04      	add	r7, sp, #16
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	603b      	str	r3, [r7, #0]
 80071a6:	4613      	mov	r3, r2
 80071a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071aa:	88fb      	ldrh	r3, [r7, #6]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4618      	mov	r0, r3
 80071b0:	f001 fe02 	bl	8008db8 <pvPortMalloc>
 80071b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00e      	beq.n	80071da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071bc:	2054      	movs	r0, #84	; 0x54
 80071be:	f001 fdfb 	bl	8008db8 <pvPortMalloc>
 80071c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	631a      	str	r2, [r3, #48]	; 0x30
 80071d0:	e005      	b.n	80071de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071d2:	6978      	ldr	r0, [r7, #20]
 80071d4:	f001 febc 	bl	8008f50 <vPortFree>
 80071d8:	e001      	b.n	80071de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d017      	beq.n	8007214 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071ec:	88fa      	ldrh	r2, [r7, #6]
 80071ee:	2300      	movs	r3, #0
 80071f0:	9303      	str	r3, [sp, #12]
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	9302      	str	r3, [sp, #8]
 80071f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f8:	9301      	str	r3, [sp, #4]
 80071fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68b9      	ldr	r1, [r7, #8]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 f80e 	bl	8007224 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007208:	69f8      	ldr	r0, [r7, #28]
 800720a:	f000 f893 	bl	8007334 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800720e:	2301      	movs	r3, #1
 8007210:	61bb      	str	r3, [r7, #24]
 8007212:	e002      	b.n	800721a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007214:	f04f 33ff 	mov.w	r3, #4294967295
 8007218:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800721a:	69bb      	ldr	r3, [r7, #24]
	}
 800721c:	4618      	mov	r0, r3
 800721e:	3720      	adds	r7, #32
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b088      	sub	sp, #32
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800723c:	3b01      	subs	r3, #1
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	f023 0307 	bic.w	r3, r3, #7
 800724a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	f003 0307 	and.w	r3, r3, #7
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <prvInitialiseNewTask+0x48>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	617b      	str	r3, [r7, #20]
}
 8007268:	bf00      	nop
 800726a:	e7fe      	b.n	800726a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d01f      	beq.n	80072b2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007272:	2300      	movs	r3, #0
 8007274:	61fb      	str	r3, [r7, #28]
 8007276:	e012      	b.n	800729e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	4413      	add	r3, r2
 800727e:	7819      	ldrb	r1, [r3, #0]
 8007280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	4413      	add	r3, r2
 8007286:	3334      	adds	r3, #52	; 0x34
 8007288:	460a      	mov	r2, r1
 800728a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	4413      	add	r3, r2
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d006      	beq.n	80072a6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	3301      	adds	r3, #1
 800729c:	61fb      	str	r3, [r7, #28]
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	2b0f      	cmp	r3, #15
 80072a2:	d9e9      	bls.n	8007278 <prvInitialiseNewTask+0x54>
 80072a4:	e000      	b.n	80072a8 <prvInitialiseNewTask+0x84>
			{
				break;
 80072a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072b0:	e003      	b.n	80072ba <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072bc:	2b06      	cmp	r3, #6
 80072be:	d901      	bls.n	80072c4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072c0:	2306      	movs	r3, #6
 80072c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80072d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d2:	2200      	movs	r2, #0
 80072d4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d8:	3304      	adds	r3, #4
 80072da:	4618      	mov	r0, r3
 80072dc:	f7ff f94a 	bl	8006574 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e2:	3318      	adds	r3, #24
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7ff f945 	bl	8006574 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f2:	f1c3 0207 	rsb	r2, r3, #7
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007302:	2200      	movs	r2, #0
 8007304:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	68f9      	ldr	r1, [r7, #12]
 8007312:	69b8      	ldr	r0, [r7, #24]
 8007314:	f001 fb02 	bl	800891c <pxPortInitialiseStack>
 8007318:	4602      	mov	r2, r0
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800731e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007328:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800732a:	bf00      	nop
 800732c:	3720      	adds	r7, #32
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
	...

08007334 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800733c:	f001 fc1a 	bl	8008b74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007340:	4b2a      	ldr	r3, [pc, #168]	; (80073ec <prvAddNewTaskToReadyList+0xb8>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3301      	adds	r3, #1
 8007346:	4a29      	ldr	r2, [pc, #164]	; (80073ec <prvAddNewTaskToReadyList+0xb8>)
 8007348:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800734a:	4b29      	ldr	r3, [pc, #164]	; (80073f0 <prvAddNewTaskToReadyList+0xbc>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d109      	bne.n	8007366 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007352:	4a27      	ldr	r2, [pc, #156]	; (80073f0 <prvAddNewTaskToReadyList+0xbc>)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007358:	4b24      	ldr	r3, [pc, #144]	; (80073ec <prvAddNewTaskToReadyList+0xb8>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d110      	bne.n	8007382 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007360:	f000 fd48 	bl	8007df4 <prvInitialiseTaskLists>
 8007364:	e00d      	b.n	8007382 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007366:	4b23      	ldr	r3, [pc, #140]	; (80073f4 <prvAddNewTaskToReadyList+0xc0>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d109      	bne.n	8007382 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800736e:	4b20      	ldr	r3, [pc, #128]	; (80073f0 <prvAddNewTaskToReadyList+0xbc>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007378:	429a      	cmp	r2, r3
 800737a:	d802      	bhi.n	8007382 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800737c:	4a1c      	ldr	r2, [pc, #112]	; (80073f0 <prvAddNewTaskToReadyList+0xbc>)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007382:	4b1d      	ldr	r3, [pc, #116]	; (80073f8 <prvAddNewTaskToReadyList+0xc4>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3301      	adds	r3, #1
 8007388:	4a1b      	ldr	r2, [pc, #108]	; (80073f8 <prvAddNewTaskToReadyList+0xc4>)
 800738a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	2201      	movs	r2, #1
 8007392:	409a      	lsls	r2, r3
 8007394:	4b19      	ldr	r3, [pc, #100]	; (80073fc <prvAddNewTaskToReadyList+0xc8>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4313      	orrs	r3, r2
 800739a:	4a18      	ldr	r2, [pc, #96]	; (80073fc <prvAddNewTaskToReadyList+0xc8>)
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a2:	4613      	mov	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4a15      	ldr	r2, [pc, #84]	; (8007400 <prvAddNewTaskToReadyList+0xcc>)
 80073ac:	441a      	add	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	3304      	adds	r3, #4
 80073b2:	4619      	mov	r1, r3
 80073b4:	4610      	mov	r0, r2
 80073b6:	f7ff f8ea 	bl	800658e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073ba:	f001 fc0b 	bl	8008bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073be:	4b0d      	ldr	r3, [pc, #52]	; (80073f4 <prvAddNewTaskToReadyList+0xc0>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00e      	beq.n	80073e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073c6:	4b0a      	ldr	r3, [pc, #40]	; (80073f0 <prvAddNewTaskToReadyList+0xbc>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d207      	bcs.n	80073e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073d4:	4b0b      	ldr	r3, [pc, #44]	; (8007404 <prvAddNewTaskToReadyList+0xd0>)
 80073d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073e4:	bf00      	nop
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	20000e44 	.word	0x20000e44
 80073f0:	20000d44 	.word	0x20000d44
 80073f4:	20000e50 	.word	0x20000e50
 80073f8:	20000e60 	.word	0x20000e60
 80073fc:	20000e4c 	.word	0x20000e4c
 8007400:	20000d48 	.word	0x20000d48
 8007404:	e000ed04 	.word	0xe000ed04

08007408 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007410:	2300      	movs	r3, #0
 8007412:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d017      	beq.n	800744a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800741a:	4b13      	ldr	r3, [pc, #76]	; (8007468 <vTaskDelay+0x60>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00a      	beq.n	8007438 <vTaskDelay+0x30>
	__asm volatile
 8007422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007426:	f383 8811 	msr	BASEPRI, r3
 800742a:	f3bf 8f6f 	isb	sy
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	60bb      	str	r3, [r7, #8]
}
 8007434:	bf00      	nop
 8007436:	e7fe      	b.n	8007436 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007438:	f000 f9b6 	bl	80077a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800743c:	2100      	movs	r1, #0
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fe3a 	bl	80080b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007444:	f000 f9be 	bl	80077c4 <xTaskResumeAll>
 8007448:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d107      	bne.n	8007460 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007450:	4b06      	ldr	r3, [pc, #24]	; (800746c <vTaskDelay+0x64>)
 8007452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007460:	bf00      	nop
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	20000e6c 	.word	0x20000e6c
 800746c:	e000ed04 	.word	0xe000ed04

08007470 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007478:	f001 fb7c 	bl	8008b74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d102      	bne.n	8007488 <vTaskSuspend+0x18>
 8007482:	4b3c      	ldr	r3, [pc, #240]	; (8007574 <vTaskSuspend+0x104>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	e000      	b.n	800748a <vTaskSuspend+0x1a>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3304      	adds	r3, #4
 8007490:	4618      	mov	r0, r3
 8007492:	f7ff f8d9 	bl	8006648 <uxListRemove>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d115      	bne.n	80074c8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a0:	4935      	ldr	r1, [pc, #212]	; (8007578 <vTaskSuspend+0x108>)
 80074a2:	4613      	mov	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	440b      	add	r3, r1
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10a      	bne.n	80074c8 <vTaskSuspend+0x58>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b6:	2201      	movs	r2, #1
 80074b8:	fa02 f303 	lsl.w	r3, r2, r3
 80074bc:	43da      	mvns	r2, r3
 80074be:	4b2f      	ldr	r3, [pc, #188]	; (800757c <vTaskSuspend+0x10c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4013      	ands	r3, r2
 80074c4:	4a2d      	ldr	r2, [pc, #180]	; (800757c <vTaskSuspend+0x10c>)
 80074c6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d004      	beq.n	80074da <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	3318      	adds	r3, #24
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7ff f8b7 	bl	8006648 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3304      	adds	r3, #4
 80074de:	4619      	mov	r1, r3
 80074e0:	4827      	ldr	r0, [pc, #156]	; (8007580 <vTaskSuspend+0x110>)
 80074e2:	f7ff f854 	bl	800658e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d103      	bne.n	80074fa <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80074fa:	f001 fb6b 	bl	8008bd4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80074fe:	4b21      	ldr	r3, [pc, #132]	; (8007584 <vTaskSuspend+0x114>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007506:	f001 fb35 	bl	8008b74 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800750a:	f000 fd11 	bl	8007f30 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800750e:	f001 fb61 	bl	8008bd4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007512:	4b18      	ldr	r3, [pc, #96]	; (8007574 <vTaskSuspend+0x104>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	429a      	cmp	r2, r3
 800751a:	d127      	bne.n	800756c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800751c:	4b19      	ldr	r3, [pc, #100]	; (8007584 <vTaskSuspend+0x114>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d017      	beq.n	8007554 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007524:	4b18      	ldr	r3, [pc, #96]	; (8007588 <vTaskSuspend+0x118>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <vTaskSuspend+0xd2>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	60bb      	str	r3, [r7, #8]
}
 800753e:	bf00      	nop
 8007540:	e7fe      	b.n	8007540 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8007542:	4b12      	ldr	r3, [pc, #72]	; (800758c <vTaskSuspend+0x11c>)
 8007544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007552:	e00b      	b.n	800756c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007554:	4b0a      	ldr	r3, [pc, #40]	; (8007580 <vTaskSuspend+0x110>)
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	4b0d      	ldr	r3, [pc, #52]	; (8007590 <vTaskSuspend+0x120>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	429a      	cmp	r2, r3
 800755e:	d103      	bne.n	8007568 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8007560:	4b04      	ldr	r3, [pc, #16]	; (8007574 <vTaskSuspend+0x104>)
 8007562:	2200      	movs	r2, #0
 8007564:	601a      	str	r2, [r3, #0]
	}
 8007566:	e001      	b.n	800756c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8007568:	f000 fa98 	bl	8007a9c <vTaskSwitchContext>
	}
 800756c:	bf00      	nop
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	20000d44 	.word	0x20000d44
 8007578:	20000d48 	.word	0x20000d48
 800757c:	20000e4c 	.word	0x20000e4c
 8007580:	20000e30 	.word	0x20000e30
 8007584:	20000e50 	.word	0x20000e50
 8007588:	20000e6c 	.word	0x20000e6c
 800758c:	e000ed04 	.word	0xe000ed04
 8007590:	20000e44 	.word	0x20000e44

08007594 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800759c:	2300      	movs	r3, #0
 800759e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10a      	bne.n	80075c0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	60fb      	str	r3, [r7, #12]
}
 80075bc:	bf00      	nop
 80075be:	e7fe      	b.n	80075be <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	4a0a      	ldr	r2, [pc, #40]	; (80075f0 <prvTaskIsTaskSuspended+0x5c>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d10a      	bne.n	80075e0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ce:	4a09      	ldr	r2, [pc, #36]	; (80075f4 <prvTaskIsTaskSuspended+0x60>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d005      	beq.n	80075e0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d101      	bne.n	80075e0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80075dc:	2301      	movs	r3, #1
 80075de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075e0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80075e2:	4618      	mov	r0, r3
 80075e4:	371c      	adds	r7, #28
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	20000e30 	.word	0x20000e30
 80075f4:	20000e04 	.word	0x20000e04

080075f8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b08a      	sub	sp, #40	; 0x28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8007600:	2300      	movs	r3, #0
 8007602:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10a      	bne.n	8007624 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	61bb      	str	r3, [r7, #24]
}
 8007620:	bf00      	nop
 8007622:	e7fe      	b.n	8007622 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007624:	f001 fb88 	bl	8008d38 <vPortValidateInterruptPriority>
	__asm volatile
 8007628:	f3ef 8211 	mrs	r2, BASEPRI
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	617a      	str	r2, [r7, #20]
 800763e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007640:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007642:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007644:	6a38      	ldr	r0, [r7, #32]
 8007646:	f7ff ffa5 	bl	8007594 <prvTaskIsTaskSuspended>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d02f      	beq.n	80076b0 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007650:	4b1d      	ldr	r3, [pc, #116]	; (80076c8 <xTaskResumeFromISR+0xd0>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d125      	bne.n	80076a4 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007658:	6a3b      	ldr	r3, [r7, #32]
 800765a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765c:	4b1b      	ldr	r3, [pc, #108]	; (80076cc <xTaskResumeFromISR+0xd4>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007662:	429a      	cmp	r2, r3
 8007664:	d301      	bcc.n	800766a <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8007666:	2301      	movs	r3, #1
 8007668:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800766a:	6a3b      	ldr	r3, [r7, #32]
 800766c:	3304      	adds	r3, #4
 800766e:	4618      	mov	r0, r3
 8007670:	f7fe ffea 	bl	8006648 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007678:	2201      	movs	r2, #1
 800767a:	409a      	lsls	r2, r3
 800767c:	4b14      	ldr	r3, [pc, #80]	; (80076d0 <xTaskResumeFromISR+0xd8>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4313      	orrs	r3, r2
 8007682:	4a13      	ldr	r2, [pc, #76]	; (80076d0 <xTaskResumeFromISR+0xd8>)
 8007684:	6013      	str	r3, [r2, #0]
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4a10      	ldr	r2, [pc, #64]	; (80076d4 <xTaskResumeFromISR+0xdc>)
 8007694:	441a      	add	r2, r3
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	3304      	adds	r3, #4
 800769a:	4619      	mov	r1, r3
 800769c:	4610      	mov	r0, r2
 800769e:	f7fe ff76 	bl	800658e <vListInsertEnd>
 80076a2:	e005      	b.n	80076b0 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	3318      	adds	r3, #24
 80076a8:	4619      	mov	r1, r3
 80076aa:	480b      	ldr	r0, [pc, #44]	; (80076d8 <xTaskResumeFromISR+0xe0>)
 80076ac:	f7fe ff6f 	bl	800658e <vListInsertEnd>
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f383 8811 	msr	BASEPRI, r3
}
 80076ba:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80076bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80076be:	4618      	mov	r0, r3
 80076c0:	3728      	adds	r7, #40	; 0x28
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20000e6c 	.word	0x20000e6c
 80076cc:	20000d44 	.word	0x20000d44
 80076d0:	20000e4c 	.word	0x20000e4c
 80076d4:	20000d48 	.word	0x20000d48
 80076d8:	20000e04 	.word	0x20000e04

080076dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08a      	sub	sp, #40	; 0x28
 80076e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076e6:	2300      	movs	r3, #0
 80076e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076ea:	463a      	mov	r2, r7
 80076ec:	1d39      	adds	r1, r7, #4
 80076ee:	f107 0308 	add.w	r3, r7, #8
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7f9 fcb6 	bl	8001064 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	9202      	str	r2, [sp, #8]
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	2300      	movs	r3, #0
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	2300      	movs	r3, #0
 8007708:	460a      	mov	r2, r1
 800770a:	4921      	ldr	r1, [pc, #132]	; (8007790 <vTaskStartScheduler+0xb4>)
 800770c:	4821      	ldr	r0, [pc, #132]	; (8007794 <vTaskStartScheduler+0xb8>)
 800770e:	f7ff fce7 	bl	80070e0 <xTaskCreateStatic>
 8007712:	4603      	mov	r3, r0
 8007714:	4a20      	ldr	r2, [pc, #128]	; (8007798 <vTaskStartScheduler+0xbc>)
 8007716:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007718:	4b1f      	ldr	r3, [pc, #124]	; (8007798 <vTaskStartScheduler+0xbc>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007720:	2301      	movs	r3, #1
 8007722:	617b      	str	r3, [r7, #20]
 8007724:	e001      	b.n	800772a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007726:	2300      	movs	r3, #0
 8007728:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d102      	bne.n	8007736 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007730:	f000 fd28 	bl	8008184 <xTimerCreateTimerTask>
 8007734:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d116      	bne.n	800776a <vTaskStartScheduler+0x8e>
	__asm volatile
 800773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	613b      	str	r3, [r7, #16]
}
 800774e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007750:	4b12      	ldr	r3, [pc, #72]	; (800779c <vTaskStartScheduler+0xc0>)
 8007752:	f04f 32ff 	mov.w	r2, #4294967295
 8007756:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007758:	4b11      	ldr	r3, [pc, #68]	; (80077a0 <vTaskStartScheduler+0xc4>)
 800775a:	2201      	movs	r2, #1
 800775c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800775e:	4b11      	ldr	r3, [pc, #68]	; (80077a4 <vTaskStartScheduler+0xc8>)
 8007760:	2200      	movs	r2, #0
 8007762:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007764:	f001 f964 	bl	8008a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007768:	e00e      	b.n	8007788 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007770:	d10a      	bne.n	8007788 <vTaskStartScheduler+0xac>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	60fb      	str	r3, [r7, #12]
}
 8007784:	bf00      	nop
 8007786:	e7fe      	b.n	8007786 <vTaskStartScheduler+0xaa>
}
 8007788:	bf00      	nop
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	0800c2d4 	.word	0x0800c2d4
 8007794:	08007dc1 	.word	0x08007dc1
 8007798:	20000e68 	.word	0x20000e68
 800779c:	20000e64 	.word	0x20000e64
 80077a0:	20000e50 	.word	0x20000e50
 80077a4:	20000e48 	.word	0x20000e48

080077a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077a8:	b480      	push	{r7}
 80077aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80077ac:	4b04      	ldr	r3, [pc, #16]	; (80077c0 <vTaskSuspendAll+0x18>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3301      	adds	r3, #1
 80077b2:	4a03      	ldr	r2, [pc, #12]	; (80077c0 <vTaskSuspendAll+0x18>)
 80077b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80077b6:	bf00      	nop
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	20000e6c 	.word	0x20000e6c

080077c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077ce:	2300      	movs	r3, #0
 80077d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077d2:	4b41      	ldr	r3, [pc, #260]	; (80078d8 <xTaskResumeAll+0x114>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10a      	bne.n	80077f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80077da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	603b      	str	r3, [r7, #0]
}
 80077ec:	bf00      	nop
 80077ee:	e7fe      	b.n	80077ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077f0:	f001 f9c0 	bl	8008b74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077f4:	4b38      	ldr	r3, [pc, #224]	; (80078d8 <xTaskResumeAll+0x114>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	4a37      	ldr	r2, [pc, #220]	; (80078d8 <xTaskResumeAll+0x114>)
 80077fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077fe:	4b36      	ldr	r3, [pc, #216]	; (80078d8 <xTaskResumeAll+0x114>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d161      	bne.n	80078ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007806:	4b35      	ldr	r3, [pc, #212]	; (80078dc <xTaskResumeAll+0x118>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d05d      	beq.n	80078ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800780e:	e02e      	b.n	800786e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007810:	4b33      	ldr	r3, [pc, #204]	; (80078e0 <xTaskResumeAll+0x11c>)
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	3318      	adds	r3, #24
 800781c:	4618      	mov	r0, r3
 800781e:	f7fe ff13 	bl	8006648 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	3304      	adds	r3, #4
 8007826:	4618      	mov	r0, r3
 8007828:	f7fe ff0e 	bl	8006648 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007830:	2201      	movs	r2, #1
 8007832:	409a      	lsls	r2, r3
 8007834:	4b2b      	ldr	r3, [pc, #172]	; (80078e4 <xTaskResumeAll+0x120>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4313      	orrs	r3, r2
 800783a:	4a2a      	ldr	r2, [pc, #168]	; (80078e4 <xTaskResumeAll+0x120>)
 800783c:	6013      	str	r3, [r2, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007842:	4613      	mov	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	4413      	add	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	4a27      	ldr	r2, [pc, #156]	; (80078e8 <xTaskResumeAll+0x124>)
 800784c:	441a      	add	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	3304      	adds	r3, #4
 8007852:	4619      	mov	r1, r3
 8007854:	4610      	mov	r0, r2
 8007856:	f7fe fe9a 	bl	800658e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785e:	4b23      	ldr	r3, [pc, #140]	; (80078ec <xTaskResumeAll+0x128>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007864:	429a      	cmp	r2, r3
 8007866:	d302      	bcc.n	800786e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007868:	4b21      	ldr	r3, [pc, #132]	; (80078f0 <xTaskResumeAll+0x12c>)
 800786a:	2201      	movs	r2, #1
 800786c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800786e:	4b1c      	ldr	r3, [pc, #112]	; (80078e0 <xTaskResumeAll+0x11c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1cc      	bne.n	8007810 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d001      	beq.n	8007880 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800787c:	f000 fb58 	bl	8007f30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007880:	4b1c      	ldr	r3, [pc, #112]	; (80078f4 <xTaskResumeAll+0x130>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d010      	beq.n	80078ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800788c:	f000 f846 	bl	800791c <xTaskIncrementTick>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007896:	4b16      	ldr	r3, [pc, #88]	; (80078f0 <xTaskResumeAll+0x12c>)
 8007898:	2201      	movs	r2, #1
 800789a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	3b01      	subs	r3, #1
 80078a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1f1      	bne.n	800788c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80078a8:	4b12      	ldr	r3, [pc, #72]	; (80078f4 <xTaskResumeAll+0x130>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078ae:	4b10      	ldr	r3, [pc, #64]	; (80078f0 <xTaskResumeAll+0x12c>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d009      	beq.n	80078ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078b6:	2301      	movs	r3, #1
 80078b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078ba:	4b0f      	ldr	r3, [pc, #60]	; (80078f8 <xTaskResumeAll+0x134>)
 80078bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	f3bf 8f4f 	dsb	sy
 80078c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078ca:	f001 f983 	bl	8008bd4 <vPortExitCritical>

	return xAlreadyYielded;
 80078ce:	68bb      	ldr	r3, [r7, #8]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	20000e6c 	.word	0x20000e6c
 80078dc:	20000e44 	.word	0x20000e44
 80078e0:	20000e04 	.word	0x20000e04
 80078e4:	20000e4c 	.word	0x20000e4c
 80078e8:	20000d48 	.word	0x20000d48
 80078ec:	20000d44 	.word	0x20000d44
 80078f0:	20000e58 	.word	0x20000e58
 80078f4:	20000e54 	.word	0x20000e54
 80078f8:	e000ed04 	.word	0xe000ed04

080078fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007902:	4b05      	ldr	r3, [pc, #20]	; (8007918 <xTaskGetTickCount+0x1c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007908:	687b      	ldr	r3, [r7, #4]
}
 800790a:	4618      	mov	r0, r3
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	20000e48 	.word	0x20000e48

0800791c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007922:	2300      	movs	r3, #0
 8007924:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007926:	4b52      	ldr	r3, [pc, #328]	; (8007a70 <xTaskIncrementTick+0x154>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	f040 8094 	bne.w	8007a58 <xTaskIncrementTick+0x13c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007930:	4b50      	ldr	r3, [pc, #320]	; (8007a74 <xTaskIncrementTick+0x158>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3301      	adds	r3, #1
 8007936:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007938:	4a4e      	ldr	r2, [pc, #312]	; (8007a74 <xTaskIncrementTick+0x158>)
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d120      	bne.n	8007986 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007944:	4b4c      	ldr	r3, [pc, #304]	; (8007a78 <xTaskIncrementTick+0x15c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00a      	beq.n	8007964 <xTaskIncrementTick+0x48>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	603b      	str	r3, [r7, #0]
}
 8007960:	bf00      	nop
 8007962:	e7fe      	b.n	8007962 <xTaskIncrementTick+0x46>
 8007964:	4b44      	ldr	r3, [pc, #272]	; (8007a78 <xTaskIncrementTick+0x15c>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	4b44      	ldr	r3, [pc, #272]	; (8007a7c <xTaskIncrementTick+0x160>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a42      	ldr	r2, [pc, #264]	; (8007a78 <xTaskIncrementTick+0x15c>)
 8007970:	6013      	str	r3, [r2, #0]
 8007972:	4a42      	ldr	r2, [pc, #264]	; (8007a7c <xTaskIncrementTick+0x160>)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6013      	str	r3, [r2, #0]
 8007978:	4b41      	ldr	r3, [pc, #260]	; (8007a80 <xTaskIncrementTick+0x164>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3301      	adds	r3, #1
 800797e:	4a40      	ldr	r2, [pc, #256]	; (8007a80 <xTaskIncrementTick+0x164>)
 8007980:	6013      	str	r3, [r2, #0]
 8007982:	f000 fad5 	bl	8007f30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007986:	4b3f      	ldr	r3, [pc, #252]	; (8007a84 <xTaskIncrementTick+0x168>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	429a      	cmp	r2, r3
 800798e:	d348      	bcc.n	8007a22 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007990:	4b39      	ldr	r3, [pc, #228]	; (8007a78 <xTaskIncrementTick+0x15c>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d104      	bne.n	80079a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800799a:	4b3a      	ldr	r3, [pc, #232]	; (8007a84 <xTaskIncrementTick+0x168>)
 800799c:	f04f 32ff 	mov.w	r2, #4294967295
 80079a0:	601a      	str	r2, [r3, #0]
					break;
 80079a2:	e03e      	b.n	8007a22 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079a4:	4b34      	ldr	r3, [pc, #208]	; (8007a78 <xTaskIncrementTick+0x15c>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d203      	bcs.n	80079c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80079bc:	4a31      	ldr	r2, [pc, #196]	; (8007a84 <xTaskIncrementTick+0x168>)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80079c2:	e02e      	b.n	8007a22 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	3304      	adds	r3, #4
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fe fe3d 	bl	8006648 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d004      	beq.n	80079e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	3318      	adds	r3, #24
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fe fe34 	bl	8006648 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	2201      	movs	r2, #1
 80079e6:	409a      	lsls	r2, r3
 80079e8:	4b27      	ldr	r3, [pc, #156]	; (8007a88 <xTaskIncrementTick+0x16c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	4a26      	ldr	r2, [pc, #152]	; (8007a88 <xTaskIncrementTick+0x16c>)
 80079f0:	6013      	str	r3, [r2, #0]
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4a23      	ldr	r2, [pc, #140]	; (8007a8c <xTaskIncrementTick+0x170>)
 8007a00:	441a      	add	r2, r3
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	3304      	adds	r3, #4
 8007a06:	4619      	mov	r1, r3
 8007a08:	4610      	mov	r0, r2
 8007a0a:	f7fe fdc0 	bl	800658e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a12:	4b1f      	ldr	r3, [pc, #124]	; (8007a90 <xTaskIncrementTick+0x174>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d3b9      	bcc.n	8007990 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a20:	e7b6      	b.n	8007990 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a22:	4b1b      	ldr	r3, [pc, #108]	; (8007a90 <xTaskIncrementTick+0x174>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a28:	4918      	ldr	r1, [pc, #96]	; (8007a8c <xTaskIncrementTick+0x170>)
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4413      	add	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	440b      	add	r3, r1
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d901      	bls.n	8007a3e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8007a3e:	4b15      	ldr	r3, [pc, #84]	; (8007a94 <xTaskIncrementTick+0x178>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <xTaskIncrementTick+0x12e>
			{
				vApplicationTickHook();
 8007a46:	f7f9 fb06 	bl	8001056 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a4a:	4b13      	ldr	r3, [pc, #76]	; (8007a98 <xTaskIncrementTick+0x17c>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d009      	beq.n	8007a66 <xTaskIncrementTick+0x14a>
			{
				xSwitchRequired = pdTRUE;
 8007a52:	2301      	movs	r3, #1
 8007a54:	617b      	str	r3, [r7, #20]
 8007a56:	e006      	b.n	8007a66 <xTaskIncrementTick+0x14a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a58:	4b0e      	ldr	r3, [pc, #56]	; (8007a94 <xTaskIncrementTick+0x178>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	4a0d      	ldr	r2, [pc, #52]	; (8007a94 <xTaskIncrementTick+0x178>)
 8007a60:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8007a62:	f7f9 faf8 	bl	8001056 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8007a66:	697b      	ldr	r3, [r7, #20]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20000e6c 	.word	0x20000e6c
 8007a74:	20000e48 	.word	0x20000e48
 8007a78:	20000dfc 	.word	0x20000dfc
 8007a7c:	20000e00 	.word	0x20000e00
 8007a80:	20000e5c 	.word	0x20000e5c
 8007a84:	20000e64 	.word	0x20000e64
 8007a88:	20000e4c 	.word	0x20000e4c
 8007a8c:	20000d48 	.word	0x20000d48
 8007a90:	20000d44 	.word	0x20000d44
 8007a94:	20000e54 	.word	0x20000e54
 8007a98:	20000e58 	.word	0x20000e58

08007a9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007aa2:	4b27      	ldr	r3, [pc, #156]	; (8007b40 <vTaskSwitchContext+0xa4>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007aaa:	4b26      	ldr	r3, [pc, #152]	; (8007b44 <vTaskSwitchContext+0xa8>)
 8007aac:	2201      	movs	r2, #1
 8007aae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ab0:	e03f      	b.n	8007b32 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007ab2:	4b24      	ldr	r3, [pc, #144]	; (8007b44 <vTaskSwitchContext+0xa8>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ab8:	4b23      	ldr	r3, [pc, #140]	; (8007b48 <vTaskSwitchContext+0xac>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	fab3 f383 	clz	r3, r3
 8007ac4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007ac6:	7afb      	ldrb	r3, [r7, #11]
 8007ac8:	f1c3 031f 	rsb	r3, r3, #31
 8007acc:	617b      	str	r3, [r7, #20]
 8007ace:	491f      	ldr	r1, [pc, #124]	; (8007b4c <vTaskSwitchContext+0xb0>)
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	440b      	add	r3, r1
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10a      	bne.n	8007af8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	607b      	str	r3, [r7, #4]
}
 8007af4:	bf00      	nop
 8007af6:	e7fe      	b.n	8007af6 <vTaskSwitchContext+0x5a>
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	4613      	mov	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4a12      	ldr	r2, [pc, #72]	; (8007b4c <vTaskSwitchContext+0xb0>)
 8007b04:	4413      	add	r3, r2
 8007b06:	613b      	str	r3, [r7, #16]
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	605a      	str	r2, [r3, #4]
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	3308      	adds	r3, #8
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d104      	bne.n	8007b28 <vTaskSwitchContext+0x8c>
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	605a      	str	r2, [r3, #4]
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	4a08      	ldr	r2, [pc, #32]	; (8007b50 <vTaskSwitchContext+0xb4>)
 8007b30:	6013      	str	r3, [r2, #0]
}
 8007b32:	bf00      	nop
 8007b34:	371c      	adds	r7, #28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20000e6c 	.word	0x20000e6c
 8007b44:	20000e58 	.word	0x20000e58
 8007b48:	20000e4c 	.word	0x20000e4c
 8007b4c:	20000d48 	.word	0x20000d48
 8007b50:	20000d44 	.word	0x20000d44

08007b54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10a      	bne.n	8007b7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	60fb      	str	r3, [r7, #12]
}
 8007b76:	bf00      	nop
 8007b78:	e7fe      	b.n	8007b78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b7a:	4b07      	ldr	r3, [pc, #28]	; (8007b98 <vTaskPlaceOnEventList+0x44>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3318      	adds	r3, #24
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7fe fd27 	bl	80065d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b88:	2101      	movs	r1, #1
 8007b8a:	6838      	ldr	r0, [r7, #0]
 8007b8c:	f000 fa94 	bl	80080b8 <prvAddCurrentTaskToDelayedList>
}
 8007b90:	bf00      	nop
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	20000d44 	.word	0x20000d44

08007b9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10a      	bne.n	8007bc4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	617b      	str	r3, [r7, #20]
}
 8007bc0:	bf00      	nop
 8007bc2:	e7fe      	b.n	8007bc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bc4:	4b0a      	ldr	r3, [pc, #40]	; (8007bf0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3318      	adds	r3, #24
 8007bca:	4619      	mov	r1, r3
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f7fe fcde 	bl	800658e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bdc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007bde:	6879      	ldr	r1, [r7, #4]
 8007be0:	68b8      	ldr	r0, [r7, #8]
 8007be2:	f000 fa69 	bl	80080b8 <prvAddCurrentTaskToDelayedList>
	}
 8007be6:	bf00      	nop
 8007be8:	3718      	adds	r7, #24
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	20000d44 	.word	0x20000d44

08007bf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10a      	bne.n	8007c20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	60fb      	str	r3, [r7, #12]
}
 8007c1c:	bf00      	nop
 8007c1e:	e7fe      	b.n	8007c1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	3318      	adds	r3, #24
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fe fd0f 	bl	8006648 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c2a:	4b1d      	ldr	r3, [pc, #116]	; (8007ca0 <xTaskRemoveFromEventList+0xac>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d11c      	bne.n	8007c6c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	3304      	adds	r3, #4
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe fd06 	bl	8006648 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c40:	2201      	movs	r2, #1
 8007c42:	409a      	lsls	r2, r3
 8007c44:	4b17      	ldr	r3, [pc, #92]	; (8007ca4 <xTaskRemoveFromEventList+0xb0>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	4a16      	ldr	r2, [pc, #88]	; (8007ca4 <xTaskRemoveFromEventList+0xb0>)
 8007c4c:	6013      	str	r3, [r2, #0]
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c52:	4613      	mov	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4a13      	ldr	r2, [pc, #76]	; (8007ca8 <xTaskRemoveFromEventList+0xb4>)
 8007c5c:	441a      	add	r2, r3
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	3304      	adds	r3, #4
 8007c62:	4619      	mov	r1, r3
 8007c64:	4610      	mov	r0, r2
 8007c66:	f7fe fc92 	bl	800658e <vListInsertEnd>
 8007c6a:	e005      	b.n	8007c78 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	3318      	adds	r3, #24
 8007c70:	4619      	mov	r1, r3
 8007c72:	480e      	ldr	r0, [pc, #56]	; (8007cac <xTaskRemoveFromEventList+0xb8>)
 8007c74:	f7fe fc8b 	bl	800658e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7c:	4b0c      	ldr	r3, [pc, #48]	; (8007cb0 <xTaskRemoveFromEventList+0xbc>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d905      	bls.n	8007c92 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c86:	2301      	movs	r3, #1
 8007c88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c8a:	4b0a      	ldr	r3, [pc, #40]	; (8007cb4 <xTaskRemoveFromEventList+0xc0>)
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	601a      	str	r2, [r3, #0]
 8007c90:	e001      	b.n	8007c96 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007c92:	2300      	movs	r3, #0
 8007c94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c96:	697b      	ldr	r3, [r7, #20]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20000e6c 	.word	0x20000e6c
 8007ca4:	20000e4c 	.word	0x20000e4c
 8007ca8:	20000d48 	.word	0x20000d48
 8007cac:	20000e04 	.word	0x20000e04
 8007cb0:	20000d44 	.word	0x20000d44
 8007cb4:	20000e58 	.word	0x20000e58

08007cb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007cc0:	4b06      	ldr	r3, [pc, #24]	; (8007cdc <vTaskInternalSetTimeOutState+0x24>)
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007cc8:	4b05      	ldr	r3, [pc, #20]	; (8007ce0 <vTaskInternalSetTimeOutState+0x28>)
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	605a      	str	r2, [r3, #4]
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	20000e5c 	.word	0x20000e5c
 8007ce0:	20000e48 	.word	0x20000e48

08007ce4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b088      	sub	sp, #32
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10a      	bne.n	8007d0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	613b      	str	r3, [r7, #16]
}
 8007d06:	bf00      	nop
 8007d08:	e7fe      	b.n	8007d08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10a      	bne.n	8007d26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	60fb      	str	r3, [r7, #12]
}
 8007d22:	bf00      	nop
 8007d24:	e7fe      	b.n	8007d24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007d26:	f000 ff25 	bl	8008b74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d2a:	4b1d      	ldr	r3, [pc, #116]	; (8007da0 <xTaskCheckForTimeOut+0xbc>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d42:	d102      	bne.n	8007d4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d44:	2300      	movs	r3, #0
 8007d46:	61fb      	str	r3, [r7, #28]
 8007d48:	e023      	b.n	8007d92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	4b15      	ldr	r3, [pc, #84]	; (8007da4 <xTaskCheckForTimeOut+0xc0>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d007      	beq.n	8007d66 <xTaskCheckForTimeOut+0x82>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d302      	bcc.n	8007d66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d60:	2301      	movs	r3, #1
 8007d62:	61fb      	str	r3, [r7, #28]
 8007d64:	e015      	b.n	8007d92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d20b      	bcs.n	8007d88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	1ad2      	subs	r2, r2, r3
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff ff9b 	bl	8007cb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d82:	2300      	movs	r3, #0
 8007d84:	61fb      	str	r3, [r7, #28]
 8007d86:	e004      	b.n	8007d92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d92:	f000 ff1f 	bl	8008bd4 <vPortExitCritical>

	return xReturn;
 8007d96:	69fb      	ldr	r3, [r7, #28]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3720      	adds	r7, #32
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	20000e48 	.word	0x20000e48
 8007da4:	20000e5c 	.word	0x20000e5c

08007da8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007da8:	b480      	push	{r7}
 8007daa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007dac:	4b03      	ldr	r3, [pc, #12]	; (8007dbc <vTaskMissedYield+0x14>)
 8007dae:	2201      	movs	r2, #1
 8007db0:	601a      	str	r2, [r3, #0]
}
 8007db2:	bf00      	nop
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	20000e58 	.word	0x20000e58

08007dc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007dc8:	f000 f854 	bl	8007e74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007dcc:	4b07      	ldr	r3, [pc, #28]	; (8007dec <prvIdleTask+0x2c>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d907      	bls.n	8007de4 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007dd4:	4b06      	ldr	r3, [pc, #24]	; (8007df0 <prvIdleTask+0x30>)
 8007dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dda:	601a      	str	r2, [r3, #0]
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007de4:	f7f9 f930 	bl	8001048 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007de8:	e7ee      	b.n	8007dc8 <prvIdleTask+0x8>
 8007dea:	bf00      	nop
 8007dec:	20000d48 	.word	0x20000d48
 8007df0:	e000ed04 	.word	0xe000ed04

08007df4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	607b      	str	r3, [r7, #4]
 8007dfe:	e00c      	b.n	8007e1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	4613      	mov	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4a12      	ldr	r2, [pc, #72]	; (8007e54 <prvInitialiseTaskLists+0x60>)
 8007e0c:	4413      	add	r3, r2
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fe fb90 	bl	8006534 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3301      	adds	r3, #1
 8007e18:	607b      	str	r3, [r7, #4]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b06      	cmp	r3, #6
 8007e1e:	d9ef      	bls.n	8007e00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e20:	480d      	ldr	r0, [pc, #52]	; (8007e58 <prvInitialiseTaskLists+0x64>)
 8007e22:	f7fe fb87 	bl	8006534 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e26:	480d      	ldr	r0, [pc, #52]	; (8007e5c <prvInitialiseTaskLists+0x68>)
 8007e28:	f7fe fb84 	bl	8006534 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e2c:	480c      	ldr	r0, [pc, #48]	; (8007e60 <prvInitialiseTaskLists+0x6c>)
 8007e2e:	f7fe fb81 	bl	8006534 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e32:	480c      	ldr	r0, [pc, #48]	; (8007e64 <prvInitialiseTaskLists+0x70>)
 8007e34:	f7fe fb7e 	bl	8006534 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e38:	480b      	ldr	r0, [pc, #44]	; (8007e68 <prvInitialiseTaskLists+0x74>)
 8007e3a:	f7fe fb7b 	bl	8006534 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e3e:	4b0b      	ldr	r3, [pc, #44]	; (8007e6c <prvInitialiseTaskLists+0x78>)
 8007e40:	4a05      	ldr	r2, [pc, #20]	; (8007e58 <prvInitialiseTaskLists+0x64>)
 8007e42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e44:	4b0a      	ldr	r3, [pc, #40]	; (8007e70 <prvInitialiseTaskLists+0x7c>)
 8007e46:	4a05      	ldr	r2, [pc, #20]	; (8007e5c <prvInitialiseTaskLists+0x68>)
 8007e48:	601a      	str	r2, [r3, #0]
}
 8007e4a:	bf00      	nop
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000d48 	.word	0x20000d48
 8007e58:	20000dd4 	.word	0x20000dd4
 8007e5c:	20000de8 	.word	0x20000de8
 8007e60:	20000e04 	.word	0x20000e04
 8007e64:	20000e18 	.word	0x20000e18
 8007e68:	20000e30 	.word	0x20000e30
 8007e6c:	20000dfc 	.word	0x20000dfc
 8007e70:	20000e00 	.word	0x20000e00

08007e74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e7a:	e019      	b.n	8007eb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e7c:	f000 fe7a 	bl	8008b74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e80:	4b10      	ldr	r3, [pc, #64]	; (8007ec4 <prvCheckTasksWaitingTermination+0x50>)
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fe fbdb 	bl	8006648 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e92:	4b0d      	ldr	r3, [pc, #52]	; (8007ec8 <prvCheckTasksWaitingTermination+0x54>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	3b01      	subs	r3, #1
 8007e98:	4a0b      	ldr	r2, [pc, #44]	; (8007ec8 <prvCheckTasksWaitingTermination+0x54>)
 8007e9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e9c:	4b0b      	ldr	r3, [pc, #44]	; (8007ecc <prvCheckTasksWaitingTermination+0x58>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	4a0a      	ldr	r2, [pc, #40]	; (8007ecc <prvCheckTasksWaitingTermination+0x58>)
 8007ea4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ea6:	f000 fe95 	bl	8008bd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f810 	bl	8007ed0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007eb0:	4b06      	ldr	r3, [pc, #24]	; (8007ecc <prvCheckTasksWaitingTermination+0x58>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e1      	bne.n	8007e7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007eb8:	bf00      	nop
 8007eba:	bf00      	nop
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	20000e18 	.word	0x20000e18
 8007ec8:	20000e44 	.word	0x20000e44
 8007ecc:	20000e2c 	.word	0x20000e2c

08007ed0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d108      	bne.n	8007ef4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f001 f832 	bl	8008f50 <vPortFree>
				vPortFree( pxTCB );
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f001 f82f 	bl	8008f50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ef2:	e018      	b.n	8007f26 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d103      	bne.n	8007f06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f001 f826 	bl	8008f50 <vPortFree>
	}
 8007f04:	e00f      	b.n	8007f26 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d00a      	beq.n	8007f26 <prvDeleteTCB+0x56>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	60fb      	str	r3, [r7, #12]
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <prvDeleteTCB+0x54>
	}
 8007f26:	bf00      	nop
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
	...

08007f30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f36:	4b0c      	ldr	r3, [pc, #48]	; (8007f68 <prvResetNextTaskUnblockTime+0x38>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d104      	bne.n	8007f4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f40:	4b0a      	ldr	r3, [pc, #40]	; (8007f6c <prvResetNextTaskUnblockTime+0x3c>)
 8007f42:	f04f 32ff 	mov.w	r2, #4294967295
 8007f46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f48:	e008      	b.n	8007f5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f4a:	4b07      	ldr	r3, [pc, #28]	; (8007f68 <prvResetNextTaskUnblockTime+0x38>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	4a04      	ldr	r2, [pc, #16]	; (8007f6c <prvResetNextTaskUnblockTime+0x3c>)
 8007f5a:	6013      	str	r3, [r2, #0]
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	20000dfc 	.word	0x20000dfc
 8007f6c:	20000e64 	.word	0x20000e64

08007f70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f76:	4b0b      	ldr	r3, [pc, #44]	; (8007fa4 <xTaskGetSchedulerState+0x34>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d102      	bne.n	8007f84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	607b      	str	r3, [r7, #4]
 8007f82:	e008      	b.n	8007f96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f84:	4b08      	ldr	r3, [pc, #32]	; (8007fa8 <xTaskGetSchedulerState+0x38>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d102      	bne.n	8007f92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	607b      	str	r3, [r7, #4]
 8007f90:	e001      	b.n	8007f96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f92:	2300      	movs	r3, #0
 8007f94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f96:	687b      	ldr	r3, [r7, #4]
	}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	20000e50 	.word	0x20000e50
 8007fa8:	20000e6c 	.word	0x20000e6c

08007fac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d06e      	beq.n	80080a0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007fc2:	4b3a      	ldr	r3, [pc, #232]	; (80080ac <xTaskPriorityDisinherit+0x100>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d00a      	beq.n	8007fe2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	60fb      	str	r3, [r7, #12]
}
 8007fde:	bf00      	nop
 8007fe0:	e7fe      	b.n	8007fe0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10a      	bne.n	8008000 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	60bb      	str	r3, [r7, #8]
}
 8007ffc:	bf00      	nop
 8007ffe:	e7fe      	b.n	8007ffe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008004:	1e5a      	subs	r2, r3, #1
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008012:	429a      	cmp	r2, r3
 8008014:	d044      	beq.n	80080a0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800801a:	2b00      	cmp	r3, #0
 800801c:	d140      	bne.n	80080a0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	3304      	adds	r3, #4
 8008022:	4618      	mov	r0, r3
 8008024:	f7fe fb10 	bl	8006648 <uxListRemove>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d115      	bne.n	800805a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008032:	491f      	ldr	r1, [pc, #124]	; (80080b0 <xTaskPriorityDisinherit+0x104>)
 8008034:	4613      	mov	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	440b      	add	r3, r1
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10a      	bne.n	800805a <xTaskPriorityDisinherit+0xae>
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008048:	2201      	movs	r2, #1
 800804a:	fa02 f303 	lsl.w	r3, r2, r3
 800804e:	43da      	mvns	r2, r3
 8008050:	4b18      	ldr	r3, [pc, #96]	; (80080b4 <xTaskPriorityDisinherit+0x108>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4013      	ands	r3, r2
 8008056:	4a17      	ldr	r2, [pc, #92]	; (80080b4 <xTaskPriorityDisinherit+0x108>)
 8008058:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008066:	f1c3 0207 	rsb	r2, r3, #7
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008072:	2201      	movs	r2, #1
 8008074:	409a      	lsls	r2, r3
 8008076:	4b0f      	ldr	r3, [pc, #60]	; (80080b4 <xTaskPriorityDisinherit+0x108>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4313      	orrs	r3, r2
 800807c:	4a0d      	ldr	r2, [pc, #52]	; (80080b4 <xTaskPriorityDisinherit+0x108>)
 800807e:	6013      	str	r3, [r2, #0]
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008084:	4613      	mov	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4a08      	ldr	r2, [pc, #32]	; (80080b0 <xTaskPriorityDisinherit+0x104>)
 800808e:	441a      	add	r2, r3
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	3304      	adds	r3, #4
 8008094:	4619      	mov	r1, r3
 8008096:	4610      	mov	r0, r2
 8008098:	f7fe fa79 	bl	800658e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800809c:	2301      	movs	r3, #1
 800809e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080a0:	697b      	ldr	r3, [r7, #20]
	}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3718      	adds	r7, #24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20000d44 	.word	0x20000d44
 80080b0:	20000d48 	.word	0x20000d48
 80080b4:	20000e4c 	.word	0x20000e4c

080080b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80080c2:	4b29      	ldr	r3, [pc, #164]	; (8008168 <prvAddCurrentTaskToDelayedList+0xb0>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080c8:	4b28      	ldr	r3, [pc, #160]	; (800816c <prvAddCurrentTaskToDelayedList+0xb4>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3304      	adds	r3, #4
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fe faba 	bl	8006648 <uxListRemove>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10b      	bne.n	80080f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80080da:	4b24      	ldr	r3, [pc, #144]	; (800816c <prvAddCurrentTaskToDelayedList+0xb4>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e0:	2201      	movs	r2, #1
 80080e2:	fa02 f303 	lsl.w	r3, r2, r3
 80080e6:	43da      	mvns	r2, r3
 80080e8:	4b21      	ldr	r3, [pc, #132]	; (8008170 <prvAddCurrentTaskToDelayedList+0xb8>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4013      	ands	r3, r2
 80080ee:	4a20      	ldr	r2, [pc, #128]	; (8008170 <prvAddCurrentTaskToDelayedList+0xb8>)
 80080f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f8:	d10a      	bne.n	8008110 <prvAddCurrentTaskToDelayedList+0x58>
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d007      	beq.n	8008110 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008100:	4b1a      	ldr	r3, [pc, #104]	; (800816c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	3304      	adds	r3, #4
 8008106:	4619      	mov	r1, r3
 8008108:	481a      	ldr	r0, [pc, #104]	; (8008174 <prvAddCurrentTaskToDelayedList+0xbc>)
 800810a:	f7fe fa40 	bl	800658e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800810e:	e026      	b.n	800815e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4413      	add	r3, r2
 8008116:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008118:	4b14      	ldr	r3, [pc, #80]	; (800816c <prvAddCurrentTaskToDelayedList+0xb4>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	429a      	cmp	r2, r3
 8008126:	d209      	bcs.n	800813c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008128:	4b13      	ldr	r3, [pc, #76]	; (8008178 <prvAddCurrentTaskToDelayedList+0xc0>)
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	4b0f      	ldr	r3, [pc, #60]	; (800816c <prvAddCurrentTaskToDelayedList+0xb4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3304      	adds	r3, #4
 8008132:	4619      	mov	r1, r3
 8008134:	4610      	mov	r0, r2
 8008136:	f7fe fa4e 	bl	80065d6 <vListInsert>
}
 800813a:	e010      	b.n	800815e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800813c:	4b0f      	ldr	r3, [pc, #60]	; (800817c <prvAddCurrentTaskToDelayedList+0xc4>)
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	4b0a      	ldr	r3, [pc, #40]	; (800816c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3304      	adds	r3, #4
 8008146:	4619      	mov	r1, r3
 8008148:	4610      	mov	r0, r2
 800814a:	f7fe fa44 	bl	80065d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800814e:	4b0c      	ldr	r3, [pc, #48]	; (8008180 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	429a      	cmp	r2, r3
 8008156:	d202      	bcs.n	800815e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008158:	4a09      	ldr	r2, [pc, #36]	; (8008180 <prvAddCurrentTaskToDelayedList+0xc8>)
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	6013      	str	r3, [r2, #0]
}
 800815e:	bf00      	nop
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20000e48 	.word	0x20000e48
 800816c:	20000d44 	.word	0x20000d44
 8008170:	20000e4c 	.word	0x20000e4c
 8008174:	20000e30 	.word	0x20000e30
 8008178:	20000e00 	.word	0x20000e00
 800817c:	20000dfc 	.word	0x20000dfc
 8008180:	20000e64 	.word	0x20000e64

08008184 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b08a      	sub	sp, #40	; 0x28
 8008188:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800818a:	2300      	movs	r3, #0
 800818c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800818e:	f000 fb85 	bl	800889c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008192:	4b1c      	ldr	r3, [pc, #112]	; (8008204 <xTimerCreateTimerTask+0x80>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d021      	beq.n	80081de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800819e:	2300      	movs	r3, #0
 80081a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081a2:	1d3a      	adds	r2, r7, #4
 80081a4:	f107 0108 	add.w	r1, r7, #8
 80081a8:	f107 030c 	add.w	r3, r7, #12
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7f8 ff73 	bl	8001098 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	9202      	str	r2, [sp, #8]
 80081ba:	9301      	str	r3, [sp, #4]
 80081bc:	2302      	movs	r3, #2
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	2300      	movs	r3, #0
 80081c2:	460a      	mov	r2, r1
 80081c4:	4910      	ldr	r1, [pc, #64]	; (8008208 <xTimerCreateTimerTask+0x84>)
 80081c6:	4811      	ldr	r0, [pc, #68]	; (800820c <xTimerCreateTimerTask+0x88>)
 80081c8:	f7fe ff8a 	bl	80070e0 <xTaskCreateStatic>
 80081cc:	4603      	mov	r3, r0
 80081ce:	4a10      	ldr	r2, [pc, #64]	; (8008210 <xTimerCreateTimerTask+0x8c>)
 80081d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80081d2:	4b0f      	ldr	r3, [pc, #60]	; (8008210 <xTimerCreateTimerTask+0x8c>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80081da:	2301      	movs	r3, #1
 80081dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10a      	bne.n	80081fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 80081e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	613b      	str	r3, [r7, #16]
}
 80081f6:	bf00      	nop
 80081f8:	e7fe      	b.n	80081f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80081fa:	697b      	ldr	r3, [r7, #20]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	20000ea0 	.word	0x20000ea0
 8008208:	0800c2dc 	.word	0x0800c2dc
 800820c:	0800847d 	.word	0x0800847d
 8008210:	20000ea4 	.word	0x20000ea4

08008214 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af02      	add	r7, sp, #8
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
 8008220:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008222:	2028      	movs	r0, #40	; 0x28
 8008224:	f000 fdc8 	bl	8008db8 <pvPortMalloc>
 8008228:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00d      	beq.n	800824c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	9301      	str	r3, [sp, #4]
 800823c:	6a3b      	ldr	r3, [r7, #32]
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	68b9      	ldr	r1, [r7, #8]
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f000 f843 	bl	80082d2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800824c:	697b      	ldr	r3, [r7, #20]
	}
 800824e:	4618      	mov	r0, r3
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008256:	b580      	push	{r7, lr}
 8008258:	b08a      	sub	sp, #40	; 0x28
 800825a:	af02      	add	r7, sp, #8
 800825c:	60f8      	str	r0, [r7, #12]
 800825e:	60b9      	str	r1, [r7, #8]
 8008260:	607a      	str	r2, [r7, #4]
 8008262:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008264:	2328      	movs	r3, #40	; 0x28
 8008266:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	2b28      	cmp	r3, #40	; 0x28
 800826c:	d00a      	beq.n	8008284 <xTimerCreateStatic+0x2e>
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	61bb      	str	r3, [r7, #24]
}
 8008280:	bf00      	nop
 8008282:	e7fe      	b.n	8008282 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008284:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8008286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10a      	bne.n	80082a2 <xTimerCreateStatic+0x4c>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	617b      	str	r3, [r7, #20]
}
 800829e:	bf00      	nop
 80082a0:	e7fe      	b.n	80082a0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80082a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00d      	beq.n	80082c8 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	2202      	movs	r2, #2
 80082b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	9301      	str	r3, [sp, #4]
 80082b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	68b9      	ldr	r1, [r7, #8]
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 f805 	bl	80082d2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80082c8:	69fb      	ldr	r3, [r7, #28]
	}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3720      	adds	r7, #32
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b086      	sub	sp, #24
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	607a      	str	r2, [r7, #4]
 80082de:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10a      	bne.n	80082fc <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80082e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	617b      	str	r3, [r7, #20]
}
 80082f8:	bf00      	nop
 80082fa:	e7fe      	b.n	80082fa <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80082fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d01e      	beq.n	8008340 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008302:	f000 facb 	bl	800889c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	6a3a      	ldr	r2, [r7, #32]
 800831c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	3304      	adds	r3, #4
 8008322:	4618      	mov	r0, r3
 8008324:	f7fe f926 	bl	8006574 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d008      	beq.n	8008340 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008330:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008334:	f043 0304 	orr.w	r3, r3, #4
 8008338:	b2da      	uxtb	r2, r3
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008340:	bf00      	nop
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b08a      	sub	sp, #40	; 0x28
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008356:	2300      	movs	r3, #0
 8008358:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10a      	bne.n	8008376 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008364:	f383 8811 	msr	BASEPRI, r3
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	623b      	str	r3, [r7, #32]
}
 8008372:	bf00      	nop
 8008374:	e7fe      	b.n	8008374 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008376:	4b1a      	ldr	r3, [pc, #104]	; (80083e0 <xTimerGenericCommand+0x98>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d02a      	beq.n	80083d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2b05      	cmp	r3, #5
 800838e:	dc18      	bgt.n	80083c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008390:	f7ff fdee 	bl	8007f70 <xTaskGetSchedulerState>
 8008394:	4603      	mov	r3, r0
 8008396:	2b02      	cmp	r3, #2
 8008398:	d109      	bne.n	80083ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800839a:	4b11      	ldr	r3, [pc, #68]	; (80083e0 <xTimerGenericCommand+0x98>)
 800839c:	6818      	ldr	r0, [r3, #0]
 800839e:	f107 0114 	add.w	r1, r7, #20
 80083a2:	2300      	movs	r3, #0
 80083a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083a6:	f7fe fab3 	bl	8006910 <xQueueGenericSend>
 80083aa:	6278      	str	r0, [r7, #36]	; 0x24
 80083ac:	e012      	b.n	80083d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083ae:	4b0c      	ldr	r3, [pc, #48]	; (80083e0 <xTimerGenericCommand+0x98>)
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	f107 0114 	add.w	r1, r7, #20
 80083b6:	2300      	movs	r3, #0
 80083b8:	2200      	movs	r2, #0
 80083ba:	f7fe faa9 	bl	8006910 <xQueueGenericSend>
 80083be:	6278      	str	r0, [r7, #36]	; 0x24
 80083c0:	e008      	b.n	80083d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083c2:	4b07      	ldr	r3, [pc, #28]	; (80083e0 <xTimerGenericCommand+0x98>)
 80083c4:	6818      	ldr	r0, [r3, #0]
 80083c6:	f107 0114 	add.w	r1, r7, #20
 80083ca:	2300      	movs	r3, #0
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	f7fe fb9d 	bl	8006b0c <xQueueGenericSendFromISR>
 80083d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3728      	adds	r7, #40	; 0x28
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	20000ea0 	.word	0x20000ea0

080083e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b088      	sub	sp, #32
 80083e8:	af02      	add	r7, sp, #8
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ee:	4b22      	ldr	r3, [pc, #136]	; (8008478 <prvProcessExpiredTimer+0x94>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	3304      	adds	r3, #4
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fe f923 	bl	8006648 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008408:	f003 0304 	and.w	r3, r3, #4
 800840c:	2b00      	cmp	r3, #0
 800840e:	d022      	beq.n	8008456 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	699a      	ldr	r2, [r3, #24]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	18d1      	adds	r1, r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	6978      	ldr	r0, [r7, #20]
 800841e:	f000 f8d1 	bl	80085c4 <prvInsertTimerInActiveList>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d01f      	beq.n	8008468 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008428:	2300      	movs	r3, #0
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	2300      	movs	r3, #0
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	2100      	movs	r1, #0
 8008432:	6978      	ldr	r0, [r7, #20]
 8008434:	f7ff ff88 	bl	8008348 <xTimerGenericCommand>
 8008438:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d113      	bne.n	8008468 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	60fb      	str	r3, [r7, #12]
}
 8008452:	bf00      	nop
 8008454:	e7fe      	b.n	8008454 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800845c:	f023 0301 	bic.w	r3, r3, #1
 8008460:	b2da      	uxtb	r2, r3
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	6978      	ldr	r0, [r7, #20]
 800846e:	4798      	blx	r3
}
 8008470:	bf00      	nop
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	20000e98 	.word	0x20000e98

0800847c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008484:	f107 0308 	add.w	r3, r7, #8
 8008488:	4618      	mov	r0, r3
 800848a:	f000 f857 	bl	800853c <prvGetNextExpireTime>
 800848e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	4619      	mov	r1, r3
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 f803 	bl	80084a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800849a:	f000 f8d5 	bl	8008648 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800849e:	e7f1      	b.n	8008484 <prvTimerTask+0x8>

080084a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084aa:	f7ff f97d 	bl	80077a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084ae:	f107 0308 	add.w	r3, r7, #8
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 f866 	bl	8008584 <prvSampleTimeNow>
 80084b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d130      	bne.n	8008522 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10a      	bne.n	80084dc <prvProcessTimerOrBlockTask+0x3c>
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d806      	bhi.n	80084dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084ce:	f7ff f979 	bl	80077c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084d2:	68f9      	ldr	r1, [r7, #12]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7ff ff85 	bl	80083e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084da:	e024      	b.n	8008526 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d008      	beq.n	80084f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084e2:	4b13      	ldr	r3, [pc, #76]	; (8008530 <prvProcessTimerOrBlockTask+0x90>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d101      	bne.n	80084f0 <prvProcessTimerOrBlockTask+0x50>
 80084ec:	2301      	movs	r3, #1
 80084ee:	e000      	b.n	80084f2 <prvProcessTimerOrBlockTask+0x52>
 80084f0:	2300      	movs	r3, #0
 80084f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80084f4:	4b0f      	ldr	r3, [pc, #60]	; (8008534 <prvProcessTimerOrBlockTask+0x94>)
 80084f6:	6818      	ldr	r0, [r3, #0]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	4619      	mov	r1, r3
 8008502:	f7fe fdb9 	bl	8007078 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008506:	f7ff f95d 	bl	80077c4 <xTaskResumeAll>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10a      	bne.n	8008526 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008510:	4b09      	ldr	r3, [pc, #36]	; (8008538 <prvProcessTimerOrBlockTask+0x98>)
 8008512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008516:	601a      	str	r2, [r3, #0]
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	f3bf 8f6f 	isb	sy
}
 8008520:	e001      	b.n	8008526 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008522:	f7ff f94f 	bl	80077c4 <xTaskResumeAll>
}
 8008526:	bf00      	nop
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	20000e9c 	.word	0x20000e9c
 8008534:	20000ea0 	.word	0x20000ea0
 8008538:	e000ed04 	.word	0xe000ed04

0800853c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008544:	4b0e      	ldr	r3, [pc, #56]	; (8008580 <prvGetNextExpireTime+0x44>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d101      	bne.n	8008552 <prvGetNextExpireTime+0x16>
 800854e:	2201      	movs	r2, #1
 8008550:	e000      	b.n	8008554 <prvGetNextExpireTime+0x18>
 8008552:	2200      	movs	r2, #0
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d105      	bne.n	800856c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008560:	4b07      	ldr	r3, [pc, #28]	; (8008580 <prvGetNextExpireTime+0x44>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	60fb      	str	r3, [r7, #12]
 800856a:	e001      	b.n	8008570 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800856c:	2300      	movs	r3, #0
 800856e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008570:	68fb      	ldr	r3, [r7, #12]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	20000e98 	.word	0x20000e98

08008584 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800858c:	f7ff f9b6 	bl	80078fc <xTaskGetTickCount>
 8008590:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008592:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <prvSampleTimeNow+0x3c>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	429a      	cmp	r2, r3
 800859a:	d205      	bcs.n	80085a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800859c:	f000 f91a 	bl	80087d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	e002      	b.n	80085ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085ae:	4a04      	ldr	r2, [pc, #16]	; (80085c0 <prvSampleTimeNow+0x3c>)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085b4:	68fb      	ldr	r3, [r7, #12]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	20000ea8 	.word	0x20000ea8

080085c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085d2:	2300      	movs	r3, #0
 80085d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d812      	bhi.n	8008610 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	1ad2      	subs	r2, r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d302      	bcc.n	80085fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80085f8:	2301      	movs	r3, #1
 80085fa:	617b      	str	r3, [r7, #20]
 80085fc:	e01b      	b.n	8008636 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085fe:	4b10      	ldr	r3, [pc, #64]	; (8008640 <prvInsertTimerInActiveList+0x7c>)
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3304      	adds	r3, #4
 8008606:	4619      	mov	r1, r3
 8008608:	4610      	mov	r0, r2
 800860a:	f7fd ffe4 	bl	80065d6 <vListInsert>
 800860e:	e012      	b.n	8008636 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	429a      	cmp	r2, r3
 8008616:	d206      	bcs.n	8008626 <prvInsertTimerInActiveList+0x62>
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	429a      	cmp	r2, r3
 800861e:	d302      	bcc.n	8008626 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008620:	2301      	movs	r3, #1
 8008622:	617b      	str	r3, [r7, #20]
 8008624:	e007      	b.n	8008636 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008626:	4b07      	ldr	r3, [pc, #28]	; (8008644 <prvInsertTimerInActiveList+0x80>)
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	3304      	adds	r3, #4
 800862e:	4619      	mov	r1, r3
 8008630:	4610      	mov	r0, r2
 8008632:	f7fd ffd0 	bl	80065d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008636:	697b      	ldr	r3, [r7, #20]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	20000e9c 	.word	0x20000e9c
 8008644:	20000e98 	.word	0x20000e98

08008648 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b08c      	sub	sp, #48	; 0x30
 800864c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800864e:	e0ae      	b.n	80087ae <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2b00      	cmp	r3, #0
 8008654:	f2c0 80aa 	blt.w	80087ac <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d004      	beq.n	800866e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	3304      	adds	r3, #4
 8008668:	4618      	mov	r0, r3
 800866a:	f7fd ffed 	bl	8006648 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800866e:	1d3b      	adds	r3, r7, #4
 8008670:	4618      	mov	r0, r3
 8008672:	f7ff ff87 	bl	8008584 <prvSampleTimeNow>
 8008676:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	2b09      	cmp	r3, #9
 800867c:	f200 8097 	bhi.w	80087ae <prvProcessReceivedCommands+0x166>
 8008680:	a201      	add	r2, pc, #4	; (adr r2, 8008688 <prvProcessReceivedCommands+0x40>)
 8008682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008686:	bf00      	nop
 8008688:	080086b1 	.word	0x080086b1
 800868c:	080086b1 	.word	0x080086b1
 8008690:	080086b1 	.word	0x080086b1
 8008694:	08008725 	.word	0x08008725
 8008698:	08008739 	.word	0x08008739
 800869c:	08008783 	.word	0x08008783
 80086a0:	080086b1 	.word	0x080086b1
 80086a4:	080086b1 	.word	0x080086b1
 80086a8:	08008725 	.word	0x08008725
 80086ac:	08008739 	.word	0x08008739
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086b6:	f043 0301 	orr.w	r3, r3, #1
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	18d1      	adds	r1, r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6a3a      	ldr	r2, [r7, #32]
 80086ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086d0:	f7ff ff78 	bl	80085c4 <prvInsertTimerInActiveList>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d069      	beq.n	80087ae <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086e8:	f003 0304 	and.w	r3, r3, #4
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d05e      	beq.n	80087ae <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	441a      	add	r2, r3
 80086f8:	2300      	movs	r3, #0
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	2300      	movs	r3, #0
 80086fe:	2100      	movs	r1, #0
 8008700:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008702:	f7ff fe21 	bl	8008348 <xTimerGenericCommand>
 8008706:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d14f      	bne.n	80087ae <prvProcessReceivedCommands+0x166>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	61bb      	str	r3, [r7, #24]
}
 8008720:	bf00      	nop
 8008722:	e7fe      	b.n	8008722 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008726:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800872a:	f023 0301 	bic.w	r3, r3, #1
 800872e:	b2da      	uxtb	r2, r3
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8008736:	e03a      	b.n	80087ae <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800873e:	f043 0301 	orr.w	r3, r3, #1
 8008742:	b2da      	uxtb	r2, r3
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008752:	699b      	ldr	r3, [r3, #24]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10a      	bne.n	800876e <prvProcessReceivedCommands+0x126>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	617b      	str	r3, [r7, #20]
}
 800876a:	bf00      	nop
 800876c:	e7fe      	b.n	800876c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008770:	699a      	ldr	r2, [r3, #24]
 8008772:	6a3b      	ldr	r3, [r7, #32]
 8008774:	18d1      	adds	r1, r2, r3
 8008776:	6a3b      	ldr	r3, [r7, #32]
 8008778:	6a3a      	ldr	r2, [r7, #32]
 800877a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800877c:	f7ff ff22 	bl	80085c4 <prvInsertTimerInActiveList>
					break;
 8008780:	e015      	b.n	80087ae <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008788:	f003 0302 	and.w	r3, r3, #2
 800878c:	2b00      	cmp	r3, #0
 800878e:	d103      	bne.n	8008798 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8008790:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008792:	f000 fbdd 	bl	8008f50 <vPortFree>
 8008796:	e00a      	b.n	80087ae <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800879e:	f023 0301 	bic.w	r3, r3, #1
 80087a2:	b2da      	uxtb	r2, r3
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087aa:	e000      	b.n	80087ae <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80087ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087ae:	4b08      	ldr	r3, [pc, #32]	; (80087d0 <prvProcessReceivedCommands+0x188>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f107 0108 	add.w	r1, r7, #8
 80087b6:	2200      	movs	r2, #0
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7fe fa43 	bl	8006c44 <xQueueReceive>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f47f af45 	bne.w	8008650 <prvProcessReceivedCommands+0x8>
	}
}
 80087c6:	bf00      	nop
 80087c8:	bf00      	nop
 80087ca:	3728      	adds	r7, #40	; 0x28
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	20000ea0 	.word	0x20000ea0

080087d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087da:	e048      	b.n	800886e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087dc:	4b2d      	ldr	r3, [pc, #180]	; (8008894 <prvSwitchTimerLists+0xc0>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087e6:	4b2b      	ldr	r3, [pc, #172]	; (8008894 <prvSwitchTimerLists+0xc0>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3304      	adds	r3, #4
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7fd ff27 	bl	8006648 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008808:	f003 0304 	and.w	r3, r3, #4
 800880c:	2b00      	cmp	r3, #0
 800880e:	d02e      	beq.n	800886e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	4413      	add	r3, r2
 8008818:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	429a      	cmp	r2, r3
 8008820:	d90e      	bls.n	8008840 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800882e:	4b19      	ldr	r3, [pc, #100]	; (8008894 <prvSwitchTimerLists+0xc0>)
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3304      	adds	r3, #4
 8008836:	4619      	mov	r1, r3
 8008838:	4610      	mov	r0, r2
 800883a:	f7fd fecc 	bl	80065d6 <vListInsert>
 800883e:	e016      	b.n	800886e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008840:	2300      	movs	r3, #0
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	2300      	movs	r3, #0
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	2100      	movs	r1, #0
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f7ff fd7c 	bl	8008348 <xTimerGenericCommand>
 8008850:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d10a      	bne.n	800886e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885c:	f383 8811 	msr	BASEPRI, r3
 8008860:	f3bf 8f6f 	isb	sy
 8008864:	f3bf 8f4f 	dsb	sy
 8008868:	603b      	str	r3, [r7, #0]
}
 800886a:	bf00      	nop
 800886c:	e7fe      	b.n	800886c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800886e:	4b09      	ldr	r3, [pc, #36]	; (8008894 <prvSwitchTimerLists+0xc0>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1b1      	bne.n	80087dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008878:	4b06      	ldr	r3, [pc, #24]	; (8008894 <prvSwitchTimerLists+0xc0>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800887e:	4b06      	ldr	r3, [pc, #24]	; (8008898 <prvSwitchTimerLists+0xc4>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a04      	ldr	r2, [pc, #16]	; (8008894 <prvSwitchTimerLists+0xc0>)
 8008884:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008886:	4a04      	ldr	r2, [pc, #16]	; (8008898 <prvSwitchTimerLists+0xc4>)
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	6013      	str	r3, [r2, #0]
}
 800888c:	bf00      	nop
 800888e:	3718      	adds	r7, #24
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	20000e98 	.word	0x20000e98
 8008898:	20000e9c 	.word	0x20000e9c

0800889c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088a2:	f000 f967 	bl	8008b74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088a6:	4b15      	ldr	r3, [pc, #84]	; (80088fc <prvCheckForValidListAndQueue+0x60>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d120      	bne.n	80088f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088ae:	4814      	ldr	r0, [pc, #80]	; (8008900 <prvCheckForValidListAndQueue+0x64>)
 80088b0:	f7fd fe40 	bl	8006534 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088b4:	4813      	ldr	r0, [pc, #76]	; (8008904 <prvCheckForValidListAndQueue+0x68>)
 80088b6:	f7fd fe3d 	bl	8006534 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088ba:	4b13      	ldr	r3, [pc, #76]	; (8008908 <prvCheckForValidListAndQueue+0x6c>)
 80088bc:	4a10      	ldr	r2, [pc, #64]	; (8008900 <prvCheckForValidListAndQueue+0x64>)
 80088be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088c0:	4b12      	ldr	r3, [pc, #72]	; (800890c <prvCheckForValidListAndQueue+0x70>)
 80088c2:	4a10      	ldr	r2, [pc, #64]	; (8008904 <prvCheckForValidListAndQueue+0x68>)
 80088c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088c6:	2300      	movs	r3, #0
 80088c8:	9300      	str	r3, [sp, #0]
 80088ca:	4b11      	ldr	r3, [pc, #68]	; (8008910 <prvCheckForValidListAndQueue+0x74>)
 80088cc:	4a11      	ldr	r2, [pc, #68]	; (8008914 <prvCheckForValidListAndQueue+0x78>)
 80088ce:	210c      	movs	r1, #12
 80088d0:	200a      	movs	r0, #10
 80088d2:	f7fd ff4b 	bl	800676c <xQueueGenericCreateStatic>
 80088d6:	4603      	mov	r3, r0
 80088d8:	4a08      	ldr	r2, [pc, #32]	; (80088fc <prvCheckForValidListAndQueue+0x60>)
 80088da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088dc:	4b07      	ldr	r3, [pc, #28]	; (80088fc <prvCheckForValidListAndQueue+0x60>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d005      	beq.n	80088f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <prvCheckForValidListAndQueue+0x60>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	490b      	ldr	r1, [pc, #44]	; (8008918 <prvCheckForValidListAndQueue+0x7c>)
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe fb9a 	bl	8007024 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088f0:	f000 f970 	bl	8008bd4 <vPortExitCritical>
}
 80088f4:	bf00      	nop
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	20000ea0 	.word	0x20000ea0
 8008900:	20000e70 	.word	0x20000e70
 8008904:	20000e84 	.word	0x20000e84
 8008908:	20000e98 	.word	0x20000e98
 800890c:	20000e9c 	.word	0x20000e9c
 8008910:	20000f24 	.word	0x20000f24
 8008914:	20000eac 	.word	0x20000eac
 8008918:	0800c2e4 	.word	0x0800c2e4

0800891c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	3b04      	subs	r3, #4
 800892c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3b04      	subs	r3, #4
 800893a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f023 0201 	bic.w	r2, r3, #1
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	3b04      	subs	r3, #4
 800894a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800894c:	4a0c      	ldr	r2, [pc, #48]	; (8008980 <pxPortInitialiseStack+0x64>)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3b14      	subs	r3, #20
 8008956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3b04      	subs	r3, #4
 8008962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f06f 0202 	mvn.w	r2, #2
 800896a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	3b20      	subs	r3, #32
 8008970:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008972:	68fb      	ldr	r3, [r7, #12]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	08008985 	.word	0x08008985

08008984 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800898a:	2300      	movs	r3, #0
 800898c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800898e:	4b12      	ldr	r3, [pc, #72]	; (80089d8 <prvTaskExitError+0x54>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008996:	d00a      	beq.n	80089ae <prvTaskExitError+0x2a>
	__asm volatile
 8008998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	60fb      	str	r3, [r7, #12]
}
 80089aa:	bf00      	nop
 80089ac:	e7fe      	b.n	80089ac <prvTaskExitError+0x28>
	__asm volatile
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	60bb      	str	r3, [r7, #8]
}
 80089c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089c2:	bf00      	nop
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d0fc      	beq.n	80089c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089ca:	bf00      	nop
 80089cc:	bf00      	nop
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	2000000c 	.word	0x2000000c
 80089dc:	00000000 	.word	0x00000000

080089e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089e0:	4b07      	ldr	r3, [pc, #28]	; (8008a00 <pxCurrentTCBConst2>)
 80089e2:	6819      	ldr	r1, [r3, #0]
 80089e4:	6808      	ldr	r0, [r1, #0]
 80089e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ea:	f380 8809 	msr	PSP, r0
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f04f 0000 	mov.w	r0, #0
 80089f6:	f380 8811 	msr	BASEPRI, r0
 80089fa:	4770      	bx	lr
 80089fc:	f3af 8000 	nop.w

08008a00 <pxCurrentTCBConst2>:
 8008a00:	20000d44 	.word	0x20000d44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop

08008a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a08:	4808      	ldr	r0, [pc, #32]	; (8008a2c <prvPortStartFirstTask+0x24>)
 8008a0a:	6800      	ldr	r0, [r0, #0]
 8008a0c:	6800      	ldr	r0, [r0, #0]
 8008a0e:	f380 8808 	msr	MSP, r0
 8008a12:	f04f 0000 	mov.w	r0, #0
 8008a16:	f380 8814 	msr	CONTROL, r0
 8008a1a:	b662      	cpsie	i
 8008a1c:	b661      	cpsie	f
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	df00      	svc	0
 8008a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a2a:	bf00      	nop
 8008a2c:	e000ed08 	.word	0xe000ed08

08008a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a36:	4b46      	ldr	r3, [pc, #280]	; (8008b50 <xPortStartScheduler+0x120>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a46      	ldr	r2, [pc, #280]	; (8008b54 <xPortStartScheduler+0x124>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d10a      	bne.n	8008a56 <xPortStartScheduler+0x26>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	613b      	str	r3, [r7, #16]
}
 8008a52:	bf00      	nop
 8008a54:	e7fe      	b.n	8008a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a56:	4b3e      	ldr	r3, [pc, #248]	; (8008b50 <xPortStartScheduler+0x120>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a3f      	ldr	r2, [pc, #252]	; (8008b58 <xPortStartScheduler+0x128>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d10a      	bne.n	8008a76 <xPortStartScheduler+0x46>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	60fb      	str	r3, [r7, #12]
}
 8008a72:	bf00      	nop
 8008a74:	e7fe      	b.n	8008a74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a76:	4b39      	ldr	r3, [pc, #228]	; (8008b5c <xPortStartScheduler+0x12c>)
 8008a78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	22ff      	movs	r2, #255	; 0xff
 8008a86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a90:	78fb      	ldrb	r3, [r7, #3]
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	4b31      	ldr	r3, [pc, #196]	; (8008b60 <xPortStartScheduler+0x130>)
 8008a9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a9e:	4b31      	ldr	r3, [pc, #196]	; (8008b64 <xPortStartScheduler+0x134>)
 8008aa0:	2207      	movs	r2, #7
 8008aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aa4:	e009      	b.n	8008aba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008aa6:	4b2f      	ldr	r3, [pc, #188]	; (8008b64 <xPortStartScheduler+0x134>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	4a2d      	ldr	r2, [pc, #180]	; (8008b64 <xPortStartScheduler+0x134>)
 8008aae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ab0:	78fb      	ldrb	r3, [r7, #3]
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aba:	78fb      	ldrb	r3, [r7, #3]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ac2:	2b80      	cmp	r3, #128	; 0x80
 8008ac4:	d0ef      	beq.n	8008aa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ac6:	4b27      	ldr	r3, [pc, #156]	; (8008b64 <xPortStartScheduler+0x134>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f1c3 0307 	rsb	r3, r3, #7
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	d00a      	beq.n	8008ae8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	60bb      	str	r3, [r7, #8]
}
 8008ae4:	bf00      	nop
 8008ae6:	e7fe      	b.n	8008ae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ae8:	4b1e      	ldr	r3, [pc, #120]	; (8008b64 <xPortStartScheduler+0x134>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	021b      	lsls	r3, r3, #8
 8008aee:	4a1d      	ldr	r2, [pc, #116]	; (8008b64 <xPortStartScheduler+0x134>)
 8008af0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008af2:	4b1c      	ldr	r3, [pc, #112]	; (8008b64 <xPortStartScheduler+0x134>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008afa:	4a1a      	ldr	r2, [pc, #104]	; (8008b64 <xPortStartScheduler+0x134>)
 8008afc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b06:	4b18      	ldr	r3, [pc, #96]	; (8008b68 <xPortStartScheduler+0x138>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a17      	ldr	r2, [pc, #92]	; (8008b68 <xPortStartScheduler+0x138>)
 8008b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b12:	4b15      	ldr	r3, [pc, #84]	; (8008b68 <xPortStartScheduler+0x138>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a14      	ldr	r2, [pc, #80]	; (8008b68 <xPortStartScheduler+0x138>)
 8008b18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b1e:	f000 f8dd 	bl	8008cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b22:	4b12      	ldr	r3, [pc, #72]	; (8008b6c <xPortStartScheduler+0x13c>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b28:	f000 f8fc 	bl	8008d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b2c:	4b10      	ldr	r3, [pc, #64]	; (8008b70 <xPortStartScheduler+0x140>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a0f      	ldr	r2, [pc, #60]	; (8008b70 <xPortStartScheduler+0x140>)
 8008b32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b38:	f7ff ff66 	bl	8008a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b3c:	f7fe ffae 	bl	8007a9c <vTaskSwitchContext>
	prvTaskExitError();
 8008b40:	f7ff ff20 	bl	8008984 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3718      	adds	r7, #24
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	e000ed00 	.word	0xe000ed00
 8008b54:	410fc271 	.word	0x410fc271
 8008b58:	410fc270 	.word	0x410fc270
 8008b5c:	e000e400 	.word	0xe000e400
 8008b60:	20000f6c 	.word	0x20000f6c
 8008b64:	20000f70 	.word	0x20000f70
 8008b68:	e000ed20 	.word	0xe000ed20
 8008b6c:	2000000c 	.word	0x2000000c
 8008b70:	e000ef34 	.word	0xe000ef34

08008b74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
	__asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	607b      	str	r3, [r7, #4]
}
 8008b8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b8e:	4b0f      	ldr	r3, [pc, #60]	; (8008bcc <vPortEnterCritical+0x58>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	3301      	adds	r3, #1
 8008b94:	4a0d      	ldr	r2, [pc, #52]	; (8008bcc <vPortEnterCritical+0x58>)
 8008b96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b98:	4b0c      	ldr	r3, [pc, #48]	; (8008bcc <vPortEnterCritical+0x58>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d10f      	bne.n	8008bc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ba0:	4b0b      	ldr	r3, [pc, #44]	; (8008bd0 <vPortEnterCritical+0x5c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	603b      	str	r3, [r7, #0]
}
 8008bbc:	bf00      	nop
 8008bbe:	e7fe      	b.n	8008bbe <vPortEnterCritical+0x4a>
	}
}
 8008bc0:	bf00      	nop
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	2000000c 	.word	0x2000000c
 8008bd0:	e000ed04 	.word	0xe000ed04

08008bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008bda:	4b12      	ldr	r3, [pc, #72]	; (8008c24 <vPortExitCritical+0x50>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10a      	bne.n	8008bf8 <vPortExitCritical+0x24>
	__asm volatile
 8008be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	607b      	str	r3, [r7, #4]
}
 8008bf4:	bf00      	nop
 8008bf6:	e7fe      	b.n	8008bf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008bf8:	4b0a      	ldr	r3, [pc, #40]	; (8008c24 <vPortExitCritical+0x50>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	4a09      	ldr	r2, [pc, #36]	; (8008c24 <vPortExitCritical+0x50>)
 8008c00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c02:	4b08      	ldr	r3, [pc, #32]	; (8008c24 <vPortExitCritical+0x50>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d105      	bne.n	8008c16 <vPortExitCritical+0x42>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	f383 8811 	msr	BASEPRI, r3
}
 8008c14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c16:	bf00      	nop
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	2000000c 	.word	0x2000000c
	...

08008c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c30:	f3ef 8009 	mrs	r0, PSP
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	4b15      	ldr	r3, [pc, #84]	; (8008c90 <pxCurrentTCBConst>)
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	f01e 0f10 	tst.w	lr, #16
 8008c40:	bf08      	it	eq
 8008c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4a:	6010      	str	r0, [r2, #0]
 8008c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c54:	f380 8811 	msr	BASEPRI, r0
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f7fe ff1c 	bl	8007a9c <vTaskSwitchContext>
 8008c64:	f04f 0000 	mov.w	r0, #0
 8008c68:	f380 8811 	msr	BASEPRI, r0
 8008c6c:	bc09      	pop	{r0, r3}
 8008c6e:	6819      	ldr	r1, [r3, #0]
 8008c70:	6808      	ldr	r0, [r1, #0]
 8008c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c76:	f01e 0f10 	tst.w	lr, #16
 8008c7a:	bf08      	it	eq
 8008c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c80:	f380 8809 	msr	PSP, r0
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	f3af 8000 	nop.w

08008c90 <pxCurrentTCBConst>:
 8008c90:	20000d44 	.word	0x20000d44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop

08008c98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	607b      	str	r3, [r7, #4]
}
 8008cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008cb2:	f7fe fe33 	bl	800791c <xTaskIncrementTick>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d003      	beq.n	8008cc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cbc:	4b06      	ldr	r3, [pc, #24]	; (8008cd8 <SysTick_Handler+0x40>)
 8008cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	f383 8811 	msr	BASEPRI, r3
}
 8008cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008cd0:	bf00      	nop
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	e000ed04 	.word	0xe000ed04

08008cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cdc:	b480      	push	{r7}
 8008cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ce0:	4b0b      	ldr	r3, [pc, #44]	; (8008d10 <vPortSetupTimerInterrupt+0x34>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ce6:	4b0b      	ldr	r3, [pc, #44]	; (8008d14 <vPortSetupTimerInterrupt+0x38>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008cec:	4b0a      	ldr	r3, [pc, #40]	; (8008d18 <vPortSetupTimerInterrupt+0x3c>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a0a      	ldr	r2, [pc, #40]	; (8008d1c <vPortSetupTimerInterrupt+0x40>)
 8008cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8008cf6:	099b      	lsrs	r3, r3, #6
 8008cf8:	4a09      	ldr	r2, [pc, #36]	; (8008d20 <vPortSetupTimerInterrupt+0x44>)
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cfe:	4b04      	ldr	r3, [pc, #16]	; (8008d10 <vPortSetupTimerInterrupt+0x34>)
 8008d00:	2207      	movs	r2, #7
 8008d02:	601a      	str	r2, [r3, #0]
}
 8008d04:	bf00      	nop
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	e000e010 	.word	0xe000e010
 8008d14:	e000e018 	.word	0xe000e018
 8008d18:	20000000 	.word	0x20000000
 8008d1c:	10624dd3 	.word	0x10624dd3
 8008d20:	e000e014 	.word	0xe000e014

08008d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d34 <vPortEnableVFP+0x10>
 8008d28:	6801      	ldr	r1, [r0, #0]
 8008d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d2e:	6001      	str	r1, [r0, #0]
 8008d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d32:	bf00      	nop
 8008d34:	e000ed88 	.word	0xe000ed88

08008d38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d3e:	f3ef 8305 	mrs	r3, IPSR
 8008d42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2b0f      	cmp	r3, #15
 8008d48:	d914      	bls.n	8008d74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d4a:	4a17      	ldr	r2, [pc, #92]	; (8008da8 <vPortValidateInterruptPriority+0x70>)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4413      	add	r3, r2
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d54:	4b15      	ldr	r3, [pc, #84]	; (8008dac <vPortValidateInterruptPriority+0x74>)
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	7afa      	ldrb	r2, [r7, #11]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d20a      	bcs.n	8008d74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	607b      	str	r3, [r7, #4]
}
 8008d70:	bf00      	nop
 8008d72:	e7fe      	b.n	8008d72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d74:	4b0e      	ldr	r3, [pc, #56]	; (8008db0 <vPortValidateInterruptPriority+0x78>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d7c:	4b0d      	ldr	r3, [pc, #52]	; (8008db4 <vPortValidateInterruptPriority+0x7c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d90a      	bls.n	8008d9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d88:	f383 8811 	msr	BASEPRI, r3
 8008d8c:	f3bf 8f6f 	isb	sy
 8008d90:	f3bf 8f4f 	dsb	sy
 8008d94:	603b      	str	r3, [r7, #0]
}
 8008d96:	bf00      	nop
 8008d98:	e7fe      	b.n	8008d98 <vPortValidateInterruptPriority+0x60>
	}
 8008d9a:	bf00      	nop
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	e000e3f0 	.word	0xe000e3f0
 8008dac:	20000f6c 	.word	0x20000f6c
 8008db0:	e000ed0c 	.word	0xe000ed0c
 8008db4:	20000f70 	.word	0x20000f70

08008db8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b08a      	sub	sp, #40	; 0x28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008dc4:	f7fe fcf0 	bl	80077a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008dc8:	4b5b      	ldr	r3, [pc, #364]	; (8008f38 <pvPortMalloc+0x180>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d101      	bne.n	8008dd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008dd0:	f000 f920 	bl	8009014 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008dd4:	4b59      	ldr	r3, [pc, #356]	; (8008f3c <pvPortMalloc+0x184>)
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4013      	ands	r3, r2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f040 8093 	bne.w	8008f08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d01d      	beq.n	8008e24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008de8:	2208      	movs	r2, #8
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4413      	add	r3, r2
 8008dee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f003 0307 	and.w	r3, r3, #7
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d014      	beq.n	8008e24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f023 0307 	bic.w	r3, r3, #7
 8008e00:	3308      	adds	r3, #8
 8008e02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f003 0307 	and.w	r3, r3, #7
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00a      	beq.n	8008e24 <pvPortMalloc+0x6c>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	617b      	str	r3, [r7, #20]
}
 8008e20:	bf00      	nop
 8008e22:	e7fe      	b.n	8008e22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d06e      	beq.n	8008f08 <pvPortMalloc+0x150>
 8008e2a:	4b45      	ldr	r3, [pc, #276]	; (8008f40 <pvPortMalloc+0x188>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d869      	bhi.n	8008f08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e34:	4b43      	ldr	r3, [pc, #268]	; (8008f44 <pvPortMalloc+0x18c>)
 8008e36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e38:	4b42      	ldr	r3, [pc, #264]	; (8008f44 <pvPortMalloc+0x18c>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e3e:	e004      	b.n	8008e4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d903      	bls.n	8008e5c <pvPortMalloc+0xa4>
 8008e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1f1      	bne.n	8008e40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e5c:	4b36      	ldr	r3, [pc, #216]	; (8008f38 <pvPortMalloc+0x180>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d050      	beq.n	8008f08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2208      	movs	r2, #8
 8008e6c:	4413      	add	r3, r2
 8008e6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	1ad2      	subs	r2, r2, r3
 8008e80:	2308      	movs	r3, #8
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d91f      	bls.n	8008ec8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	f003 0307 	and.w	r3, r3, #7
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00a      	beq.n	8008eb0 <pvPortMalloc+0xf8>
	__asm volatile
 8008e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	613b      	str	r3, [r7, #16]
}
 8008eac:	bf00      	nop
 8008eae:	e7fe      	b.n	8008eae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	685a      	ldr	r2, [r3, #4]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	1ad2      	subs	r2, r2, r3
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ec2:	69b8      	ldr	r0, [r7, #24]
 8008ec4:	f000 f908 	bl	80090d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ec8:	4b1d      	ldr	r3, [pc, #116]	; (8008f40 <pvPortMalloc+0x188>)
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	1ad3      	subs	r3, r2, r3
 8008ed2:	4a1b      	ldr	r2, [pc, #108]	; (8008f40 <pvPortMalloc+0x188>)
 8008ed4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ed6:	4b1a      	ldr	r3, [pc, #104]	; (8008f40 <pvPortMalloc+0x188>)
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	4b1b      	ldr	r3, [pc, #108]	; (8008f48 <pvPortMalloc+0x190>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d203      	bcs.n	8008eea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ee2:	4b17      	ldr	r3, [pc, #92]	; (8008f40 <pvPortMalloc+0x188>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a18      	ldr	r2, [pc, #96]	; (8008f48 <pvPortMalloc+0x190>)
 8008ee8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eec:	685a      	ldr	r2, [r3, #4]
 8008eee:	4b13      	ldr	r3, [pc, #76]	; (8008f3c <pvPortMalloc+0x184>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	431a      	orrs	r2, r3
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efa:	2200      	movs	r2, #0
 8008efc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008efe:	4b13      	ldr	r3, [pc, #76]	; (8008f4c <pvPortMalloc+0x194>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	3301      	adds	r3, #1
 8008f04:	4a11      	ldr	r2, [pc, #68]	; (8008f4c <pvPortMalloc+0x194>)
 8008f06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f08:	f7fe fc5c 	bl	80077c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	f003 0307 	and.w	r3, r3, #7
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00a      	beq.n	8008f2c <pvPortMalloc+0x174>
	__asm volatile
 8008f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	60fb      	str	r3, [r7, #12]
}
 8008f28:	bf00      	nop
 8008f2a:	e7fe      	b.n	8008f2a <pvPortMalloc+0x172>
	return pvReturn;
 8008f2c:	69fb      	ldr	r3, [r7, #28]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3728      	adds	r7, #40	; 0x28
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	20004b7c 	.word	0x20004b7c
 8008f3c:	20004b90 	.word	0x20004b90
 8008f40:	20004b80 	.word	0x20004b80
 8008f44:	20004b74 	.word	0x20004b74
 8008f48:	20004b84 	.word	0x20004b84
 8008f4c:	20004b88 	.word	0x20004b88

08008f50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d04d      	beq.n	8008ffe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f62:	2308      	movs	r3, #8
 8008f64:	425b      	negs	r3, r3
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	4413      	add	r3, r2
 8008f6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	685a      	ldr	r2, [r3, #4]
 8008f74:	4b24      	ldr	r3, [pc, #144]	; (8009008 <vPortFree+0xb8>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4013      	ands	r3, r2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10a      	bne.n	8008f94 <vPortFree+0x44>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	60fb      	str	r3, [r7, #12]
}
 8008f90:	bf00      	nop
 8008f92:	e7fe      	b.n	8008f92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00a      	beq.n	8008fb2 <vPortFree+0x62>
	__asm volatile
 8008f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa0:	f383 8811 	msr	BASEPRI, r3
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	60bb      	str	r3, [r7, #8]
}
 8008fae:	bf00      	nop
 8008fb0:	e7fe      	b.n	8008fb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	685a      	ldr	r2, [r3, #4]
 8008fb6:	4b14      	ldr	r3, [pc, #80]	; (8009008 <vPortFree+0xb8>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4013      	ands	r3, r2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d01e      	beq.n	8008ffe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d11a      	bne.n	8008ffe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	4b0e      	ldr	r3, [pc, #56]	; (8009008 <vPortFree+0xb8>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	43db      	mvns	r3, r3
 8008fd2:	401a      	ands	r2, r3
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008fd8:	f7fe fbe6 	bl	80077a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	685a      	ldr	r2, [r3, #4]
 8008fe0:	4b0a      	ldr	r3, [pc, #40]	; (800900c <vPortFree+0xbc>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	4a09      	ldr	r2, [pc, #36]	; (800900c <vPortFree+0xbc>)
 8008fe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fea:	6938      	ldr	r0, [r7, #16]
 8008fec:	f000 f874 	bl	80090d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008ff0:	4b07      	ldr	r3, [pc, #28]	; (8009010 <vPortFree+0xc0>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	4a06      	ldr	r2, [pc, #24]	; (8009010 <vPortFree+0xc0>)
 8008ff8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008ffa:	f7fe fbe3 	bl	80077c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ffe:	bf00      	nop
 8009000:	3718      	adds	r7, #24
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	20004b90 	.word	0x20004b90
 800900c:	20004b80 	.word	0x20004b80
 8009010:	20004b8c 	.word	0x20004b8c

08009014 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800901a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800901e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009020:	4b27      	ldr	r3, [pc, #156]	; (80090c0 <prvHeapInit+0xac>)
 8009022:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f003 0307 	and.w	r3, r3, #7
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00c      	beq.n	8009048 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	3307      	adds	r3, #7
 8009032:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f023 0307 	bic.w	r3, r3, #7
 800903a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	4a1f      	ldr	r2, [pc, #124]	; (80090c0 <prvHeapInit+0xac>)
 8009044:	4413      	add	r3, r2
 8009046:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800904c:	4a1d      	ldr	r2, [pc, #116]	; (80090c4 <prvHeapInit+0xb0>)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009052:	4b1c      	ldr	r3, [pc, #112]	; (80090c4 <prvHeapInit+0xb0>)
 8009054:	2200      	movs	r2, #0
 8009056:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	4413      	add	r3, r2
 800905e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009060:	2208      	movs	r2, #8
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	1a9b      	subs	r3, r3, r2
 8009066:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f023 0307 	bic.w	r3, r3, #7
 800906e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	4a15      	ldr	r2, [pc, #84]	; (80090c8 <prvHeapInit+0xb4>)
 8009074:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009076:	4b14      	ldr	r3, [pc, #80]	; (80090c8 <prvHeapInit+0xb4>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2200      	movs	r2, #0
 800907c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800907e:	4b12      	ldr	r3, [pc, #72]	; (80090c8 <prvHeapInit+0xb4>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2200      	movs	r2, #0
 8009084:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	1ad2      	subs	r2, r2, r3
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009094:	4b0c      	ldr	r3, [pc, #48]	; (80090c8 <prvHeapInit+0xb4>)
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	4a0a      	ldr	r2, [pc, #40]	; (80090cc <prvHeapInit+0xb8>)
 80090a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	4a09      	ldr	r2, [pc, #36]	; (80090d0 <prvHeapInit+0xbc>)
 80090aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090ac:	4b09      	ldr	r3, [pc, #36]	; (80090d4 <prvHeapInit+0xc0>)
 80090ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80090b2:	601a      	str	r2, [r3, #0]
}
 80090b4:	bf00      	nop
 80090b6:	3714      	adds	r7, #20
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr
 80090c0:	20000f74 	.word	0x20000f74
 80090c4:	20004b74 	.word	0x20004b74
 80090c8:	20004b7c 	.word	0x20004b7c
 80090cc:	20004b84 	.word	0x20004b84
 80090d0:	20004b80 	.word	0x20004b80
 80090d4:	20004b90 	.word	0x20004b90

080090d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090e0:	4b28      	ldr	r3, [pc, #160]	; (8009184 <prvInsertBlockIntoFreeList+0xac>)
 80090e2:	60fb      	str	r3, [r7, #12]
 80090e4:	e002      	b.n	80090ec <prvInsertBlockIntoFreeList+0x14>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	60fb      	str	r3, [r7, #12]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d8f7      	bhi.n	80090e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	4413      	add	r3, r2
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	429a      	cmp	r2, r3
 8009106:	d108      	bne.n	800911a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	441a      	add	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	441a      	add	r2, r3
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	429a      	cmp	r2, r3
 800912c:	d118      	bne.n	8009160 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	4b15      	ldr	r3, [pc, #84]	; (8009188 <prvInsertBlockIntoFreeList+0xb0>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	429a      	cmp	r2, r3
 8009138:	d00d      	beq.n	8009156 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685a      	ldr	r2, [r3, #4]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	441a      	add	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	e008      	b.n	8009168 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009156:	4b0c      	ldr	r3, [pc, #48]	; (8009188 <prvInsertBlockIntoFreeList+0xb0>)
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	e003      	b.n	8009168 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	429a      	cmp	r2, r3
 800916e:	d002      	beq.n	8009176 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009176:	bf00      	nop
 8009178:	3714      	adds	r7, #20
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	20004b74 	.word	0x20004b74
 8009188:	20004b7c 	.word	0x20004b7c

0800918c <__errno>:
 800918c:	4b01      	ldr	r3, [pc, #4]	; (8009194 <__errno+0x8>)
 800918e:	6818      	ldr	r0, [r3, #0]
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	20000010 	.word	0x20000010

08009198 <__libc_init_array>:
 8009198:	b570      	push	{r4, r5, r6, lr}
 800919a:	4d0d      	ldr	r5, [pc, #52]	; (80091d0 <__libc_init_array+0x38>)
 800919c:	4c0d      	ldr	r4, [pc, #52]	; (80091d4 <__libc_init_array+0x3c>)
 800919e:	1b64      	subs	r4, r4, r5
 80091a0:	10a4      	asrs	r4, r4, #2
 80091a2:	2600      	movs	r6, #0
 80091a4:	42a6      	cmp	r6, r4
 80091a6:	d109      	bne.n	80091bc <__libc_init_array+0x24>
 80091a8:	4d0b      	ldr	r5, [pc, #44]	; (80091d8 <__libc_init_array+0x40>)
 80091aa:	4c0c      	ldr	r4, [pc, #48]	; (80091dc <__libc_init_array+0x44>)
 80091ac:	f002 ff02 	bl	800bfb4 <_init>
 80091b0:	1b64      	subs	r4, r4, r5
 80091b2:	10a4      	asrs	r4, r4, #2
 80091b4:	2600      	movs	r6, #0
 80091b6:	42a6      	cmp	r6, r4
 80091b8:	d105      	bne.n	80091c6 <__libc_init_array+0x2e>
 80091ba:	bd70      	pop	{r4, r5, r6, pc}
 80091bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c0:	4798      	blx	r3
 80091c2:	3601      	adds	r6, #1
 80091c4:	e7ee      	b.n	80091a4 <__libc_init_array+0xc>
 80091c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ca:	4798      	blx	r3
 80091cc:	3601      	adds	r6, #1
 80091ce:	e7f2      	b.n	80091b6 <__libc_init_array+0x1e>
 80091d0:	0800c6ec 	.word	0x0800c6ec
 80091d4:	0800c6ec 	.word	0x0800c6ec
 80091d8:	0800c6ec 	.word	0x0800c6ec
 80091dc:	0800c6f0 	.word	0x0800c6f0

080091e0 <memcpy>:
 80091e0:	440a      	add	r2, r1
 80091e2:	4291      	cmp	r1, r2
 80091e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80091e8:	d100      	bne.n	80091ec <memcpy+0xc>
 80091ea:	4770      	bx	lr
 80091ec:	b510      	push	{r4, lr}
 80091ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091f6:	4291      	cmp	r1, r2
 80091f8:	d1f9      	bne.n	80091ee <memcpy+0xe>
 80091fa:	bd10      	pop	{r4, pc}

080091fc <memset>:
 80091fc:	4402      	add	r2, r0
 80091fe:	4603      	mov	r3, r0
 8009200:	4293      	cmp	r3, r2
 8009202:	d100      	bne.n	8009206 <memset+0xa>
 8009204:	4770      	bx	lr
 8009206:	f803 1b01 	strb.w	r1, [r3], #1
 800920a:	e7f9      	b.n	8009200 <memset+0x4>

0800920c <__cvt>:
 800920c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009210:	ec55 4b10 	vmov	r4, r5, d0
 8009214:	2d00      	cmp	r5, #0
 8009216:	460e      	mov	r6, r1
 8009218:	4619      	mov	r1, r3
 800921a:	462b      	mov	r3, r5
 800921c:	bfbb      	ittet	lt
 800921e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009222:	461d      	movlt	r5, r3
 8009224:	2300      	movge	r3, #0
 8009226:	232d      	movlt	r3, #45	; 0x2d
 8009228:	700b      	strb	r3, [r1, #0]
 800922a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800922c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009230:	4691      	mov	r9, r2
 8009232:	f023 0820 	bic.w	r8, r3, #32
 8009236:	bfbc      	itt	lt
 8009238:	4622      	movlt	r2, r4
 800923a:	4614      	movlt	r4, r2
 800923c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009240:	d005      	beq.n	800924e <__cvt+0x42>
 8009242:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009246:	d100      	bne.n	800924a <__cvt+0x3e>
 8009248:	3601      	adds	r6, #1
 800924a:	2102      	movs	r1, #2
 800924c:	e000      	b.n	8009250 <__cvt+0x44>
 800924e:	2103      	movs	r1, #3
 8009250:	ab03      	add	r3, sp, #12
 8009252:	9301      	str	r3, [sp, #4]
 8009254:	ab02      	add	r3, sp, #8
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	ec45 4b10 	vmov	d0, r4, r5
 800925c:	4653      	mov	r3, sl
 800925e:	4632      	mov	r2, r6
 8009260:	f000 fcea 	bl	8009c38 <_dtoa_r>
 8009264:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009268:	4607      	mov	r7, r0
 800926a:	d102      	bne.n	8009272 <__cvt+0x66>
 800926c:	f019 0f01 	tst.w	r9, #1
 8009270:	d022      	beq.n	80092b8 <__cvt+0xac>
 8009272:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009276:	eb07 0906 	add.w	r9, r7, r6
 800927a:	d110      	bne.n	800929e <__cvt+0x92>
 800927c:	783b      	ldrb	r3, [r7, #0]
 800927e:	2b30      	cmp	r3, #48	; 0x30
 8009280:	d10a      	bne.n	8009298 <__cvt+0x8c>
 8009282:	2200      	movs	r2, #0
 8009284:	2300      	movs	r3, #0
 8009286:	4620      	mov	r0, r4
 8009288:	4629      	mov	r1, r5
 800928a:	f7f7 fc25 	bl	8000ad8 <__aeabi_dcmpeq>
 800928e:	b918      	cbnz	r0, 8009298 <__cvt+0x8c>
 8009290:	f1c6 0601 	rsb	r6, r6, #1
 8009294:	f8ca 6000 	str.w	r6, [sl]
 8009298:	f8da 3000 	ldr.w	r3, [sl]
 800929c:	4499      	add	r9, r3
 800929e:	2200      	movs	r2, #0
 80092a0:	2300      	movs	r3, #0
 80092a2:	4620      	mov	r0, r4
 80092a4:	4629      	mov	r1, r5
 80092a6:	f7f7 fc17 	bl	8000ad8 <__aeabi_dcmpeq>
 80092aa:	b108      	cbz	r0, 80092b0 <__cvt+0xa4>
 80092ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80092b0:	2230      	movs	r2, #48	; 0x30
 80092b2:	9b03      	ldr	r3, [sp, #12]
 80092b4:	454b      	cmp	r3, r9
 80092b6:	d307      	bcc.n	80092c8 <__cvt+0xbc>
 80092b8:	9b03      	ldr	r3, [sp, #12]
 80092ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092bc:	1bdb      	subs	r3, r3, r7
 80092be:	4638      	mov	r0, r7
 80092c0:	6013      	str	r3, [r2, #0]
 80092c2:	b004      	add	sp, #16
 80092c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c8:	1c59      	adds	r1, r3, #1
 80092ca:	9103      	str	r1, [sp, #12]
 80092cc:	701a      	strb	r2, [r3, #0]
 80092ce:	e7f0      	b.n	80092b2 <__cvt+0xa6>

080092d0 <__exponent>:
 80092d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092d2:	4603      	mov	r3, r0
 80092d4:	2900      	cmp	r1, #0
 80092d6:	bfb8      	it	lt
 80092d8:	4249      	neglt	r1, r1
 80092da:	f803 2b02 	strb.w	r2, [r3], #2
 80092de:	bfb4      	ite	lt
 80092e0:	222d      	movlt	r2, #45	; 0x2d
 80092e2:	222b      	movge	r2, #43	; 0x2b
 80092e4:	2909      	cmp	r1, #9
 80092e6:	7042      	strb	r2, [r0, #1]
 80092e8:	dd2a      	ble.n	8009340 <__exponent+0x70>
 80092ea:	f10d 0407 	add.w	r4, sp, #7
 80092ee:	46a4      	mov	ip, r4
 80092f0:	270a      	movs	r7, #10
 80092f2:	46a6      	mov	lr, r4
 80092f4:	460a      	mov	r2, r1
 80092f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80092fa:	fb07 1516 	mls	r5, r7, r6, r1
 80092fe:	3530      	adds	r5, #48	; 0x30
 8009300:	2a63      	cmp	r2, #99	; 0x63
 8009302:	f104 34ff 	add.w	r4, r4, #4294967295
 8009306:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800930a:	4631      	mov	r1, r6
 800930c:	dcf1      	bgt.n	80092f2 <__exponent+0x22>
 800930e:	3130      	adds	r1, #48	; 0x30
 8009310:	f1ae 0502 	sub.w	r5, lr, #2
 8009314:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009318:	1c44      	adds	r4, r0, #1
 800931a:	4629      	mov	r1, r5
 800931c:	4561      	cmp	r1, ip
 800931e:	d30a      	bcc.n	8009336 <__exponent+0x66>
 8009320:	f10d 0209 	add.w	r2, sp, #9
 8009324:	eba2 020e 	sub.w	r2, r2, lr
 8009328:	4565      	cmp	r5, ip
 800932a:	bf88      	it	hi
 800932c:	2200      	movhi	r2, #0
 800932e:	4413      	add	r3, r2
 8009330:	1a18      	subs	r0, r3, r0
 8009332:	b003      	add	sp, #12
 8009334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009336:	f811 2b01 	ldrb.w	r2, [r1], #1
 800933a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800933e:	e7ed      	b.n	800931c <__exponent+0x4c>
 8009340:	2330      	movs	r3, #48	; 0x30
 8009342:	3130      	adds	r1, #48	; 0x30
 8009344:	7083      	strb	r3, [r0, #2]
 8009346:	70c1      	strb	r1, [r0, #3]
 8009348:	1d03      	adds	r3, r0, #4
 800934a:	e7f1      	b.n	8009330 <__exponent+0x60>

0800934c <_printf_float>:
 800934c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009350:	ed2d 8b02 	vpush	{d8}
 8009354:	b08d      	sub	sp, #52	; 0x34
 8009356:	460c      	mov	r4, r1
 8009358:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800935c:	4616      	mov	r6, r2
 800935e:	461f      	mov	r7, r3
 8009360:	4605      	mov	r5, r0
 8009362:	f001 fa57 	bl	800a814 <_localeconv_r>
 8009366:	f8d0 a000 	ldr.w	sl, [r0]
 800936a:	4650      	mov	r0, sl
 800936c:	f7f6 ff38 	bl	80001e0 <strlen>
 8009370:	2300      	movs	r3, #0
 8009372:	930a      	str	r3, [sp, #40]	; 0x28
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	9305      	str	r3, [sp, #20]
 8009378:	f8d8 3000 	ldr.w	r3, [r8]
 800937c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009380:	3307      	adds	r3, #7
 8009382:	f023 0307 	bic.w	r3, r3, #7
 8009386:	f103 0208 	add.w	r2, r3, #8
 800938a:	f8c8 2000 	str.w	r2, [r8]
 800938e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009392:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009396:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800939a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800939e:	9307      	str	r3, [sp, #28]
 80093a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80093a4:	ee08 0a10 	vmov	s16, r0
 80093a8:	4b9f      	ldr	r3, [pc, #636]	; (8009628 <_printf_float+0x2dc>)
 80093aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093ae:	f04f 32ff 	mov.w	r2, #4294967295
 80093b2:	f7f7 fbc3 	bl	8000b3c <__aeabi_dcmpun>
 80093b6:	bb88      	cbnz	r0, 800941c <_printf_float+0xd0>
 80093b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093bc:	4b9a      	ldr	r3, [pc, #616]	; (8009628 <_printf_float+0x2dc>)
 80093be:	f04f 32ff 	mov.w	r2, #4294967295
 80093c2:	f7f7 fb9d 	bl	8000b00 <__aeabi_dcmple>
 80093c6:	bb48      	cbnz	r0, 800941c <_printf_float+0xd0>
 80093c8:	2200      	movs	r2, #0
 80093ca:	2300      	movs	r3, #0
 80093cc:	4640      	mov	r0, r8
 80093ce:	4649      	mov	r1, r9
 80093d0:	f7f7 fb8c 	bl	8000aec <__aeabi_dcmplt>
 80093d4:	b110      	cbz	r0, 80093dc <_printf_float+0x90>
 80093d6:	232d      	movs	r3, #45	; 0x2d
 80093d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093dc:	4b93      	ldr	r3, [pc, #588]	; (800962c <_printf_float+0x2e0>)
 80093de:	4894      	ldr	r0, [pc, #592]	; (8009630 <_printf_float+0x2e4>)
 80093e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80093e4:	bf94      	ite	ls
 80093e6:	4698      	movls	r8, r3
 80093e8:	4680      	movhi	r8, r0
 80093ea:	2303      	movs	r3, #3
 80093ec:	6123      	str	r3, [r4, #16]
 80093ee:	9b05      	ldr	r3, [sp, #20]
 80093f0:	f023 0204 	bic.w	r2, r3, #4
 80093f4:	6022      	str	r2, [r4, #0]
 80093f6:	f04f 0900 	mov.w	r9, #0
 80093fa:	9700      	str	r7, [sp, #0]
 80093fc:	4633      	mov	r3, r6
 80093fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8009400:	4621      	mov	r1, r4
 8009402:	4628      	mov	r0, r5
 8009404:	f000 f9d8 	bl	80097b8 <_printf_common>
 8009408:	3001      	adds	r0, #1
 800940a:	f040 8090 	bne.w	800952e <_printf_float+0x1e2>
 800940e:	f04f 30ff 	mov.w	r0, #4294967295
 8009412:	b00d      	add	sp, #52	; 0x34
 8009414:	ecbd 8b02 	vpop	{d8}
 8009418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941c:	4642      	mov	r2, r8
 800941e:	464b      	mov	r3, r9
 8009420:	4640      	mov	r0, r8
 8009422:	4649      	mov	r1, r9
 8009424:	f7f7 fb8a 	bl	8000b3c <__aeabi_dcmpun>
 8009428:	b140      	cbz	r0, 800943c <_printf_float+0xf0>
 800942a:	464b      	mov	r3, r9
 800942c:	2b00      	cmp	r3, #0
 800942e:	bfbc      	itt	lt
 8009430:	232d      	movlt	r3, #45	; 0x2d
 8009432:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009436:	487f      	ldr	r0, [pc, #508]	; (8009634 <_printf_float+0x2e8>)
 8009438:	4b7f      	ldr	r3, [pc, #508]	; (8009638 <_printf_float+0x2ec>)
 800943a:	e7d1      	b.n	80093e0 <_printf_float+0x94>
 800943c:	6863      	ldr	r3, [r4, #4]
 800943e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009442:	9206      	str	r2, [sp, #24]
 8009444:	1c5a      	adds	r2, r3, #1
 8009446:	d13f      	bne.n	80094c8 <_printf_float+0x17c>
 8009448:	2306      	movs	r3, #6
 800944a:	6063      	str	r3, [r4, #4]
 800944c:	9b05      	ldr	r3, [sp, #20]
 800944e:	6861      	ldr	r1, [r4, #4]
 8009450:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009454:	2300      	movs	r3, #0
 8009456:	9303      	str	r3, [sp, #12]
 8009458:	ab0a      	add	r3, sp, #40	; 0x28
 800945a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800945e:	ab09      	add	r3, sp, #36	; 0x24
 8009460:	ec49 8b10 	vmov	d0, r8, r9
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	6022      	str	r2, [r4, #0]
 8009468:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800946c:	4628      	mov	r0, r5
 800946e:	f7ff fecd 	bl	800920c <__cvt>
 8009472:	9b06      	ldr	r3, [sp, #24]
 8009474:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009476:	2b47      	cmp	r3, #71	; 0x47
 8009478:	4680      	mov	r8, r0
 800947a:	d108      	bne.n	800948e <_printf_float+0x142>
 800947c:	1cc8      	adds	r0, r1, #3
 800947e:	db02      	blt.n	8009486 <_printf_float+0x13a>
 8009480:	6863      	ldr	r3, [r4, #4]
 8009482:	4299      	cmp	r1, r3
 8009484:	dd41      	ble.n	800950a <_printf_float+0x1be>
 8009486:	f1ab 0b02 	sub.w	fp, fp, #2
 800948a:	fa5f fb8b 	uxtb.w	fp, fp
 800948e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009492:	d820      	bhi.n	80094d6 <_printf_float+0x18a>
 8009494:	3901      	subs	r1, #1
 8009496:	465a      	mov	r2, fp
 8009498:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800949c:	9109      	str	r1, [sp, #36]	; 0x24
 800949e:	f7ff ff17 	bl	80092d0 <__exponent>
 80094a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094a4:	1813      	adds	r3, r2, r0
 80094a6:	2a01      	cmp	r2, #1
 80094a8:	4681      	mov	r9, r0
 80094aa:	6123      	str	r3, [r4, #16]
 80094ac:	dc02      	bgt.n	80094b4 <_printf_float+0x168>
 80094ae:	6822      	ldr	r2, [r4, #0]
 80094b0:	07d2      	lsls	r2, r2, #31
 80094b2:	d501      	bpl.n	80094b8 <_printf_float+0x16c>
 80094b4:	3301      	adds	r3, #1
 80094b6:	6123      	str	r3, [r4, #16]
 80094b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d09c      	beq.n	80093fa <_printf_float+0xae>
 80094c0:	232d      	movs	r3, #45	; 0x2d
 80094c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094c6:	e798      	b.n	80093fa <_printf_float+0xae>
 80094c8:	9a06      	ldr	r2, [sp, #24]
 80094ca:	2a47      	cmp	r2, #71	; 0x47
 80094cc:	d1be      	bne.n	800944c <_printf_float+0x100>
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1bc      	bne.n	800944c <_printf_float+0x100>
 80094d2:	2301      	movs	r3, #1
 80094d4:	e7b9      	b.n	800944a <_printf_float+0xfe>
 80094d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80094da:	d118      	bne.n	800950e <_printf_float+0x1c2>
 80094dc:	2900      	cmp	r1, #0
 80094de:	6863      	ldr	r3, [r4, #4]
 80094e0:	dd0b      	ble.n	80094fa <_printf_float+0x1ae>
 80094e2:	6121      	str	r1, [r4, #16]
 80094e4:	b913      	cbnz	r3, 80094ec <_printf_float+0x1a0>
 80094e6:	6822      	ldr	r2, [r4, #0]
 80094e8:	07d0      	lsls	r0, r2, #31
 80094ea:	d502      	bpl.n	80094f2 <_printf_float+0x1a6>
 80094ec:	3301      	adds	r3, #1
 80094ee:	440b      	add	r3, r1
 80094f0:	6123      	str	r3, [r4, #16]
 80094f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80094f4:	f04f 0900 	mov.w	r9, #0
 80094f8:	e7de      	b.n	80094b8 <_printf_float+0x16c>
 80094fa:	b913      	cbnz	r3, 8009502 <_printf_float+0x1b6>
 80094fc:	6822      	ldr	r2, [r4, #0]
 80094fe:	07d2      	lsls	r2, r2, #31
 8009500:	d501      	bpl.n	8009506 <_printf_float+0x1ba>
 8009502:	3302      	adds	r3, #2
 8009504:	e7f4      	b.n	80094f0 <_printf_float+0x1a4>
 8009506:	2301      	movs	r3, #1
 8009508:	e7f2      	b.n	80094f0 <_printf_float+0x1a4>
 800950a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800950e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009510:	4299      	cmp	r1, r3
 8009512:	db05      	blt.n	8009520 <_printf_float+0x1d4>
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	6121      	str	r1, [r4, #16]
 8009518:	07d8      	lsls	r0, r3, #31
 800951a:	d5ea      	bpl.n	80094f2 <_printf_float+0x1a6>
 800951c:	1c4b      	adds	r3, r1, #1
 800951e:	e7e7      	b.n	80094f0 <_printf_float+0x1a4>
 8009520:	2900      	cmp	r1, #0
 8009522:	bfd4      	ite	le
 8009524:	f1c1 0202 	rsble	r2, r1, #2
 8009528:	2201      	movgt	r2, #1
 800952a:	4413      	add	r3, r2
 800952c:	e7e0      	b.n	80094f0 <_printf_float+0x1a4>
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	055a      	lsls	r2, r3, #21
 8009532:	d407      	bmi.n	8009544 <_printf_float+0x1f8>
 8009534:	6923      	ldr	r3, [r4, #16]
 8009536:	4642      	mov	r2, r8
 8009538:	4631      	mov	r1, r6
 800953a:	4628      	mov	r0, r5
 800953c:	47b8      	blx	r7
 800953e:	3001      	adds	r0, #1
 8009540:	d12c      	bne.n	800959c <_printf_float+0x250>
 8009542:	e764      	b.n	800940e <_printf_float+0xc2>
 8009544:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009548:	f240 80e0 	bls.w	800970c <_printf_float+0x3c0>
 800954c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009550:	2200      	movs	r2, #0
 8009552:	2300      	movs	r3, #0
 8009554:	f7f7 fac0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009558:	2800      	cmp	r0, #0
 800955a:	d034      	beq.n	80095c6 <_printf_float+0x27a>
 800955c:	4a37      	ldr	r2, [pc, #220]	; (800963c <_printf_float+0x2f0>)
 800955e:	2301      	movs	r3, #1
 8009560:	4631      	mov	r1, r6
 8009562:	4628      	mov	r0, r5
 8009564:	47b8      	blx	r7
 8009566:	3001      	adds	r0, #1
 8009568:	f43f af51 	beq.w	800940e <_printf_float+0xc2>
 800956c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009570:	429a      	cmp	r2, r3
 8009572:	db02      	blt.n	800957a <_printf_float+0x22e>
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	07d8      	lsls	r0, r3, #31
 8009578:	d510      	bpl.n	800959c <_printf_float+0x250>
 800957a:	ee18 3a10 	vmov	r3, s16
 800957e:	4652      	mov	r2, sl
 8009580:	4631      	mov	r1, r6
 8009582:	4628      	mov	r0, r5
 8009584:	47b8      	blx	r7
 8009586:	3001      	adds	r0, #1
 8009588:	f43f af41 	beq.w	800940e <_printf_float+0xc2>
 800958c:	f04f 0800 	mov.w	r8, #0
 8009590:	f104 091a 	add.w	r9, r4, #26
 8009594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009596:	3b01      	subs	r3, #1
 8009598:	4543      	cmp	r3, r8
 800959a:	dc09      	bgt.n	80095b0 <_printf_float+0x264>
 800959c:	6823      	ldr	r3, [r4, #0]
 800959e:	079b      	lsls	r3, r3, #30
 80095a0:	f100 8105 	bmi.w	80097ae <_printf_float+0x462>
 80095a4:	68e0      	ldr	r0, [r4, #12]
 80095a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095a8:	4298      	cmp	r0, r3
 80095aa:	bfb8      	it	lt
 80095ac:	4618      	movlt	r0, r3
 80095ae:	e730      	b.n	8009412 <_printf_float+0xc6>
 80095b0:	2301      	movs	r3, #1
 80095b2:	464a      	mov	r2, r9
 80095b4:	4631      	mov	r1, r6
 80095b6:	4628      	mov	r0, r5
 80095b8:	47b8      	blx	r7
 80095ba:	3001      	adds	r0, #1
 80095bc:	f43f af27 	beq.w	800940e <_printf_float+0xc2>
 80095c0:	f108 0801 	add.w	r8, r8, #1
 80095c4:	e7e6      	b.n	8009594 <_printf_float+0x248>
 80095c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	dc39      	bgt.n	8009640 <_printf_float+0x2f4>
 80095cc:	4a1b      	ldr	r2, [pc, #108]	; (800963c <_printf_float+0x2f0>)
 80095ce:	2301      	movs	r3, #1
 80095d0:	4631      	mov	r1, r6
 80095d2:	4628      	mov	r0, r5
 80095d4:	47b8      	blx	r7
 80095d6:	3001      	adds	r0, #1
 80095d8:	f43f af19 	beq.w	800940e <_printf_float+0xc2>
 80095dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095e0:	4313      	orrs	r3, r2
 80095e2:	d102      	bne.n	80095ea <_printf_float+0x29e>
 80095e4:	6823      	ldr	r3, [r4, #0]
 80095e6:	07d9      	lsls	r1, r3, #31
 80095e8:	d5d8      	bpl.n	800959c <_printf_float+0x250>
 80095ea:	ee18 3a10 	vmov	r3, s16
 80095ee:	4652      	mov	r2, sl
 80095f0:	4631      	mov	r1, r6
 80095f2:	4628      	mov	r0, r5
 80095f4:	47b8      	blx	r7
 80095f6:	3001      	adds	r0, #1
 80095f8:	f43f af09 	beq.w	800940e <_printf_float+0xc2>
 80095fc:	f04f 0900 	mov.w	r9, #0
 8009600:	f104 0a1a 	add.w	sl, r4, #26
 8009604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009606:	425b      	negs	r3, r3
 8009608:	454b      	cmp	r3, r9
 800960a:	dc01      	bgt.n	8009610 <_printf_float+0x2c4>
 800960c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800960e:	e792      	b.n	8009536 <_printf_float+0x1ea>
 8009610:	2301      	movs	r3, #1
 8009612:	4652      	mov	r2, sl
 8009614:	4631      	mov	r1, r6
 8009616:	4628      	mov	r0, r5
 8009618:	47b8      	blx	r7
 800961a:	3001      	adds	r0, #1
 800961c:	f43f aef7 	beq.w	800940e <_printf_float+0xc2>
 8009620:	f109 0901 	add.w	r9, r9, #1
 8009624:	e7ee      	b.n	8009604 <_printf_float+0x2b8>
 8009626:	bf00      	nop
 8009628:	7fefffff 	.word	0x7fefffff
 800962c:	0800c310 	.word	0x0800c310
 8009630:	0800c314 	.word	0x0800c314
 8009634:	0800c31c 	.word	0x0800c31c
 8009638:	0800c318 	.word	0x0800c318
 800963c:	0800c320 	.word	0x0800c320
 8009640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009642:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009644:	429a      	cmp	r2, r3
 8009646:	bfa8      	it	ge
 8009648:	461a      	movge	r2, r3
 800964a:	2a00      	cmp	r2, #0
 800964c:	4691      	mov	r9, r2
 800964e:	dc37      	bgt.n	80096c0 <_printf_float+0x374>
 8009650:	f04f 0b00 	mov.w	fp, #0
 8009654:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009658:	f104 021a 	add.w	r2, r4, #26
 800965c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800965e:	9305      	str	r3, [sp, #20]
 8009660:	eba3 0309 	sub.w	r3, r3, r9
 8009664:	455b      	cmp	r3, fp
 8009666:	dc33      	bgt.n	80096d0 <_printf_float+0x384>
 8009668:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800966c:	429a      	cmp	r2, r3
 800966e:	db3b      	blt.n	80096e8 <_printf_float+0x39c>
 8009670:	6823      	ldr	r3, [r4, #0]
 8009672:	07da      	lsls	r2, r3, #31
 8009674:	d438      	bmi.n	80096e8 <_printf_float+0x39c>
 8009676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009678:	9a05      	ldr	r2, [sp, #20]
 800967a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800967c:	1a9a      	subs	r2, r3, r2
 800967e:	eba3 0901 	sub.w	r9, r3, r1
 8009682:	4591      	cmp	r9, r2
 8009684:	bfa8      	it	ge
 8009686:	4691      	movge	r9, r2
 8009688:	f1b9 0f00 	cmp.w	r9, #0
 800968c:	dc35      	bgt.n	80096fa <_printf_float+0x3ae>
 800968e:	f04f 0800 	mov.w	r8, #0
 8009692:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009696:	f104 0a1a 	add.w	sl, r4, #26
 800969a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800969e:	1a9b      	subs	r3, r3, r2
 80096a0:	eba3 0309 	sub.w	r3, r3, r9
 80096a4:	4543      	cmp	r3, r8
 80096a6:	f77f af79 	ble.w	800959c <_printf_float+0x250>
 80096aa:	2301      	movs	r3, #1
 80096ac:	4652      	mov	r2, sl
 80096ae:	4631      	mov	r1, r6
 80096b0:	4628      	mov	r0, r5
 80096b2:	47b8      	blx	r7
 80096b4:	3001      	adds	r0, #1
 80096b6:	f43f aeaa 	beq.w	800940e <_printf_float+0xc2>
 80096ba:	f108 0801 	add.w	r8, r8, #1
 80096be:	e7ec      	b.n	800969a <_printf_float+0x34e>
 80096c0:	4613      	mov	r3, r2
 80096c2:	4631      	mov	r1, r6
 80096c4:	4642      	mov	r2, r8
 80096c6:	4628      	mov	r0, r5
 80096c8:	47b8      	blx	r7
 80096ca:	3001      	adds	r0, #1
 80096cc:	d1c0      	bne.n	8009650 <_printf_float+0x304>
 80096ce:	e69e      	b.n	800940e <_printf_float+0xc2>
 80096d0:	2301      	movs	r3, #1
 80096d2:	4631      	mov	r1, r6
 80096d4:	4628      	mov	r0, r5
 80096d6:	9205      	str	r2, [sp, #20]
 80096d8:	47b8      	blx	r7
 80096da:	3001      	adds	r0, #1
 80096dc:	f43f ae97 	beq.w	800940e <_printf_float+0xc2>
 80096e0:	9a05      	ldr	r2, [sp, #20]
 80096e2:	f10b 0b01 	add.w	fp, fp, #1
 80096e6:	e7b9      	b.n	800965c <_printf_float+0x310>
 80096e8:	ee18 3a10 	vmov	r3, s16
 80096ec:	4652      	mov	r2, sl
 80096ee:	4631      	mov	r1, r6
 80096f0:	4628      	mov	r0, r5
 80096f2:	47b8      	blx	r7
 80096f4:	3001      	adds	r0, #1
 80096f6:	d1be      	bne.n	8009676 <_printf_float+0x32a>
 80096f8:	e689      	b.n	800940e <_printf_float+0xc2>
 80096fa:	9a05      	ldr	r2, [sp, #20]
 80096fc:	464b      	mov	r3, r9
 80096fe:	4442      	add	r2, r8
 8009700:	4631      	mov	r1, r6
 8009702:	4628      	mov	r0, r5
 8009704:	47b8      	blx	r7
 8009706:	3001      	adds	r0, #1
 8009708:	d1c1      	bne.n	800968e <_printf_float+0x342>
 800970a:	e680      	b.n	800940e <_printf_float+0xc2>
 800970c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800970e:	2a01      	cmp	r2, #1
 8009710:	dc01      	bgt.n	8009716 <_printf_float+0x3ca>
 8009712:	07db      	lsls	r3, r3, #31
 8009714:	d538      	bpl.n	8009788 <_printf_float+0x43c>
 8009716:	2301      	movs	r3, #1
 8009718:	4642      	mov	r2, r8
 800971a:	4631      	mov	r1, r6
 800971c:	4628      	mov	r0, r5
 800971e:	47b8      	blx	r7
 8009720:	3001      	adds	r0, #1
 8009722:	f43f ae74 	beq.w	800940e <_printf_float+0xc2>
 8009726:	ee18 3a10 	vmov	r3, s16
 800972a:	4652      	mov	r2, sl
 800972c:	4631      	mov	r1, r6
 800972e:	4628      	mov	r0, r5
 8009730:	47b8      	blx	r7
 8009732:	3001      	adds	r0, #1
 8009734:	f43f ae6b 	beq.w	800940e <_printf_float+0xc2>
 8009738:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800973c:	2200      	movs	r2, #0
 800973e:	2300      	movs	r3, #0
 8009740:	f7f7 f9ca 	bl	8000ad8 <__aeabi_dcmpeq>
 8009744:	b9d8      	cbnz	r0, 800977e <_printf_float+0x432>
 8009746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009748:	f108 0201 	add.w	r2, r8, #1
 800974c:	3b01      	subs	r3, #1
 800974e:	4631      	mov	r1, r6
 8009750:	4628      	mov	r0, r5
 8009752:	47b8      	blx	r7
 8009754:	3001      	adds	r0, #1
 8009756:	d10e      	bne.n	8009776 <_printf_float+0x42a>
 8009758:	e659      	b.n	800940e <_printf_float+0xc2>
 800975a:	2301      	movs	r3, #1
 800975c:	4652      	mov	r2, sl
 800975e:	4631      	mov	r1, r6
 8009760:	4628      	mov	r0, r5
 8009762:	47b8      	blx	r7
 8009764:	3001      	adds	r0, #1
 8009766:	f43f ae52 	beq.w	800940e <_printf_float+0xc2>
 800976a:	f108 0801 	add.w	r8, r8, #1
 800976e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009770:	3b01      	subs	r3, #1
 8009772:	4543      	cmp	r3, r8
 8009774:	dcf1      	bgt.n	800975a <_printf_float+0x40e>
 8009776:	464b      	mov	r3, r9
 8009778:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800977c:	e6dc      	b.n	8009538 <_printf_float+0x1ec>
 800977e:	f04f 0800 	mov.w	r8, #0
 8009782:	f104 0a1a 	add.w	sl, r4, #26
 8009786:	e7f2      	b.n	800976e <_printf_float+0x422>
 8009788:	2301      	movs	r3, #1
 800978a:	4642      	mov	r2, r8
 800978c:	e7df      	b.n	800974e <_printf_float+0x402>
 800978e:	2301      	movs	r3, #1
 8009790:	464a      	mov	r2, r9
 8009792:	4631      	mov	r1, r6
 8009794:	4628      	mov	r0, r5
 8009796:	47b8      	blx	r7
 8009798:	3001      	adds	r0, #1
 800979a:	f43f ae38 	beq.w	800940e <_printf_float+0xc2>
 800979e:	f108 0801 	add.w	r8, r8, #1
 80097a2:	68e3      	ldr	r3, [r4, #12]
 80097a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097a6:	1a5b      	subs	r3, r3, r1
 80097a8:	4543      	cmp	r3, r8
 80097aa:	dcf0      	bgt.n	800978e <_printf_float+0x442>
 80097ac:	e6fa      	b.n	80095a4 <_printf_float+0x258>
 80097ae:	f04f 0800 	mov.w	r8, #0
 80097b2:	f104 0919 	add.w	r9, r4, #25
 80097b6:	e7f4      	b.n	80097a2 <_printf_float+0x456>

080097b8 <_printf_common>:
 80097b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097bc:	4616      	mov	r6, r2
 80097be:	4699      	mov	r9, r3
 80097c0:	688a      	ldr	r2, [r1, #8]
 80097c2:	690b      	ldr	r3, [r1, #16]
 80097c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097c8:	4293      	cmp	r3, r2
 80097ca:	bfb8      	it	lt
 80097cc:	4613      	movlt	r3, r2
 80097ce:	6033      	str	r3, [r6, #0]
 80097d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097d4:	4607      	mov	r7, r0
 80097d6:	460c      	mov	r4, r1
 80097d8:	b10a      	cbz	r2, 80097de <_printf_common+0x26>
 80097da:	3301      	adds	r3, #1
 80097dc:	6033      	str	r3, [r6, #0]
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	0699      	lsls	r1, r3, #26
 80097e2:	bf42      	ittt	mi
 80097e4:	6833      	ldrmi	r3, [r6, #0]
 80097e6:	3302      	addmi	r3, #2
 80097e8:	6033      	strmi	r3, [r6, #0]
 80097ea:	6825      	ldr	r5, [r4, #0]
 80097ec:	f015 0506 	ands.w	r5, r5, #6
 80097f0:	d106      	bne.n	8009800 <_printf_common+0x48>
 80097f2:	f104 0a19 	add.w	sl, r4, #25
 80097f6:	68e3      	ldr	r3, [r4, #12]
 80097f8:	6832      	ldr	r2, [r6, #0]
 80097fa:	1a9b      	subs	r3, r3, r2
 80097fc:	42ab      	cmp	r3, r5
 80097fe:	dc26      	bgt.n	800984e <_printf_common+0x96>
 8009800:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009804:	1e13      	subs	r3, r2, #0
 8009806:	6822      	ldr	r2, [r4, #0]
 8009808:	bf18      	it	ne
 800980a:	2301      	movne	r3, #1
 800980c:	0692      	lsls	r2, r2, #26
 800980e:	d42b      	bmi.n	8009868 <_printf_common+0xb0>
 8009810:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009814:	4649      	mov	r1, r9
 8009816:	4638      	mov	r0, r7
 8009818:	47c0      	blx	r8
 800981a:	3001      	adds	r0, #1
 800981c:	d01e      	beq.n	800985c <_printf_common+0xa4>
 800981e:	6823      	ldr	r3, [r4, #0]
 8009820:	68e5      	ldr	r5, [r4, #12]
 8009822:	6832      	ldr	r2, [r6, #0]
 8009824:	f003 0306 	and.w	r3, r3, #6
 8009828:	2b04      	cmp	r3, #4
 800982a:	bf08      	it	eq
 800982c:	1aad      	subeq	r5, r5, r2
 800982e:	68a3      	ldr	r3, [r4, #8]
 8009830:	6922      	ldr	r2, [r4, #16]
 8009832:	bf0c      	ite	eq
 8009834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009838:	2500      	movne	r5, #0
 800983a:	4293      	cmp	r3, r2
 800983c:	bfc4      	itt	gt
 800983e:	1a9b      	subgt	r3, r3, r2
 8009840:	18ed      	addgt	r5, r5, r3
 8009842:	2600      	movs	r6, #0
 8009844:	341a      	adds	r4, #26
 8009846:	42b5      	cmp	r5, r6
 8009848:	d11a      	bne.n	8009880 <_printf_common+0xc8>
 800984a:	2000      	movs	r0, #0
 800984c:	e008      	b.n	8009860 <_printf_common+0xa8>
 800984e:	2301      	movs	r3, #1
 8009850:	4652      	mov	r2, sl
 8009852:	4649      	mov	r1, r9
 8009854:	4638      	mov	r0, r7
 8009856:	47c0      	blx	r8
 8009858:	3001      	adds	r0, #1
 800985a:	d103      	bne.n	8009864 <_printf_common+0xac>
 800985c:	f04f 30ff 	mov.w	r0, #4294967295
 8009860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009864:	3501      	adds	r5, #1
 8009866:	e7c6      	b.n	80097f6 <_printf_common+0x3e>
 8009868:	18e1      	adds	r1, r4, r3
 800986a:	1c5a      	adds	r2, r3, #1
 800986c:	2030      	movs	r0, #48	; 0x30
 800986e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009872:	4422      	add	r2, r4
 8009874:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009878:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800987c:	3302      	adds	r3, #2
 800987e:	e7c7      	b.n	8009810 <_printf_common+0x58>
 8009880:	2301      	movs	r3, #1
 8009882:	4622      	mov	r2, r4
 8009884:	4649      	mov	r1, r9
 8009886:	4638      	mov	r0, r7
 8009888:	47c0      	blx	r8
 800988a:	3001      	adds	r0, #1
 800988c:	d0e6      	beq.n	800985c <_printf_common+0xa4>
 800988e:	3601      	adds	r6, #1
 8009890:	e7d9      	b.n	8009846 <_printf_common+0x8e>
	...

08009894 <_printf_i>:
 8009894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009898:	7e0f      	ldrb	r7, [r1, #24]
 800989a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800989c:	2f78      	cmp	r7, #120	; 0x78
 800989e:	4691      	mov	r9, r2
 80098a0:	4680      	mov	r8, r0
 80098a2:	460c      	mov	r4, r1
 80098a4:	469a      	mov	sl, r3
 80098a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80098aa:	d807      	bhi.n	80098bc <_printf_i+0x28>
 80098ac:	2f62      	cmp	r7, #98	; 0x62
 80098ae:	d80a      	bhi.n	80098c6 <_printf_i+0x32>
 80098b0:	2f00      	cmp	r7, #0
 80098b2:	f000 80d8 	beq.w	8009a66 <_printf_i+0x1d2>
 80098b6:	2f58      	cmp	r7, #88	; 0x58
 80098b8:	f000 80a3 	beq.w	8009a02 <_printf_i+0x16e>
 80098bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098c4:	e03a      	b.n	800993c <_printf_i+0xa8>
 80098c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098ca:	2b15      	cmp	r3, #21
 80098cc:	d8f6      	bhi.n	80098bc <_printf_i+0x28>
 80098ce:	a101      	add	r1, pc, #4	; (adr r1, 80098d4 <_printf_i+0x40>)
 80098d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098d4:	0800992d 	.word	0x0800992d
 80098d8:	08009941 	.word	0x08009941
 80098dc:	080098bd 	.word	0x080098bd
 80098e0:	080098bd 	.word	0x080098bd
 80098e4:	080098bd 	.word	0x080098bd
 80098e8:	080098bd 	.word	0x080098bd
 80098ec:	08009941 	.word	0x08009941
 80098f0:	080098bd 	.word	0x080098bd
 80098f4:	080098bd 	.word	0x080098bd
 80098f8:	080098bd 	.word	0x080098bd
 80098fc:	080098bd 	.word	0x080098bd
 8009900:	08009a4d 	.word	0x08009a4d
 8009904:	08009971 	.word	0x08009971
 8009908:	08009a2f 	.word	0x08009a2f
 800990c:	080098bd 	.word	0x080098bd
 8009910:	080098bd 	.word	0x080098bd
 8009914:	08009a6f 	.word	0x08009a6f
 8009918:	080098bd 	.word	0x080098bd
 800991c:	08009971 	.word	0x08009971
 8009920:	080098bd 	.word	0x080098bd
 8009924:	080098bd 	.word	0x080098bd
 8009928:	08009a37 	.word	0x08009a37
 800992c:	682b      	ldr	r3, [r5, #0]
 800992e:	1d1a      	adds	r2, r3, #4
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	602a      	str	r2, [r5, #0]
 8009934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800993c:	2301      	movs	r3, #1
 800993e:	e0a3      	b.n	8009a88 <_printf_i+0x1f4>
 8009940:	6820      	ldr	r0, [r4, #0]
 8009942:	6829      	ldr	r1, [r5, #0]
 8009944:	0606      	lsls	r6, r0, #24
 8009946:	f101 0304 	add.w	r3, r1, #4
 800994a:	d50a      	bpl.n	8009962 <_printf_i+0xce>
 800994c:	680e      	ldr	r6, [r1, #0]
 800994e:	602b      	str	r3, [r5, #0]
 8009950:	2e00      	cmp	r6, #0
 8009952:	da03      	bge.n	800995c <_printf_i+0xc8>
 8009954:	232d      	movs	r3, #45	; 0x2d
 8009956:	4276      	negs	r6, r6
 8009958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800995c:	485e      	ldr	r0, [pc, #376]	; (8009ad8 <_printf_i+0x244>)
 800995e:	230a      	movs	r3, #10
 8009960:	e019      	b.n	8009996 <_printf_i+0x102>
 8009962:	680e      	ldr	r6, [r1, #0]
 8009964:	602b      	str	r3, [r5, #0]
 8009966:	f010 0f40 	tst.w	r0, #64	; 0x40
 800996a:	bf18      	it	ne
 800996c:	b236      	sxthne	r6, r6
 800996e:	e7ef      	b.n	8009950 <_printf_i+0xbc>
 8009970:	682b      	ldr	r3, [r5, #0]
 8009972:	6820      	ldr	r0, [r4, #0]
 8009974:	1d19      	adds	r1, r3, #4
 8009976:	6029      	str	r1, [r5, #0]
 8009978:	0601      	lsls	r1, r0, #24
 800997a:	d501      	bpl.n	8009980 <_printf_i+0xec>
 800997c:	681e      	ldr	r6, [r3, #0]
 800997e:	e002      	b.n	8009986 <_printf_i+0xf2>
 8009980:	0646      	lsls	r6, r0, #25
 8009982:	d5fb      	bpl.n	800997c <_printf_i+0xe8>
 8009984:	881e      	ldrh	r6, [r3, #0]
 8009986:	4854      	ldr	r0, [pc, #336]	; (8009ad8 <_printf_i+0x244>)
 8009988:	2f6f      	cmp	r7, #111	; 0x6f
 800998a:	bf0c      	ite	eq
 800998c:	2308      	moveq	r3, #8
 800998e:	230a      	movne	r3, #10
 8009990:	2100      	movs	r1, #0
 8009992:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009996:	6865      	ldr	r5, [r4, #4]
 8009998:	60a5      	str	r5, [r4, #8]
 800999a:	2d00      	cmp	r5, #0
 800999c:	bfa2      	ittt	ge
 800999e:	6821      	ldrge	r1, [r4, #0]
 80099a0:	f021 0104 	bicge.w	r1, r1, #4
 80099a4:	6021      	strge	r1, [r4, #0]
 80099a6:	b90e      	cbnz	r6, 80099ac <_printf_i+0x118>
 80099a8:	2d00      	cmp	r5, #0
 80099aa:	d04d      	beq.n	8009a48 <_printf_i+0x1b4>
 80099ac:	4615      	mov	r5, r2
 80099ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80099b2:	fb03 6711 	mls	r7, r3, r1, r6
 80099b6:	5dc7      	ldrb	r7, [r0, r7]
 80099b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80099bc:	4637      	mov	r7, r6
 80099be:	42bb      	cmp	r3, r7
 80099c0:	460e      	mov	r6, r1
 80099c2:	d9f4      	bls.n	80099ae <_printf_i+0x11a>
 80099c4:	2b08      	cmp	r3, #8
 80099c6:	d10b      	bne.n	80099e0 <_printf_i+0x14c>
 80099c8:	6823      	ldr	r3, [r4, #0]
 80099ca:	07de      	lsls	r6, r3, #31
 80099cc:	d508      	bpl.n	80099e0 <_printf_i+0x14c>
 80099ce:	6923      	ldr	r3, [r4, #16]
 80099d0:	6861      	ldr	r1, [r4, #4]
 80099d2:	4299      	cmp	r1, r3
 80099d4:	bfde      	ittt	le
 80099d6:	2330      	movle	r3, #48	; 0x30
 80099d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099e0:	1b52      	subs	r2, r2, r5
 80099e2:	6122      	str	r2, [r4, #16]
 80099e4:	f8cd a000 	str.w	sl, [sp]
 80099e8:	464b      	mov	r3, r9
 80099ea:	aa03      	add	r2, sp, #12
 80099ec:	4621      	mov	r1, r4
 80099ee:	4640      	mov	r0, r8
 80099f0:	f7ff fee2 	bl	80097b8 <_printf_common>
 80099f4:	3001      	adds	r0, #1
 80099f6:	d14c      	bne.n	8009a92 <_printf_i+0x1fe>
 80099f8:	f04f 30ff 	mov.w	r0, #4294967295
 80099fc:	b004      	add	sp, #16
 80099fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a02:	4835      	ldr	r0, [pc, #212]	; (8009ad8 <_printf_i+0x244>)
 8009a04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a08:	6829      	ldr	r1, [r5, #0]
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a10:	6029      	str	r1, [r5, #0]
 8009a12:	061d      	lsls	r5, r3, #24
 8009a14:	d514      	bpl.n	8009a40 <_printf_i+0x1ac>
 8009a16:	07df      	lsls	r7, r3, #31
 8009a18:	bf44      	itt	mi
 8009a1a:	f043 0320 	orrmi.w	r3, r3, #32
 8009a1e:	6023      	strmi	r3, [r4, #0]
 8009a20:	b91e      	cbnz	r6, 8009a2a <_printf_i+0x196>
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	f023 0320 	bic.w	r3, r3, #32
 8009a28:	6023      	str	r3, [r4, #0]
 8009a2a:	2310      	movs	r3, #16
 8009a2c:	e7b0      	b.n	8009990 <_printf_i+0xfc>
 8009a2e:	6823      	ldr	r3, [r4, #0]
 8009a30:	f043 0320 	orr.w	r3, r3, #32
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	2378      	movs	r3, #120	; 0x78
 8009a38:	4828      	ldr	r0, [pc, #160]	; (8009adc <_printf_i+0x248>)
 8009a3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a3e:	e7e3      	b.n	8009a08 <_printf_i+0x174>
 8009a40:	0659      	lsls	r1, r3, #25
 8009a42:	bf48      	it	mi
 8009a44:	b2b6      	uxthmi	r6, r6
 8009a46:	e7e6      	b.n	8009a16 <_printf_i+0x182>
 8009a48:	4615      	mov	r5, r2
 8009a4a:	e7bb      	b.n	80099c4 <_printf_i+0x130>
 8009a4c:	682b      	ldr	r3, [r5, #0]
 8009a4e:	6826      	ldr	r6, [r4, #0]
 8009a50:	6961      	ldr	r1, [r4, #20]
 8009a52:	1d18      	adds	r0, r3, #4
 8009a54:	6028      	str	r0, [r5, #0]
 8009a56:	0635      	lsls	r5, r6, #24
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	d501      	bpl.n	8009a60 <_printf_i+0x1cc>
 8009a5c:	6019      	str	r1, [r3, #0]
 8009a5e:	e002      	b.n	8009a66 <_printf_i+0x1d2>
 8009a60:	0670      	lsls	r0, r6, #25
 8009a62:	d5fb      	bpl.n	8009a5c <_printf_i+0x1c8>
 8009a64:	8019      	strh	r1, [r3, #0]
 8009a66:	2300      	movs	r3, #0
 8009a68:	6123      	str	r3, [r4, #16]
 8009a6a:	4615      	mov	r5, r2
 8009a6c:	e7ba      	b.n	80099e4 <_printf_i+0x150>
 8009a6e:	682b      	ldr	r3, [r5, #0]
 8009a70:	1d1a      	adds	r2, r3, #4
 8009a72:	602a      	str	r2, [r5, #0]
 8009a74:	681d      	ldr	r5, [r3, #0]
 8009a76:	6862      	ldr	r2, [r4, #4]
 8009a78:	2100      	movs	r1, #0
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	f7f6 fbb8 	bl	80001f0 <memchr>
 8009a80:	b108      	cbz	r0, 8009a86 <_printf_i+0x1f2>
 8009a82:	1b40      	subs	r0, r0, r5
 8009a84:	6060      	str	r0, [r4, #4]
 8009a86:	6863      	ldr	r3, [r4, #4]
 8009a88:	6123      	str	r3, [r4, #16]
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a90:	e7a8      	b.n	80099e4 <_printf_i+0x150>
 8009a92:	6923      	ldr	r3, [r4, #16]
 8009a94:	462a      	mov	r2, r5
 8009a96:	4649      	mov	r1, r9
 8009a98:	4640      	mov	r0, r8
 8009a9a:	47d0      	blx	sl
 8009a9c:	3001      	adds	r0, #1
 8009a9e:	d0ab      	beq.n	80099f8 <_printf_i+0x164>
 8009aa0:	6823      	ldr	r3, [r4, #0]
 8009aa2:	079b      	lsls	r3, r3, #30
 8009aa4:	d413      	bmi.n	8009ace <_printf_i+0x23a>
 8009aa6:	68e0      	ldr	r0, [r4, #12]
 8009aa8:	9b03      	ldr	r3, [sp, #12]
 8009aaa:	4298      	cmp	r0, r3
 8009aac:	bfb8      	it	lt
 8009aae:	4618      	movlt	r0, r3
 8009ab0:	e7a4      	b.n	80099fc <_printf_i+0x168>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	4632      	mov	r2, r6
 8009ab6:	4649      	mov	r1, r9
 8009ab8:	4640      	mov	r0, r8
 8009aba:	47d0      	blx	sl
 8009abc:	3001      	adds	r0, #1
 8009abe:	d09b      	beq.n	80099f8 <_printf_i+0x164>
 8009ac0:	3501      	adds	r5, #1
 8009ac2:	68e3      	ldr	r3, [r4, #12]
 8009ac4:	9903      	ldr	r1, [sp, #12]
 8009ac6:	1a5b      	subs	r3, r3, r1
 8009ac8:	42ab      	cmp	r3, r5
 8009aca:	dcf2      	bgt.n	8009ab2 <_printf_i+0x21e>
 8009acc:	e7eb      	b.n	8009aa6 <_printf_i+0x212>
 8009ace:	2500      	movs	r5, #0
 8009ad0:	f104 0619 	add.w	r6, r4, #25
 8009ad4:	e7f5      	b.n	8009ac2 <_printf_i+0x22e>
 8009ad6:	bf00      	nop
 8009ad8:	0800c322 	.word	0x0800c322
 8009adc:	0800c333 	.word	0x0800c333

08009ae0 <siprintf>:
 8009ae0:	b40e      	push	{r1, r2, r3}
 8009ae2:	b500      	push	{lr}
 8009ae4:	b09c      	sub	sp, #112	; 0x70
 8009ae6:	ab1d      	add	r3, sp, #116	; 0x74
 8009ae8:	9002      	str	r0, [sp, #8]
 8009aea:	9006      	str	r0, [sp, #24]
 8009aec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009af0:	4809      	ldr	r0, [pc, #36]	; (8009b18 <siprintf+0x38>)
 8009af2:	9107      	str	r1, [sp, #28]
 8009af4:	9104      	str	r1, [sp, #16]
 8009af6:	4909      	ldr	r1, [pc, #36]	; (8009b1c <siprintf+0x3c>)
 8009af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009afc:	9105      	str	r1, [sp, #20]
 8009afe:	6800      	ldr	r0, [r0, #0]
 8009b00:	9301      	str	r3, [sp, #4]
 8009b02:	a902      	add	r1, sp, #8
 8009b04:	f001 fb68 	bl	800b1d8 <_svfiprintf_r>
 8009b08:	9b02      	ldr	r3, [sp, #8]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	701a      	strb	r2, [r3, #0]
 8009b0e:	b01c      	add	sp, #112	; 0x70
 8009b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b14:	b003      	add	sp, #12
 8009b16:	4770      	bx	lr
 8009b18:	20000010 	.word	0x20000010
 8009b1c:	ffff0208 	.word	0xffff0208

08009b20 <quorem>:
 8009b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b24:	6903      	ldr	r3, [r0, #16]
 8009b26:	690c      	ldr	r4, [r1, #16]
 8009b28:	42a3      	cmp	r3, r4
 8009b2a:	4607      	mov	r7, r0
 8009b2c:	f2c0 8081 	blt.w	8009c32 <quorem+0x112>
 8009b30:	3c01      	subs	r4, #1
 8009b32:	f101 0814 	add.w	r8, r1, #20
 8009b36:	f100 0514 	add.w	r5, r0, #20
 8009b3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b3e:	9301      	str	r3, [sp, #4]
 8009b40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009b50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b54:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b58:	d331      	bcc.n	8009bbe <quorem+0x9e>
 8009b5a:	f04f 0e00 	mov.w	lr, #0
 8009b5e:	4640      	mov	r0, r8
 8009b60:	46ac      	mov	ip, r5
 8009b62:	46f2      	mov	sl, lr
 8009b64:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b68:	b293      	uxth	r3, r2
 8009b6a:	fb06 e303 	mla	r3, r6, r3, lr
 8009b6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	ebaa 0303 	sub.w	r3, sl, r3
 8009b78:	f8dc a000 	ldr.w	sl, [ip]
 8009b7c:	0c12      	lsrs	r2, r2, #16
 8009b7e:	fa13 f38a 	uxtah	r3, r3, sl
 8009b82:	fb06 e202 	mla	r2, r6, r2, lr
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	9b00      	ldr	r3, [sp, #0]
 8009b8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009b8e:	b292      	uxth	r2, r2
 8009b90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009b94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b98:	f8bd 3000 	ldrh.w	r3, [sp]
 8009b9c:	4581      	cmp	r9, r0
 8009b9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ba2:	f84c 3b04 	str.w	r3, [ip], #4
 8009ba6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009baa:	d2db      	bcs.n	8009b64 <quorem+0x44>
 8009bac:	f855 300b 	ldr.w	r3, [r5, fp]
 8009bb0:	b92b      	cbnz	r3, 8009bbe <quorem+0x9e>
 8009bb2:	9b01      	ldr	r3, [sp, #4]
 8009bb4:	3b04      	subs	r3, #4
 8009bb6:	429d      	cmp	r5, r3
 8009bb8:	461a      	mov	r2, r3
 8009bba:	d32e      	bcc.n	8009c1a <quorem+0xfa>
 8009bbc:	613c      	str	r4, [r7, #16]
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	f001 f8b6 	bl	800ad30 <__mcmp>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	db24      	blt.n	8009c12 <quorem+0xf2>
 8009bc8:	3601      	adds	r6, #1
 8009bca:	4628      	mov	r0, r5
 8009bcc:	f04f 0c00 	mov.w	ip, #0
 8009bd0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009bd4:	f8d0 e000 	ldr.w	lr, [r0]
 8009bd8:	b293      	uxth	r3, r2
 8009bda:	ebac 0303 	sub.w	r3, ip, r3
 8009bde:	0c12      	lsrs	r2, r2, #16
 8009be0:	fa13 f38e 	uxtah	r3, r3, lr
 8009be4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009be8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bf2:	45c1      	cmp	r9, r8
 8009bf4:	f840 3b04 	str.w	r3, [r0], #4
 8009bf8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009bfc:	d2e8      	bcs.n	8009bd0 <quorem+0xb0>
 8009bfe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c06:	b922      	cbnz	r2, 8009c12 <quorem+0xf2>
 8009c08:	3b04      	subs	r3, #4
 8009c0a:	429d      	cmp	r5, r3
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	d30a      	bcc.n	8009c26 <quorem+0x106>
 8009c10:	613c      	str	r4, [r7, #16]
 8009c12:	4630      	mov	r0, r6
 8009c14:	b003      	add	sp, #12
 8009c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1a:	6812      	ldr	r2, [r2, #0]
 8009c1c:	3b04      	subs	r3, #4
 8009c1e:	2a00      	cmp	r2, #0
 8009c20:	d1cc      	bne.n	8009bbc <quorem+0x9c>
 8009c22:	3c01      	subs	r4, #1
 8009c24:	e7c7      	b.n	8009bb6 <quorem+0x96>
 8009c26:	6812      	ldr	r2, [r2, #0]
 8009c28:	3b04      	subs	r3, #4
 8009c2a:	2a00      	cmp	r2, #0
 8009c2c:	d1f0      	bne.n	8009c10 <quorem+0xf0>
 8009c2e:	3c01      	subs	r4, #1
 8009c30:	e7eb      	b.n	8009c0a <quorem+0xea>
 8009c32:	2000      	movs	r0, #0
 8009c34:	e7ee      	b.n	8009c14 <quorem+0xf4>
	...

08009c38 <_dtoa_r>:
 8009c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	ed2d 8b04 	vpush	{d8-d9}
 8009c40:	ec57 6b10 	vmov	r6, r7, d0
 8009c44:	b093      	sub	sp, #76	; 0x4c
 8009c46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009c4c:	9106      	str	r1, [sp, #24]
 8009c4e:	ee10 aa10 	vmov	sl, s0
 8009c52:	4604      	mov	r4, r0
 8009c54:	9209      	str	r2, [sp, #36]	; 0x24
 8009c56:	930c      	str	r3, [sp, #48]	; 0x30
 8009c58:	46bb      	mov	fp, r7
 8009c5a:	b975      	cbnz	r5, 8009c7a <_dtoa_r+0x42>
 8009c5c:	2010      	movs	r0, #16
 8009c5e:	f000 fddd 	bl	800a81c <malloc>
 8009c62:	4602      	mov	r2, r0
 8009c64:	6260      	str	r0, [r4, #36]	; 0x24
 8009c66:	b920      	cbnz	r0, 8009c72 <_dtoa_r+0x3a>
 8009c68:	4ba7      	ldr	r3, [pc, #668]	; (8009f08 <_dtoa_r+0x2d0>)
 8009c6a:	21ea      	movs	r1, #234	; 0xea
 8009c6c:	48a7      	ldr	r0, [pc, #668]	; (8009f0c <_dtoa_r+0x2d4>)
 8009c6e:	f001 fbc3 	bl	800b3f8 <__assert_func>
 8009c72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c76:	6005      	str	r5, [r0, #0]
 8009c78:	60c5      	str	r5, [r0, #12]
 8009c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c7c:	6819      	ldr	r1, [r3, #0]
 8009c7e:	b151      	cbz	r1, 8009c96 <_dtoa_r+0x5e>
 8009c80:	685a      	ldr	r2, [r3, #4]
 8009c82:	604a      	str	r2, [r1, #4]
 8009c84:	2301      	movs	r3, #1
 8009c86:	4093      	lsls	r3, r2
 8009c88:	608b      	str	r3, [r1, #8]
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	f000 fe0e 	bl	800a8ac <_Bfree>
 8009c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c92:	2200      	movs	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]
 8009c96:	1e3b      	subs	r3, r7, #0
 8009c98:	bfaa      	itet	ge
 8009c9a:	2300      	movge	r3, #0
 8009c9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009ca0:	f8c8 3000 	strge.w	r3, [r8]
 8009ca4:	4b9a      	ldr	r3, [pc, #616]	; (8009f10 <_dtoa_r+0x2d8>)
 8009ca6:	bfbc      	itt	lt
 8009ca8:	2201      	movlt	r2, #1
 8009caa:	f8c8 2000 	strlt.w	r2, [r8]
 8009cae:	ea33 030b 	bics.w	r3, r3, fp
 8009cb2:	d11b      	bne.n	8009cec <_dtoa_r+0xb4>
 8009cb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8009cba:	6013      	str	r3, [r2, #0]
 8009cbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cc0:	4333      	orrs	r3, r6
 8009cc2:	f000 8592 	beq.w	800a7ea <_dtoa_r+0xbb2>
 8009cc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cc8:	b963      	cbnz	r3, 8009ce4 <_dtoa_r+0xac>
 8009cca:	4b92      	ldr	r3, [pc, #584]	; (8009f14 <_dtoa_r+0x2dc>)
 8009ccc:	e022      	b.n	8009d14 <_dtoa_r+0xdc>
 8009cce:	4b92      	ldr	r3, [pc, #584]	; (8009f18 <_dtoa_r+0x2e0>)
 8009cd0:	9301      	str	r3, [sp, #4]
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009cd6:	6013      	str	r3, [r2, #0]
 8009cd8:	9801      	ldr	r0, [sp, #4]
 8009cda:	b013      	add	sp, #76	; 0x4c
 8009cdc:	ecbd 8b04 	vpop	{d8-d9}
 8009ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce4:	4b8b      	ldr	r3, [pc, #556]	; (8009f14 <_dtoa_r+0x2dc>)
 8009ce6:	9301      	str	r3, [sp, #4]
 8009ce8:	3303      	adds	r3, #3
 8009cea:	e7f3      	b.n	8009cd4 <_dtoa_r+0x9c>
 8009cec:	2200      	movs	r2, #0
 8009cee:	2300      	movs	r3, #0
 8009cf0:	4650      	mov	r0, sl
 8009cf2:	4659      	mov	r1, fp
 8009cf4:	f7f6 fef0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009cf8:	ec4b ab19 	vmov	d9, sl, fp
 8009cfc:	4680      	mov	r8, r0
 8009cfe:	b158      	cbz	r0, 8009d18 <_dtoa_r+0xe0>
 8009d00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d02:	2301      	movs	r3, #1
 8009d04:	6013      	str	r3, [r2, #0]
 8009d06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f000 856b 	beq.w	800a7e4 <_dtoa_r+0xbac>
 8009d0e:	4883      	ldr	r0, [pc, #524]	; (8009f1c <_dtoa_r+0x2e4>)
 8009d10:	6018      	str	r0, [r3, #0]
 8009d12:	1e43      	subs	r3, r0, #1
 8009d14:	9301      	str	r3, [sp, #4]
 8009d16:	e7df      	b.n	8009cd8 <_dtoa_r+0xa0>
 8009d18:	ec4b ab10 	vmov	d0, sl, fp
 8009d1c:	aa10      	add	r2, sp, #64	; 0x40
 8009d1e:	a911      	add	r1, sp, #68	; 0x44
 8009d20:	4620      	mov	r0, r4
 8009d22:	f001 f8ab 	bl	800ae7c <__d2b>
 8009d26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009d2a:	ee08 0a10 	vmov	s16, r0
 8009d2e:	2d00      	cmp	r5, #0
 8009d30:	f000 8084 	beq.w	8009e3c <_dtoa_r+0x204>
 8009d34:	ee19 3a90 	vmov	r3, s19
 8009d38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009d40:	4656      	mov	r6, sl
 8009d42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009d46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009d4e:	4b74      	ldr	r3, [pc, #464]	; (8009f20 <_dtoa_r+0x2e8>)
 8009d50:	2200      	movs	r2, #0
 8009d52:	4630      	mov	r0, r6
 8009d54:	4639      	mov	r1, r7
 8009d56:	f7f6 fa9f 	bl	8000298 <__aeabi_dsub>
 8009d5a:	a365      	add	r3, pc, #404	; (adr r3, 8009ef0 <_dtoa_r+0x2b8>)
 8009d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d60:	f7f6 fc52 	bl	8000608 <__aeabi_dmul>
 8009d64:	a364      	add	r3, pc, #400	; (adr r3, 8009ef8 <_dtoa_r+0x2c0>)
 8009d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6a:	f7f6 fa97 	bl	800029c <__adddf3>
 8009d6e:	4606      	mov	r6, r0
 8009d70:	4628      	mov	r0, r5
 8009d72:	460f      	mov	r7, r1
 8009d74:	f7f6 fbde 	bl	8000534 <__aeabi_i2d>
 8009d78:	a361      	add	r3, pc, #388	; (adr r3, 8009f00 <_dtoa_r+0x2c8>)
 8009d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7e:	f7f6 fc43 	bl	8000608 <__aeabi_dmul>
 8009d82:	4602      	mov	r2, r0
 8009d84:	460b      	mov	r3, r1
 8009d86:	4630      	mov	r0, r6
 8009d88:	4639      	mov	r1, r7
 8009d8a:	f7f6 fa87 	bl	800029c <__adddf3>
 8009d8e:	4606      	mov	r6, r0
 8009d90:	460f      	mov	r7, r1
 8009d92:	f7f6 fee9 	bl	8000b68 <__aeabi_d2iz>
 8009d96:	2200      	movs	r2, #0
 8009d98:	9000      	str	r0, [sp, #0]
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	4639      	mov	r1, r7
 8009da0:	f7f6 fea4 	bl	8000aec <__aeabi_dcmplt>
 8009da4:	b150      	cbz	r0, 8009dbc <_dtoa_r+0x184>
 8009da6:	9800      	ldr	r0, [sp, #0]
 8009da8:	f7f6 fbc4 	bl	8000534 <__aeabi_i2d>
 8009dac:	4632      	mov	r2, r6
 8009dae:	463b      	mov	r3, r7
 8009db0:	f7f6 fe92 	bl	8000ad8 <__aeabi_dcmpeq>
 8009db4:	b910      	cbnz	r0, 8009dbc <_dtoa_r+0x184>
 8009db6:	9b00      	ldr	r3, [sp, #0]
 8009db8:	3b01      	subs	r3, #1
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	9b00      	ldr	r3, [sp, #0]
 8009dbe:	2b16      	cmp	r3, #22
 8009dc0:	d85a      	bhi.n	8009e78 <_dtoa_r+0x240>
 8009dc2:	9a00      	ldr	r2, [sp, #0]
 8009dc4:	4b57      	ldr	r3, [pc, #348]	; (8009f24 <_dtoa_r+0x2ec>)
 8009dc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dce:	ec51 0b19 	vmov	r0, r1, d9
 8009dd2:	f7f6 fe8b 	bl	8000aec <__aeabi_dcmplt>
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d050      	beq.n	8009e7c <_dtoa_r+0x244>
 8009dda:	9b00      	ldr	r3, [sp, #0]
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	2300      	movs	r3, #0
 8009de2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009de4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009de6:	1b5d      	subs	r5, r3, r5
 8009de8:	1e6b      	subs	r3, r5, #1
 8009dea:	9305      	str	r3, [sp, #20]
 8009dec:	bf45      	ittet	mi
 8009dee:	f1c5 0301 	rsbmi	r3, r5, #1
 8009df2:	9304      	strmi	r3, [sp, #16]
 8009df4:	2300      	movpl	r3, #0
 8009df6:	2300      	movmi	r3, #0
 8009df8:	bf4c      	ite	mi
 8009dfa:	9305      	strmi	r3, [sp, #20]
 8009dfc:	9304      	strpl	r3, [sp, #16]
 8009dfe:	9b00      	ldr	r3, [sp, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	db3d      	blt.n	8009e80 <_dtoa_r+0x248>
 8009e04:	9b05      	ldr	r3, [sp, #20]
 8009e06:	9a00      	ldr	r2, [sp, #0]
 8009e08:	920a      	str	r2, [sp, #40]	; 0x28
 8009e0a:	4413      	add	r3, r2
 8009e0c:	9305      	str	r3, [sp, #20]
 8009e0e:	2300      	movs	r3, #0
 8009e10:	9307      	str	r3, [sp, #28]
 8009e12:	9b06      	ldr	r3, [sp, #24]
 8009e14:	2b09      	cmp	r3, #9
 8009e16:	f200 8089 	bhi.w	8009f2c <_dtoa_r+0x2f4>
 8009e1a:	2b05      	cmp	r3, #5
 8009e1c:	bfc4      	itt	gt
 8009e1e:	3b04      	subgt	r3, #4
 8009e20:	9306      	strgt	r3, [sp, #24]
 8009e22:	9b06      	ldr	r3, [sp, #24]
 8009e24:	f1a3 0302 	sub.w	r3, r3, #2
 8009e28:	bfcc      	ite	gt
 8009e2a:	2500      	movgt	r5, #0
 8009e2c:	2501      	movle	r5, #1
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	f200 8087 	bhi.w	8009f42 <_dtoa_r+0x30a>
 8009e34:	e8df f003 	tbb	[pc, r3]
 8009e38:	59383a2d 	.word	0x59383a2d
 8009e3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009e40:	441d      	add	r5, r3
 8009e42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009e46:	2b20      	cmp	r3, #32
 8009e48:	bfc1      	itttt	gt
 8009e4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009e52:	fa0b f303 	lslgt.w	r3, fp, r3
 8009e56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009e5a:	bfda      	itte	le
 8009e5c:	f1c3 0320 	rsble	r3, r3, #32
 8009e60:	fa06 f003 	lslle.w	r0, r6, r3
 8009e64:	4318      	orrgt	r0, r3
 8009e66:	f7f6 fb55 	bl	8000514 <__aeabi_ui2d>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	4606      	mov	r6, r0
 8009e6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009e72:	3d01      	subs	r5, #1
 8009e74:	930e      	str	r3, [sp, #56]	; 0x38
 8009e76:	e76a      	b.n	8009d4e <_dtoa_r+0x116>
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e7b2      	b.n	8009de2 <_dtoa_r+0x1aa>
 8009e7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009e7e:	e7b1      	b.n	8009de4 <_dtoa_r+0x1ac>
 8009e80:	9b04      	ldr	r3, [sp, #16]
 8009e82:	9a00      	ldr	r2, [sp, #0]
 8009e84:	1a9b      	subs	r3, r3, r2
 8009e86:	9304      	str	r3, [sp, #16]
 8009e88:	4253      	negs	r3, r2
 8009e8a:	9307      	str	r3, [sp, #28]
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	930a      	str	r3, [sp, #40]	; 0x28
 8009e90:	e7bf      	b.n	8009e12 <_dtoa_r+0x1da>
 8009e92:	2300      	movs	r3, #0
 8009e94:	9308      	str	r3, [sp, #32]
 8009e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	dc55      	bgt.n	8009f48 <_dtoa_r+0x310>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ea6:	e00c      	b.n	8009ec2 <_dtoa_r+0x28a>
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e7f3      	b.n	8009e94 <_dtoa_r+0x25c>
 8009eac:	2300      	movs	r3, #0
 8009eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009eb0:	9308      	str	r3, [sp, #32]
 8009eb2:	9b00      	ldr	r3, [sp, #0]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	9302      	str	r3, [sp, #8]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	9303      	str	r3, [sp, #12]
 8009ebe:	bfb8      	it	lt
 8009ec0:	2301      	movlt	r3, #1
 8009ec2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	6042      	str	r2, [r0, #4]
 8009ec8:	2204      	movs	r2, #4
 8009eca:	f102 0614 	add.w	r6, r2, #20
 8009ece:	429e      	cmp	r6, r3
 8009ed0:	6841      	ldr	r1, [r0, #4]
 8009ed2:	d93d      	bls.n	8009f50 <_dtoa_r+0x318>
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f000 fca9 	bl	800a82c <_Balloc>
 8009eda:	9001      	str	r0, [sp, #4]
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d13b      	bne.n	8009f58 <_dtoa_r+0x320>
 8009ee0:	4b11      	ldr	r3, [pc, #68]	; (8009f28 <_dtoa_r+0x2f0>)
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ee8:	e6c0      	b.n	8009c6c <_dtoa_r+0x34>
 8009eea:	2301      	movs	r3, #1
 8009eec:	e7df      	b.n	8009eae <_dtoa_r+0x276>
 8009eee:	bf00      	nop
 8009ef0:	636f4361 	.word	0x636f4361
 8009ef4:	3fd287a7 	.word	0x3fd287a7
 8009ef8:	8b60c8b3 	.word	0x8b60c8b3
 8009efc:	3fc68a28 	.word	0x3fc68a28
 8009f00:	509f79fb 	.word	0x509f79fb
 8009f04:	3fd34413 	.word	0x3fd34413
 8009f08:	0800c351 	.word	0x0800c351
 8009f0c:	0800c368 	.word	0x0800c368
 8009f10:	7ff00000 	.word	0x7ff00000
 8009f14:	0800c34d 	.word	0x0800c34d
 8009f18:	0800c344 	.word	0x0800c344
 8009f1c:	0800c321 	.word	0x0800c321
 8009f20:	3ff80000 	.word	0x3ff80000
 8009f24:	0800c458 	.word	0x0800c458
 8009f28:	0800c3c3 	.word	0x0800c3c3
 8009f2c:	2501      	movs	r5, #1
 8009f2e:	2300      	movs	r3, #0
 8009f30:	9306      	str	r3, [sp, #24]
 8009f32:	9508      	str	r5, [sp, #32]
 8009f34:	f04f 33ff 	mov.w	r3, #4294967295
 8009f38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	2312      	movs	r3, #18
 8009f40:	e7b0      	b.n	8009ea4 <_dtoa_r+0x26c>
 8009f42:	2301      	movs	r3, #1
 8009f44:	9308      	str	r3, [sp, #32]
 8009f46:	e7f5      	b.n	8009f34 <_dtoa_r+0x2fc>
 8009f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f4e:	e7b8      	b.n	8009ec2 <_dtoa_r+0x28a>
 8009f50:	3101      	adds	r1, #1
 8009f52:	6041      	str	r1, [r0, #4]
 8009f54:	0052      	lsls	r2, r2, #1
 8009f56:	e7b8      	b.n	8009eca <_dtoa_r+0x292>
 8009f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f5a:	9a01      	ldr	r2, [sp, #4]
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	9b03      	ldr	r3, [sp, #12]
 8009f60:	2b0e      	cmp	r3, #14
 8009f62:	f200 809d 	bhi.w	800a0a0 <_dtoa_r+0x468>
 8009f66:	2d00      	cmp	r5, #0
 8009f68:	f000 809a 	beq.w	800a0a0 <_dtoa_r+0x468>
 8009f6c:	9b00      	ldr	r3, [sp, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	dd32      	ble.n	8009fd8 <_dtoa_r+0x3a0>
 8009f72:	4ab7      	ldr	r2, [pc, #732]	; (800a250 <_dtoa_r+0x618>)
 8009f74:	f003 030f 	and.w	r3, r3, #15
 8009f78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009f7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f80:	9b00      	ldr	r3, [sp, #0]
 8009f82:	05d8      	lsls	r0, r3, #23
 8009f84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009f88:	d516      	bpl.n	8009fb8 <_dtoa_r+0x380>
 8009f8a:	4bb2      	ldr	r3, [pc, #712]	; (800a254 <_dtoa_r+0x61c>)
 8009f8c:	ec51 0b19 	vmov	r0, r1, d9
 8009f90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f94:	f7f6 fc62 	bl	800085c <__aeabi_ddiv>
 8009f98:	f007 070f 	and.w	r7, r7, #15
 8009f9c:	4682      	mov	sl, r0
 8009f9e:	468b      	mov	fp, r1
 8009fa0:	2503      	movs	r5, #3
 8009fa2:	4eac      	ldr	r6, [pc, #688]	; (800a254 <_dtoa_r+0x61c>)
 8009fa4:	b957      	cbnz	r7, 8009fbc <_dtoa_r+0x384>
 8009fa6:	4642      	mov	r2, r8
 8009fa8:	464b      	mov	r3, r9
 8009faa:	4650      	mov	r0, sl
 8009fac:	4659      	mov	r1, fp
 8009fae:	f7f6 fc55 	bl	800085c <__aeabi_ddiv>
 8009fb2:	4682      	mov	sl, r0
 8009fb4:	468b      	mov	fp, r1
 8009fb6:	e028      	b.n	800a00a <_dtoa_r+0x3d2>
 8009fb8:	2502      	movs	r5, #2
 8009fba:	e7f2      	b.n	8009fa2 <_dtoa_r+0x36a>
 8009fbc:	07f9      	lsls	r1, r7, #31
 8009fbe:	d508      	bpl.n	8009fd2 <_dtoa_r+0x39a>
 8009fc0:	4640      	mov	r0, r8
 8009fc2:	4649      	mov	r1, r9
 8009fc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fc8:	f7f6 fb1e 	bl	8000608 <__aeabi_dmul>
 8009fcc:	3501      	adds	r5, #1
 8009fce:	4680      	mov	r8, r0
 8009fd0:	4689      	mov	r9, r1
 8009fd2:	107f      	asrs	r7, r7, #1
 8009fd4:	3608      	adds	r6, #8
 8009fd6:	e7e5      	b.n	8009fa4 <_dtoa_r+0x36c>
 8009fd8:	f000 809b 	beq.w	800a112 <_dtoa_r+0x4da>
 8009fdc:	9b00      	ldr	r3, [sp, #0]
 8009fde:	4f9d      	ldr	r7, [pc, #628]	; (800a254 <_dtoa_r+0x61c>)
 8009fe0:	425e      	negs	r6, r3
 8009fe2:	4b9b      	ldr	r3, [pc, #620]	; (800a250 <_dtoa_r+0x618>)
 8009fe4:	f006 020f 	and.w	r2, r6, #15
 8009fe8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff0:	ec51 0b19 	vmov	r0, r1, d9
 8009ff4:	f7f6 fb08 	bl	8000608 <__aeabi_dmul>
 8009ff8:	1136      	asrs	r6, r6, #4
 8009ffa:	4682      	mov	sl, r0
 8009ffc:	468b      	mov	fp, r1
 8009ffe:	2300      	movs	r3, #0
 800a000:	2502      	movs	r5, #2
 800a002:	2e00      	cmp	r6, #0
 800a004:	d17a      	bne.n	800a0fc <_dtoa_r+0x4c4>
 800a006:	2b00      	cmp	r3, #0
 800a008:	d1d3      	bne.n	8009fb2 <_dtoa_r+0x37a>
 800a00a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f000 8082 	beq.w	800a116 <_dtoa_r+0x4de>
 800a012:	4b91      	ldr	r3, [pc, #580]	; (800a258 <_dtoa_r+0x620>)
 800a014:	2200      	movs	r2, #0
 800a016:	4650      	mov	r0, sl
 800a018:	4659      	mov	r1, fp
 800a01a:	f7f6 fd67 	bl	8000aec <__aeabi_dcmplt>
 800a01e:	2800      	cmp	r0, #0
 800a020:	d079      	beq.n	800a116 <_dtoa_r+0x4de>
 800a022:	9b03      	ldr	r3, [sp, #12]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d076      	beq.n	800a116 <_dtoa_r+0x4de>
 800a028:	9b02      	ldr	r3, [sp, #8]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	dd36      	ble.n	800a09c <_dtoa_r+0x464>
 800a02e:	9b00      	ldr	r3, [sp, #0]
 800a030:	4650      	mov	r0, sl
 800a032:	4659      	mov	r1, fp
 800a034:	1e5f      	subs	r7, r3, #1
 800a036:	2200      	movs	r2, #0
 800a038:	4b88      	ldr	r3, [pc, #544]	; (800a25c <_dtoa_r+0x624>)
 800a03a:	f7f6 fae5 	bl	8000608 <__aeabi_dmul>
 800a03e:	9e02      	ldr	r6, [sp, #8]
 800a040:	4682      	mov	sl, r0
 800a042:	468b      	mov	fp, r1
 800a044:	3501      	adds	r5, #1
 800a046:	4628      	mov	r0, r5
 800a048:	f7f6 fa74 	bl	8000534 <__aeabi_i2d>
 800a04c:	4652      	mov	r2, sl
 800a04e:	465b      	mov	r3, fp
 800a050:	f7f6 fada 	bl	8000608 <__aeabi_dmul>
 800a054:	4b82      	ldr	r3, [pc, #520]	; (800a260 <_dtoa_r+0x628>)
 800a056:	2200      	movs	r2, #0
 800a058:	f7f6 f920 	bl	800029c <__adddf3>
 800a05c:	46d0      	mov	r8, sl
 800a05e:	46d9      	mov	r9, fp
 800a060:	4682      	mov	sl, r0
 800a062:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a066:	2e00      	cmp	r6, #0
 800a068:	d158      	bne.n	800a11c <_dtoa_r+0x4e4>
 800a06a:	4b7e      	ldr	r3, [pc, #504]	; (800a264 <_dtoa_r+0x62c>)
 800a06c:	2200      	movs	r2, #0
 800a06e:	4640      	mov	r0, r8
 800a070:	4649      	mov	r1, r9
 800a072:	f7f6 f911 	bl	8000298 <__aeabi_dsub>
 800a076:	4652      	mov	r2, sl
 800a078:	465b      	mov	r3, fp
 800a07a:	4680      	mov	r8, r0
 800a07c:	4689      	mov	r9, r1
 800a07e:	f7f6 fd53 	bl	8000b28 <__aeabi_dcmpgt>
 800a082:	2800      	cmp	r0, #0
 800a084:	f040 8295 	bne.w	800a5b2 <_dtoa_r+0x97a>
 800a088:	4652      	mov	r2, sl
 800a08a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a08e:	4640      	mov	r0, r8
 800a090:	4649      	mov	r1, r9
 800a092:	f7f6 fd2b 	bl	8000aec <__aeabi_dcmplt>
 800a096:	2800      	cmp	r0, #0
 800a098:	f040 8289 	bne.w	800a5ae <_dtoa_r+0x976>
 800a09c:	ec5b ab19 	vmov	sl, fp, d9
 800a0a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f2c0 8148 	blt.w	800a338 <_dtoa_r+0x700>
 800a0a8:	9a00      	ldr	r2, [sp, #0]
 800a0aa:	2a0e      	cmp	r2, #14
 800a0ac:	f300 8144 	bgt.w	800a338 <_dtoa_r+0x700>
 800a0b0:	4b67      	ldr	r3, [pc, #412]	; (800a250 <_dtoa_r+0x618>)
 800a0b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f280 80d5 	bge.w	800a26c <_dtoa_r+0x634>
 800a0c2:	9b03      	ldr	r3, [sp, #12]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f300 80d1 	bgt.w	800a26c <_dtoa_r+0x634>
 800a0ca:	f040 826f 	bne.w	800a5ac <_dtoa_r+0x974>
 800a0ce:	4b65      	ldr	r3, [pc, #404]	; (800a264 <_dtoa_r+0x62c>)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	f7f6 fa97 	bl	8000608 <__aeabi_dmul>
 800a0da:	4652      	mov	r2, sl
 800a0dc:	465b      	mov	r3, fp
 800a0de:	f7f6 fd19 	bl	8000b14 <__aeabi_dcmpge>
 800a0e2:	9e03      	ldr	r6, [sp, #12]
 800a0e4:	4637      	mov	r7, r6
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	f040 8245 	bne.w	800a576 <_dtoa_r+0x93e>
 800a0ec:	9d01      	ldr	r5, [sp, #4]
 800a0ee:	2331      	movs	r3, #49	; 0x31
 800a0f0:	f805 3b01 	strb.w	r3, [r5], #1
 800a0f4:	9b00      	ldr	r3, [sp, #0]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	e240      	b.n	800a57e <_dtoa_r+0x946>
 800a0fc:	07f2      	lsls	r2, r6, #31
 800a0fe:	d505      	bpl.n	800a10c <_dtoa_r+0x4d4>
 800a100:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a104:	f7f6 fa80 	bl	8000608 <__aeabi_dmul>
 800a108:	3501      	adds	r5, #1
 800a10a:	2301      	movs	r3, #1
 800a10c:	1076      	asrs	r6, r6, #1
 800a10e:	3708      	adds	r7, #8
 800a110:	e777      	b.n	800a002 <_dtoa_r+0x3ca>
 800a112:	2502      	movs	r5, #2
 800a114:	e779      	b.n	800a00a <_dtoa_r+0x3d2>
 800a116:	9f00      	ldr	r7, [sp, #0]
 800a118:	9e03      	ldr	r6, [sp, #12]
 800a11a:	e794      	b.n	800a046 <_dtoa_r+0x40e>
 800a11c:	9901      	ldr	r1, [sp, #4]
 800a11e:	4b4c      	ldr	r3, [pc, #304]	; (800a250 <_dtoa_r+0x618>)
 800a120:	4431      	add	r1, r6
 800a122:	910d      	str	r1, [sp, #52]	; 0x34
 800a124:	9908      	ldr	r1, [sp, #32]
 800a126:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a12a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a12e:	2900      	cmp	r1, #0
 800a130:	d043      	beq.n	800a1ba <_dtoa_r+0x582>
 800a132:	494d      	ldr	r1, [pc, #308]	; (800a268 <_dtoa_r+0x630>)
 800a134:	2000      	movs	r0, #0
 800a136:	f7f6 fb91 	bl	800085c <__aeabi_ddiv>
 800a13a:	4652      	mov	r2, sl
 800a13c:	465b      	mov	r3, fp
 800a13e:	f7f6 f8ab 	bl	8000298 <__aeabi_dsub>
 800a142:	9d01      	ldr	r5, [sp, #4]
 800a144:	4682      	mov	sl, r0
 800a146:	468b      	mov	fp, r1
 800a148:	4649      	mov	r1, r9
 800a14a:	4640      	mov	r0, r8
 800a14c:	f7f6 fd0c 	bl	8000b68 <__aeabi_d2iz>
 800a150:	4606      	mov	r6, r0
 800a152:	f7f6 f9ef 	bl	8000534 <__aeabi_i2d>
 800a156:	4602      	mov	r2, r0
 800a158:	460b      	mov	r3, r1
 800a15a:	4640      	mov	r0, r8
 800a15c:	4649      	mov	r1, r9
 800a15e:	f7f6 f89b 	bl	8000298 <__aeabi_dsub>
 800a162:	3630      	adds	r6, #48	; 0x30
 800a164:	f805 6b01 	strb.w	r6, [r5], #1
 800a168:	4652      	mov	r2, sl
 800a16a:	465b      	mov	r3, fp
 800a16c:	4680      	mov	r8, r0
 800a16e:	4689      	mov	r9, r1
 800a170:	f7f6 fcbc 	bl	8000aec <__aeabi_dcmplt>
 800a174:	2800      	cmp	r0, #0
 800a176:	d163      	bne.n	800a240 <_dtoa_r+0x608>
 800a178:	4642      	mov	r2, r8
 800a17a:	464b      	mov	r3, r9
 800a17c:	4936      	ldr	r1, [pc, #216]	; (800a258 <_dtoa_r+0x620>)
 800a17e:	2000      	movs	r0, #0
 800a180:	f7f6 f88a 	bl	8000298 <__aeabi_dsub>
 800a184:	4652      	mov	r2, sl
 800a186:	465b      	mov	r3, fp
 800a188:	f7f6 fcb0 	bl	8000aec <__aeabi_dcmplt>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	f040 80b5 	bne.w	800a2fc <_dtoa_r+0x6c4>
 800a192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a194:	429d      	cmp	r5, r3
 800a196:	d081      	beq.n	800a09c <_dtoa_r+0x464>
 800a198:	4b30      	ldr	r3, [pc, #192]	; (800a25c <_dtoa_r+0x624>)
 800a19a:	2200      	movs	r2, #0
 800a19c:	4650      	mov	r0, sl
 800a19e:	4659      	mov	r1, fp
 800a1a0:	f7f6 fa32 	bl	8000608 <__aeabi_dmul>
 800a1a4:	4b2d      	ldr	r3, [pc, #180]	; (800a25c <_dtoa_r+0x624>)
 800a1a6:	4682      	mov	sl, r0
 800a1a8:	468b      	mov	fp, r1
 800a1aa:	4640      	mov	r0, r8
 800a1ac:	4649      	mov	r1, r9
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f7f6 fa2a 	bl	8000608 <__aeabi_dmul>
 800a1b4:	4680      	mov	r8, r0
 800a1b6:	4689      	mov	r9, r1
 800a1b8:	e7c6      	b.n	800a148 <_dtoa_r+0x510>
 800a1ba:	4650      	mov	r0, sl
 800a1bc:	4659      	mov	r1, fp
 800a1be:	f7f6 fa23 	bl	8000608 <__aeabi_dmul>
 800a1c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1c4:	9d01      	ldr	r5, [sp, #4]
 800a1c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1c8:	4682      	mov	sl, r0
 800a1ca:	468b      	mov	fp, r1
 800a1cc:	4649      	mov	r1, r9
 800a1ce:	4640      	mov	r0, r8
 800a1d0:	f7f6 fcca 	bl	8000b68 <__aeabi_d2iz>
 800a1d4:	4606      	mov	r6, r0
 800a1d6:	f7f6 f9ad 	bl	8000534 <__aeabi_i2d>
 800a1da:	3630      	adds	r6, #48	; 0x30
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4640      	mov	r0, r8
 800a1e2:	4649      	mov	r1, r9
 800a1e4:	f7f6 f858 	bl	8000298 <__aeabi_dsub>
 800a1e8:	f805 6b01 	strb.w	r6, [r5], #1
 800a1ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1ee:	429d      	cmp	r5, r3
 800a1f0:	4680      	mov	r8, r0
 800a1f2:	4689      	mov	r9, r1
 800a1f4:	f04f 0200 	mov.w	r2, #0
 800a1f8:	d124      	bne.n	800a244 <_dtoa_r+0x60c>
 800a1fa:	4b1b      	ldr	r3, [pc, #108]	; (800a268 <_dtoa_r+0x630>)
 800a1fc:	4650      	mov	r0, sl
 800a1fe:	4659      	mov	r1, fp
 800a200:	f7f6 f84c 	bl	800029c <__adddf3>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	4640      	mov	r0, r8
 800a20a:	4649      	mov	r1, r9
 800a20c:	f7f6 fc8c 	bl	8000b28 <__aeabi_dcmpgt>
 800a210:	2800      	cmp	r0, #0
 800a212:	d173      	bne.n	800a2fc <_dtoa_r+0x6c4>
 800a214:	4652      	mov	r2, sl
 800a216:	465b      	mov	r3, fp
 800a218:	4913      	ldr	r1, [pc, #76]	; (800a268 <_dtoa_r+0x630>)
 800a21a:	2000      	movs	r0, #0
 800a21c:	f7f6 f83c 	bl	8000298 <__aeabi_dsub>
 800a220:	4602      	mov	r2, r0
 800a222:	460b      	mov	r3, r1
 800a224:	4640      	mov	r0, r8
 800a226:	4649      	mov	r1, r9
 800a228:	f7f6 fc60 	bl	8000aec <__aeabi_dcmplt>
 800a22c:	2800      	cmp	r0, #0
 800a22e:	f43f af35 	beq.w	800a09c <_dtoa_r+0x464>
 800a232:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a234:	1e6b      	subs	r3, r5, #1
 800a236:	930f      	str	r3, [sp, #60]	; 0x3c
 800a238:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a23c:	2b30      	cmp	r3, #48	; 0x30
 800a23e:	d0f8      	beq.n	800a232 <_dtoa_r+0x5fa>
 800a240:	9700      	str	r7, [sp, #0]
 800a242:	e049      	b.n	800a2d8 <_dtoa_r+0x6a0>
 800a244:	4b05      	ldr	r3, [pc, #20]	; (800a25c <_dtoa_r+0x624>)
 800a246:	f7f6 f9df 	bl	8000608 <__aeabi_dmul>
 800a24a:	4680      	mov	r8, r0
 800a24c:	4689      	mov	r9, r1
 800a24e:	e7bd      	b.n	800a1cc <_dtoa_r+0x594>
 800a250:	0800c458 	.word	0x0800c458
 800a254:	0800c430 	.word	0x0800c430
 800a258:	3ff00000 	.word	0x3ff00000
 800a25c:	40240000 	.word	0x40240000
 800a260:	401c0000 	.word	0x401c0000
 800a264:	40140000 	.word	0x40140000
 800a268:	3fe00000 	.word	0x3fe00000
 800a26c:	9d01      	ldr	r5, [sp, #4]
 800a26e:	4656      	mov	r6, sl
 800a270:	465f      	mov	r7, fp
 800a272:	4642      	mov	r2, r8
 800a274:	464b      	mov	r3, r9
 800a276:	4630      	mov	r0, r6
 800a278:	4639      	mov	r1, r7
 800a27a:	f7f6 faef 	bl	800085c <__aeabi_ddiv>
 800a27e:	f7f6 fc73 	bl	8000b68 <__aeabi_d2iz>
 800a282:	4682      	mov	sl, r0
 800a284:	f7f6 f956 	bl	8000534 <__aeabi_i2d>
 800a288:	4642      	mov	r2, r8
 800a28a:	464b      	mov	r3, r9
 800a28c:	f7f6 f9bc 	bl	8000608 <__aeabi_dmul>
 800a290:	4602      	mov	r2, r0
 800a292:	460b      	mov	r3, r1
 800a294:	4630      	mov	r0, r6
 800a296:	4639      	mov	r1, r7
 800a298:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a29c:	f7f5 fffc 	bl	8000298 <__aeabi_dsub>
 800a2a0:	f805 6b01 	strb.w	r6, [r5], #1
 800a2a4:	9e01      	ldr	r6, [sp, #4]
 800a2a6:	9f03      	ldr	r7, [sp, #12]
 800a2a8:	1bae      	subs	r6, r5, r6
 800a2aa:	42b7      	cmp	r7, r6
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	d135      	bne.n	800a31e <_dtoa_r+0x6e6>
 800a2b2:	f7f5 fff3 	bl	800029c <__adddf3>
 800a2b6:	4642      	mov	r2, r8
 800a2b8:	464b      	mov	r3, r9
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	460f      	mov	r7, r1
 800a2be:	f7f6 fc33 	bl	8000b28 <__aeabi_dcmpgt>
 800a2c2:	b9d0      	cbnz	r0, 800a2fa <_dtoa_r+0x6c2>
 800a2c4:	4642      	mov	r2, r8
 800a2c6:	464b      	mov	r3, r9
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	4639      	mov	r1, r7
 800a2cc:	f7f6 fc04 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2d0:	b110      	cbz	r0, 800a2d8 <_dtoa_r+0x6a0>
 800a2d2:	f01a 0f01 	tst.w	sl, #1
 800a2d6:	d110      	bne.n	800a2fa <_dtoa_r+0x6c2>
 800a2d8:	4620      	mov	r0, r4
 800a2da:	ee18 1a10 	vmov	r1, s16
 800a2de:	f000 fae5 	bl	800a8ac <_Bfree>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	9800      	ldr	r0, [sp, #0]
 800a2e6:	702b      	strb	r3, [r5, #0]
 800a2e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2ea:	3001      	adds	r0, #1
 800a2ec:	6018      	str	r0, [r3, #0]
 800a2ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f43f acf1 	beq.w	8009cd8 <_dtoa_r+0xa0>
 800a2f6:	601d      	str	r5, [r3, #0]
 800a2f8:	e4ee      	b.n	8009cd8 <_dtoa_r+0xa0>
 800a2fa:	9f00      	ldr	r7, [sp, #0]
 800a2fc:	462b      	mov	r3, r5
 800a2fe:	461d      	mov	r5, r3
 800a300:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a304:	2a39      	cmp	r2, #57	; 0x39
 800a306:	d106      	bne.n	800a316 <_dtoa_r+0x6de>
 800a308:	9a01      	ldr	r2, [sp, #4]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d1f7      	bne.n	800a2fe <_dtoa_r+0x6c6>
 800a30e:	9901      	ldr	r1, [sp, #4]
 800a310:	2230      	movs	r2, #48	; 0x30
 800a312:	3701      	adds	r7, #1
 800a314:	700a      	strb	r2, [r1, #0]
 800a316:	781a      	ldrb	r2, [r3, #0]
 800a318:	3201      	adds	r2, #1
 800a31a:	701a      	strb	r2, [r3, #0]
 800a31c:	e790      	b.n	800a240 <_dtoa_r+0x608>
 800a31e:	4ba6      	ldr	r3, [pc, #664]	; (800a5b8 <_dtoa_r+0x980>)
 800a320:	2200      	movs	r2, #0
 800a322:	f7f6 f971 	bl	8000608 <__aeabi_dmul>
 800a326:	2200      	movs	r2, #0
 800a328:	2300      	movs	r3, #0
 800a32a:	4606      	mov	r6, r0
 800a32c:	460f      	mov	r7, r1
 800a32e:	f7f6 fbd3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a332:	2800      	cmp	r0, #0
 800a334:	d09d      	beq.n	800a272 <_dtoa_r+0x63a>
 800a336:	e7cf      	b.n	800a2d8 <_dtoa_r+0x6a0>
 800a338:	9a08      	ldr	r2, [sp, #32]
 800a33a:	2a00      	cmp	r2, #0
 800a33c:	f000 80d7 	beq.w	800a4ee <_dtoa_r+0x8b6>
 800a340:	9a06      	ldr	r2, [sp, #24]
 800a342:	2a01      	cmp	r2, #1
 800a344:	f300 80ba 	bgt.w	800a4bc <_dtoa_r+0x884>
 800a348:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a34a:	2a00      	cmp	r2, #0
 800a34c:	f000 80b2 	beq.w	800a4b4 <_dtoa_r+0x87c>
 800a350:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a354:	9e07      	ldr	r6, [sp, #28]
 800a356:	9d04      	ldr	r5, [sp, #16]
 800a358:	9a04      	ldr	r2, [sp, #16]
 800a35a:	441a      	add	r2, r3
 800a35c:	9204      	str	r2, [sp, #16]
 800a35e:	9a05      	ldr	r2, [sp, #20]
 800a360:	2101      	movs	r1, #1
 800a362:	441a      	add	r2, r3
 800a364:	4620      	mov	r0, r4
 800a366:	9205      	str	r2, [sp, #20]
 800a368:	f000 fb58 	bl	800aa1c <__i2b>
 800a36c:	4607      	mov	r7, r0
 800a36e:	2d00      	cmp	r5, #0
 800a370:	dd0c      	ble.n	800a38c <_dtoa_r+0x754>
 800a372:	9b05      	ldr	r3, [sp, #20]
 800a374:	2b00      	cmp	r3, #0
 800a376:	dd09      	ble.n	800a38c <_dtoa_r+0x754>
 800a378:	42ab      	cmp	r3, r5
 800a37a:	9a04      	ldr	r2, [sp, #16]
 800a37c:	bfa8      	it	ge
 800a37e:	462b      	movge	r3, r5
 800a380:	1ad2      	subs	r2, r2, r3
 800a382:	9204      	str	r2, [sp, #16]
 800a384:	9a05      	ldr	r2, [sp, #20]
 800a386:	1aed      	subs	r5, r5, r3
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	9305      	str	r3, [sp, #20]
 800a38c:	9b07      	ldr	r3, [sp, #28]
 800a38e:	b31b      	cbz	r3, 800a3d8 <_dtoa_r+0x7a0>
 800a390:	9b08      	ldr	r3, [sp, #32]
 800a392:	2b00      	cmp	r3, #0
 800a394:	f000 80af 	beq.w	800a4f6 <_dtoa_r+0x8be>
 800a398:	2e00      	cmp	r6, #0
 800a39a:	dd13      	ble.n	800a3c4 <_dtoa_r+0x78c>
 800a39c:	4639      	mov	r1, r7
 800a39e:	4632      	mov	r2, r6
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f000 fbfb 	bl	800ab9c <__pow5mult>
 800a3a6:	ee18 2a10 	vmov	r2, s16
 800a3aa:	4601      	mov	r1, r0
 800a3ac:	4607      	mov	r7, r0
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f000 fb4a 	bl	800aa48 <__multiply>
 800a3b4:	ee18 1a10 	vmov	r1, s16
 800a3b8:	4680      	mov	r8, r0
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	f000 fa76 	bl	800a8ac <_Bfree>
 800a3c0:	ee08 8a10 	vmov	s16, r8
 800a3c4:	9b07      	ldr	r3, [sp, #28]
 800a3c6:	1b9a      	subs	r2, r3, r6
 800a3c8:	d006      	beq.n	800a3d8 <_dtoa_r+0x7a0>
 800a3ca:	ee18 1a10 	vmov	r1, s16
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f000 fbe4 	bl	800ab9c <__pow5mult>
 800a3d4:	ee08 0a10 	vmov	s16, r0
 800a3d8:	2101      	movs	r1, #1
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f000 fb1e 	bl	800aa1c <__i2b>
 800a3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	4606      	mov	r6, r0
 800a3e6:	f340 8088 	ble.w	800a4fa <_dtoa_r+0x8c2>
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	4601      	mov	r1, r0
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f000 fbd4 	bl	800ab9c <__pow5mult>
 800a3f4:	9b06      	ldr	r3, [sp, #24]
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	4606      	mov	r6, r0
 800a3fa:	f340 8081 	ble.w	800a500 <_dtoa_r+0x8c8>
 800a3fe:	f04f 0800 	mov.w	r8, #0
 800a402:	6933      	ldr	r3, [r6, #16]
 800a404:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a408:	6918      	ldr	r0, [r3, #16]
 800a40a:	f000 fab7 	bl	800a97c <__hi0bits>
 800a40e:	f1c0 0020 	rsb	r0, r0, #32
 800a412:	9b05      	ldr	r3, [sp, #20]
 800a414:	4418      	add	r0, r3
 800a416:	f010 001f 	ands.w	r0, r0, #31
 800a41a:	f000 8092 	beq.w	800a542 <_dtoa_r+0x90a>
 800a41e:	f1c0 0320 	rsb	r3, r0, #32
 800a422:	2b04      	cmp	r3, #4
 800a424:	f340 808a 	ble.w	800a53c <_dtoa_r+0x904>
 800a428:	f1c0 001c 	rsb	r0, r0, #28
 800a42c:	9b04      	ldr	r3, [sp, #16]
 800a42e:	4403      	add	r3, r0
 800a430:	9304      	str	r3, [sp, #16]
 800a432:	9b05      	ldr	r3, [sp, #20]
 800a434:	4403      	add	r3, r0
 800a436:	4405      	add	r5, r0
 800a438:	9305      	str	r3, [sp, #20]
 800a43a:	9b04      	ldr	r3, [sp, #16]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	dd07      	ble.n	800a450 <_dtoa_r+0x818>
 800a440:	ee18 1a10 	vmov	r1, s16
 800a444:	461a      	mov	r2, r3
 800a446:	4620      	mov	r0, r4
 800a448:	f000 fc02 	bl	800ac50 <__lshift>
 800a44c:	ee08 0a10 	vmov	s16, r0
 800a450:	9b05      	ldr	r3, [sp, #20]
 800a452:	2b00      	cmp	r3, #0
 800a454:	dd05      	ble.n	800a462 <_dtoa_r+0x82a>
 800a456:	4631      	mov	r1, r6
 800a458:	461a      	mov	r2, r3
 800a45a:	4620      	mov	r0, r4
 800a45c:	f000 fbf8 	bl	800ac50 <__lshift>
 800a460:	4606      	mov	r6, r0
 800a462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a464:	2b00      	cmp	r3, #0
 800a466:	d06e      	beq.n	800a546 <_dtoa_r+0x90e>
 800a468:	ee18 0a10 	vmov	r0, s16
 800a46c:	4631      	mov	r1, r6
 800a46e:	f000 fc5f 	bl	800ad30 <__mcmp>
 800a472:	2800      	cmp	r0, #0
 800a474:	da67      	bge.n	800a546 <_dtoa_r+0x90e>
 800a476:	9b00      	ldr	r3, [sp, #0]
 800a478:	3b01      	subs	r3, #1
 800a47a:	ee18 1a10 	vmov	r1, s16
 800a47e:	9300      	str	r3, [sp, #0]
 800a480:	220a      	movs	r2, #10
 800a482:	2300      	movs	r3, #0
 800a484:	4620      	mov	r0, r4
 800a486:	f000 fa33 	bl	800a8f0 <__multadd>
 800a48a:	9b08      	ldr	r3, [sp, #32]
 800a48c:	ee08 0a10 	vmov	s16, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	f000 81b1 	beq.w	800a7f8 <_dtoa_r+0xbc0>
 800a496:	2300      	movs	r3, #0
 800a498:	4639      	mov	r1, r7
 800a49a:	220a      	movs	r2, #10
 800a49c:	4620      	mov	r0, r4
 800a49e:	f000 fa27 	bl	800a8f0 <__multadd>
 800a4a2:	9b02      	ldr	r3, [sp, #8]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	4607      	mov	r7, r0
 800a4a8:	f300 808e 	bgt.w	800a5c8 <_dtoa_r+0x990>
 800a4ac:	9b06      	ldr	r3, [sp, #24]
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	dc51      	bgt.n	800a556 <_dtoa_r+0x91e>
 800a4b2:	e089      	b.n	800a5c8 <_dtoa_r+0x990>
 800a4b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a4ba:	e74b      	b.n	800a354 <_dtoa_r+0x71c>
 800a4bc:	9b03      	ldr	r3, [sp, #12]
 800a4be:	1e5e      	subs	r6, r3, #1
 800a4c0:	9b07      	ldr	r3, [sp, #28]
 800a4c2:	42b3      	cmp	r3, r6
 800a4c4:	bfbf      	itttt	lt
 800a4c6:	9b07      	ldrlt	r3, [sp, #28]
 800a4c8:	9607      	strlt	r6, [sp, #28]
 800a4ca:	1af2      	sublt	r2, r6, r3
 800a4cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a4ce:	bfb6      	itet	lt
 800a4d0:	189b      	addlt	r3, r3, r2
 800a4d2:	1b9e      	subge	r6, r3, r6
 800a4d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a4d6:	9b03      	ldr	r3, [sp, #12]
 800a4d8:	bfb8      	it	lt
 800a4da:	2600      	movlt	r6, #0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	bfb7      	itett	lt
 800a4e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a4e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a4e8:	1a9d      	sublt	r5, r3, r2
 800a4ea:	2300      	movlt	r3, #0
 800a4ec:	e734      	b.n	800a358 <_dtoa_r+0x720>
 800a4ee:	9e07      	ldr	r6, [sp, #28]
 800a4f0:	9d04      	ldr	r5, [sp, #16]
 800a4f2:	9f08      	ldr	r7, [sp, #32]
 800a4f4:	e73b      	b.n	800a36e <_dtoa_r+0x736>
 800a4f6:	9a07      	ldr	r2, [sp, #28]
 800a4f8:	e767      	b.n	800a3ca <_dtoa_r+0x792>
 800a4fa:	9b06      	ldr	r3, [sp, #24]
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	dc18      	bgt.n	800a532 <_dtoa_r+0x8fa>
 800a500:	f1ba 0f00 	cmp.w	sl, #0
 800a504:	d115      	bne.n	800a532 <_dtoa_r+0x8fa>
 800a506:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a50a:	b993      	cbnz	r3, 800a532 <_dtoa_r+0x8fa>
 800a50c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a510:	0d1b      	lsrs	r3, r3, #20
 800a512:	051b      	lsls	r3, r3, #20
 800a514:	b183      	cbz	r3, 800a538 <_dtoa_r+0x900>
 800a516:	9b04      	ldr	r3, [sp, #16]
 800a518:	3301      	adds	r3, #1
 800a51a:	9304      	str	r3, [sp, #16]
 800a51c:	9b05      	ldr	r3, [sp, #20]
 800a51e:	3301      	adds	r3, #1
 800a520:	9305      	str	r3, [sp, #20]
 800a522:	f04f 0801 	mov.w	r8, #1
 800a526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a528:	2b00      	cmp	r3, #0
 800a52a:	f47f af6a 	bne.w	800a402 <_dtoa_r+0x7ca>
 800a52e:	2001      	movs	r0, #1
 800a530:	e76f      	b.n	800a412 <_dtoa_r+0x7da>
 800a532:	f04f 0800 	mov.w	r8, #0
 800a536:	e7f6      	b.n	800a526 <_dtoa_r+0x8ee>
 800a538:	4698      	mov	r8, r3
 800a53a:	e7f4      	b.n	800a526 <_dtoa_r+0x8ee>
 800a53c:	f43f af7d 	beq.w	800a43a <_dtoa_r+0x802>
 800a540:	4618      	mov	r0, r3
 800a542:	301c      	adds	r0, #28
 800a544:	e772      	b.n	800a42c <_dtoa_r+0x7f4>
 800a546:	9b03      	ldr	r3, [sp, #12]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	dc37      	bgt.n	800a5bc <_dtoa_r+0x984>
 800a54c:	9b06      	ldr	r3, [sp, #24]
 800a54e:	2b02      	cmp	r3, #2
 800a550:	dd34      	ble.n	800a5bc <_dtoa_r+0x984>
 800a552:	9b03      	ldr	r3, [sp, #12]
 800a554:	9302      	str	r3, [sp, #8]
 800a556:	9b02      	ldr	r3, [sp, #8]
 800a558:	b96b      	cbnz	r3, 800a576 <_dtoa_r+0x93e>
 800a55a:	4631      	mov	r1, r6
 800a55c:	2205      	movs	r2, #5
 800a55e:	4620      	mov	r0, r4
 800a560:	f000 f9c6 	bl	800a8f0 <__multadd>
 800a564:	4601      	mov	r1, r0
 800a566:	4606      	mov	r6, r0
 800a568:	ee18 0a10 	vmov	r0, s16
 800a56c:	f000 fbe0 	bl	800ad30 <__mcmp>
 800a570:	2800      	cmp	r0, #0
 800a572:	f73f adbb 	bgt.w	800a0ec <_dtoa_r+0x4b4>
 800a576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a578:	9d01      	ldr	r5, [sp, #4]
 800a57a:	43db      	mvns	r3, r3
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	f04f 0800 	mov.w	r8, #0
 800a582:	4631      	mov	r1, r6
 800a584:	4620      	mov	r0, r4
 800a586:	f000 f991 	bl	800a8ac <_Bfree>
 800a58a:	2f00      	cmp	r7, #0
 800a58c:	f43f aea4 	beq.w	800a2d8 <_dtoa_r+0x6a0>
 800a590:	f1b8 0f00 	cmp.w	r8, #0
 800a594:	d005      	beq.n	800a5a2 <_dtoa_r+0x96a>
 800a596:	45b8      	cmp	r8, r7
 800a598:	d003      	beq.n	800a5a2 <_dtoa_r+0x96a>
 800a59a:	4641      	mov	r1, r8
 800a59c:	4620      	mov	r0, r4
 800a59e:	f000 f985 	bl	800a8ac <_Bfree>
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	f000 f981 	bl	800a8ac <_Bfree>
 800a5aa:	e695      	b.n	800a2d8 <_dtoa_r+0x6a0>
 800a5ac:	2600      	movs	r6, #0
 800a5ae:	4637      	mov	r7, r6
 800a5b0:	e7e1      	b.n	800a576 <_dtoa_r+0x93e>
 800a5b2:	9700      	str	r7, [sp, #0]
 800a5b4:	4637      	mov	r7, r6
 800a5b6:	e599      	b.n	800a0ec <_dtoa_r+0x4b4>
 800a5b8:	40240000 	.word	0x40240000
 800a5bc:	9b08      	ldr	r3, [sp, #32]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	f000 80ca 	beq.w	800a758 <_dtoa_r+0xb20>
 800a5c4:	9b03      	ldr	r3, [sp, #12]
 800a5c6:	9302      	str	r3, [sp, #8]
 800a5c8:	2d00      	cmp	r5, #0
 800a5ca:	dd05      	ble.n	800a5d8 <_dtoa_r+0x9a0>
 800a5cc:	4639      	mov	r1, r7
 800a5ce:	462a      	mov	r2, r5
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f000 fb3d 	bl	800ac50 <__lshift>
 800a5d6:	4607      	mov	r7, r0
 800a5d8:	f1b8 0f00 	cmp.w	r8, #0
 800a5dc:	d05b      	beq.n	800a696 <_dtoa_r+0xa5e>
 800a5de:	6879      	ldr	r1, [r7, #4]
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f000 f923 	bl	800a82c <_Balloc>
 800a5e6:	4605      	mov	r5, r0
 800a5e8:	b928      	cbnz	r0, 800a5f6 <_dtoa_r+0x9be>
 800a5ea:	4b87      	ldr	r3, [pc, #540]	; (800a808 <_dtoa_r+0xbd0>)
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a5f2:	f7ff bb3b 	b.w	8009c6c <_dtoa_r+0x34>
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	3202      	adds	r2, #2
 800a5fa:	0092      	lsls	r2, r2, #2
 800a5fc:	f107 010c 	add.w	r1, r7, #12
 800a600:	300c      	adds	r0, #12
 800a602:	f7fe fded 	bl	80091e0 <memcpy>
 800a606:	2201      	movs	r2, #1
 800a608:	4629      	mov	r1, r5
 800a60a:	4620      	mov	r0, r4
 800a60c:	f000 fb20 	bl	800ac50 <__lshift>
 800a610:	9b01      	ldr	r3, [sp, #4]
 800a612:	f103 0901 	add.w	r9, r3, #1
 800a616:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a61a:	4413      	add	r3, r2
 800a61c:	9305      	str	r3, [sp, #20]
 800a61e:	f00a 0301 	and.w	r3, sl, #1
 800a622:	46b8      	mov	r8, r7
 800a624:	9304      	str	r3, [sp, #16]
 800a626:	4607      	mov	r7, r0
 800a628:	4631      	mov	r1, r6
 800a62a:	ee18 0a10 	vmov	r0, s16
 800a62e:	f7ff fa77 	bl	8009b20 <quorem>
 800a632:	4641      	mov	r1, r8
 800a634:	9002      	str	r0, [sp, #8]
 800a636:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a63a:	ee18 0a10 	vmov	r0, s16
 800a63e:	f000 fb77 	bl	800ad30 <__mcmp>
 800a642:	463a      	mov	r2, r7
 800a644:	9003      	str	r0, [sp, #12]
 800a646:	4631      	mov	r1, r6
 800a648:	4620      	mov	r0, r4
 800a64a:	f000 fb8d 	bl	800ad68 <__mdiff>
 800a64e:	68c2      	ldr	r2, [r0, #12]
 800a650:	f109 3bff 	add.w	fp, r9, #4294967295
 800a654:	4605      	mov	r5, r0
 800a656:	bb02      	cbnz	r2, 800a69a <_dtoa_r+0xa62>
 800a658:	4601      	mov	r1, r0
 800a65a:	ee18 0a10 	vmov	r0, s16
 800a65e:	f000 fb67 	bl	800ad30 <__mcmp>
 800a662:	4602      	mov	r2, r0
 800a664:	4629      	mov	r1, r5
 800a666:	4620      	mov	r0, r4
 800a668:	9207      	str	r2, [sp, #28]
 800a66a:	f000 f91f 	bl	800a8ac <_Bfree>
 800a66e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a672:	ea43 0102 	orr.w	r1, r3, r2
 800a676:	9b04      	ldr	r3, [sp, #16]
 800a678:	430b      	orrs	r3, r1
 800a67a:	464d      	mov	r5, r9
 800a67c:	d10f      	bne.n	800a69e <_dtoa_r+0xa66>
 800a67e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a682:	d02a      	beq.n	800a6da <_dtoa_r+0xaa2>
 800a684:	9b03      	ldr	r3, [sp, #12]
 800a686:	2b00      	cmp	r3, #0
 800a688:	dd02      	ble.n	800a690 <_dtoa_r+0xa58>
 800a68a:	9b02      	ldr	r3, [sp, #8]
 800a68c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a690:	f88b a000 	strb.w	sl, [fp]
 800a694:	e775      	b.n	800a582 <_dtoa_r+0x94a>
 800a696:	4638      	mov	r0, r7
 800a698:	e7ba      	b.n	800a610 <_dtoa_r+0x9d8>
 800a69a:	2201      	movs	r2, #1
 800a69c:	e7e2      	b.n	800a664 <_dtoa_r+0xa2c>
 800a69e:	9b03      	ldr	r3, [sp, #12]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	db04      	blt.n	800a6ae <_dtoa_r+0xa76>
 800a6a4:	9906      	ldr	r1, [sp, #24]
 800a6a6:	430b      	orrs	r3, r1
 800a6a8:	9904      	ldr	r1, [sp, #16]
 800a6aa:	430b      	orrs	r3, r1
 800a6ac:	d122      	bne.n	800a6f4 <_dtoa_r+0xabc>
 800a6ae:	2a00      	cmp	r2, #0
 800a6b0:	ddee      	ble.n	800a690 <_dtoa_r+0xa58>
 800a6b2:	ee18 1a10 	vmov	r1, s16
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	f000 fac9 	bl	800ac50 <__lshift>
 800a6be:	4631      	mov	r1, r6
 800a6c0:	ee08 0a10 	vmov	s16, r0
 800a6c4:	f000 fb34 	bl	800ad30 <__mcmp>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	dc03      	bgt.n	800a6d4 <_dtoa_r+0xa9c>
 800a6cc:	d1e0      	bne.n	800a690 <_dtoa_r+0xa58>
 800a6ce:	f01a 0f01 	tst.w	sl, #1
 800a6d2:	d0dd      	beq.n	800a690 <_dtoa_r+0xa58>
 800a6d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a6d8:	d1d7      	bne.n	800a68a <_dtoa_r+0xa52>
 800a6da:	2339      	movs	r3, #57	; 0x39
 800a6dc:	f88b 3000 	strb.w	r3, [fp]
 800a6e0:	462b      	mov	r3, r5
 800a6e2:	461d      	mov	r5, r3
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a6ea:	2a39      	cmp	r2, #57	; 0x39
 800a6ec:	d071      	beq.n	800a7d2 <_dtoa_r+0xb9a>
 800a6ee:	3201      	adds	r2, #1
 800a6f0:	701a      	strb	r2, [r3, #0]
 800a6f2:	e746      	b.n	800a582 <_dtoa_r+0x94a>
 800a6f4:	2a00      	cmp	r2, #0
 800a6f6:	dd07      	ble.n	800a708 <_dtoa_r+0xad0>
 800a6f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a6fc:	d0ed      	beq.n	800a6da <_dtoa_r+0xaa2>
 800a6fe:	f10a 0301 	add.w	r3, sl, #1
 800a702:	f88b 3000 	strb.w	r3, [fp]
 800a706:	e73c      	b.n	800a582 <_dtoa_r+0x94a>
 800a708:	9b05      	ldr	r3, [sp, #20]
 800a70a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a70e:	4599      	cmp	r9, r3
 800a710:	d047      	beq.n	800a7a2 <_dtoa_r+0xb6a>
 800a712:	ee18 1a10 	vmov	r1, s16
 800a716:	2300      	movs	r3, #0
 800a718:	220a      	movs	r2, #10
 800a71a:	4620      	mov	r0, r4
 800a71c:	f000 f8e8 	bl	800a8f0 <__multadd>
 800a720:	45b8      	cmp	r8, r7
 800a722:	ee08 0a10 	vmov	s16, r0
 800a726:	f04f 0300 	mov.w	r3, #0
 800a72a:	f04f 020a 	mov.w	r2, #10
 800a72e:	4641      	mov	r1, r8
 800a730:	4620      	mov	r0, r4
 800a732:	d106      	bne.n	800a742 <_dtoa_r+0xb0a>
 800a734:	f000 f8dc 	bl	800a8f0 <__multadd>
 800a738:	4680      	mov	r8, r0
 800a73a:	4607      	mov	r7, r0
 800a73c:	f109 0901 	add.w	r9, r9, #1
 800a740:	e772      	b.n	800a628 <_dtoa_r+0x9f0>
 800a742:	f000 f8d5 	bl	800a8f0 <__multadd>
 800a746:	4639      	mov	r1, r7
 800a748:	4680      	mov	r8, r0
 800a74a:	2300      	movs	r3, #0
 800a74c:	220a      	movs	r2, #10
 800a74e:	4620      	mov	r0, r4
 800a750:	f000 f8ce 	bl	800a8f0 <__multadd>
 800a754:	4607      	mov	r7, r0
 800a756:	e7f1      	b.n	800a73c <_dtoa_r+0xb04>
 800a758:	9b03      	ldr	r3, [sp, #12]
 800a75a:	9302      	str	r3, [sp, #8]
 800a75c:	9d01      	ldr	r5, [sp, #4]
 800a75e:	ee18 0a10 	vmov	r0, s16
 800a762:	4631      	mov	r1, r6
 800a764:	f7ff f9dc 	bl	8009b20 <quorem>
 800a768:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a76c:	9b01      	ldr	r3, [sp, #4]
 800a76e:	f805 ab01 	strb.w	sl, [r5], #1
 800a772:	1aea      	subs	r2, r5, r3
 800a774:	9b02      	ldr	r3, [sp, #8]
 800a776:	4293      	cmp	r3, r2
 800a778:	dd09      	ble.n	800a78e <_dtoa_r+0xb56>
 800a77a:	ee18 1a10 	vmov	r1, s16
 800a77e:	2300      	movs	r3, #0
 800a780:	220a      	movs	r2, #10
 800a782:	4620      	mov	r0, r4
 800a784:	f000 f8b4 	bl	800a8f0 <__multadd>
 800a788:	ee08 0a10 	vmov	s16, r0
 800a78c:	e7e7      	b.n	800a75e <_dtoa_r+0xb26>
 800a78e:	9b02      	ldr	r3, [sp, #8]
 800a790:	2b00      	cmp	r3, #0
 800a792:	bfc8      	it	gt
 800a794:	461d      	movgt	r5, r3
 800a796:	9b01      	ldr	r3, [sp, #4]
 800a798:	bfd8      	it	le
 800a79a:	2501      	movle	r5, #1
 800a79c:	441d      	add	r5, r3
 800a79e:	f04f 0800 	mov.w	r8, #0
 800a7a2:	ee18 1a10 	vmov	r1, s16
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f000 fa51 	bl	800ac50 <__lshift>
 800a7ae:	4631      	mov	r1, r6
 800a7b0:	ee08 0a10 	vmov	s16, r0
 800a7b4:	f000 fabc 	bl	800ad30 <__mcmp>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	dc91      	bgt.n	800a6e0 <_dtoa_r+0xaa8>
 800a7bc:	d102      	bne.n	800a7c4 <_dtoa_r+0xb8c>
 800a7be:	f01a 0f01 	tst.w	sl, #1
 800a7c2:	d18d      	bne.n	800a6e0 <_dtoa_r+0xaa8>
 800a7c4:	462b      	mov	r3, r5
 800a7c6:	461d      	mov	r5, r3
 800a7c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7cc:	2a30      	cmp	r2, #48	; 0x30
 800a7ce:	d0fa      	beq.n	800a7c6 <_dtoa_r+0xb8e>
 800a7d0:	e6d7      	b.n	800a582 <_dtoa_r+0x94a>
 800a7d2:	9a01      	ldr	r2, [sp, #4]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d184      	bne.n	800a6e2 <_dtoa_r+0xaaa>
 800a7d8:	9b00      	ldr	r3, [sp, #0]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	9300      	str	r3, [sp, #0]
 800a7de:	2331      	movs	r3, #49	; 0x31
 800a7e0:	7013      	strb	r3, [r2, #0]
 800a7e2:	e6ce      	b.n	800a582 <_dtoa_r+0x94a>
 800a7e4:	4b09      	ldr	r3, [pc, #36]	; (800a80c <_dtoa_r+0xbd4>)
 800a7e6:	f7ff ba95 	b.w	8009d14 <_dtoa_r+0xdc>
 800a7ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f47f aa6e 	bne.w	8009cce <_dtoa_r+0x96>
 800a7f2:	4b07      	ldr	r3, [pc, #28]	; (800a810 <_dtoa_r+0xbd8>)
 800a7f4:	f7ff ba8e 	b.w	8009d14 <_dtoa_r+0xdc>
 800a7f8:	9b02      	ldr	r3, [sp, #8]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	dcae      	bgt.n	800a75c <_dtoa_r+0xb24>
 800a7fe:	9b06      	ldr	r3, [sp, #24]
 800a800:	2b02      	cmp	r3, #2
 800a802:	f73f aea8 	bgt.w	800a556 <_dtoa_r+0x91e>
 800a806:	e7a9      	b.n	800a75c <_dtoa_r+0xb24>
 800a808:	0800c3c3 	.word	0x0800c3c3
 800a80c:	0800c320 	.word	0x0800c320
 800a810:	0800c344 	.word	0x0800c344

0800a814 <_localeconv_r>:
 800a814:	4800      	ldr	r0, [pc, #0]	; (800a818 <_localeconv_r+0x4>)
 800a816:	4770      	bx	lr
 800a818:	20000164 	.word	0x20000164

0800a81c <malloc>:
 800a81c:	4b02      	ldr	r3, [pc, #8]	; (800a828 <malloc+0xc>)
 800a81e:	4601      	mov	r1, r0
 800a820:	6818      	ldr	r0, [r3, #0]
 800a822:	f000 bc09 	b.w	800b038 <_malloc_r>
 800a826:	bf00      	nop
 800a828:	20000010 	.word	0x20000010

0800a82c <_Balloc>:
 800a82c:	b570      	push	{r4, r5, r6, lr}
 800a82e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a830:	4604      	mov	r4, r0
 800a832:	460d      	mov	r5, r1
 800a834:	b976      	cbnz	r6, 800a854 <_Balloc+0x28>
 800a836:	2010      	movs	r0, #16
 800a838:	f7ff fff0 	bl	800a81c <malloc>
 800a83c:	4602      	mov	r2, r0
 800a83e:	6260      	str	r0, [r4, #36]	; 0x24
 800a840:	b920      	cbnz	r0, 800a84c <_Balloc+0x20>
 800a842:	4b18      	ldr	r3, [pc, #96]	; (800a8a4 <_Balloc+0x78>)
 800a844:	4818      	ldr	r0, [pc, #96]	; (800a8a8 <_Balloc+0x7c>)
 800a846:	2166      	movs	r1, #102	; 0x66
 800a848:	f000 fdd6 	bl	800b3f8 <__assert_func>
 800a84c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a850:	6006      	str	r6, [r0, #0]
 800a852:	60c6      	str	r6, [r0, #12]
 800a854:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a856:	68f3      	ldr	r3, [r6, #12]
 800a858:	b183      	cbz	r3, 800a87c <_Balloc+0x50>
 800a85a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a862:	b9b8      	cbnz	r0, 800a894 <_Balloc+0x68>
 800a864:	2101      	movs	r1, #1
 800a866:	fa01 f605 	lsl.w	r6, r1, r5
 800a86a:	1d72      	adds	r2, r6, #5
 800a86c:	0092      	lsls	r2, r2, #2
 800a86e:	4620      	mov	r0, r4
 800a870:	f000 fb60 	bl	800af34 <_calloc_r>
 800a874:	b160      	cbz	r0, 800a890 <_Balloc+0x64>
 800a876:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a87a:	e00e      	b.n	800a89a <_Balloc+0x6e>
 800a87c:	2221      	movs	r2, #33	; 0x21
 800a87e:	2104      	movs	r1, #4
 800a880:	4620      	mov	r0, r4
 800a882:	f000 fb57 	bl	800af34 <_calloc_r>
 800a886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a888:	60f0      	str	r0, [r6, #12]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1e4      	bne.n	800a85a <_Balloc+0x2e>
 800a890:	2000      	movs	r0, #0
 800a892:	bd70      	pop	{r4, r5, r6, pc}
 800a894:	6802      	ldr	r2, [r0, #0]
 800a896:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a89a:	2300      	movs	r3, #0
 800a89c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a8a0:	e7f7      	b.n	800a892 <_Balloc+0x66>
 800a8a2:	bf00      	nop
 800a8a4:	0800c351 	.word	0x0800c351
 800a8a8:	0800c3d4 	.word	0x0800c3d4

0800a8ac <_Bfree>:
 800a8ac:	b570      	push	{r4, r5, r6, lr}
 800a8ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a8b0:	4605      	mov	r5, r0
 800a8b2:	460c      	mov	r4, r1
 800a8b4:	b976      	cbnz	r6, 800a8d4 <_Bfree+0x28>
 800a8b6:	2010      	movs	r0, #16
 800a8b8:	f7ff ffb0 	bl	800a81c <malloc>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	6268      	str	r0, [r5, #36]	; 0x24
 800a8c0:	b920      	cbnz	r0, 800a8cc <_Bfree+0x20>
 800a8c2:	4b09      	ldr	r3, [pc, #36]	; (800a8e8 <_Bfree+0x3c>)
 800a8c4:	4809      	ldr	r0, [pc, #36]	; (800a8ec <_Bfree+0x40>)
 800a8c6:	218a      	movs	r1, #138	; 0x8a
 800a8c8:	f000 fd96 	bl	800b3f8 <__assert_func>
 800a8cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8d0:	6006      	str	r6, [r0, #0]
 800a8d2:	60c6      	str	r6, [r0, #12]
 800a8d4:	b13c      	cbz	r4, 800a8e6 <_Bfree+0x3a>
 800a8d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a8d8:	6862      	ldr	r2, [r4, #4]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8e0:	6021      	str	r1, [r4, #0]
 800a8e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8e6:	bd70      	pop	{r4, r5, r6, pc}
 800a8e8:	0800c351 	.word	0x0800c351
 800a8ec:	0800c3d4 	.word	0x0800c3d4

0800a8f0 <__multadd>:
 800a8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f4:	690d      	ldr	r5, [r1, #16]
 800a8f6:	4607      	mov	r7, r0
 800a8f8:	460c      	mov	r4, r1
 800a8fa:	461e      	mov	r6, r3
 800a8fc:	f101 0c14 	add.w	ip, r1, #20
 800a900:	2000      	movs	r0, #0
 800a902:	f8dc 3000 	ldr.w	r3, [ip]
 800a906:	b299      	uxth	r1, r3
 800a908:	fb02 6101 	mla	r1, r2, r1, r6
 800a90c:	0c1e      	lsrs	r6, r3, #16
 800a90e:	0c0b      	lsrs	r3, r1, #16
 800a910:	fb02 3306 	mla	r3, r2, r6, r3
 800a914:	b289      	uxth	r1, r1
 800a916:	3001      	adds	r0, #1
 800a918:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a91c:	4285      	cmp	r5, r0
 800a91e:	f84c 1b04 	str.w	r1, [ip], #4
 800a922:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a926:	dcec      	bgt.n	800a902 <__multadd+0x12>
 800a928:	b30e      	cbz	r6, 800a96e <__multadd+0x7e>
 800a92a:	68a3      	ldr	r3, [r4, #8]
 800a92c:	42ab      	cmp	r3, r5
 800a92e:	dc19      	bgt.n	800a964 <__multadd+0x74>
 800a930:	6861      	ldr	r1, [r4, #4]
 800a932:	4638      	mov	r0, r7
 800a934:	3101      	adds	r1, #1
 800a936:	f7ff ff79 	bl	800a82c <_Balloc>
 800a93a:	4680      	mov	r8, r0
 800a93c:	b928      	cbnz	r0, 800a94a <__multadd+0x5a>
 800a93e:	4602      	mov	r2, r0
 800a940:	4b0c      	ldr	r3, [pc, #48]	; (800a974 <__multadd+0x84>)
 800a942:	480d      	ldr	r0, [pc, #52]	; (800a978 <__multadd+0x88>)
 800a944:	21b5      	movs	r1, #181	; 0xb5
 800a946:	f000 fd57 	bl	800b3f8 <__assert_func>
 800a94a:	6922      	ldr	r2, [r4, #16]
 800a94c:	3202      	adds	r2, #2
 800a94e:	f104 010c 	add.w	r1, r4, #12
 800a952:	0092      	lsls	r2, r2, #2
 800a954:	300c      	adds	r0, #12
 800a956:	f7fe fc43 	bl	80091e0 <memcpy>
 800a95a:	4621      	mov	r1, r4
 800a95c:	4638      	mov	r0, r7
 800a95e:	f7ff ffa5 	bl	800a8ac <_Bfree>
 800a962:	4644      	mov	r4, r8
 800a964:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a968:	3501      	adds	r5, #1
 800a96a:	615e      	str	r6, [r3, #20]
 800a96c:	6125      	str	r5, [r4, #16]
 800a96e:	4620      	mov	r0, r4
 800a970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a974:	0800c3c3 	.word	0x0800c3c3
 800a978:	0800c3d4 	.word	0x0800c3d4

0800a97c <__hi0bits>:
 800a97c:	0c03      	lsrs	r3, r0, #16
 800a97e:	041b      	lsls	r3, r3, #16
 800a980:	b9d3      	cbnz	r3, 800a9b8 <__hi0bits+0x3c>
 800a982:	0400      	lsls	r0, r0, #16
 800a984:	2310      	movs	r3, #16
 800a986:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a98a:	bf04      	itt	eq
 800a98c:	0200      	lsleq	r0, r0, #8
 800a98e:	3308      	addeq	r3, #8
 800a990:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a994:	bf04      	itt	eq
 800a996:	0100      	lsleq	r0, r0, #4
 800a998:	3304      	addeq	r3, #4
 800a99a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a99e:	bf04      	itt	eq
 800a9a0:	0080      	lsleq	r0, r0, #2
 800a9a2:	3302      	addeq	r3, #2
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	db05      	blt.n	800a9b4 <__hi0bits+0x38>
 800a9a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a9ac:	f103 0301 	add.w	r3, r3, #1
 800a9b0:	bf08      	it	eq
 800a9b2:	2320      	moveq	r3, #32
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	4770      	bx	lr
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	e7e4      	b.n	800a986 <__hi0bits+0xa>

0800a9bc <__lo0bits>:
 800a9bc:	6803      	ldr	r3, [r0, #0]
 800a9be:	f013 0207 	ands.w	r2, r3, #7
 800a9c2:	4601      	mov	r1, r0
 800a9c4:	d00b      	beq.n	800a9de <__lo0bits+0x22>
 800a9c6:	07da      	lsls	r2, r3, #31
 800a9c8:	d423      	bmi.n	800aa12 <__lo0bits+0x56>
 800a9ca:	0798      	lsls	r0, r3, #30
 800a9cc:	bf49      	itett	mi
 800a9ce:	085b      	lsrmi	r3, r3, #1
 800a9d0:	089b      	lsrpl	r3, r3, #2
 800a9d2:	2001      	movmi	r0, #1
 800a9d4:	600b      	strmi	r3, [r1, #0]
 800a9d6:	bf5c      	itt	pl
 800a9d8:	600b      	strpl	r3, [r1, #0]
 800a9da:	2002      	movpl	r0, #2
 800a9dc:	4770      	bx	lr
 800a9de:	b298      	uxth	r0, r3
 800a9e0:	b9a8      	cbnz	r0, 800aa0e <__lo0bits+0x52>
 800a9e2:	0c1b      	lsrs	r3, r3, #16
 800a9e4:	2010      	movs	r0, #16
 800a9e6:	b2da      	uxtb	r2, r3
 800a9e8:	b90a      	cbnz	r2, 800a9ee <__lo0bits+0x32>
 800a9ea:	3008      	adds	r0, #8
 800a9ec:	0a1b      	lsrs	r3, r3, #8
 800a9ee:	071a      	lsls	r2, r3, #28
 800a9f0:	bf04      	itt	eq
 800a9f2:	091b      	lsreq	r3, r3, #4
 800a9f4:	3004      	addeq	r0, #4
 800a9f6:	079a      	lsls	r2, r3, #30
 800a9f8:	bf04      	itt	eq
 800a9fa:	089b      	lsreq	r3, r3, #2
 800a9fc:	3002      	addeq	r0, #2
 800a9fe:	07da      	lsls	r2, r3, #31
 800aa00:	d403      	bmi.n	800aa0a <__lo0bits+0x4e>
 800aa02:	085b      	lsrs	r3, r3, #1
 800aa04:	f100 0001 	add.w	r0, r0, #1
 800aa08:	d005      	beq.n	800aa16 <__lo0bits+0x5a>
 800aa0a:	600b      	str	r3, [r1, #0]
 800aa0c:	4770      	bx	lr
 800aa0e:	4610      	mov	r0, r2
 800aa10:	e7e9      	b.n	800a9e6 <__lo0bits+0x2a>
 800aa12:	2000      	movs	r0, #0
 800aa14:	4770      	bx	lr
 800aa16:	2020      	movs	r0, #32
 800aa18:	4770      	bx	lr
	...

0800aa1c <__i2b>:
 800aa1c:	b510      	push	{r4, lr}
 800aa1e:	460c      	mov	r4, r1
 800aa20:	2101      	movs	r1, #1
 800aa22:	f7ff ff03 	bl	800a82c <_Balloc>
 800aa26:	4602      	mov	r2, r0
 800aa28:	b928      	cbnz	r0, 800aa36 <__i2b+0x1a>
 800aa2a:	4b05      	ldr	r3, [pc, #20]	; (800aa40 <__i2b+0x24>)
 800aa2c:	4805      	ldr	r0, [pc, #20]	; (800aa44 <__i2b+0x28>)
 800aa2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aa32:	f000 fce1 	bl	800b3f8 <__assert_func>
 800aa36:	2301      	movs	r3, #1
 800aa38:	6144      	str	r4, [r0, #20]
 800aa3a:	6103      	str	r3, [r0, #16]
 800aa3c:	bd10      	pop	{r4, pc}
 800aa3e:	bf00      	nop
 800aa40:	0800c3c3 	.word	0x0800c3c3
 800aa44:	0800c3d4 	.word	0x0800c3d4

0800aa48 <__multiply>:
 800aa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4c:	4691      	mov	r9, r2
 800aa4e:	690a      	ldr	r2, [r1, #16]
 800aa50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	bfb8      	it	lt
 800aa58:	460b      	movlt	r3, r1
 800aa5a:	460c      	mov	r4, r1
 800aa5c:	bfbc      	itt	lt
 800aa5e:	464c      	movlt	r4, r9
 800aa60:	4699      	movlt	r9, r3
 800aa62:	6927      	ldr	r7, [r4, #16]
 800aa64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa68:	68a3      	ldr	r3, [r4, #8]
 800aa6a:	6861      	ldr	r1, [r4, #4]
 800aa6c:	eb07 060a 	add.w	r6, r7, sl
 800aa70:	42b3      	cmp	r3, r6
 800aa72:	b085      	sub	sp, #20
 800aa74:	bfb8      	it	lt
 800aa76:	3101      	addlt	r1, #1
 800aa78:	f7ff fed8 	bl	800a82c <_Balloc>
 800aa7c:	b930      	cbnz	r0, 800aa8c <__multiply+0x44>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	4b44      	ldr	r3, [pc, #272]	; (800ab94 <__multiply+0x14c>)
 800aa82:	4845      	ldr	r0, [pc, #276]	; (800ab98 <__multiply+0x150>)
 800aa84:	f240 115d 	movw	r1, #349	; 0x15d
 800aa88:	f000 fcb6 	bl	800b3f8 <__assert_func>
 800aa8c:	f100 0514 	add.w	r5, r0, #20
 800aa90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa94:	462b      	mov	r3, r5
 800aa96:	2200      	movs	r2, #0
 800aa98:	4543      	cmp	r3, r8
 800aa9a:	d321      	bcc.n	800aae0 <__multiply+0x98>
 800aa9c:	f104 0314 	add.w	r3, r4, #20
 800aaa0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aaa4:	f109 0314 	add.w	r3, r9, #20
 800aaa8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aaac:	9202      	str	r2, [sp, #8]
 800aaae:	1b3a      	subs	r2, r7, r4
 800aab0:	3a15      	subs	r2, #21
 800aab2:	f022 0203 	bic.w	r2, r2, #3
 800aab6:	3204      	adds	r2, #4
 800aab8:	f104 0115 	add.w	r1, r4, #21
 800aabc:	428f      	cmp	r7, r1
 800aabe:	bf38      	it	cc
 800aac0:	2204      	movcc	r2, #4
 800aac2:	9201      	str	r2, [sp, #4]
 800aac4:	9a02      	ldr	r2, [sp, #8]
 800aac6:	9303      	str	r3, [sp, #12]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d80c      	bhi.n	800aae6 <__multiply+0x9e>
 800aacc:	2e00      	cmp	r6, #0
 800aace:	dd03      	ble.n	800aad8 <__multiply+0x90>
 800aad0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d05a      	beq.n	800ab8e <__multiply+0x146>
 800aad8:	6106      	str	r6, [r0, #16]
 800aada:	b005      	add	sp, #20
 800aadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae0:	f843 2b04 	str.w	r2, [r3], #4
 800aae4:	e7d8      	b.n	800aa98 <__multiply+0x50>
 800aae6:	f8b3 a000 	ldrh.w	sl, [r3]
 800aaea:	f1ba 0f00 	cmp.w	sl, #0
 800aaee:	d024      	beq.n	800ab3a <__multiply+0xf2>
 800aaf0:	f104 0e14 	add.w	lr, r4, #20
 800aaf4:	46a9      	mov	r9, r5
 800aaf6:	f04f 0c00 	mov.w	ip, #0
 800aafa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aafe:	f8d9 1000 	ldr.w	r1, [r9]
 800ab02:	fa1f fb82 	uxth.w	fp, r2
 800ab06:	b289      	uxth	r1, r1
 800ab08:	fb0a 110b 	mla	r1, sl, fp, r1
 800ab0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ab10:	f8d9 2000 	ldr.w	r2, [r9]
 800ab14:	4461      	add	r1, ip
 800ab16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab1a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ab1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ab22:	b289      	uxth	r1, r1
 800ab24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab28:	4577      	cmp	r7, lr
 800ab2a:	f849 1b04 	str.w	r1, [r9], #4
 800ab2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab32:	d8e2      	bhi.n	800aafa <__multiply+0xb2>
 800ab34:	9a01      	ldr	r2, [sp, #4]
 800ab36:	f845 c002 	str.w	ip, [r5, r2]
 800ab3a:	9a03      	ldr	r2, [sp, #12]
 800ab3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab40:	3304      	adds	r3, #4
 800ab42:	f1b9 0f00 	cmp.w	r9, #0
 800ab46:	d020      	beq.n	800ab8a <__multiply+0x142>
 800ab48:	6829      	ldr	r1, [r5, #0]
 800ab4a:	f104 0c14 	add.w	ip, r4, #20
 800ab4e:	46ae      	mov	lr, r5
 800ab50:	f04f 0a00 	mov.w	sl, #0
 800ab54:	f8bc b000 	ldrh.w	fp, [ip]
 800ab58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab5c:	fb09 220b 	mla	r2, r9, fp, r2
 800ab60:	4492      	add	sl, r2
 800ab62:	b289      	uxth	r1, r1
 800ab64:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ab68:	f84e 1b04 	str.w	r1, [lr], #4
 800ab6c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ab70:	f8be 1000 	ldrh.w	r1, [lr]
 800ab74:	0c12      	lsrs	r2, r2, #16
 800ab76:	fb09 1102 	mla	r1, r9, r2, r1
 800ab7a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ab7e:	4567      	cmp	r7, ip
 800ab80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab84:	d8e6      	bhi.n	800ab54 <__multiply+0x10c>
 800ab86:	9a01      	ldr	r2, [sp, #4]
 800ab88:	50a9      	str	r1, [r5, r2]
 800ab8a:	3504      	adds	r5, #4
 800ab8c:	e79a      	b.n	800aac4 <__multiply+0x7c>
 800ab8e:	3e01      	subs	r6, #1
 800ab90:	e79c      	b.n	800aacc <__multiply+0x84>
 800ab92:	bf00      	nop
 800ab94:	0800c3c3 	.word	0x0800c3c3
 800ab98:	0800c3d4 	.word	0x0800c3d4

0800ab9c <__pow5mult>:
 800ab9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aba0:	4615      	mov	r5, r2
 800aba2:	f012 0203 	ands.w	r2, r2, #3
 800aba6:	4606      	mov	r6, r0
 800aba8:	460f      	mov	r7, r1
 800abaa:	d007      	beq.n	800abbc <__pow5mult+0x20>
 800abac:	4c25      	ldr	r4, [pc, #148]	; (800ac44 <__pow5mult+0xa8>)
 800abae:	3a01      	subs	r2, #1
 800abb0:	2300      	movs	r3, #0
 800abb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800abb6:	f7ff fe9b 	bl	800a8f0 <__multadd>
 800abba:	4607      	mov	r7, r0
 800abbc:	10ad      	asrs	r5, r5, #2
 800abbe:	d03d      	beq.n	800ac3c <__pow5mult+0xa0>
 800abc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800abc2:	b97c      	cbnz	r4, 800abe4 <__pow5mult+0x48>
 800abc4:	2010      	movs	r0, #16
 800abc6:	f7ff fe29 	bl	800a81c <malloc>
 800abca:	4602      	mov	r2, r0
 800abcc:	6270      	str	r0, [r6, #36]	; 0x24
 800abce:	b928      	cbnz	r0, 800abdc <__pow5mult+0x40>
 800abd0:	4b1d      	ldr	r3, [pc, #116]	; (800ac48 <__pow5mult+0xac>)
 800abd2:	481e      	ldr	r0, [pc, #120]	; (800ac4c <__pow5mult+0xb0>)
 800abd4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800abd8:	f000 fc0e 	bl	800b3f8 <__assert_func>
 800abdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800abe0:	6004      	str	r4, [r0, #0]
 800abe2:	60c4      	str	r4, [r0, #12]
 800abe4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800abe8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800abec:	b94c      	cbnz	r4, 800ac02 <__pow5mult+0x66>
 800abee:	f240 2171 	movw	r1, #625	; 0x271
 800abf2:	4630      	mov	r0, r6
 800abf4:	f7ff ff12 	bl	800aa1c <__i2b>
 800abf8:	2300      	movs	r3, #0
 800abfa:	f8c8 0008 	str.w	r0, [r8, #8]
 800abfe:	4604      	mov	r4, r0
 800ac00:	6003      	str	r3, [r0, #0]
 800ac02:	f04f 0900 	mov.w	r9, #0
 800ac06:	07eb      	lsls	r3, r5, #31
 800ac08:	d50a      	bpl.n	800ac20 <__pow5mult+0x84>
 800ac0a:	4639      	mov	r1, r7
 800ac0c:	4622      	mov	r2, r4
 800ac0e:	4630      	mov	r0, r6
 800ac10:	f7ff ff1a 	bl	800aa48 <__multiply>
 800ac14:	4639      	mov	r1, r7
 800ac16:	4680      	mov	r8, r0
 800ac18:	4630      	mov	r0, r6
 800ac1a:	f7ff fe47 	bl	800a8ac <_Bfree>
 800ac1e:	4647      	mov	r7, r8
 800ac20:	106d      	asrs	r5, r5, #1
 800ac22:	d00b      	beq.n	800ac3c <__pow5mult+0xa0>
 800ac24:	6820      	ldr	r0, [r4, #0]
 800ac26:	b938      	cbnz	r0, 800ac38 <__pow5mult+0x9c>
 800ac28:	4622      	mov	r2, r4
 800ac2a:	4621      	mov	r1, r4
 800ac2c:	4630      	mov	r0, r6
 800ac2e:	f7ff ff0b 	bl	800aa48 <__multiply>
 800ac32:	6020      	str	r0, [r4, #0]
 800ac34:	f8c0 9000 	str.w	r9, [r0]
 800ac38:	4604      	mov	r4, r0
 800ac3a:	e7e4      	b.n	800ac06 <__pow5mult+0x6a>
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac42:	bf00      	nop
 800ac44:	0800c520 	.word	0x0800c520
 800ac48:	0800c351 	.word	0x0800c351
 800ac4c:	0800c3d4 	.word	0x0800c3d4

0800ac50 <__lshift>:
 800ac50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac54:	460c      	mov	r4, r1
 800ac56:	6849      	ldr	r1, [r1, #4]
 800ac58:	6923      	ldr	r3, [r4, #16]
 800ac5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac5e:	68a3      	ldr	r3, [r4, #8]
 800ac60:	4607      	mov	r7, r0
 800ac62:	4691      	mov	r9, r2
 800ac64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac68:	f108 0601 	add.w	r6, r8, #1
 800ac6c:	42b3      	cmp	r3, r6
 800ac6e:	db0b      	blt.n	800ac88 <__lshift+0x38>
 800ac70:	4638      	mov	r0, r7
 800ac72:	f7ff fddb 	bl	800a82c <_Balloc>
 800ac76:	4605      	mov	r5, r0
 800ac78:	b948      	cbnz	r0, 800ac8e <__lshift+0x3e>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	4b2a      	ldr	r3, [pc, #168]	; (800ad28 <__lshift+0xd8>)
 800ac7e:	482b      	ldr	r0, [pc, #172]	; (800ad2c <__lshift+0xdc>)
 800ac80:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ac84:	f000 fbb8 	bl	800b3f8 <__assert_func>
 800ac88:	3101      	adds	r1, #1
 800ac8a:	005b      	lsls	r3, r3, #1
 800ac8c:	e7ee      	b.n	800ac6c <__lshift+0x1c>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	f100 0114 	add.w	r1, r0, #20
 800ac94:	f100 0210 	add.w	r2, r0, #16
 800ac98:	4618      	mov	r0, r3
 800ac9a:	4553      	cmp	r3, sl
 800ac9c:	db37      	blt.n	800ad0e <__lshift+0xbe>
 800ac9e:	6920      	ldr	r0, [r4, #16]
 800aca0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aca4:	f104 0314 	add.w	r3, r4, #20
 800aca8:	f019 091f 	ands.w	r9, r9, #31
 800acac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800acb0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800acb4:	d02f      	beq.n	800ad16 <__lshift+0xc6>
 800acb6:	f1c9 0e20 	rsb	lr, r9, #32
 800acba:	468a      	mov	sl, r1
 800acbc:	f04f 0c00 	mov.w	ip, #0
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	fa02 f209 	lsl.w	r2, r2, r9
 800acc6:	ea42 020c 	orr.w	r2, r2, ip
 800acca:	f84a 2b04 	str.w	r2, [sl], #4
 800acce:	f853 2b04 	ldr.w	r2, [r3], #4
 800acd2:	4298      	cmp	r0, r3
 800acd4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800acd8:	d8f2      	bhi.n	800acc0 <__lshift+0x70>
 800acda:	1b03      	subs	r3, r0, r4
 800acdc:	3b15      	subs	r3, #21
 800acde:	f023 0303 	bic.w	r3, r3, #3
 800ace2:	3304      	adds	r3, #4
 800ace4:	f104 0215 	add.w	r2, r4, #21
 800ace8:	4290      	cmp	r0, r2
 800acea:	bf38      	it	cc
 800acec:	2304      	movcc	r3, #4
 800acee:	f841 c003 	str.w	ip, [r1, r3]
 800acf2:	f1bc 0f00 	cmp.w	ip, #0
 800acf6:	d001      	beq.n	800acfc <__lshift+0xac>
 800acf8:	f108 0602 	add.w	r6, r8, #2
 800acfc:	3e01      	subs	r6, #1
 800acfe:	4638      	mov	r0, r7
 800ad00:	612e      	str	r6, [r5, #16]
 800ad02:	4621      	mov	r1, r4
 800ad04:	f7ff fdd2 	bl	800a8ac <_Bfree>
 800ad08:	4628      	mov	r0, r5
 800ad0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad12:	3301      	adds	r3, #1
 800ad14:	e7c1      	b.n	800ac9a <__lshift+0x4a>
 800ad16:	3904      	subs	r1, #4
 800ad18:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad20:	4298      	cmp	r0, r3
 800ad22:	d8f9      	bhi.n	800ad18 <__lshift+0xc8>
 800ad24:	e7ea      	b.n	800acfc <__lshift+0xac>
 800ad26:	bf00      	nop
 800ad28:	0800c3c3 	.word	0x0800c3c3
 800ad2c:	0800c3d4 	.word	0x0800c3d4

0800ad30 <__mcmp>:
 800ad30:	b530      	push	{r4, r5, lr}
 800ad32:	6902      	ldr	r2, [r0, #16]
 800ad34:	690c      	ldr	r4, [r1, #16]
 800ad36:	1b12      	subs	r2, r2, r4
 800ad38:	d10e      	bne.n	800ad58 <__mcmp+0x28>
 800ad3a:	f100 0314 	add.w	r3, r0, #20
 800ad3e:	3114      	adds	r1, #20
 800ad40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad50:	42a5      	cmp	r5, r4
 800ad52:	d003      	beq.n	800ad5c <__mcmp+0x2c>
 800ad54:	d305      	bcc.n	800ad62 <__mcmp+0x32>
 800ad56:	2201      	movs	r2, #1
 800ad58:	4610      	mov	r0, r2
 800ad5a:	bd30      	pop	{r4, r5, pc}
 800ad5c:	4283      	cmp	r3, r0
 800ad5e:	d3f3      	bcc.n	800ad48 <__mcmp+0x18>
 800ad60:	e7fa      	b.n	800ad58 <__mcmp+0x28>
 800ad62:	f04f 32ff 	mov.w	r2, #4294967295
 800ad66:	e7f7      	b.n	800ad58 <__mcmp+0x28>

0800ad68 <__mdiff>:
 800ad68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	460c      	mov	r4, r1
 800ad6e:	4606      	mov	r6, r0
 800ad70:	4611      	mov	r1, r2
 800ad72:	4620      	mov	r0, r4
 800ad74:	4690      	mov	r8, r2
 800ad76:	f7ff ffdb 	bl	800ad30 <__mcmp>
 800ad7a:	1e05      	subs	r5, r0, #0
 800ad7c:	d110      	bne.n	800ada0 <__mdiff+0x38>
 800ad7e:	4629      	mov	r1, r5
 800ad80:	4630      	mov	r0, r6
 800ad82:	f7ff fd53 	bl	800a82c <_Balloc>
 800ad86:	b930      	cbnz	r0, 800ad96 <__mdiff+0x2e>
 800ad88:	4b3a      	ldr	r3, [pc, #232]	; (800ae74 <__mdiff+0x10c>)
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	f240 2132 	movw	r1, #562	; 0x232
 800ad90:	4839      	ldr	r0, [pc, #228]	; (800ae78 <__mdiff+0x110>)
 800ad92:	f000 fb31 	bl	800b3f8 <__assert_func>
 800ad96:	2301      	movs	r3, #1
 800ad98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada0:	bfa4      	itt	ge
 800ada2:	4643      	movge	r3, r8
 800ada4:	46a0      	movge	r8, r4
 800ada6:	4630      	mov	r0, r6
 800ada8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800adac:	bfa6      	itte	ge
 800adae:	461c      	movge	r4, r3
 800adb0:	2500      	movge	r5, #0
 800adb2:	2501      	movlt	r5, #1
 800adb4:	f7ff fd3a 	bl	800a82c <_Balloc>
 800adb8:	b920      	cbnz	r0, 800adc4 <__mdiff+0x5c>
 800adba:	4b2e      	ldr	r3, [pc, #184]	; (800ae74 <__mdiff+0x10c>)
 800adbc:	4602      	mov	r2, r0
 800adbe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800adc2:	e7e5      	b.n	800ad90 <__mdiff+0x28>
 800adc4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800adc8:	6926      	ldr	r6, [r4, #16]
 800adca:	60c5      	str	r5, [r0, #12]
 800adcc:	f104 0914 	add.w	r9, r4, #20
 800add0:	f108 0514 	add.w	r5, r8, #20
 800add4:	f100 0e14 	add.w	lr, r0, #20
 800add8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800addc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ade0:	f108 0210 	add.w	r2, r8, #16
 800ade4:	46f2      	mov	sl, lr
 800ade6:	2100      	movs	r1, #0
 800ade8:	f859 3b04 	ldr.w	r3, [r9], #4
 800adec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800adf0:	fa1f f883 	uxth.w	r8, r3
 800adf4:	fa11 f18b 	uxtah	r1, r1, fp
 800adf8:	0c1b      	lsrs	r3, r3, #16
 800adfa:	eba1 0808 	sub.w	r8, r1, r8
 800adfe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ae02:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ae06:	fa1f f888 	uxth.w	r8, r8
 800ae0a:	1419      	asrs	r1, r3, #16
 800ae0c:	454e      	cmp	r6, r9
 800ae0e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ae12:	f84a 3b04 	str.w	r3, [sl], #4
 800ae16:	d8e7      	bhi.n	800ade8 <__mdiff+0x80>
 800ae18:	1b33      	subs	r3, r6, r4
 800ae1a:	3b15      	subs	r3, #21
 800ae1c:	f023 0303 	bic.w	r3, r3, #3
 800ae20:	3304      	adds	r3, #4
 800ae22:	3415      	adds	r4, #21
 800ae24:	42a6      	cmp	r6, r4
 800ae26:	bf38      	it	cc
 800ae28:	2304      	movcc	r3, #4
 800ae2a:	441d      	add	r5, r3
 800ae2c:	4473      	add	r3, lr
 800ae2e:	469e      	mov	lr, r3
 800ae30:	462e      	mov	r6, r5
 800ae32:	4566      	cmp	r6, ip
 800ae34:	d30e      	bcc.n	800ae54 <__mdiff+0xec>
 800ae36:	f10c 0203 	add.w	r2, ip, #3
 800ae3a:	1b52      	subs	r2, r2, r5
 800ae3c:	f022 0203 	bic.w	r2, r2, #3
 800ae40:	3d03      	subs	r5, #3
 800ae42:	45ac      	cmp	ip, r5
 800ae44:	bf38      	it	cc
 800ae46:	2200      	movcc	r2, #0
 800ae48:	441a      	add	r2, r3
 800ae4a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ae4e:	b17b      	cbz	r3, 800ae70 <__mdiff+0x108>
 800ae50:	6107      	str	r7, [r0, #16]
 800ae52:	e7a3      	b.n	800ad9c <__mdiff+0x34>
 800ae54:	f856 8b04 	ldr.w	r8, [r6], #4
 800ae58:	fa11 f288 	uxtah	r2, r1, r8
 800ae5c:	1414      	asrs	r4, r2, #16
 800ae5e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae62:	b292      	uxth	r2, r2
 800ae64:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae68:	f84e 2b04 	str.w	r2, [lr], #4
 800ae6c:	1421      	asrs	r1, r4, #16
 800ae6e:	e7e0      	b.n	800ae32 <__mdiff+0xca>
 800ae70:	3f01      	subs	r7, #1
 800ae72:	e7ea      	b.n	800ae4a <__mdiff+0xe2>
 800ae74:	0800c3c3 	.word	0x0800c3c3
 800ae78:	0800c3d4 	.word	0x0800c3d4

0800ae7c <__d2b>:
 800ae7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae80:	4689      	mov	r9, r1
 800ae82:	2101      	movs	r1, #1
 800ae84:	ec57 6b10 	vmov	r6, r7, d0
 800ae88:	4690      	mov	r8, r2
 800ae8a:	f7ff fccf 	bl	800a82c <_Balloc>
 800ae8e:	4604      	mov	r4, r0
 800ae90:	b930      	cbnz	r0, 800aea0 <__d2b+0x24>
 800ae92:	4602      	mov	r2, r0
 800ae94:	4b25      	ldr	r3, [pc, #148]	; (800af2c <__d2b+0xb0>)
 800ae96:	4826      	ldr	r0, [pc, #152]	; (800af30 <__d2b+0xb4>)
 800ae98:	f240 310a 	movw	r1, #778	; 0x30a
 800ae9c:	f000 faac 	bl	800b3f8 <__assert_func>
 800aea0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aea4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aea8:	bb35      	cbnz	r5, 800aef8 <__d2b+0x7c>
 800aeaa:	2e00      	cmp	r6, #0
 800aeac:	9301      	str	r3, [sp, #4]
 800aeae:	d028      	beq.n	800af02 <__d2b+0x86>
 800aeb0:	4668      	mov	r0, sp
 800aeb2:	9600      	str	r6, [sp, #0]
 800aeb4:	f7ff fd82 	bl	800a9bc <__lo0bits>
 800aeb8:	9900      	ldr	r1, [sp, #0]
 800aeba:	b300      	cbz	r0, 800aefe <__d2b+0x82>
 800aebc:	9a01      	ldr	r2, [sp, #4]
 800aebe:	f1c0 0320 	rsb	r3, r0, #32
 800aec2:	fa02 f303 	lsl.w	r3, r2, r3
 800aec6:	430b      	orrs	r3, r1
 800aec8:	40c2      	lsrs	r2, r0
 800aeca:	6163      	str	r3, [r4, #20]
 800aecc:	9201      	str	r2, [sp, #4]
 800aece:	9b01      	ldr	r3, [sp, #4]
 800aed0:	61a3      	str	r3, [r4, #24]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	bf14      	ite	ne
 800aed6:	2202      	movne	r2, #2
 800aed8:	2201      	moveq	r2, #1
 800aeda:	6122      	str	r2, [r4, #16]
 800aedc:	b1d5      	cbz	r5, 800af14 <__d2b+0x98>
 800aede:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aee2:	4405      	add	r5, r0
 800aee4:	f8c9 5000 	str.w	r5, [r9]
 800aee8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aeec:	f8c8 0000 	str.w	r0, [r8]
 800aef0:	4620      	mov	r0, r4
 800aef2:	b003      	add	sp, #12
 800aef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aef8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aefc:	e7d5      	b.n	800aeaa <__d2b+0x2e>
 800aefe:	6161      	str	r1, [r4, #20]
 800af00:	e7e5      	b.n	800aece <__d2b+0x52>
 800af02:	a801      	add	r0, sp, #4
 800af04:	f7ff fd5a 	bl	800a9bc <__lo0bits>
 800af08:	9b01      	ldr	r3, [sp, #4]
 800af0a:	6163      	str	r3, [r4, #20]
 800af0c:	2201      	movs	r2, #1
 800af0e:	6122      	str	r2, [r4, #16]
 800af10:	3020      	adds	r0, #32
 800af12:	e7e3      	b.n	800aedc <__d2b+0x60>
 800af14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af1c:	f8c9 0000 	str.w	r0, [r9]
 800af20:	6918      	ldr	r0, [r3, #16]
 800af22:	f7ff fd2b 	bl	800a97c <__hi0bits>
 800af26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af2a:	e7df      	b.n	800aeec <__d2b+0x70>
 800af2c:	0800c3c3 	.word	0x0800c3c3
 800af30:	0800c3d4 	.word	0x0800c3d4

0800af34 <_calloc_r>:
 800af34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af36:	fba1 2402 	umull	r2, r4, r1, r2
 800af3a:	b94c      	cbnz	r4, 800af50 <_calloc_r+0x1c>
 800af3c:	4611      	mov	r1, r2
 800af3e:	9201      	str	r2, [sp, #4]
 800af40:	f000 f87a 	bl	800b038 <_malloc_r>
 800af44:	9a01      	ldr	r2, [sp, #4]
 800af46:	4605      	mov	r5, r0
 800af48:	b930      	cbnz	r0, 800af58 <_calloc_r+0x24>
 800af4a:	4628      	mov	r0, r5
 800af4c:	b003      	add	sp, #12
 800af4e:	bd30      	pop	{r4, r5, pc}
 800af50:	220c      	movs	r2, #12
 800af52:	6002      	str	r2, [r0, #0]
 800af54:	2500      	movs	r5, #0
 800af56:	e7f8      	b.n	800af4a <_calloc_r+0x16>
 800af58:	4621      	mov	r1, r4
 800af5a:	f7fe f94f 	bl	80091fc <memset>
 800af5e:	e7f4      	b.n	800af4a <_calloc_r+0x16>

0800af60 <_free_r>:
 800af60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af62:	2900      	cmp	r1, #0
 800af64:	d044      	beq.n	800aff0 <_free_r+0x90>
 800af66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af6a:	9001      	str	r0, [sp, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f1a1 0404 	sub.w	r4, r1, #4
 800af72:	bfb8      	it	lt
 800af74:	18e4      	addlt	r4, r4, r3
 800af76:	f000 fa9b 	bl	800b4b0 <__malloc_lock>
 800af7a:	4a1e      	ldr	r2, [pc, #120]	; (800aff4 <_free_r+0x94>)
 800af7c:	9801      	ldr	r0, [sp, #4]
 800af7e:	6813      	ldr	r3, [r2, #0]
 800af80:	b933      	cbnz	r3, 800af90 <_free_r+0x30>
 800af82:	6063      	str	r3, [r4, #4]
 800af84:	6014      	str	r4, [r2, #0]
 800af86:	b003      	add	sp, #12
 800af88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af8c:	f000 ba96 	b.w	800b4bc <__malloc_unlock>
 800af90:	42a3      	cmp	r3, r4
 800af92:	d908      	bls.n	800afa6 <_free_r+0x46>
 800af94:	6825      	ldr	r5, [r4, #0]
 800af96:	1961      	adds	r1, r4, r5
 800af98:	428b      	cmp	r3, r1
 800af9a:	bf01      	itttt	eq
 800af9c:	6819      	ldreq	r1, [r3, #0]
 800af9e:	685b      	ldreq	r3, [r3, #4]
 800afa0:	1949      	addeq	r1, r1, r5
 800afa2:	6021      	streq	r1, [r4, #0]
 800afa4:	e7ed      	b.n	800af82 <_free_r+0x22>
 800afa6:	461a      	mov	r2, r3
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	b10b      	cbz	r3, 800afb0 <_free_r+0x50>
 800afac:	42a3      	cmp	r3, r4
 800afae:	d9fa      	bls.n	800afa6 <_free_r+0x46>
 800afb0:	6811      	ldr	r1, [r2, #0]
 800afb2:	1855      	adds	r5, r2, r1
 800afb4:	42a5      	cmp	r5, r4
 800afb6:	d10b      	bne.n	800afd0 <_free_r+0x70>
 800afb8:	6824      	ldr	r4, [r4, #0]
 800afba:	4421      	add	r1, r4
 800afbc:	1854      	adds	r4, r2, r1
 800afbe:	42a3      	cmp	r3, r4
 800afc0:	6011      	str	r1, [r2, #0]
 800afc2:	d1e0      	bne.n	800af86 <_free_r+0x26>
 800afc4:	681c      	ldr	r4, [r3, #0]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	6053      	str	r3, [r2, #4]
 800afca:	4421      	add	r1, r4
 800afcc:	6011      	str	r1, [r2, #0]
 800afce:	e7da      	b.n	800af86 <_free_r+0x26>
 800afd0:	d902      	bls.n	800afd8 <_free_r+0x78>
 800afd2:	230c      	movs	r3, #12
 800afd4:	6003      	str	r3, [r0, #0]
 800afd6:	e7d6      	b.n	800af86 <_free_r+0x26>
 800afd8:	6825      	ldr	r5, [r4, #0]
 800afda:	1961      	adds	r1, r4, r5
 800afdc:	428b      	cmp	r3, r1
 800afde:	bf04      	itt	eq
 800afe0:	6819      	ldreq	r1, [r3, #0]
 800afe2:	685b      	ldreq	r3, [r3, #4]
 800afe4:	6063      	str	r3, [r4, #4]
 800afe6:	bf04      	itt	eq
 800afe8:	1949      	addeq	r1, r1, r5
 800afea:	6021      	streq	r1, [r4, #0]
 800afec:	6054      	str	r4, [r2, #4]
 800afee:	e7ca      	b.n	800af86 <_free_r+0x26>
 800aff0:	b003      	add	sp, #12
 800aff2:	bd30      	pop	{r4, r5, pc}
 800aff4:	20004b94 	.word	0x20004b94

0800aff8 <sbrk_aligned>:
 800aff8:	b570      	push	{r4, r5, r6, lr}
 800affa:	4e0e      	ldr	r6, [pc, #56]	; (800b034 <sbrk_aligned+0x3c>)
 800affc:	460c      	mov	r4, r1
 800affe:	6831      	ldr	r1, [r6, #0]
 800b000:	4605      	mov	r5, r0
 800b002:	b911      	cbnz	r1, 800b00a <sbrk_aligned+0x12>
 800b004:	f000 f9e8 	bl	800b3d8 <_sbrk_r>
 800b008:	6030      	str	r0, [r6, #0]
 800b00a:	4621      	mov	r1, r4
 800b00c:	4628      	mov	r0, r5
 800b00e:	f000 f9e3 	bl	800b3d8 <_sbrk_r>
 800b012:	1c43      	adds	r3, r0, #1
 800b014:	d00a      	beq.n	800b02c <sbrk_aligned+0x34>
 800b016:	1cc4      	adds	r4, r0, #3
 800b018:	f024 0403 	bic.w	r4, r4, #3
 800b01c:	42a0      	cmp	r0, r4
 800b01e:	d007      	beq.n	800b030 <sbrk_aligned+0x38>
 800b020:	1a21      	subs	r1, r4, r0
 800b022:	4628      	mov	r0, r5
 800b024:	f000 f9d8 	bl	800b3d8 <_sbrk_r>
 800b028:	3001      	adds	r0, #1
 800b02a:	d101      	bne.n	800b030 <sbrk_aligned+0x38>
 800b02c:	f04f 34ff 	mov.w	r4, #4294967295
 800b030:	4620      	mov	r0, r4
 800b032:	bd70      	pop	{r4, r5, r6, pc}
 800b034:	20004b98 	.word	0x20004b98

0800b038 <_malloc_r>:
 800b038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b03c:	1ccd      	adds	r5, r1, #3
 800b03e:	f025 0503 	bic.w	r5, r5, #3
 800b042:	3508      	adds	r5, #8
 800b044:	2d0c      	cmp	r5, #12
 800b046:	bf38      	it	cc
 800b048:	250c      	movcc	r5, #12
 800b04a:	2d00      	cmp	r5, #0
 800b04c:	4607      	mov	r7, r0
 800b04e:	db01      	blt.n	800b054 <_malloc_r+0x1c>
 800b050:	42a9      	cmp	r1, r5
 800b052:	d905      	bls.n	800b060 <_malloc_r+0x28>
 800b054:	230c      	movs	r3, #12
 800b056:	603b      	str	r3, [r7, #0]
 800b058:	2600      	movs	r6, #0
 800b05a:	4630      	mov	r0, r6
 800b05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b060:	4e2e      	ldr	r6, [pc, #184]	; (800b11c <_malloc_r+0xe4>)
 800b062:	f000 fa25 	bl	800b4b0 <__malloc_lock>
 800b066:	6833      	ldr	r3, [r6, #0]
 800b068:	461c      	mov	r4, r3
 800b06a:	bb34      	cbnz	r4, 800b0ba <_malloc_r+0x82>
 800b06c:	4629      	mov	r1, r5
 800b06e:	4638      	mov	r0, r7
 800b070:	f7ff ffc2 	bl	800aff8 <sbrk_aligned>
 800b074:	1c43      	adds	r3, r0, #1
 800b076:	4604      	mov	r4, r0
 800b078:	d14d      	bne.n	800b116 <_malloc_r+0xde>
 800b07a:	6834      	ldr	r4, [r6, #0]
 800b07c:	4626      	mov	r6, r4
 800b07e:	2e00      	cmp	r6, #0
 800b080:	d140      	bne.n	800b104 <_malloc_r+0xcc>
 800b082:	6823      	ldr	r3, [r4, #0]
 800b084:	4631      	mov	r1, r6
 800b086:	4638      	mov	r0, r7
 800b088:	eb04 0803 	add.w	r8, r4, r3
 800b08c:	f000 f9a4 	bl	800b3d8 <_sbrk_r>
 800b090:	4580      	cmp	r8, r0
 800b092:	d13a      	bne.n	800b10a <_malloc_r+0xd2>
 800b094:	6821      	ldr	r1, [r4, #0]
 800b096:	3503      	adds	r5, #3
 800b098:	1a6d      	subs	r5, r5, r1
 800b09a:	f025 0503 	bic.w	r5, r5, #3
 800b09e:	3508      	adds	r5, #8
 800b0a0:	2d0c      	cmp	r5, #12
 800b0a2:	bf38      	it	cc
 800b0a4:	250c      	movcc	r5, #12
 800b0a6:	4629      	mov	r1, r5
 800b0a8:	4638      	mov	r0, r7
 800b0aa:	f7ff ffa5 	bl	800aff8 <sbrk_aligned>
 800b0ae:	3001      	adds	r0, #1
 800b0b0:	d02b      	beq.n	800b10a <_malloc_r+0xd2>
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	442b      	add	r3, r5
 800b0b6:	6023      	str	r3, [r4, #0]
 800b0b8:	e00e      	b.n	800b0d8 <_malloc_r+0xa0>
 800b0ba:	6822      	ldr	r2, [r4, #0]
 800b0bc:	1b52      	subs	r2, r2, r5
 800b0be:	d41e      	bmi.n	800b0fe <_malloc_r+0xc6>
 800b0c0:	2a0b      	cmp	r2, #11
 800b0c2:	d916      	bls.n	800b0f2 <_malloc_r+0xba>
 800b0c4:	1961      	adds	r1, r4, r5
 800b0c6:	42a3      	cmp	r3, r4
 800b0c8:	6025      	str	r5, [r4, #0]
 800b0ca:	bf18      	it	ne
 800b0cc:	6059      	strne	r1, [r3, #4]
 800b0ce:	6863      	ldr	r3, [r4, #4]
 800b0d0:	bf08      	it	eq
 800b0d2:	6031      	streq	r1, [r6, #0]
 800b0d4:	5162      	str	r2, [r4, r5]
 800b0d6:	604b      	str	r3, [r1, #4]
 800b0d8:	4638      	mov	r0, r7
 800b0da:	f104 060b 	add.w	r6, r4, #11
 800b0de:	f000 f9ed 	bl	800b4bc <__malloc_unlock>
 800b0e2:	f026 0607 	bic.w	r6, r6, #7
 800b0e6:	1d23      	adds	r3, r4, #4
 800b0e8:	1af2      	subs	r2, r6, r3
 800b0ea:	d0b6      	beq.n	800b05a <_malloc_r+0x22>
 800b0ec:	1b9b      	subs	r3, r3, r6
 800b0ee:	50a3      	str	r3, [r4, r2]
 800b0f0:	e7b3      	b.n	800b05a <_malloc_r+0x22>
 800b0f2:	6862      	ldr	r2, [r4, #4]
 800b0f4:	42a3      	cmp	r3, r4
 800b0f6:	bf0c      	ite	eq
 800b0f8:	6032      	streq	r2, [r6, #0]
 800b0fa:	605a      	strne	r2, [r3, #4]
 800b0fc:	e7ec      	b.n	800b0d8 <_malloc_r+0xa0>
 800b0fe:	4623      	mov	r3, r4
 800b100:	6864      	ldr	r4, [r4, #4]
 800b102:	e7b2      	b.n	800b06a <_malloc_r+0x32>
 800b104:	4634      	mov	r4, r6
 800b106:	6876      	ldr	r6, [r6, #4]
 800b108:	e7b9      	b.n	800b07e <_malloc_r+0x46>
 800b10a:	230c      	movs	r3, #12
 800b10c:	603b      	str	r3, [r7, #0]
 800b10e:	4638      	mov	r0, r7
 800b110:	f000 f9d4 	bl	800b4bc <__malloc_unlock>
 800b114:	e7a1      	b.n	800b05a <_malloc_r+0x22>
 800b116:	6025      	str	r5, [r4, #0]
 800b118:	e7de      	b.n	800b0d8 <_malloc_r+0xa0>
 800b11a:	bf00      	nop
 800b11c:	20004b94 	.word	0x20004b94

0800b120 <__ssputs_r>:
 800b120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b124:	688e      	ldr	r6, [r1, #8]
 800b126:	429e      	cmp	r6, r3
 800b128:	4682      	mov	sl, r0
 800b12a:	460c      	mov	r4, r1
 800b12c:	4690      	mov	r8, r2
 800b12e:	461f      	mov	r7, r3
 800b130:	d838      	bhi.n	800b1a4 <__ssputs_r+0x84>
 800b132:	898a      	ldrh	r2, [r1, #12]
 800b134:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b138:	d032      	beq.n	800b1a0 <__ssputs_r+0x80>
 800b13a:	6825      	ldr	r5, [r4, #0]
 800b13c:	6909      	ldr	r1, [r1, #16]
 800b13e:	eba5 0901 	sub.w	r9, r5, r1
 800b142:	6965      	ldr	r5, [r4, #20]
 800b144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b148:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b14c:	3301      	adds	r3, #1
 800b14e:	444b      	add	r3, r9
 800b150:	106d      	asrs	r5, r5, #1
 800b152:	429d      	cmp	r5, r3
 800b154:	bf38      	it	cc
 800b156:	461d      	movcc	r5, r3
 800b158:	0553      	lsls	r3, r2, #21
 800b15a:	d531      	bpl.n	800b1c0 <__ssputs_r+0xa0>
 800b15c:	4629      	mov	r1, r5
 800b15e:	f7ff ff6b 	bl	800b038 <_malloc_r>
 800b162:	4606      	mov	r6, r0
 800b164:	b950      	cbnz	r0, 800b17c <__ssputs_r+0x5c>
 800b166:	230c      	movs	r3, #12
 800b168:	f8ca 3000 	str.w	r3, [sl]
 800b16c:	89a3      	ldrh	r3, [r4, #12]
 800b16e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b172:	81a3      	strh	r3, [r4, #12]
 800b174:	f04f 30ff 	mov.w	r0, #4294967295
 800b178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b17c:	6921      	ldr	r1, [r4, #16]
 800b17e:	464a      	mov	r2, r9
 800b180:	f7fe f82e 	bl	80091e0 <memcpy>
 800b184:	89a3      	ldrh	r3, [r4, #12]
 800b186:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b18a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b18e:	81a3      	strh	r3, [r4, #12]
 800b190:	6126      	str	r6, [r4, #16]
 800b192:	6165      	str	r5, [r4, #20]
 800b194:	444e      	add	r6, r9
 800b196:	eba5 0509 	sub.w	r5, r5, r9
 800b19a:	6026      	str	r6, [r4, #0]
 800b19c:	60a5      	str	r5, [r4, #8]
 800b19e:	463e      	mov	r6, r7
 800b1a0:	42be      	cmp	r6, r7
 800b1a2:	d900      	bls.n	800b1a6 <__ssputs_r+0x86>
 800b1a4:	463e      	mov	r6, r7
 800b1a6:	6820      	ldr	r0, [r4, #0]
 800b1a8:	4632      	mov	r2, r6
 800b1aa:	4641      	mov	r1, r8
 800b1ac:	f000 f966 	bl	800b47c <memmove>
 800b1b0:	68a3      	ldr	r3, [r4, #8]
 800b1b2:	1b9b      	subs	r3, r3, r6
 800b1b4:	60a3      	str	r3, [r4, #8]
 800b1b6:	6823      	ldr	r3, [r4, #0]
 800b1b8:	4433      	add	r3, r6
 800b1ba:	6023      	str	r3, [r4, #0]
 800b1bc:	2000      	movs	r0, #0
 800b1be:	e7db      	b.n	800b178 <__ssputs_r+0x58>
 800b1c0:	462a      	mov	r2, r5
 800b1c2:	f000 f981 	bl	800b4c8 <_realloc_r>
 800b1c6:	4606      	mov	r6, r0
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	d1e1      	bne.n	800b190 <__ssputs_r+0x70>
 800b1cc:	6921      	ldr	r1, [r4, #16]
 800b1ce:	4650      	mov	r0, sl
 800b1d0:	f7ff fec6 	bl	800af60 <_free_r>
 800b1d4:	e7c7      	b.n	800b166 <__ssputs_r+0x46>
	...

0800b1d8 <_svfiprintf_r>:
 800b1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1dc:	4698      	mov	r8, r3
 800b1de:	898b      	ldrh	r3, [r1, #12]
 800b1e0:	061b      	lsls	r3, r3, #24
 800b1e2:	b09d      	sub	sp, #116	; 0x74
 800b1e4:	4607      	mov	r7, r0
 800b1e6:	460d      	mov	r5, r1
 800b1e8:	4614      	mov	r4, r2
 800b1ea:	d50e      	bpl.n	800b20a <_svfiprintf_r+0x32>
 800b1ec:	690b      	ldr	r3, [r1, #16]
 800b1ee:	b963      	cbnz	r3, 800b20a <_svfiprintf_r+0x32>
 800b1f0:	2140      	movs	r1, #64	; 0x40
 800b1f2:	f7ff ff21 	bl	800b038 <_malloc_r>
 800b1f6:	6028      	str	r0, [r5, #0]
 800b1f8:	6128      	str	r0, [r5, #16]
 800b1fa:	b920      	cbnz	r0, 800b206 <_svfiprintf_r+0x2e>
 800b1fc:	230c      	movs	r3, #12
 800b1fe:	603b      	str	r3, [r7, #0]
 800b200:	f04f 30ff 	mov.w	r0, #4294967295
 800b204:	e0d1      	b.n	800b3aa <_svfiprintf_r+0x1d2>
 800b206:	2340      	movs	r3, #64	; 0x40
 800b208:	616b      	str	r3, [r5, #20]
 800b20a:	2300      	movs	r3, #0
 800b20c:	9309      	str	r3, [sp, #36]	; 0x24
 800b20e:	2320      	movs	r3, #32
 800b210:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b214:	f8cd 800c 	str.w	r8, [sp, #12]
 800b218:	2330      	movs	r3, #48	; 0x30
 800b21a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b3c4 <_svfiprintf_r+0x1ec>
 800b21e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b222:	f04f 0901 	mov.w	r9, #1
 800b226:	4623      	mov	r3, r4
 800b228:	469a      	mov	sl, r3
 800b22a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b22e:	b10a      	cbz	r2, 800b234 <_svfiprintf_r+0x5c>
 800b230:	2a25      	cmp	r2, #37	; 0x25
 800b232:	d1f9      	bne.n	800b228 <_svfiprintf_r+0x50>
 800b234:	ebba 0b04 	subs.w	fp, sl, r4
 800b238:	d00b      	beq.n	800b252 <_svfiprintf_r+0x7a>
 800b23a:	465b      	mov	r3, fp
 800b23c:	4622      	mov	r2, r4
 800b23e:	4629      	mov	r1, r5
 800b240:	4638      	mov	r0, r7
 800b242:	f7ff ff6d 	bl	800b120 <__ssputs_r>
 800b246:	3001      	adds	r0, #1
 800b248:	f000 80aa 	beq.w	800b3a0 <_svfiprintf_r+0x1c8>
 800b24c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b24e:	445a      	add	r2, fp
 800b250:	9209      	str	r2, [sp, #36]	; 0x24
 800b252:	f89a 3000 	ldrb.w	r3, [sl]
 800b256:	2b00      	cmp	r3, #0
 800b258:	f000 80a2 	beq.w	800b3a0 <_svfiprintf_r+0x1c8>
 800b25c:	2300      	movs	r3, #0
 800b25e:	f04f 32ff 	mov.w	r2, #4294967295
 800b262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b266:	f10a 0a01 	add.w	sl, sl, #1
 800b26a:	9304      	str	r3, [sp, #16]
 800b26c:	9307      	str	r3, [sp, #28]
 800b26e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b272:	931a      	str	r3, [sp, #104]	; 0x68
 800b274:	4654      	mov	r4, sl
 800b276:	2205      	movs	r2, #5
 800b278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b27c:	4851      	ldr	r0, [pc, #324]	; (800b3c4 <_svfiprintf_r+0x1ec>)
 800b27e:	f7f4 ffb7 	bl	80001f0 <memchr>
 800b282:	9a04      	ldr	r2, [sp, #16]
 800b284:	b9d8      	cbnz	r0, 800b2be <_svfiprintf_r+0xe6>
 800b286:	06d0      	lsls	r0, r2, #27
 800b288:	bf44      	itt	mi
 800b28a:	2320      	movmi	r3, #32
 800b28c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b290:	0711      	lsls	r1, r2, #28
 800b292:	bf44      	itt	mi
 800b294:	232b      	movmi	r3, #43	; 0x2b
 800b296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b29a:	f89a 3000 	ldrb.w	r3, [sl]
 800b29e:	2b2a      	cmp	r3, #42	; 0x2a
 800b2a0:	d015      	beq.n	800b2ce <_svfiprintf_r+0xf6>
 800b2a2:	9a07      	ldr	r2, [sp, #28]
 800b2a4:	4654      	mov	r4, sl
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	f04f 0c0a 	mov.w	ip, #10
 800b2ac:	4621      	mov	r1, r4
 800b2ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2b2:	3b30      	subs	r3, #48	; 0x30
 800b2b4:	2b09      	cmp	r3, #9
 800b2b6:	d94e      	bls.n	800b356 <_svfiprintf_r+0x17e>
 800b2b8:	b1b0      	cbz	r0, 800b2e8 <_svfiprintf_r+0x110>
 800b2ba:	9207      	str	r2, [sp, #28]
 800b2bc:	e014      	b.n	800b2e8 <_svfiprintf_r+0x110>
 800b2be:	eba0 0308 	sub.w	r3, r0, r8
 800b2c2:	fa09 f303 	lsl.w	r3, r9, r3
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	9304      	str	r3, [sp, #16]
 800b2ca:	46a2      	mov	sl, r4
 800b2cc:	e7d2      	b.n	800b274 <_svfiprintf_r+0x9c>
 800b2ce:	9b03      	ldr	r3, [sp, #12]
 800b2d0:	1d19      	adds	r1, r3, #4
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	9103      	str	r1, [sp, #12]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	bfbb      	ittet	lt
 800b2da:	425b      	neglt	r3, r3
 800b2dc:	f042 0202 	orrlt.w	r2, r2, #2
 800b2e0:	9307      	strge	r3, [sp, #28]
 800b2e2:	9307      	strlt	r3, [sp, #28]
 800b2e4:	bfb8      	it	lt
 800b2e6:	9204      	strlt	r2, [sp, #16]
 800b2e8:	7823      	ldrb	r3, [r4, #0]
 800b2ea:	2b2e      	cmp	r3, #46	; 0x2e
 800b2ec:	d10c      	bne.n	800b308 <_svfiprintf_r+0x130>
 800b2ee:	7863      	ldrb	r3, [r4, #1]
 800b2f0:	2b2a      	cmp	r3, #42	; 0x2a
 800b2f2:	d135      	bne.n	800b360 <_svfiprintf_r+0x188>
 800b2f4:	9b03      	ldr	r3, [sp, #12]
 800b2f6:	1d1a      	adds	r2, r3, #4
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	9203      	str	r2, [sp, #12]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	bfb8      	it	lt
 800b300:	f04f 33ff 	movlt.w	r3, #4294967295
 800b304:	3402      	adds	r4, #2
 800b306:	9305      	str	r3, [sp, #20]
 800b308:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b3d4 <_svfiprintf_r+0x1fc>
 800b30c:	7821      	ldrb	r1, [r4, #0]
 800b30e:	2203      	movs	r2, #3
 800b310:	4650      	mov	r0, sl
 800b312:	f7f4 ff6d 	bl	80001f0 <memchr>
 800b316:	b140      	cbz	r0, 800b32a <_svfiprintf_r+0x152>
 800b318:	2340      	movs	r3, #64	; 0x40
 800b31a:	eba0 000a 	sub.w	r0, r0, sl
 800b31e:	fa03 f000 	lsl.w	r0, r3, r0
 800b322:	9b04      	ldr	r3, [sp, #16]
 800b324:	4303      	orrs	r3, r0
 800b326:	3401      	adds	r4, #1
 800b328:	9304      	str	r3, [sp, #16]
 800b32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b32e:	4826      	ldr	r0, [pc, #152]	; (800b3c8 <_svfiprintf_r+0x1f0>)
 800b330:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b334:	2206      	movs	r2, #6
 800b336:	f7f4 ff5b 	bl	80001f0 <memchr>
 800b33a:	2800      	cmp	r0, #0
 800b33c:	d038      	beq.n	800b3b0 <_svfiprintf_r+0x1d8>
 800b33e:	4b23      	ldr	r3, [pc, #140]	; (800b3cc <_svfiprintf_r+0x1f4>)
 800b340:	bb1b      	cbnz	r3, 800b38a <_svfiprintf_r+0x1b2>
 800b342:	9b03      	ldr	r3, [sp, #12]
 800b344:	3307      	adds	r3, #7
 800b346:	f023 0307 	bic.w	r3, r3, #7
 800b34a:	3308      	adds	r3, #8
 800b34c:	9303      	str	r3, [sp, #12]
 800b34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b350:	4433      	add	r3, r6
 800b352:	9309      	str	r3, [sp, #36]	; 0x24
 800b354:	e767      	b.n	800b226 <_svfiprintf_r+0x4e>
 800b356:	fb0c 3202 	mla	r2, ip, r2, r3
 800b35a:	460c      	mov	r4, r1
 800b35c:	2001      	movs	r0, #1
 800b35e:	e7a5      	b.n	800b2ac <_svfiprintf_r+0xd4>
 800b360:	2300      	movs	r3, #0
 800b362:	3401      	adds	r4, #1
 800b364:	9305      	str	r3, [sp, #20]
 800b366:	4619      	mov	r1, r3
 800b368:	f04f 0c0a 	mov.w	ip, #10
 800b36c:	4620      	mov	r0, r4
 800b36e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b372:	3a30      	subs	r2, #48	; 0x30
 800b374:	2a09      	cmp	r2, #9
 800b376:	d903      	bls.n	800b380 <_svfiprintf_r+0x1a8>
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d0c5      	beq.n	800b308 <_svfiprintf_r+0x130>
 800b37c:	9105      	str	r1, [sp, #20]
 800b37e:	e7c3      	b.n	800b308 <_svfiprintf_r+0x130>
 800b380:	fb0c 2101 	mla	r1, ip, r1, r2
 800b384:	4604      	mov	r4, r0
 800b386:	2301      	movs	r3, #1
 800b388:	e7f0      	b.n	800b36c <_svfiprintf_r+0x194>
 800b38a:	ab03      	add	r3, sp, #12
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	462a      	mov	r2, r5
 800b390:	4b0f      	ldr	r3, [pc, #60]	; (800b3d0 <_svfiprintf_r+0x1f8>)
 800b392:	a904      	add	r1, sp, #16
 800b394:	4638      	mov	r0, r7
 800b396:	f7fd ffd9 	bl	800934c <_printf_float>
 800b39a:	1c42      	adds	r2, r0, #1
 800b39c:	4606      	mov	r6, r0
 800b39e:	d1d6      	bne.n	800b34e <_svfiprintf_r+0x176>
 800b3a0:	89ab      	ldrh	r3, [r5, #12]
 800b3a2:	065b      	lsls	r3, r3, #25
 800b3a4:	f53f af2c 	bmi.w	800b200 <_svfiprintf_r+0x28>
 800b3a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3aa:	b01d      	add	sp, #116	; 0x74
 800b3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b0:	ab03      	add	r3, sp, #12
 800b3b2:	9300      	str	r3, [sp, #0]
 800b3b4:	462a      	mov	r2, r5
 800b3b6:	4b06      	ldr	r3, [pc, #24]	; (800b3d0 <_svfiprintf_r+0x1f8>)
 800b3b8:	a904      	add	r1, sp, #16
 800b3ba:	4638      	mov	r0, r7
 800b3bc:	f7fe fa6a 	bl	8009894 <_printf_i>
 800b3c0:	e7eb      	b.n	800b39a <_svfiprintf_r+0x1c2>
 800b3c2:	bf00      	nop
 800b3c4:	0800c52c 	.word	0x0800c52c
 800b3c8:	0800c536 	.word	0x0800c536
 800b3cc:	0800934d 	.word	0x0800934d
 800b3d0:	0800b121 	.word	0x0800b121
 800b3d4:	0800c532 	.word	0x0800c532

0800b3d8 <_sbrk_r>:
 800b3d8:	b538      	push	{r3, r4, r5, lr}
 800b3da:	4d06      	ldr	r5, [pc, #24]	; (800b3f4 <_sbrk_r+0x1c>)
 800b3dc:	2300      	movs	r3, #0
 800b3de:	4604      	mov	r4, r0
 800b3e0:	4608      	mov	r0, r1
 800b3e2:	602b      	str	r3, [r5, #0]
 800b3e4:	f7f6 feec 	bl	80021c0 <_sbrk>
 800b3e8:	1c43      	adds	r3, r0, #1
 800b3ea:	d102      	bne.n	800b3f2 <_sbrk_r+0x1a>
 800b3ec:	682b      	ldr	r3, [r5, #0]
 800b3ee:	b103      	cbz	r3, 800b3f2 <_sbrk_r+0x1a>
 800b3f0:	6023      	str	r3, [r4, #0]
 800b3f2:	bd38      	pop	{r3, r4, r5, pc}
 800b3f4:	20004b9c 	.word	0x20004b9c

0800b3f8 <__assert_func>:
 800b3f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3fa:	4614      	mov	r4, r2
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	4b09      	ldr	r3, [pc, #36]	; (800b424 <__assert_func+0x2c>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4605      	mov	r5, r0
 800b404:	68d8      	ldr	r0, [r3, #12]
 800b406:	b14c      	cbz	r4, 800b41c <__assert_func+0x24>
 800b408:	4b07      	ldr	r3, [pc, #28]	; (800b428 <__assert_func+0x30>)
 800b40a:	9100      	str	r1, [sp, #0]
 800b40c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b410:	4906      	ldr	r1, [pc, #24]	; (800b42c <__assert_func+0x34>)
 800b412:	462b      	mov	r3, r5
 800b414:	f000 f80e 	bl	800b434 <fiprintf>
 800b418:	f000 faac 	bl	800b974 <abort>
 800b41c:	4b04      	ldr	r3, [pc, #16]	; (800b430 <__assert_func+0x38>)
 800b41e:	461c      	mov	r4, r3
 800b420:	e7f3      	b.n	800b40a <__assert_func+0x12>
 800b422:	bf00      	nop
 800b424:	20000010 	.word	0x20000010
 800b428:	0800c53d 	.word	0x0800c53d
 800b42c:	0800c54a 	.word	0x0800c54a
 800b430:	0800c578 	.word	0x0800c578

0800b434 <fiprintf>:
 800b434:	b40e      	push	{r1, r2, r3}
 800b436:	b503      	push	{r0, r1, lr}
 800b438:	4601      	mov	r1, r0
 800b43a:	ab03      	add	r3, sp, #12
 800b43c:	4805      	ldr	r0, [pc, #20]	; (800b454 <fiprintf+0x20>)
 800b43e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b442:	6800      	ldr	r0, [r0, #0]
 800b444:	9301      	str	r3, [sp, #4]
 800b446:	f000 f897 	bl	800b578 <_vfiprintf_r>
 800b44a:	b002      	add	sp, #8
 800b44c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b450:	b003      	add	sp, #12
 800b452:	4770      	bx	lr
 800b454:	20000010 	.word	0x20000010

0800b458 <__ascii_mbtowc>:
 800b458:	b082      	sub	sp, #8
 800b45a:	b901      	cbnz	r1, 800b45e <__ascii_mbtowc+0x6>
 800b45c:	a901      	add	r1, sp, #4
 800b45e:	b142      	cbz	r2, 800b472 <__ascii_mbtowc+0x1a>
 800b460:	b14b      	cbz	r3, 800b476 <__ascii_mbtowc+0x1e>
 800b462:	7813      	ldrb	r3, [r2, #0]
 800b464:	600b      	str	r3, [r1, #0]
 800b466:	7812      	ldrb	r2, [r2, #0]
 800b468:	1e10      	subs	r0, r2, #0
 800b46a:	bf18      	it	ne
 800b46c:	2001      	movne	r0, #1
 800b46e:	b002      	add	sp, #8
 800b470:	4770      	bx	lr
 800b472:	4610      	mov	r0, r2
 800b474:	e7fb      	b.n	800b46e <__ascii_mbtowc+0x16>
 800b476:	f06f 0001 	mvn.w	r0, #1
 800b47a:	e7f8      	b.n	800b46e <__ascii_mbtowc+0x16>

0800b47c <memmove>:
 800b47c:	4288      	cmp	r0, r1
 800b47e:	b510      	push	{r4, lr}
 800b480:	eb01 0402 	add.w	r4, r1, r2
 800b484:	d902      	bls.n	800b48c <memmove+0x10>
 800b486:	4284      	cmp	r4, r0
 800b488:	4623      	mov	r3, r4
 800b48a:	d807      	bhi.n	800b49c <memmove+0x20>
 800b48c:	1e43      	subs	r3, r0, #1
 800b48e:	42a1      	cmp	r1, r4
 800b490:	d008      	beq.n	800b4a4 <memmove+0x28>
 800b492:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b496:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b49a:	e7f8      	b.n	800b48e <memmove+0x12>
 800b49c:	4402      	add	r2, r0
 800b49e:	4601      	mov	r1, r0
 800b4a0:	428a      	cmp	r2, r1
 800b4a2:	d100      	bne.n	800b4a6 <memmove+0x2a>
 800b4a4:	bd10      	pop	{r4, pc}
 800b4a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4ae:	e7f7      	b.n	800b4a0 <memmove+0x24>

0800b4b0 <__malloc_lock>:
 800b4b0:	4801      	ldr	r0, [pc, #4]	; (800b4b8 <__malloc_lock+0x8>)
 800b4b2:	f000 bc1f 	b.w	800bcf4 <__retarget_lock_acquire_recursive>
 800b4b6:	bf00      	nop
 800b4b8:	20004ba0 	.word	0x20004ba0

0800b4bc <__malloc_unlock>:
 800b4bc:	4801      	ldr	r0, [pc, #4]	; (800b4c4 <__malloc_unlock+0x8>)
 800b4be:	f000 bc1a 	b.w	800bcf6 <__retarget_lock_release_recursive>
 800b4c2:	bf00      	nop
 800b4c4:	20004ba0 	.word	0x20004ba0

0800b4c8 <_realloc_r>:
 800b4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4cc:	4680      	mov	r8, r0
 800b4ce:	4614      	mov	r4, r2
 800b4d0:	460e      	mov	r6, r1
 800b4d2:	b921      	cbnz	r1, 800b4de <_realloc_r+0x16>
 800b4d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d8:	4611      	mov	r1, r2
 800b4da:	f7ff bdad 	b.w	800b038 <_malloc_r>
 800b4de:	b92a      	cbnz	r2, 800b4ec <_realloc_r+0x24>
 800b4e0:	f7ff fd3e 	bl	800af60 <_free_r>
 800b4e4:	4625      	mov	r5, r4
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4ec:	f000 fc6a 	bl	800bdc4 <_malloc_usable_size_r>
 800b4f0:	4284      	cmp	r4, r0
 800b4f2:	4607      	mov	r7, r0
 800b4f4:	d802      	bhi.n	800b4fc <_realloc_r+0x34>
 800b4f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b4fa:	d812      	bhi.n	800b522 <_realloc_r+0x5a>
 800b4fc:	4621      	mov	r1, r4
 800b4fe:	4640      	mov	r0, r8
 800b500:	f7ff fd9a 	bl	800b038 <_malloc_r>
 800b504:	4605      	mov	r5, r0
 800b506:	2800      	cmp	r0, #0
 800b508:	d0ed      	beq.n	800b4e6 <_realloc_r+0x1e>
 800b50a:	42bc      	cmp	r4, r7
 800b50c:	4622      	mov	r2, r4
 800b50e:	4631      	mov	r1, r6
 800b510:	bf28      	it	cs
 800b512:	463a      	movcs	r2, r7
 800b514:	f7fd fe64 	bl	80091e0 <memcpy>
 800b518:	4631      	mov	r1, r6
 800b51a:	4640      	mov	r0, r8
 800b51c:	f7ff fd20 	bl	800af60 <_free_r>
 800b520:	e7e1      	b.n	800b4e6 <_realloc_r+0x1e>
 800b522:	4635      	mov	r5, r6
 800b524:	e7df      	b.n	800b4e6 <_realloc_r+0x1e>

0800b526 <__sfputc_r>:
 800b526:	6893      	ldr	r3, [r2, #8]
 800b528:	3b01      	subs	r3, #1
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	b410      	push	{r4}
 800b52e:	6093      	str	r3, [r2, #8]
 800b530:	da08      	bge.n	800b544 <__sfputc_r+0x1e>
 800b532:	6994      	ldr	r4, [r2, #24]
 800b534:	42a3      	cmp	r3, r4
 800b536:	db01      	blt.n	800b53c <__sfputc_r+0x16>
 800b538:	290a      	cmp	r1, #10
 800b53a:	d103      	bne.n	800b544 <__sfputc_r+0x1e>
 800b53c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b540:	f000 b94a 	b.w	800b7d8 <__swbuf_r>
 800b544:	6813      	ldr	r3, [r2, #0]
 800b546:	1c58      	adds	r0, r3, #1
 800b548:	6010      	str	r0, [r2, #0]
 800b54a:	7019      	strb	r1, [r3, #0]
 800b54c:	4608      	mov	r0, r1
 800b54e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b552:	4770      	bx	lr

0800b554 <__sfputs_r>:
 800b554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b556:	4606      	mov	r6, r0
 800b558:	460f      	mov	r7, r1
 800b55a:	4614      	mov	r4, r2
 800b55c:	18d5      	adds	r5, r2, r3
 800b55e:	42ac      	cmp	r4, r5
 800b560:	d101      	bne.n	800b566 <__sfputs_r+0x12>
 800b562:	2000      	movs	r0, #0
 800b564:	e007      	b.n	800b576 <__sfputs_r+0x22>
 800b566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b56a:	463a      	mov	r2, r7
 800b56c:	4630      	mov	r0, r6
 800b56e:	f7ff ffda 	bl	800b526 <__sfputc_r>
 800b572:	1c43      	adds	r3, r0, #1
 800b574:	d1f3      	bne.n	800b55e <__sfputs_r+0xa>
 800b576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b578 <_vfiprintf_r>:
 800b578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b57c:	460d      	mov	r5, r1
 800b57e:	b09d      	sub	sp, #116	; 0x74
 800b580:	4614      	mov	r4, r2
 800b582:	4698      	mov	r8, r3
 800b584:	4606      	mov	r6, r0
 800b586:	b118      	cbz	r0, 800b590 <_vfiprintf_r+0x18>
 800b588:	6983      	ldr	r3, [r0, #24]
 800b58a:	b90b      	cbnz	r3, 800b590 <_vfiprintf_r+0x18>
 800b58c:	f000 fb14 	bl	800bbb8 <__sinit>
 800b590:	4b89      	ldr	r3, [pc, #548]	; (800b7b8 <_vfiprintf_r+0x240>)
 800b592:	429d      	cmp	r5, r3
 800b594:	d11b      	bne.n	800b5ce <_vfiprintf_r+0x56>
 800b596:	6875      	ldr	r5, [r6, #4]
 800b598:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b59a:	07d9      	lsls	r1, r3, #31
 800b59c:	d405      	bmi.n	800b5aa <_vfiprintf_r+0x32>
 800b59e:	89ab      	ldrh	r3, [r5, #12]
 800b5a0:	059a      	lsls	r2, r3, #22
 800b5a2:	d402      	bmi.n	800b5aa <_vfiprintf_r+0x32>
 800b5a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5a6:	f000 fba5 	bl	800bcf4 <__retarget_lock_acquire_recursive>
 800b5aa:	89ab      	ldrh	r3, [r5, #12]
 800b5ac:	071b      	lsls	r3, r3, #28
 800b5ae:	d501      	bpl.n	800b5b4 <_vfiprintf_r+0x3c>
 800b5b0:	692b      	ldr	r3, [r5, #16]
 800b5b2:	b9eb      	cbnz	r3, 800b5f0 <_vfiprintf_r+0x78>
 800b5b4:	4629      	mov	r1, r5
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	f000 f96e 	bl	800b898 <__swsetup_r>
 800b5bc:	b1c0      	cbz	r0, 800b5f0 <_vfiprintf_r+0x78>
 800b5be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5c0:	07dc      	lsls	r4, r3, #31
 800b5c2:	d50e      	bpl.n	800b5e2 <_vfiprintf_r+0x6a>
 800b5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c8:	b01d      	add	sp, #116	; 0x74
 800b5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ce:	4b7b      	ldr	r3, [pc, #492]	; (800b7bc <_vfiprintf_r+0x244>)
 800b5d0:	429d      	cmp	r5, r3
 800b5d2:	d101      	bne.n	800b5d8 <_vfiprintf_r+0x60>
 800b5d4:	68b5      	ldr	r5, [r6, #8]
 800b5d6:	e7df      	b.n	800b598 <_vfiprintf_r+0x20>
 800b5d8:	4b79      	ldr	r3, [pc, #484]	; (800b7c0 <_vfiprintf_r+0x248>)
 800b5da:	429d      	cmp	r5, r3
 800b5dc:	bf08      	it	eq
 800b5de:	68f5      	ldreq	r5, [r6, #12]
 800b5e0:	e7da      	b.n	800b598 <_vfiprintf_r+0x20>
 800b5e2:	89ab      	ldrh	r3, [r5, #12]
 800b5e4:	0598      	lsls	r0, r3, #22
 800b5e6:	d4ed      	bmi.n	800b5c4 <_vfiprintf_r+0x4c>
 800b5e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5ea:	f000 fb84 	bl	800bcf6 <__retarget_lock_release_recursive>
 800b5ee:	e7e9      	b.n	800b5c4 <_vfiprintf_r+0x4c>
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b5f4:	2320      	movs	r3, #32
 800b5f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5fe:	2330      	movs	r3, #48	; 0x30
 800b600:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b7c4 <_vfiprintf_r+0x24c>
 800b604:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b608:	f04f 0901 	mov.w	r9, #1
 800b60c:	4623      	mov	r3, r4
 800b60e:	469a      	mov	sl, r3
 800b610:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b614:	b10a      	cbz	r2, 800b61a <_vfiprintf_r+0xa2>
 800b616:	2a25      	cmp	r2, #37	; 0x25
 800b618:	d1f9      	bne.n	800b60e <_vfiprintf_r+0x96>
 800b61a:	ebba 0b04 	subs.w	fp, sl, r4
 800b61e:	d00b      	beq.n	800b638 <_vfiprintf_r+0xc0>
 800b620:	465b      	mov	r3, fp
 800b622:	4622      	mov	r2, r4
 800b624:	4629      	mov	r1, r5
 800b626:	4630      	mov	r0, r6
 800b628:	f7ff ff94 	bl	800b554 <__sfputs_r>
 800b62c:	3001      	adds	r0, #1
 800b62e:	f000 80aa 	beq.w	800b786 <_vfiprintf_r+0x20e>
 800b632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b634:	445a      	add	r2, fp
 800b636:	9209      	str	r2, [sp, #36]	; 0x24
 800b638:	f89a 3000 	ldrb.w	r3, [sl]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	f000 80a2 	beq.w	800b786 <_vfiprintf_r+0x20e>
 800b642:	2300      	movs	r3, #0
 800b644:	f04f 32ff 	mov.w	r2, #4294967295
 800b648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b64c:	f10a 0a01 	add.w	sl, sl, #1
 800b650:	9304      	str	r3, [sp, #16]
 800b652:	9307      	str	r3, [sp, #28]
 800b654:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b658:	931a      	str	r3, [sp, #104]	; 0x68
 800b65a:	4654      	mov	r4, sl
 800b65c:	2205      	movs	r2, #5
 800b65e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b662:	4858      	ldr	r0, [pc, #352]	; (800b7c4 <_vfiprintf_r+0x24c>)
 800b664:	f7f4 fdc4 	bl	80001f0 <memchr>
 800b668:	9a04      	ldr	r2, [sp, #16]
 800b66a:	b9d8      	cbnz	r0, 800b6a4 <_vfiprintf_r+0x12c>
 800b66c:	06d1      	lsls	r1, r2, #27
 800b66e:	bf44      	itt	mi
 800b670:	2320      	movmi	r3, #32
 800b672:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b676:	0713      	lsls	r3, r2, #28
 800b678:	bf44      	itt	mi
 800b67a:	232b      	movmi	r3, #43	; 0x2b
 800b67c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b680:	f89a 3000 	ldrb.w	r3, [sl]
 800b684:	2b2a      	cmp	r3, #42	; 0x2a
 800b686:	d015      	beq.n	800b6b4 <_vfiprintf_r+0x13c>
 800b688:	9a07      	ldr	r2, [sp, #28]
 800b68a:	4654      	mov	r4, sl
 800b68c:	2000      	movs	r0, #0
 800b68e:	f04f 0c0a 	mov.w	ip, #10
 800b692:	4621      	mov	r1, r4
 800b694:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b698:	3b30      	subs	r3, #48	; 0x30
 800b69a:	2b09      	cmp	r3, #9
 800b69c:	d94e      	bls.n	800b73c <_vfiprintf_r+0x1c4>
 800b69e:	b1b0      	cbz	r0, 800b6ce <_vfiprintf_r+0x156>
 800b6a0:	9207      	str	r2, [sp, #28]
 800b6a2:	e014      	b.n	800b6ce <_vfiprintf_r+0x156>
 800b6a4:	eba0 0308 	sub.w	r3, r0, r8
 800b6a8:	fa09 f303 	lsl.w	r3, r9, r3
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	9304      	str	r3, [sp, #16]
 800b6b0:	46a2      	mov	sl, r4
 800b6b2:	e7d2      	b.n	800b65a <_vfiprintf_r+0xe2>
 800b6b4:	9b03      	ldr	r3, [sp, #12]
 800b6b6:	1d19      	adds	r1, r3, #4
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	9103      	str	r1, [sp, #12]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	bfbb      	ittet	lt
 800b6c0:	425b      	neglt	r3, r3
 800b6c2:	f042 0202 	orrlt.w	r2, r2, #2
 800b6c6:	9307      	strge	r3, [sp, #28]
 800b6c8:	9307      	strlt	r3, [sp, #28]
 800b6ca:	bfb8      	it	lt
 800b6cc:	9204      	strlt	r2, [sp, #16]
 800b6ce:	7823      	ldrb	r3, [r4, #0]
 800b6d0:	2b2e      	cmp	r3, #46	; 0x2e
 800b6d2:	d10c      	bne.n	800b6ee <_vfiprintf_r+0x176>
 800b6d4:	7863      	ldrb	r3, [r4, #1]
 800b6d6:	2b2a      	cmp	r3, #42	; 0x2a
 800b6d8:	d135      	bne.n	800b746 <_vfiprintf_r+0x1ce>
 800b6da:	9b03      	ldr	r3, [sp, #12]
 800b6dc:	1d1a      	adds	r2, r3, #4
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	9203      	str	r2, [sp, #12]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	bfb8      	it	lt
 800b6e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6ea:	3402      	adds	r4, #2
 800b6ec:	9305      	str	r3, [sp, #20]
 800b6ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b7d4 <_vfiprintf_r+0x25c>
 800b6f2:	7821      	ldrb	r1, [r4, #0]
 800b6f4:	2203      	movs	r2, #3
 800b6f6:	4650      	mov	r0, sl
 800b6f8:	f7f4 fd7a 	bl	80001f0 <memchr>
 800b6fc:	b140      	cbz	r0, 800b710 <_vfiprintf_r+0x198>
 800b6fe:	2340      	movs	r3, #64	; 0x40
 800b700:	eba0 000a 	sub.w	r0, r0, sl
 800b704:	fa03 f000 	lsl.w	r0, r3, r0
 800b708:	9b04      	ldr	r3, [sp, #16]
 800b70a:	4303      	orrs	r3, r0
 800b70c:	3401      	adds	r4, #1
 800b70e:	9304      	str	r3, [sp, #16]
 800b710:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b714:	482c      	ldr	r0, [pc, #176]	; (800b7c8 <_vfiprintf_r+0x250>)
 800b716:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b71a:	2206      	movs	r2, #6
 800b71c:	f7f4 fd68 	bl	80001f0 <memchr>
 800b720:	2800      	cmp	r0, #0
 800b722:	d03f      	beq.n	800b7a4 <_vfiprintf_r+0x22c>
 800b724:	4b29      	ldr	r3, [pc, #164]	; (800b7cc <_vfiprintf_r+0x254>)
 800b726:	bb1b      	cbnz	r3, 800b770 <_vfiprintf_r+0x1f8>
 800b728:	9b03      	ldr	r3, [sp, #12]
 800b72a:	3307      	adds	r3, #7
 800b72c:	f023 0307 	bic.w	r3, r3, #7
 800b730:	3308      	adds	r3, #8
 800b732:	9303      	str	r3, [sp, #12]
 800b734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b736:	443b      	add	r3, r7
 800b738:	9309      	str	r3, [sp, #36]	; 0x24
 800b73a:	e767      	b.n	800b60c <_vfiprintf_r+0x94>
 800b73c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b740:	460c      	mov	r4, r1
 800b742:	2001      	movs	r0, #1
 800b744:	e7a5      	b.n	800b692 <_vfiprintf_r+0x11a>
 800b746:	2300      	movs	r3, #0
 800b748:	3401      	adds	r4, #1
 800b74a:	9305      	str	r3, [sp, #20]
 800b74c:	4619      	mov	r1, r3
 800b74e:	f04f 0c0a 	mov.w	ip, #10
 800b752:	4620      	mov	r0, r4
 800b754:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b758:	3a30      	subs	r2, #48	; 0x30
 800b75a:	2a09      	cmp	r2, #9
 800b75c:	d903      	bls.n	800b766 <_vfiprintf_r+0x1ee>
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d0c5      	beq.n	800b6ee <_vfiprintf_r+0x176>
 800b762:	9105      	str	r1, [sp, #20]
 800b764:	e7c3      	b.n	800b6ee <_vfiprintf_r+0x176>
 800b766:	fb0c 2101 	mla	r1, ip, r1, r2
 800b76a:	4604      	mov	r4, r0
 800b76c:	2301      	movs	r3, #1
 800b76e:	e7f0      	b.n	800b752 <_vfiprintf_r+0x1da>
 800b770:	ab03      	add	r3, sp, #12
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	462a      	mov	r2, r5
 800b776:	4b16      	ldr	r3, [pc, #88]	; (800b7d0 <_vfiprintf_r+0x258>)
 800b778:	a904      	add	r1, sp, #16
 800b77a:	4630      	mov	r0, r6
 800b77c:	f7fd fde6 	bl	800934c <_printf_float>
 800b780:	4607      	mov	r7, r0
 800b782:	1c78      	adds	r0, r7, #1
 800b784:	d1d6      	bne.n	800b734 <_vfiprintf_r+0x1bc>
 800b786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b788:	07d9      	lsls	r1, r3, #31
 800b78a:	d405      	bmi.n	800b798 <_vfiprintf_r+0x220>
 800b78c:	89ab      	ldrh	r3, [r5, #12]
 800b78e:	059a      	lsls	r2, r3, #22
 800b790:	d402      	bmi.n	800b798 <_vfiprintf_r+0x220>
 800b792:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b794:	f000 faaf 	bl	800bcf6 <__retarget_lock_release_recursive>
 800b798:	89ab      	ldrh	r3, [r5, #12]
 800b79a:	065b      	lsls	r3, r3, #25
 800b79c:	f53f af12 	bmi.w	800b5c4 <_vfiprintf_r+0x4c>
 800b7a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7a2:	e711      	b.n	800b5c8 <_vfiprintf_r+0x50>
 800b7a4:	ab03      	add	r3, sp, #12
 800b7a6:	9300      	str	r3, [sp, #0]
 800b7a8:	462a      	mov	r2, r5
 800b7aa:	4b09      	ldr	r3, [pc, #36]	; (800b7d0 <_vfiprintf_r+0x258>)
 800b7ac:	a904      	add	r1, sp, #16
 800b7ae:	4630      	mov	r0, r6
 800b7b0:	f7fe f870 	bl	8009894 <_printf_i>
 800b7b4:	e7e4      	b.n	800b780 <_vfiprintf_r+0x208>
 800b7b6:	bf00      	nop
 800b7b8:	0800c6a4 	.word	0x0800c6a4
 800b7bc:	0800c6c4 	.word	0x0800c6c4
 800b7c0:	0800c684 	.word	0x0800c684
 800b7c4:	0800c52c 	.word	0x0800c52c
 800b7c8:	0800c536 	.word	0x0800c536
 800b7cc:	0800934d 	.word	0x0800934d
 800b7d0:	0800b555 	.word	0x0800b555
 800b7d4:	0800c532 	.word	0x0800c532

0800b7d8 <__swbuf_r>:
 800b7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7da:	460e      	mov	r6, r1
 800b7dc:	4614      	mov	r4, r2
 800b7de:	4605      	mov	r5, r0
 800b7e0:	b118      	cbz	r0, 800b7ea <__swbuf_r+0x12>
 800b7e2:	6983      	ldr	r3, [r0, #24]
 800b7e4:	b90b      	cbnz	r3, 800b7ea <__swbuf_r+0x12>
 800b7e6:	f000 f9e7 	bl	800bbb8 <__sinit>
 800b7ea:	4b21      	ldr	r3, [pc, #132]	; (800b870 <__swbuf_r+0x98>)
 800b7ec:	429c      	cmp	r4, r3
 800b7ee:	d12b      	bne.n	800b848 <__swbuf_r+0x70>
 800b7f0:	686c      	ldr	r4, [r5, #4]
 800b7f2:	69a3      	ldr	r3, [r4, #24]
 800b7f4:	60a3      	str	r3, [r4, #8]
 800b7f6:	89a3      	ldrh	r3, [r4, #12]
 800b7f8:	071a      	lsls	r2, r3, #28
 800b7fa:	d52f      	bpl.n	800b85c <__swbuf_r+0x84>
 800b7fc:	6923      	ldr	r3, [r4, #16]
 800b7fe:	b36b      	cbz	r3, 800b85c <__swbuf_r+0x84>
 800b800:	6923      	ldr	r3, [r4, #16]
 800b802:	6820      	ldr	r0, [r4, #0]
 800b804:	1ac0      	subs	r0, r0, r3
 800b806:	6963      	ldr	r3, [r4, #20]
 800b808:	b2f6      	uxtb	r6, r6
 800b80a:	4283      	cmp	r3, r0
 800b80c:	4637      	mov	r7, r6
 800b80e:	dc04      	bgt.n	800b81a <__swbuf_r+0x42>
 800b810:	4621      	mov	r1, r4
 800b812:	4628      	mov	r0, r5
 800b814:	f000 f93c 	bl	800ba90 <_fflush_r>
 800b818:	bb30      	cbnz	r0, 800b868 <__swbuf_r+0x90>
 800b81a:	68a3      	ldr	r3, [r4, #8]
 800b81c:	3b01      	subs	r3, #1
 800b81e:	60a3      	str	r3, [r4, #8]
 800b820:	6823      	ldr	r3, [r4, #0]
 800b822:	1c5a      	adds	r2, r3, #1
 800b824:	6022      	str	r2, [r4, #0]
 800b826:	701e      	strb	r6, [r3, #0]
 800b828:	6963      	ldr	r3, [r4, #20]
 800b82a:	3001      	adds	r0, #1
 800b82c:	4283      	cmp	r3, r0
 800b82e:	d004      	beq.n	800b83a <__swbuf_r+0x62>
 800b830:	89a3      	ldrh	r3, [r4, #12]
 800b832:	07db      	lsls	r3, r3, #31
 800b834:	d506      	bpl.n	800b844 <__swbuf_r+0x6c>
 800b836:	2e0a      	cmp	r6, #10
 800b838:	d104      	bne.n	800b844 <__swbuf_r+0x6c>
 800b83a:	4621      	mov	r1, r4
 800b83c:	4628      	mov	r0, r5
 800b83e:	f000 f927 	bl	800ba90 <_fflush_r>
 800b842:	b988      	cbnz	r0, 800b868 <__swbuf_r+0x90>
 800b844:	4638      	mov	r0, r7
 800b846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b848:	4b0a      	ldr	r3, [pc, #40]	; (800b874 <__swbuf_r+0x9c>)
 800b84a:	429c      	cmp	r4, r3
 800b84c:	d101      	bne.n	800b852 <__swbuf_r+0x7a>
 800b84e:	68ac      	ldr	r4, [r5, #8]
 800b850:	e7cf      	b.n	800b7f2 <__swbuf_r+0x1a>
 800b852:	4b09      	ldr	r3, [pc, #36]	; (800b878 <__swbuf_r+0xa0>)
 800b854:	429c      	cmp	r4, r3
 800b856:	bf08      	it	eq
 800b858:	68ec      	ldreq	r4, [r5, #12]
 800b85a:	e7ca      	b.n	800b7f2 <__swbuf_r+0x1a>
 800b85c:	4621      	mov	r1, r4
 800b85e:	4628      	mov	r0, r5
 800b860:	f000 f81a 	bl	800b898 <__swsetup_r>
 800b864:	2800      	cmp	r0, #0
 800b866:	d0cb      	beq.n	800b800 <__swbuf_r+0x28>
 800b868:	f04f 37ff 	mov.w	r7, #4294967295
 800b86c:	e7ea      	b.n	800b844 <__swbuf_r+0x6c>
 800b86e:	bf00      	nop
 800b870:	0800c6a4 	.word	0x0800c6a4
 800b874:	0800c6c4 	.word	0x0800c6c4
 800b878:	0800c684 	.word	0x0800c684

0800b87c <__ascii_wctomb>:
 800b87c:	b149      	cbz	r1, 800b892 <__ascii_wctomb+0x16>
 800b87e:	2aff      	cmp	r2, #255	; 0xff
 800b880:	bf85      	ittet	hi
 800b882:	238a      	movhi	r3, #138	; 0x8a
 800b884:	6003      	strhi	r3, [r0, #0]
 800b886:	700a      	strbls	r2, [r1, #0]
 800b888:	f04f 30ff 	movhi.w	r0, #4294967295
 800b88c:	bf98      	it	ls
 800b88e:	2001      	movls	r0, #1
 800b890:	4770      	bx	lr
 800b892:	4608      	mov	r0, r1
 800b894:	4770      	bx	lr
	...

0800b898 <__swsetup_r>:
 800b898:	4b32      	ldr	r3, [pc, #200]	; (800b964 <__swsetup_r+0xcc>)
 800b89a:	b570      	push	{r4, r5, r6, lr}
 800b89c:	681d      	ldr	r5, [r3, #0]
 800b89e:	4606      	mov	r6, r0
 800b8a0:	460c      	mov	r4, r1
 800b8a2:	b125      	cbz	r5, 800b8ae <__swsetup_r+0x16>
 800b8a4:	69ab      	ldr	r3, [r5, #24]
 800b8a6:	b913      	cbnz	r3, 800b8ae <__swsetup_r+0x16>
 800b8a8:	4628      	mov	r0, r5
 800b8aa:	f000 f985 	bl	800bbb8 <__sinit>
 800b8ae:	4b2e      	ldr	r3, [pc, #184]	; (800b968 <__swsetup_r+0xd0>)
 800b8b0:	429c      	cmp	r4, r3
 800b8b2:	d10f      	bne.n	800b8d4 <__swsetup_r+0x3c>
 800b8b4:	686c      	ldr	r4, [r5, #4]
 800b8b6:	89a3      	ldrh	r3, [r4, #12]
 800b8b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8bc:	0719      	lsls	r1, r3, #28
 800b8be:	d42c      	bmi.n	800b91a <__swsetup_r+0x82>
 800b8c0:	06dd      	lsls	r5, r3, #27
 800b8c2:	d411      	bmi.n	800b8e8 <__swsetup_r+0x50>
 800b8c4:	2309      	movs	r3, #9
 800b8c6:	6033      	str	r3, [r6, #0]
 800b8c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b8cc:	81a3      	strh	r3, [r4, #12]
 800b8ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d2:	e03e      	b.n	800b952 <__swsetup_r+0xba>
 800b8d4:	4b25      	ldr	r3, [pc, #148]	; (800b96c <__swsetup_r+0xd4>)
 800b8d6:	429c      	cmp	r4, r3
 800b8d8:	d101      	bne.n	800b8de <__swsetup_r+0x46>
 800b8da:	68ac      	ldr	r4, [r5, #8]
 800b8dc:	e7eb      	b.n	800b8b6 <__swsetup_r+0x1e>
 800b8de:	4b24      	ldr	r3, [pc, #144]	; (800b970 <__swsetup_r+0xd8>)
 800b8e0:	429c      	cmp	r4, r3
 800b8e2:	bf08      	it	eq
 800b8e4:	68ec      	ldreq	r4, [r5, #12]
 800b8e6:	e7e6      	b.n	800b8b6 <__swsetup_r+0x1e>
 800b8e8:	0758      	lsls	r0, r3, #29
 800b8ea:	d512      	bpl.n	800b912 <__swsetup_r+0x7a>
 800b8ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8ee:	b141      	cbz	r1, 800b902 <__swsetup_r+0x6a>
 800b8f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8f4:	4299      	cmp	r1, r3
 800b8f6:	d002      	beq.n	800b8fe <__swsetup_r+0x66>
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	f7ff fb31 	bl	800af60 <_free_r>
 800b8fe:	2300      	movs	r3, #0
 800b900:	6363      	str	r3, [r4, #52]	; 0x34
 800b902:	89a3      	ldrh	r3, [r4, #12]
 800b904:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b908:	81a3      	strh	r3, [r4, #12]
 800b90a:	2300      	movs	r3, #0
 800b90c:	6063      	str	r3, [r4, #4]
 800b90e:	6923      	ldr	r3, [r4, #16]
 800b910:	6023      	str	r3, [r4, #0]
 800b912:	89a3      	ldrh	r3, [r4, #12]
 800b914:	f043 0308 	orr.w	r3, r3, #8
 800b918:	81a3      	strh	r3, [r4, #12]
 800b91a:	6923      	ldr	r3, [r4, #16]
 800b91c:	b94b      	cbnz	r3, 800b932 <__swsetup_r+0x9a>
 800b91e:	89a3      	ldrh	r3, [r4, #12]
 800b920:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b928:	d003      	beq.n	800b932 <__swsetup_r+0x9a>
 800b92a:	4621      	mov	r1, r4
 800b92c:	4630      	mov	r0, r6
 800b92e:	f000 fa09 	bl	800bd44 <__smakebuf_r>
 800b932:	89a0      	ldrh	r0, [r4, #12]
 800b934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b938:	f010 0301 	ands.w	r3, r0, #1
 800b93c:	d00a      	beq.n	800b954 <__swsetup_r+0xbc>
 800b93e:	2300      	movs	r3, #0
 800b940:	60a3      	str	r3, [r4, #8]
 800b942:	6963      	ldr	r3, [r4, #20]
 800b944:	425b      	negs	r3, r3
 800b946:	61a3      	str	r3, [r4, #24]
 800b948:	6923      	ldr	r3, [r4, #16]
 800b94a:	b943      	cbnz	r3, 800b95e <__swsetup_r+0xc6>
 800b94c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b950:	d1ba      	bne.n	800b8c8 <__swsetup_r+0x30>
 800b952:	bd70      	pop	{r4, r5, r6, pc}
 800b954:	0781      	lsls	r1, r0, #30
 800b956:	bf58      	it	pl
 800b958:	6963      	ldrpl	r3, [r4, #20]
 800b95a:	60a3      	str	r3, [r4, #8]
 800b95c:	e7f4      	b.n	800b948 <__swsetup_r+0xb0>
 800b95e:	2000      	movs	r0, #0
 800b960:	e7f7      	b.n	800b952 <__swsetup_r+0xba>
 800b962:	bf00      	nop
 800b964:	20000010 	.word	0x20000010
 800b968:	0800c6a4 	.word	0x0800c6a4
 800b96c:	0800c6c4 	.word	0x0800c6c4
 800b970:	0800c684 	.word	0x0800c684

0800b974 <abort>:
 800b974:	b508      	push	{r3, lr}
 800b976:	2006      	movs	r0, #6
 800b978:	f000 fa54 	bl	800be24 <raise>
 800b97c:	2001      	movs	r0, #1
 800b97e:	f7f6 fba7 	bl	80020d0 <_exit>
	...

0800b984 <__sflush_r>:
 800b984:	898a      	ldrh	r2, [r1, #12]
 800b986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b98a:	4605      	mov	r5, r0
 800b98c:	0710      	lsls	r0, r2, #28
 800b98e:	460c      	mov	r4, r1
 800b990:	d458      	bmi.n	800ba44 <__sflush_r+0xc0>
 800b992:	684b      	ldr	r3, [r1, #4]
 800b994:	2b00      	cmp	r3, #0
 800b996:	dc05      	bgt.n	800b9a4 <__sflush_r+0x20>
 800b998:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	dc02      	bgt.n	800b9a4 <__sflush_r+0x20>
 800b99e:	2000      	movs	r0, #0
 800b9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9a6:	2e00      	cmp	r6, #0
 800b9a8:	d0f9      	beq.n	800b99e <__sflush_r+0x1a>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b9b0:	682f      	ldr	r7, [r5, #0]
 800b9b2:	602b      	str	r3, [r5, #0]
 800b9b4:	d032      	beq.n	800ba1c <__sflush_r+0x98>
 800b9b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b9b8:	89a3      	ldrh	r3, [r4, #12]
 800b9ba:	075a      	lsls	r2, r3, #29
 800b9bc:	d505      	bpl.n	800b9ca <__sflush_r+0x46>
 800b9be:	6863      	ldr	r3, [r4, #4]
 800b9c0:	1ac0      	subs	r0, r0, r3
 800b9c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9c4:	b10b      	cbz	r3, 800b9ca <__sflush_r+0x46>
 800b9c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9c8:	1ac0      	subs	r0, r0, r3
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9d0:	6a21      	ldr	r1, [r4, #32]
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	47b0      	blx	r6
 800b9d6:	1c43      	adds	r3, r0, #1
 800b9d8:	89a3      	ldrh	r3, [r4, #12]
 800b9da:	d106      	bne.n	800b9ea <__sflush_r+0x66>
 800b9dc:	6829      	ldr	r1, [r5, #0]
 800b9de:	291d      	cmp	r1, #29
 800b9e0:	d82c      	bhi.n	800ba3c <__sflush_r+0xb8>
 800b9e2:	4a2a      	ldr	r2, [pc, #168]	; (800ba8c <__sflush_r+0x108>)
 800b9e4:	40ca      	lsrs	r2, r1
 800b9e6:	07d6      	lsls	r6, r2, #31
 800b9e8:	d528      	bpl.n	800ba3c <__sflush_r+0xb8>
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	6062      	str	r2, [r4, #4]
 800b9ee:	04d9      	lsls	r1, r3, #19
 800b9f0:	6922      	ldr	r2, [r4, #16]
 800b9f2:	6022      	str	r2, [r4, #0]
 800b9f4:	d504      	bpl.n	800ba00 <__sflush_r+0x7c>
 800b9f6:	1c42      	adds	r2, r0, #1
 800b9f8:	d101      	bne.n	800b9fe <__sflush_r+0x7a>
 800b9fa:	682b      	ldr	r3, [r5, #0]
 800b9fc:	b903      	cbnz	r3, 800ba00 <__sflush_r+0x7c>
 800b9fe:	6560      	str	r0, [r4, #84]	; 0x54
 800ba00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba02:	602f      	str	r7, [r5, #0]
 800ba04:	2900      	cmp	r1, #0
 800ba06:	d0ca      	beq.n	800b99e <__sflush_r+0x1a>
 800ba08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba0c:	4299      	cmp	r1, r3
 800ba0e:	d002      	beq.n	800ba16 <__sflush_r+0x92>
 800ba10:	4628      	mov	r0, r5
 800ba12:	f7ff faa5 	bl	800af60 <_free_r>
 800ba16:	2000      	movs	r0, #0
 800ba18:	6360      	str	r0, [r4, #52]	; 0x34
 800ba1a:	e7c1      	b.n	800b9a0 <__sflush_r+0x1c>
 800ba1c:	6a21      	ldr	r1, [r4, #32]
 800ba1e:	2301      	movs	r3, #1
 800ba20:	4628      	mov	r0, r5
 800ba22:	47b0      	blx	r6
 800ba24:	1c41      	adds	r1, r0, #1
 800ba26:	d1c7      	bne.n	800b9b8 <__sflush_r+0x34>
 800ba28:	682b      	ldr	r3, [r5, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d0c4      	beq.n	800b9b8 <__sflush_r+0x34>
 800ba2e:	2b1d      	cmp	r3, #29
 800ba30:	d001      	beq.n	800ba36 <__sflush_r+0xb2>
 800ba32:	2b16      	cmp	r3, #22
 800ba34:	d101      	bne.n	800ba3a <__sflush_r+0xb6>
 800ba36:	602f      	str	r7, [r5, #0]
 800ba38:	e7b1      	b.n	800b99e <__sflush_r+0x1a>
 800ba3a:	89a3      	ldrh	r3, [r4, #12]
 800ba3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba40:	81a3      	strh	r3, [r4, #12]
 800ba42:	e7ad      	b.n	800b9a0 <__sflush_r+0x1c>
 800ba44:	690f      	ldr	r7, [r1, #16]
 800ba46:	2f00      	cmp	r7, #0
 800ba48:	d0a9      	beq.n	800b99e <__sflush_r+0x1a>
 800ba4a:	0793      	lsls	r3, r2, #30
 800ba4c:	680e      	ldr	r6, [r1, #0]
 800ba4e:	bf08      	it	eq
 800ba50:	694b      	ldreq	r3, [r1, #20]
 800ba52:	600f      	str	r7, [r1, #0]
 800ba54:	bf18      	it	ne
 800ba56:	2300      	movne	r3, #0
 800ba58:	eba6 0807 	sub.w	r8, r6, r7
 800ba5c:	608b      	str	r3, [r1, #8]
 800ba5e:	f1b8 0f00 	cmp.w	r8, #0
 800ba62:	dd9c      	ble.n	800b99e <__sflush_r+0x1a>
 800ba64:	6a21      	ldr	r1, [r4, #32]
 800ba66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba68:	4643      	mov	r3, r8
 800ba6a:	463a      	mov	r2, r7
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	47b0      	blx	r6
 800ba70:	2800      	cmp	r0, #0
 800ba72:	dc06      	bgt.n	800ba82 <__sflush_r+0xfe>
 800ba74:	89a3      	ldrh	r3, [r4, #12]
 800ba76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba7a:	81a3      	strh	r3, [r4, #12]
 800ba7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba80:	e78e      	b.n	800b9a0 <__sflush_r+0x1c>
 800ba82:	4407      	add	r7, r0
 800ba84:	eba8 0800 	sub.w	r8, r8, r0
 800ba88:	e7e9      	b.n	800ba5e <__sflush_r+0xda>
 800ba8a:	bf00      	nop
 800ba8c:	20400001 	.word	0x20400001

0800ba90 <_fflush_r>:
 800ba90:	b538      	push	{r3, r4, r5, lr}
 800ba92:	690b      	ldr	r3, [r1, #16]
 800ba94:	4605      	mov	r5, r0
 800ba96:	460c      	mov	r4, r1
 800ba98:	b913      	cbnz	r3, 800baa0 <_fflush_r+0x10>
 800ba9a:	2500      	movs	r5, #0
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	bd38      	pop	{r3, r4, r5, pc}
 800baa0:	b118      	cbz	r0, 800baaa <_fflush_r+0x1a>
 800baa2:	6983      	ldr	r3, [r0, #24]
 800baa4:	b90b      	cbnz	r3, 800baaa <_fflush_r+0x1a>
 800baa6:	f000 f887 	bl	800bbb8 <__sinit>
 800baaa:	4b14      	ldr	r3, [pc, #80]	; (800bafc <_fflush_r+0x6c>)
 800baac:	429c      	cmp	r4, r3
 800baae:	d11b      	bne.n	800bae8 <_fflush_r+0x58>
 800bab0:	686c      	ldr	r4, [r5, #4]
 800bab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d0ef      	beq.n	800ba9a <_fflush_r+0xa>
 800baba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800babc:	07d0      	lsls	r0, r2, #31
 800babe:	d404      	bmi.n	800baca <_fflush_r+0x3a>
 800bac0:	0599      	lsls	r1, r3, #22
 800bac2:	d402      	bmi.n	800baca <_fflush_r+0x3a>
 800bac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bac6:	f000 f915 	bl	800bcf4 <__retarget_lock_acquire_recursive>
 800baca:	4628      	mov	r0, r5
 800bacc:	4621      	mov	r1, r4
 800bace:	f7ff ff59 	bl	800b984 <__sflush_r>
 800bad2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bad4:	07da      	lsls	r2, r3, #31
 800bad6:	4605      	mov	r5, r0
 800bad8:	d4e0      	bmi.n	800ba9c <_fflush_r+0xc>
 800bada:	89a3      	ldrh	r3, [r4, #12]
 800badc:	059b      	lsls	r3, r3, #22
 800bade:	d4dd      	bmi.n	800ba9c <_fflush_r+0xc>
 800bae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bae2:	f000 f908 	bl	800bcf6 <__retarget_lock_release_recursive>
 800bae6:	e7d9      	b.n	800ba9c <_fflush_r+0xc>
 800bae8:	4b05      	ldr	r3, [pc, #20]	; (800bb00 <_fflush_r+0x70>)
 800baea:	429c      	cmp	r4, r3
 800baec:	d101      	bne.n	800baf2 <_fflush_r+0x62>
 800baee:	68ac      	ldr	r4, [r5, #8]
 800baf0:	e7df      	b.n	800bab2 <_fflush_r+0x22>
 800baf2:	4b04      	ldr	r3, [pc, #16]	; (800bb04 <_fflush_r+0x74>)
 800baf4:	429c      	cmp	r4, r3
 800baf6:	bf08      	it	eq
 800baf8:	68ec      	ldreq	r4, [r5, #12]
 800bafa:	e7da      	b.n	800bab2 <_fflush_r+0x22>
 800bafc:	0800c6a4 	.word	0x0800c6a4
 800bb00:	0800c6c4 	.word	0x0800c6c4
 800bb04:	0800c684 	.word	0x0800c684

0800bb08 <std>:
 800bb08:	2300      	movs	r3, #0
 800bb0a:	b510      	push	{r4, lr}
 800bb0c:	4604      	mov	r4, r0
 800bb0e:	e9c0 3300 	strd	r3, r3, [r0]
 800bb12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb16:	6083      	str	r3, [r0, #8]
 800bb18:	8181      	strh	r1, [r0, #12]
 800bb1a:	6643      	str	r3, [r0, #100]	; 0x64
 800bb1c:	81c2      	strh	r2, [r0, #14]
 800bb1e:	6183      	str	r3, [r0, #24]
 800bb20:	4619      	mov	r1, r3
 800bb22:	2208      	movs	r2, #8
 800bb24:	305c      	adds	r0, #92	; 0x5c
 800bb26:	f7fd fb69 	bl	80091fc <memset>
 800bb2a:	4b05      	ldr	r3, [pc, #20]	; (800bb40 <std+0x38>)
 800bb2c:	6263      	str	r3, [r4, #36]	; 0x24
 800bb2e:	4b05      	ldr	r3, [pc, #20]	; (800bb44 <std+0x3c>)
 800bb30:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb32:	4b05      	ldr	r3, [pc, #20]	; (800bb48 <std+0x40>)
 800bb34:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb36:	4b05      	ldr	r3, [pc, #20]	; (800bb4c <std+0x44>)
 800bb38:	6224      	str	r4, [r4, #32]
 800bb3a:	6323      	str	r3, [r4, #48]	; 0x30
 800bb3c:	bd10      	pop	{r4, pc}
 800bb3e:	bf00      	nop
 800bb40:	0800be5d 	.word	0x0800be5d
 800bb44:	0800be7f 	.word	0x0800be7f
 800bb48:	0800beb7 	.word	0x0800beb7
 800bb4c:	0800bedb 	.word	0x0800bedb

0800bb50 <_cleanup_r>:
 800bb50:	4901      	ldr	r1, [pc, #4]	; (800bb58 <_cleanup_r+0x8>)
 800bb52:	f000 b8af 	b.w	800bcb4 <_fwalk_reent>
 800bb56:	bf00      	nop
 800bb58:	0800ba91 	.word	0x0800ba91

0800bb5c <__sfmoreglue>:
 800bb5c:	b570      	push	{r4, r5, r6, lr}
 800bb5e:	2268      	movs	r2, #104	; 0x68
 800bb60:	1e4d      	subs	r5, r1, #1
 800bb62:	4355      	muls	r5, r2
 800bb64:	460e      	mov	r6, r1
 800bb66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bb6a:	f7ff fa65 	bl	800b038 <_malloc_r>
 800bb6e:	4604      	mov	r4, r0
 800bb70:	b140      	cbz	r0, 800bb84 <__sfmoreglue+0x28>
 800bb72:	2100      	movs	r1, #0
 800bb74:	e9c0 1600 	strd	r1, r6, [r0]
 800bb78:	300c      	adds	r0, #12
 800bb7a:	60a0      	str	r0, [r4, #8]
 800bb7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bb80:	f7fd fb3c 	bl	80091fc <memset>
 800bb84:	4620      	mov	r0, r4
 800bb86:	bd70      	pop	{r4, r5, r6, pc}

0800bb88 <__sfp_lock_acquire>:
 800bb88:	4801      	ldr	r0, [pc, #4]	; (800bb90 <__sfp_lock_acquire+0x8>)
 800bb8a:	f000 b8b3 	b.w	800bcf4 <__retarget_lock_acquire_recursive>
 800bb8e:	bf00      	nop
 800bb90:	20004ba1 	.word	0x20004ba1

0800bb94 <__sfp_lock_release>:
 800bb94:	4801      	ldr	r0, [pc, #4]	; (800bb9c <__sfp_lock_release+0x8>)
 800bb96:	f000 b8ae 	b.w	800bcf6 <__retarget_lock_release_recursive>
 800bb9a:	bf00      	nop
 800bb9c:	20004ba1 	.word	0x20004ba1

0800bba0 <__sinit_lock_acquire>:
 800bba0:	4801      	ldr	r0, [pc, #4]	; (800bba8 <__sinit_lock_acquire+0x8>)
 800bba2:	f000 b8a7 	b.w	800bcf4 <__retarget_lock_acquire_recursive>
 800bba6:	bf00      	nop
 800bba8:	20004ba2 	.word	0x20004ba2

0800bbac <__sinit_lock_release>:
 800bbac:	4801      	ldr	r0, [pc, #4]	; (800bbb4 <__sinit_lock_release+0x8>)
 800bbae:	f000 b8a2 	b.w	800bcf6 <__retarget_lock_release_recursive>
 800bbb2:	bf00      	nop
 800bbb4:	20004ba2 	.word	0x20004ba2

0800bbb8 <__sinit>:
 800bbb8:	b510      	push	{r4, lr}
 800bbba:	4604      	mov	r4, r0
 800bbbc:	f7ff fff0 	bl	800bba0 <__sinit_lock_acquire>
 800bbc0:	69a3      	ldr	r3, [r4, #24]
 800bbc2:	b11b      	cbz	r3, 800bbcc <__sinit+0x14>
 800bbc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbc8:	f7ff bff0 	b.w	800bbac <__sinit_lock_release>
 800bbcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bbd0:	6523      	str	r3, [r4, #80]	; 0x50
 800bbd2:	4b13      	ldr	r3, [pc, #76]	; (800bc20 <__sinit+0x68>)
 800bbd4:	4a13      	ldr	r2, [pc, #76]	; (800bc24 <__sinit+0x6c>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	62a2      	str	r2, [r4, #40]	; 0x28
 800bbda:	42a3      	cmp	r3, r4
 800bbdc:	bf04      	itt	eq
 800bbde:	2301      	moveq	r3, #1
 800bbe0:	61a3      	streq	r3, [r4, #24]
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	f000 f820 	bl	800bc28 <__sfp>
 800bbe8:	6060      	str	r0, [r4, #4]
 800bbea:	4620      	mov	r0, r4
 800bbec:	f000 f81c 	bl	800bc28 <__sfp>
 800bbf0:	60a0      	str	r0, [r4, #8]
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	f000 f818 	bl	800bc28 <__sfp>
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	60e0      	str	r0, [r4, #12]
 800bbfc:	2104      	movs	r1, #4
 800bbfe:	6860      	ldr	r0, [r4, #4]
 800bc00:	f7ff ff82 	bl	800bb08 <std>
 800bc04:	68a0      	ldr	r0, [r4, #8]
 800bc06:	2201      	movs	r2, #1
 800bc08:	2109      	movs	r1, #9
 800bc0a:	f7ff ff7d 	bl	800bb08 <std>
 800bc0e:	68e0      	ldr	r0, [r4, #12]
 800bc10:	2202      	movs	r2, #2
 800bc12:	2112      	movs	r1, #18
 800bc14:	f7ff ff78 	bl	800bb08 <std>
 800bc18:	2301      	movs	r3, #1
 800bc1a:	61a3      	str	r3, [r4, #24]
 800bc1c:	e7d2      	b.n	800bbc4 <__sinit+0xc>
 800bc1e:	bf00      	nop
 800bc20:	0800c30c 	.word	0x0800c30c
 800bc24:	0800bb51 	.word	0x0800bb51

0800bc28 <__sfp>:
 800bc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2a:	4607      	mov	r7, r0
 800bc2c:	f7ff ffac 	bl	800bb88 <__sfp_lock_acquire>
 800bc30:	4b1e      	ldr	r3, [pc, #120]	; (800bcac <__sfp+0x84>)
 800bc32:	681e      	ldr	r6, [r3, #0]
 800bc34:	69b3      	ldr	r3, [r6, #24]
 800bc36:	b913      	cbnz	r3, 800bc3e <__sfp+0x16>
 800bc38:	4630      	mov	r0, r6
 800bc3a:	f7ff ffbd 	bl	800bbb8 <__sinit>
 800bc3e:	3648      	adds	r6, #72	; 0x48
 800bc40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc44:	3b01      	subs	r3, #1
 800bc46:	d503      	bpl.n	800bc50 <__sfp+0x28>
 800bc48:	6833      	ldr	r3, [r6, #0]
 800bc4a:	b30b      	cbz	r3, 800bc90 <__sfp+0x68>
 800bc4c:	6836      	ldr	r6, [r6, #0]
 800bc4e:	e7f7      	b.n	800bc40 <__sfp+0x18>
 800bc50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc54:	b9d5      	cbnz	r5, 800bc8c <__sfp+0x64>
 800bc56:	4b16      	ldr	r3, [pc, #88]	; (800bcb0 <__sfp+0x88>)
 800bc58:	60e3      	str	r3, [r4, #12]
 800bc5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc5e:	6665      	str	r5, [r4, #100]	; 0x64
 800bc60:	f000 f847 	bl	800bcf2 <__retarget_lock_init_recursive>
 800bc64:	f7ff ff96 	bl	800bb94 <__sfp_lock_release>
 800bc68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bc6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bc70:	6025      	str	r5, [r4, #0]
 800bc72:	61a5      	str	r5, [r4, #24]
 800bc74:	2208      	movs	r2, #8
 800bc76:	4629      	mov	r1, r5
 800bc78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bc7c:	f7fd fabe 	bl	80091fc <memset>
 800bc80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bc84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bc88:	4620      	mov	r0, r4
 800bc8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc8c:	3468      	adds	r4, #104	; 0x68
 800bc8e:	e7d9      	b.n	800bc44 <__sfp+0x1c>
 800bc90:	2104      	movs	r1, #4
 800bc92:	4638      	mov	r0, r7
 800bc94:	f7ff ff62 	bl	800bb5c <__sfmoreglue>
 800bc98:	4604      	mov	r4, r0
 800bc9a:	6030      	str	r0, [r6, #0]
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	d1d5      	bne.n	800bc4c <__sfp+0x24>
 800bca0:	f7ff ff78 	bl	800bb94 <__sfp_lock_release>
 800bca4:	230c      	movs	r3, #12
 800bca6:	603b      	str	r3, [r7, #0]
 800bca8:	e7ee      	b.n	800bc88 <__sfp+0x60>
 800bcaa:	bf00      	nop
 800bcac:	0800c30c 	.word	0x0800c30c
 800bcb0:	ffff0001 	.word	0xffff0001

0800bcb4 <_fwalk_reent>:
 800bcb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcb8:	4606      	mov	r6, r0
 800bcba:	4688      	mov	r8, r1
 800bcbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bcc0:	2700      	movs	r7, #0
 800bcc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcc6:	f1b9 0901 	subs.w	r9, r9, #1
 800bcca:	d505      	bpl.n	800bcd8 <_fwalk_reent+0x24>
 800bccc:	6824      	ldr	r4, [r4, #0]
 800bcce:	2c00      	cmp	r4, #0
 800bcd0:	d1f7      	bne.n	800bcc2 <_fwalk_reent+0xe>
 800bcd2:	4638      	mov	r0, r7
 800bcd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcd8:	89ab      	ldrh	r3, [r5, #12]
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d907      	bls.n	800bcee <_fwalk_reent+0x3a>
 800bcde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bce2:	3301      	adds	r3, #1
 800bce4:	d003      	beq.n	800bcee <_fwalk_reent+0x3a>
 800bce6:	4629      	mov	r1, r5
 800bce8:	4630      	mov	r0, r6
 800bcea:	47c0      	blx	r8
 800bcec:	4307      	orrs	r7, r0
 800bcee:	3568      	adds	r5, #104	; 0x68
 800bcf0:	e7e9      	b.n	800bcc6 <_fwalk_reent+0x12>

0800bcf2 <__retarget_lock_init_recursive>:
 800bcf2:	4770      	bx	lr

0800bcf4 <__retarget_lock_acquire_recursive>:
 800bcf4:	4770      	bx	lr

0800bcf6 <__retarget_lock_release_recursive>:
 800bcf6:	4770      	bx	lr

0800bcf8 <__swhatbuf_r>:
 800bcf8:	b570      	push	{r4, r5, r6, lr}
 800bcfa:	460e      	mov	r6, r1
 800bcfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd00:	2900      	cmp	r1, #0
 800bd02:	b096      	sub	sp, #88	; 0x58
 800bd04:	4614      	mov	r4, r2
 800bd06:	461d      	mov	r5, r3
 800bd08:	da08      	bge.n	800bd1c <__swhatbuf_r+0x24>
 800bd0a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	602a      	str	r2, [r5, #0]
 800bd12:	061a      	lsls	r2, r3, #24
 800bd14:	d410      	bmi.n	800bd38 <__swhatbuf_r+0x40>
 800bd16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd1a:	e00e      	b.n	800bd3a <__swhatbuf_r+0x42>
 800bd1c:	466a      	mov	r2, sp
 800bd1e:	f000 f903 	bl	800bf28 <_fstat_r>
 800bd22:	2800      	cmp	r0, #0
 800bd24:	dbf1      	blt.n	800bd0a <__swhatbuf_r+0x12>
 800bd26:	9a01      	ldr	r2, [sp, #4]
 800bd28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bd2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd30:	425a      	negs	r2, r3
 800bd32:	415a      	adcs	r2, r3
 800bd34:	602a      	str	r2, [r5, #0]
 800bd36:	e7ee      	b.n	800bd16 <__swhatbuf_r+0x1e>
 800bd38:	2340      	movs	r3, #64	; 0x40
 800bd3a:	2000      	movs	r0, #0
 800bd3c:	6023      	str	r3, [r4, #0]
 800bd3e:	b016      	add	sp, #88	; 0x58
 800bd40:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bd44 <__smakebuf_r>:
 800bd44:	898b      	ldrh	r3, [r1, #12]
 800bd46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd48:	079d      	lsls	r5, r3, #30
 800bd4a:	4606      	mov	r6, r0
 800bd4c:	460c      	mov	r4, r1
 800bd4e:	d507      	bpl.n	800bd60 <__smakebuf_r+0x1c>
 800bd50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd54:	6023      	str	r3, [r4, #0]
 800bd56:	6123      	str	r3, [r4, #16]
 800bd58:	2301      	movs	r3, #1
 800bd5a:	6163      	str	r3, [r4, #20]
 800bd5c:	b002      	add	sp, #8
 800bd5e:	bd70      	pop	{r4, r5, r6, pc}
 800bd60:	ab01      	add	r3, sp, #4
 800bd62:	466a      	mov	r2, sp
 800bd64:	f7ff ffc8 	bl	800bcf8 <__swhatbuf_r>
 800bd68:	9900      	ldr	r1, [sp, #0]
 800bd6a:	4605      	mov	r5, r0
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	f7ff f963 	bl	800b038 <_malloc_r>
 800bd72:	b948      	cbnz	r0, 800bd88 <__smakebuf_r+0x44>
 800bd74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd78:	059a      	lsls	r2, r3, #22
 800bd7a:	d4ef      	bmi.n	800bd5c <__smakebuf_r+0x18>
 800bd7c:	f023 0303 	bic.w	r3, r3, #3
 800bd80:	f043 0302 	orr.w	r3, r3, #2
 800bd84:	81a3      	strh	r3, [r4, #12]
 800bd86:	e7e3      	b.n	800bd50 <__smakebuf_r+0xc>
 800bd88:	4b0d      	ldr	r3, [pc, #52]	; (800bdc0 <__smakebuf_r+0x7c>)
 800bd8a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd8c:	89a3      	ldrh	r3, [r4, #12]
 800bd8e:	6020      	str	r0, [r4, #0]
 800bd90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd94:	81a3      	strh	r3, [r4, #12]
 800bd96:	9b00      	ldr	r3, [sp, #0]
 800bd98:	6163      	str	r3, [r4, #20]
 800bd9a:	9b01      	ldr	r3, [sp, #4]
 800bd9c:	6120      	str	r0, [r4, #16]
 800bd9e:	b15b      	cbz	r3, 800bdb8 <__smakebuf_r+0x74>
 800bda0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bda4:	4630      	mov	r0, r6
 800bda6:	f000 f8d1 	bl	800bf4c <_isatty_r>
 800bdaa:	b128      	cbz	r0, 800bdb8 <__smakebuf_r+0x74>
 800bdac:	89a3      	ldrh	r3, [r4, #12]
 800bdae:	f023 0303 	bic.w	r3, r3, #3
 800bdb2:	f043 0301 	orr.w	r3, r3, #1
 800bdb6:	81a3      	strh	r3, [r4, #12]
 800bdb8:	89a0      	ldrh	r0, [r4, #12]
 800bdba:	4305      	orrs	r5, r0
 800bdbc:	81a5      	strh	r5, [r4, #12]
 800bdbe:	e7cd      	b.n	800bd5c <__smakebuf_r+0x18>
 800bdc0:	0800bb51 	.word	0x0800bb51

0800bdc4 <_malloc_usable_size_r>:
 800bdc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdc8:	1f18      	subs	r0, r3, #4
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	bfbc      	itt	lt
 800bdce:	580b      	ldrlt	r3, [r1, r0]
 800bdd0:	18c0      	addlt	r0, r0, r3
 800bdd2:	4770      	bx	lr

0800bdd4 <_raise_r>:
 800bdd4:	291f      	cmp	r1, #31
 800bdd6:	b538      	push	{r3, r4, r5, lr}
 800bdd8:	4604      	mov	r4, r0
 800bdda:	460d      	mov	r5, r1
 800bddc:	d904      	bls.n	800bde8 <_raise_r+0x14>
 800bdde:	2316      	movs	r3, #22
 800bde0:	6003      	str	r3, [r0, #0]
 800bde2:	f04f 30ff 	mov.w	r0, #4294967295
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bdea:	b112      	cbz	r2, 800bdf2 <_raise_r+0x1e>
 800bdec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdf0:	b94b      	cbnz	r3, 800be06 <_raise_r+0x32>
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	f000 f830 	bl	800be58 <_getpid_r>
 800bdf8:	462a      	mov	r2, r5
 800bdfa:	4601      	mov	r1, r0
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be02:	f000 b817 	b.w	800be34 <_kill_r>
 800be06:	2b01      	cmp	r3, #1
 800be08:	d00a      	beq.n	800be20 <_raise_r+0x4c>
 800be0a:	1c59      	adds	r1, r3, #1
 800be0c:	d103      	bne.n	800be16 <_raise_r+0x42>
 800be0e:	2316      	movs	r3, #22
 800be10:	6003      	str	r3, [r0, #0]
 800be12:	2001      	movs	r0, #1
 800be14:	e7e7      	b.n	800bde6 <_raise_r+0x12>
 800be16:	2400      	movs	r4, #0
 800be18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be1c:	4628      	mov	r0, r5
 800be1e:	4798      	blx	r3
 800be20:	2000      	movs	r0, #0
 800be22:	e7e0      	b.n	800bde6 <_raise_r+0x12>

0800be24 <raise>:
 800be24:	4b02      	ldr	r3, [pc, #8]	; (800be30 <raise+0xc>)
 800be26:	4601      	mov	r1, r0
 800be28:	6818      	ldr	r0, [r3, #0]
 800be2a:	f7ff bfd3 	b.w	800bdd4 <_raise_r>
 800be2e:	bf00      	nop
 800be30:	20000010 	.word	0x20000010

0800be34 <_kill_r>:
 800be34:	b538      	push	{r3, r4, r5, lr}
 800be36:	4d07      	ldr	r5, [pc, #28]	; (800be54 <_kill_r+0x20>)
 800be38:	2300      	movs	r3, #0
 800be3a:	4604      	mov	r4, r0
 800be3c:	4608      	mov	r0, r1
 800be3e:	4611      	mov	r1, r2
 800be40:	602b      	str	r3, [r5, #0]
 800be42:	f7f6 f935 	bl	80020b0 <_kill>
 800be46:	1c43      	adds	r3, r0, #1
 800be48:	d102      	bne.n	800be50 <_kill_r+0x1c>
 800be4a:	682b      	ldr	r3, [r5, #0]
 800be4c:	b103      	cbz	r3, 800be50 <_kill_r+0x1c>
 800be4e:	6023      	str	r3, [r4, #0]
 800be50:	bd38      	pop	{r3, r4, r5, pc}
 800be52:	bf00      	nop
 800be54:	20004b9c 	.word	0x20004b9c

0800be58 <_getpid_r>:
 800be58:	f7f6 b922 	b.w	80020a0 <_getpid>

0800be5c <__sread>:
 800be5c:	b510      	push	{r4, lr}
 800be5e:	460c      	mov	r4, r1
 800be60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be64:	f000 f894 	bl	800bf90 <_read_r>
 800be68:	2800      	cmp	r0, #0
 800be6a:	bfab      	itete	ge
 800be6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be6e:	89a3      	ldrhlt	r3, [r4, #12]
 800be70:	181b      	addge	r3, r3, r0
 800be72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be76:	bfac      	ite	ge
 800be78:	6563      	strge	r3, [r4, #84]	; 0x54
 800be7a:	81a3      	strhlt	r3, [r4, #12]
 800be7c:	bd10      	pop	{r4, pc}

0800be7e <__swrite>:
 800be7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be82:	461f      	mov	r7, r3
 800be84:	898b      	ldrh	r3, [r1, #12]
 800be86:	05db      	lsls	r3, r3, #23
 800be88:	4605      	mov	r5, r0
 800be8a:	460c      	mov	r4, r1
 800be8c:	4616      	mov	r6, r2
 800be8e:	d505      	bpl.n	800be9c <__swrite+0x1e>
 800be90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be94:	2302      	movs	r3, #2
 800be96:	2200      	movs	r2, #0
 800be98:	f000 f868 	bl	800bf6c <_lseek_r>
 800be9c:	89a3      	ldrh	r3, [r4, #12]
 800be9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bea6:	81a3      	strh	r3, [r4, #12]
 800bea8:	4632      	mov	r2, r6
 800beaa:	463b      	mov	r3, r7
 800beac:	4628      	mov	r0, r5
 800beae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800beb2:	f000 b817 	b.w	800bee4 <_write_r>

0800beb6 <__sseek>:
 800beb6:	b510      	push	{r4, lr}
 800beb8:	460c      	mov	r4, r1
 800beba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bebe:	f000 f855 	bl	800bf6c <_lseek_r>
 800bec2:	1c43      	adds	r3, r0, #1
 800bec4:	89a3      	ldrh	r3, [r4, #12]
 800bec6:	bf15      	itete	ne
 800bec8:	6560      	strne	r0, [r4, #84]	; 0x54
 800beca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bed2:	81a3      	strheq	r3, [r4, #12]
 800bed4:	bf18      	it	ne
 800bed6:	81a3      	strhne	r3, [r4, #12]
 800bed8:	bd10      	pop	{r4, pc}

0800beda <__sclose>:
 800beda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bede:	f000 b813 	b.w	800bf08 <_close_r>
	...

0800bee4 <_write_r>:
 800bee4:	b538      	push	{r3, r4, r5, lr}
 800bee6:	4d07      	ldr	r5, [pc, #28]	; (800bf04 <_write_r+0x20>)
 800bee8:	4604      	mov	r4, r0
 800beea:	4608      	mov	r0, r1
 800beec:	4611      	mov	r1, r2
 800beee:	2200      	movs	r2, #0
 800bef0:	602a      	str	r2, [r5, #0]
 800bef2:	461a      	mov	r2, r3
 800bef4:	f7f6 f913 	bl	800211e <_write>
 800bef8:	1c43      	adds	r3, r0, #1
 800befa:	d102      	bne.n	800bf02 <_write_r+0x1e>
 800befc:	682b      	ldr	r3, [r5, #0]
 800befe:	b103      	cbz	r3, 800bf02 <_write_r+0x1e>
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	bd38      	pop	{r3, r4, r5, pc}
 800bf04:	20004b9c 	.word	0x20004b9c

0800bf08 <_close_r>:
 800bf08:	b538      	push	{r3, r4, r5, lr}
 800bf0a:	4d06      	ldr	r5, [pc, #24]	; (800bf24 <_close_r+0x1c>)
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	4604      	mov	r4, r0
 800bf10:	4608      	mov	r0, r1
 800bf12:	602b      	str	r3, [r5, #0]
 800bf14:	f7f6 f91f 	bl	8002156 <_close>
 800bf18:	1c43      	adds	r3, r0, #1
 800bf1a:	d102      	bne.n	800bf22 <_close_r+0x1a>
 800bf1c:	682b      	ldr	r3, [r5, #0]
 800bf1e:	b103      	cbz	r3, 800bf22 <_close_r+0x1a>
 800bf20:	6023      	str	r3, [r4, #0]
 800bf22:	bd38      	pop	{r3, r4, r5, pc}
 800bf24:	20004b9c 	.word	0x20004b9c

0800bf28 <_fstat_r>:
 800bf28:	b538      	push	{r3, r4, r5, lr}
 800bf2a:	4d07      	ldr	r5, [pc, #28]	; (800bf48 <_fstat_r+0x20>)
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	4604      	mov	r4, r0
 800bf30:	4608      	mov	r0, r1
 800bf32:	4611      	mov	r1, r2
 800bf34:	602b      	str	r3, [r5, #0]
 800bf36:	f7f6 f91a 	bl	800216e <_fstat>
 800bf3a:	1c43      	adds	r3, r0, #1
 800bf3c:	d102      	bne.n	800bf44 <_fstat_r+0x1c>
 800bf3e:	682b      	ldr	r3, [r5, #0]
 800bf40:	b103      	cbz	r3, 800bf44 <_fstat_r+0x1c>
 800bf42:	6023      	str	r3, [r4, #0]
 800bf44:	bd38      	pop	{r3, r4, r5, pc}
 800bf46:	bf00      	nop
 800bf48:	20004b9c 	.word	0x20004b9c

0800bf4c <_isatty_r>:
 800bf4c:	b538      	push	{r3, r4, r5, lr}
 800bf4e:	4d06      	ldr	r5, [pc, #24]	; (800bf68 <_isatty_r+0x1c>)
 800bf50:	2300      	movs	r3, #0
 800bf52:	4604      	mov	r4, r0
 800bf54:	4608      	mov	r0, r1
 800bf56:	602b      	str	r3, [r5, #0]
 800bf58:	f7f6 f919 	bl	800218e <_isatty>
 800bf5c:	1c43      	adds	r3, r0, #1
 800bf5e:	d102      	bne.n	800bf66 <_isatty_r+0x1a>
 800bf60:	682b      	ldr	r3, [r5, #0]
 800bf62:	b103      	cbz	r3, 800bf66 <_isatty_r+0x1a>
 800bf64:	6023      	str	r3, [r4, #0]
 800bf66:	bd38      	pop	{r3, r4, r5, pc}
 800bf68:	20004b9c 	.word	0x20004b9c

0800bf6c <_lseek_r>:
 800bf6c:	b538      	push	{r3, r4, r5, lr}
 800bf6e:	4d07      	ldr	r5, [pc, #28]	; (800bf8c <_lseek_r+0x20>)
 800bf70:	4604      	mov	r4, r0
 800bf72:	4608      	mov	r0, r1
 800bf74:	4611      	mov	r1, r2
 800bf76:	2200      	movs	r2, #0
 800bf78:	602a      	str	r2, [r5, #0]
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	f7f6 f912 	bl	80021a4 <_lseek>
 800bf80:	1c43      	adds	r3, r0, #1
 800bf82:	d102      	bne.n	800bf8a <_lseek_r+0x1e>
 800bf84:	682b      	ldr	r3, [r5, #0]
 800bf86:	b103      	cbz	r3, 800bf8a <_lseek_r+0x1e>
 800bf88:	6023      	str	r3, [r4, #0]
 800bf8a:	bd38      	pop	{r3, r4, r5, pc}
 800bf8c:	20004b9c 	.word	0x20004b9c

0800bf90 <_read_r>:
 800bf90:	b538      	push	{r3, r4, r5, lr}
 800bf92:	4d07      	ldr	r5, [pc, #28]	; (800bfb0 <_read_r+0x20>)
 800bf94:	4604      	mov	r4, r0
 800bf96:	4608      	mov	r0, r1
 800bf98:	4611      	mov	r1, r2
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	602a      	str	r2, [r5, #0]
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	f7f6 f8a0 	bl	80020e4 <_read>
 800bfa4:	1c43      	adds	r3, r0, #1
 800bfa6:	d102      	bne.n	800bfae <_read_r+0x1e>
 800bfa8:	682b      	ldr	r3, [r5, #0]
 800bfaa:	b103      	cbz	r3, 800bfae <_read_r+0x1e>
 800bfac:	6023      	str	r3, [r4, #0]
 800bfae:	bd38      	pop	{r3, r4, r5, pc}
 800bfb0:	20004b9c 	.word	0x20004b9c

0800bfb4 <_init>:
 800bfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb6:	bf00      	nop
 800bfb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfba:	bc08      	pop	{r3}
 800bfbc:	469e      	mov	lr, r3
 800bfbe:	4770      	bx	lr

0800bfc0 <_fini>:
 800bfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc2:	bf00      	nop
 800bfc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfc6:	bc08      	pop	{r3}
 800bfc8:	469e      	mov	lr, r3
 800bfca:	4770      	bx	lr
