
VOLTMETER_ADC_UART_FREE_RTOS_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009154  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  080092f4  080092f4  000192f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094f8  080094f8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080094f8  080094f8  000194f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009500  08009500  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009500  08009500  00019500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009504  08009504  00019504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051e0  20000074  0800957c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005254  0800957c  00025254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001adce  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f87  00000000  00000000  0003ae72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  0003ee00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001400  00000000  00000000  000403a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7e1  00000000  00000000  000417a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d01e  00000000  00000000  0005bf89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a334c  00000000  00000000  00078fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011c2f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d38  00000000  00000000  0011c344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080092dc 	.word	0x080092dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080092dc 	.word	0x080092dc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_uldivmod>:
 8000608:	b953      	cbnz	r3, 8000620 <__aeabi_uldivmod+0x18>
 800060a:	b94a      	cbnz	r2, 8000620 <__aeabi_uldivmod+0x18>
 800060c:	2900      	cmp	r1, #0
 800060e:	bf08      	it	eq
 8000610:	2800      	cmpeq	r0, #0
 8000612:	bf1c      	itt	ne
 8000614:	f04f 31ff 	movne.w	r1, #4294967295
 8000618:	f04f 30ff 	movne.w	r0, #4294967295
 800061c:	f000 b974 	b.w	8000908 <__aeabi_idiv0>
 8000620:	f1ad 0c08 	sub.w	ip, sp, #8
 8000624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000628:	f000 f806 	bl	8000638 <__udivmoddi4>
 800062c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr

08000638 <__udivmoddi4>:
 8000638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800063c:	9d08      	ldr	r5, [sp, #32]
 800063e:	4604      	mov	r4, r0
 8000640:	468e      	mov	lr, r1
 8000642:	2b00      	cmp	r3, #0
 8000644:	d14d      	bne.n	80006e2 <__udivmoddi4+0xaa>
 8000646:	428a      	cmp	r2, r1
 8000648:	4694      	mov	ip, r2
 800064a:	d969      	bls.n	8000720 <__udivmoddi4+0xe8>
 800064c:	fab2 f282 	clz	r2, r2
 8000650:	b152      	cbz	r2, 8000668 <__udivmoddi4+0x30>
 8000652:	fa01 f302 	lsl.w	r3, r1, r2
 8000656:	f1c2 0120 	rsb	r1, r2, #32
 800065a:	fa20 f101 	lsr.w	r1, r0, r1
 800065e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000662:	ea41 0e03 	orr.w	lr, r1, r3
 8000666:	4094      	lsls	r4, r2
 8000668:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800066c:	0c21      	lsrs	r1, r4, #16
 800066e:	fbbe f6f8 	udiv	r6, lr, r8
 8000672:	fa1f f78c 	uxth.w	r7, ip
 8000676:	fb08 e316 	mls	r3, r8, r6, lr
 800067a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800067e:	fb06 f107 	mul.w	r1, r6, r7
 8000682:	4299      	cmp	r1, r3
 8000684:	d90a      	bls.n	800069c <__udivmoddi4+0x64>
 8000686:	eb1c 0303 	adds.w	r3, ip, r3
 800068a:	f106 30ff 	add.w	r0, r6, #4294967295
 800068e:	f080 811f 	bcs.w	80008d0 <__udivmoddi4+0x298>
 8000692:	4299      	cmp	r1, r3
 8000694:	f240 811c 	bls.w	80008d0 <__udivmoddi4+0x298>
 8000698:	3e02      	subs	r6, #2
 800069a:	4463      	add	r3, ip
 800069c:	1a5b      	subs	r3, r3, r1
 800069e:	b2a4      	uxth	r4, r4
 80006a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a4:	fb08 3310 	mls	r3, r8, r0, r3
 80006a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006ac:	fb00 f707 	mul.w	r7, r0, r7
 80006b0:	42a7      	cmp	r7, r4
 80006b2:	d90a      	bls.n	80006ca <__udivmoddi4+0x92>
 80006b4:	eb1c 0404 	adds.w	r4, ip, r4
 80006b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006bc:	f080 810a 	bcs.w	80008d4 <__udivmoddi4+0x29c>
 80006c0:	42a7      	cmp	r7, r4
 80006c2:	f240 8107 	bls.w	80008d4 <__udivmoddi4+0x29c>
 80006c6:	4464      	add	r4, ip
 80006c8:	3802      	subs	r0, #2
 80006ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ce:	1be4      	subs	r4, r4, r7
 80006d0:	2600      	movs	r6, #0
 80006d2:	b11d      	cbz	r5, 80006dc <__udivmoddi4+0xa4>
 80006d4:	40d4      	lsrs	r4, r2
 80006d6:	2300      	movs	r3, #0
 80006d8:	e9c5 4300 	strd	r4, r3, [r5]
 80006dc:	4631      	mov	r1, r6
 80006de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e2:	428b      	cmp	r3, r1
 80006e4:	d909      	bls.n	80006fa <__udivmoddi4+0xc2>
 80006e6:	2d00      	cmp	r5, #0
 80006e8:	f000 80ef 	beq.w	80008ca <__udivmoddi4+0x292>
 80006ec:	2600      	movs	r6, #0
 80006ee:	e9c5 0100 	strd	r0, r1, [r5]
 80006f2:	4630      	mov	r0, r6
 80006f4:	4631      	mov	r1, r6
 80006f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fa:	fab3 f683 	clz	r6, r3
 80006fe:	2e00      	cmp	r6, #0
 8000700:	d14a      	bne.n	8000798 <__udivmoddi4+0x160>
 8000702:	428b      	cmp	r3, r1
 8000704:	d302      	bcc.n	800070c <__udivmoddi4+0xd4>
 8000706:	4282      	cmp	r2, r0
 8000708:	f200 80f9 	bhi.w	80008fe <__udivmoddi4+0x2c6>
 800070c:	1a84      	subs	r4, r0, r2
 800070e:	eb61 0303 	sbc.w	r3, r1, r3
 8000712:	2001      	movs	r0, #1
 8000714:	469e      	mov	lr, r3
 8000716:	2d00      	cmp	r5, #0
 8000718:	d0e0      	beq.n	80006dc <__udivmoddi4+0xa4>
 800071a:	e9c5 4e00 	strd	r4, lr, [r5]
 800071e:	e7dd      	b.n	80006dc <__udivmoddi4+0xa4>
 8000720:	b902      	cbnz	r2, 8000724 <__udivmoddi4+0xec>
 8000722:	deff      	udf	#255	; 0xff
 8000724:	fab2 f282 	clz	r2, r2
 8000728:	2a00      	cmp	r2, #0
 800072a:	f040 8092 	bne.w	8000852 <__udivmoddi4+0x21a>
 800072e:	eba1 010c 	sub.w	r1, r1, ip
 8000732:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000736:	fa1f fe8c 	uxth.w	lr, ip
 800073a:	2601      	movs	r6, #1
 800073c:	0c20      	lsrs	r0, r4, #16
 800073e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000742:	fb07 1113 	mls	r1, r7, r3, r1
 8000746:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800074a:	fb0e f003 	mul.w	r0, lr, r3
 800074e:	4288      	cmp	r0, r1
 8000750:	d908      	bls.n	8000764 <__udivmoddi4+0x12c>
 8000752:	eb1c 0101 	adds.w	r1, ip, r1
 8000756:	f103 38ff 	add.w	r8, r3, #4294967295
 800075a:	d202      	bcs.n	8000762 <__udivmoddi4+0x12a>
 800075c:	4288      	cmp	r0, r1
 800075e:	f200 80cb 	bhi.w	80008f8 <__udivmoddi4+0x2c0>
 8000762:	4643      	mov	r3, r8
 8000764:	1a09      	subs	r1, r1, r0
 8000766:	b2a4      	uxth	r4, r4
 8000768:	fbb1 f0f7 	udiv	r0, r1, r7
 800076c:	fb07 1110 	mls	r1, r7, r0, r1
 8000770:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000774:	fb0e fe00 	mul.w	lr, lr, r0
 8000778:	45a6      	cmp	lr, r4
 800077a:	d908      	bls.n	800078e <__udivmoddi4+0x156>
 800077c:	eb1c 0404 	adds.w	r4, ip, r4
 8000780:	f100 31ff 	add.w	r1, r0, #4294967295
 8000784:	d202      	bcs.n	800078c <__udivmoddi4+0x154>
 8000786:	45a6      	cmp	lr, r4
 8000788:	f200 80bb 	bhi.w	8000902 <__udivmoddi4+0x2ca>
 800078c:	4608      	mov	r0, r1
 800078e:	eba4 040e 	sub.w	r4, r4, lr
 8000792:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000796:	e79c      	b.n	80006d2 <__udivmoddi4+0x9a>
 8000798:	f1c6 0720 	rsb	r7, r6, #32
 800079c:	40b3      	lsls	r3, r6
 800079e:	fa22 fc07 	lsr.w	ip, r2, r7
 80007a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007a6:	fa20 f407 	lsr.w	r4, r0, r7
 80007aa:	fa01 f306 	lsl.w	r3, r1, r6
 80007ae:	431c      	orrs	r4, r3
 80007b0:	40f9      	lsrs	r1, r7
 80007b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007b6:	fa00 f306 	lsl.w	r3, r0, r6
 80007ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80007be:	0c20      	lsrs	r0, r4, #16
 80007c0:	fa1f fe8c 	uxth.w	lr, ip
 80007c4:	fb09 1118 	mls	r1, r9, r8, r1
 80007c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007cc:	fb08 f00e 	mul.w	r0, r8, lr
 80007d0:	4288      	cmp	r0, r1
 80007d2:	fa02 f206 	lsl.w	r2, r2, r6
 80007d6:	d90b      	bls.n	80007f0 <__udivmoddi4+0x1b8>
 80007d8:	eb1c 0101 	adds.w	r1, ip, r1
 80007dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80007e0:	f080 8088 	bcs.w	80008f4 <__udivmoddi4+0x2bc>
 80007e4:	4288      	cmp	r0, r1
 80007e6:	f240 8085 	bls.w	80008f4 <__udivmoddi4+0x2bc>
 80007ea:	f1a8 0802 	sub.w	r8, r8, #2
 80007ee:	4461      	add	r1, ip
 80007f0:	1a09      	subs	r1, r1, r0
 80007f2:	b2a4      	uxth	r4, r4
 80007f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80007f8:	fb09 1110 	mls	r1, r9, r0, r1
 80007fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000800:	fb00 fe0e 	mul.w	lr, r0, lr
 8000804:	458e      	cmp	lr, r1
 8000806:	d908      	bls.n	800081a <__udivmoddi4+0x1e2>
 8000808:	eb1c 0101 	adds.w	r1, ip, r1
 800080c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000810:	d26c      	bcs.n	80008ec <__udivmoddi4+0x2b4>
 8000812:	458e      	cmp	lr, r1
 8000814:	d96a      	bls.n	80008ec <__udivmoddi4+0x2b4>
 8000816:	3802      	subs	r0, #2
 8000818:	4461      	add	r1, ip
 800081a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800081e:	fba0 9402 	umull	r9, r4, r0, r2
 8000822:	eba1 010e 	sub.w	r1, r1, lr
 8000826:	42a1      	cmp	r1, r4
 8000828:	46c8      	mov	r8, r9
 800082a:	46a6      	mov	lr, r4
 800082c:	d356      	bcc.n	80008dc <__udivmoddi4+0x2a4>
 800082e:	d053      	beq.n	80008d8 <__udivmoddi4+0x2a0>
 8000830:	b15d      	cbz	r5, 800084a <__udivmoddi4+0x212>
 8000832:	ebb3 0208 	subs.w	r2, r3, r8
 8000836:	eb61 010e 	sbc.w	r1, r1, lr
 800083a:	fa01 f707 	lsl.w	r7, r1, r7
 800083e:	fa22 f306 	lsr.w	r3, r2, r6
 8000842:	40f1      	lsrs	r1, r6
 8000844:	431f      	orrs	r7, r3
 8000846:	e9c5 7100 	strd	r7, r1, [r5]
 800084a:	2600      	movs	r6, #0
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	f1c2 0320 	rsb	r3, r2, #32
 8000856:	40d8      	lsrs	r0, r3
 8000858:	fa0c fc02 	lsl.w	ip, ip, r2
 800085c:	fa21 f303 	lsr.w	r3, r1, r3
 8000860:	4091      	lsls	r1, r2
 8000862:	4301      	orrs	r1, r0
 8000864:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000868:	fa1f fe8c 	uxth.w	lr, ip
 800086c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000870:	fb07 3610 	mls	r6, r7, r0, r3
 8000874:	0c0b      	lsrs	r3, r1, #16
 8000876:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800087a:	fb00 f60e 	mul.w	r6, r0, lr
 800087e:	429e      	cmp	r6, r3
 8000880:	fa04 f402 	lsl.w	r4, r4, r2
 8000884:	d908      	bls.n	8000898 <__udivmoddi4+0x260>
 8000886:	eb1c 0303 	adds.w	r3, ip, r3
 800088a:	f100 38ff 	add.w	r8, r0, #4294967295
 800088e:	d22f      	bcs.n	80008f0 <__udivmoddi4+0x2b8>
 8000890:	429e      	cmp	r6, r3
 8000892:	d92d      	bls.n	80008f0 <__udivmoddi4+0x2b8>
 8000894:	3802      	subs	r0, #2
 8000896:	4463      	add	r3, ip
 8000898:	1b9b      	subs	r3, r3, r6
 800089a:	b289      	uxth	r1, r1
 800089c:	fbb3 f6f7 	udiv	r6, r3, r7
 80008a0:	fb07 3316 	mls	r3, r7, r6, r3
 80008a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008a8:	fb06 f30e 	mul.w	r3, r6, lr
 80008ac:	428b      	cmp	r3, r1
 80008ae:	d908      	bls.n	80008c2 <__udivmoddi4+0x28a>
 80008b0:	eb1c 0101 	adds.w	r1, ip, r1
 80008b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008b8:	d216      	bcs.n	80008e8 <__udivmoddi4+0x2b0>
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d914      	bls.n	80008e8 <__udivmoddi4+0x2b0>
 80008be:	3e02      	subs	r6, #2
 80008c0:	4461      	add	r1, ip
 80008c2:	1ac9      	subs	r1, r1, r3
 80008c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008c8:	e738      	b.n	800073c <__udivmoddi4+0x104>
 80008ca:	462e      	mov	r6, r5
 80008cc:	4628      	mov	r0, r5
 80008ce:	e705      	b.n	80006dc <__udivmoddi4+0xa4>
 80008d0:	4606      	mov	r6, r0
 80008d2:	e6e3      	b.n	800069c <__udivmoddi4+0x64>
 80008d4:	4618      	mov	r0, r3
 80008d6:	e6f8      	b.n	80006ca <__udivmoddi4+0x92>
 80008d8:	454b      	cmp	r3, r9
 80008da:	d2a9      	bcs.n	8000830 <__udivmoddi4+0x1f8>
 80008dc:	ebb9 0802 	subs.w	r8, r9, r2
 80008e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008e4:	3801      	subs	r0, #1
 80008e6:	e7a3      	b.n	8000830 <__udivmoddi4+0x1f8>
 80008e8:	4646      	mov	r6, r8
 80008ea:	e7ea      	b.n	80008c2 <__udivmoddi4+0x28a>
 80008ec:	4620      	mov	r0, r4
 80008ee:	e794      	b.n	800081a <__udivmoddi4+0x1e2>
 80008f0:	4640      	mov	r0, r8
 80008f2:	e7d1      	b.n	8000898 <__udivmoddi4+0x260>
 80008f4:	46d0      	mov	r8, sl
 80008f6:	e77b      	b.n	80007f0 <__udivmoddi4+0x1b8>
 80008f8:	3b02      	subs	r3, #2
 80008fa:	4461      	add	r1, ip
 80008fc:	e732      	b.n	8000764 <__udivmoddi4+0x12c>
 80008fe:	4630      	mov	r0, r6
 8000900:	e709      	b.n	8000716 <__udivmoddi4+0xde>
 8000902:	4464      	add	r4, ip
 8000904:	3802      	subs	r0, #2
 8000906:	e742      	b.n	800078e <__udivmoddi4+0x156>

08000908 <__aeabi_idiv0>:
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000912:	463b      	mov	r3, r7
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800091e:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <MX_ADC1_Init+0x98>)
 8000920:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <MX_ADC1_Init+0x9c>)
 8000922:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000924:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <MX_ADC1_Init+0x98>)
 8000926:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800092a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_ADC1_Init+0x98>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <MX_ADC1_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000938:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_ADC1_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <MX_ADC1_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_ADC1_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <MX_ADC1_Init+0x98>)
 800094e:	4a17      	ldr	r2, [pc, #92]	; (80009ac <MX_ADC1_Init+0xa0>)
 8000950:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_ADC1_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_ADC1_Init+0x98>)
 800095a:	2201      	movs	r2, #1
 800095c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_ADC1_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_ADC1_Init+0x98>)
 8000968:	2201      	movs	r2, #1
 800096a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <MX_ADC1_Init+0x98>)
 800096e:	f001 f8f1 	bl	8001b54 <HAL_ADC_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000978:	f000 fd8e 	bl	8001498 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800097c:	2300      	movs	r3, #0
 800097e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000980:	2301      	movs	r3, #1
 8000982:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000988:	463b      	mov	r3, r7
 800098a:	4619      	mov	r1, r3
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_ADC1_Init+0x98>)
 800098e:	f001 fb9f 	bl	80020d0 <HAL_ADC_ConfigChannel>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000998:	f000 fd7e 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000090 	.word	0x20000090
 80009a8:	40012000 	.word	0x40012000
 80009ac:	0f000001 	.word	0x0f000001

080009b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a1b      	ldr	r2, [pc, #108]	; (8000a3c <HAL_ADC_MspInit+0x8c>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d12f      	bne.n	8000a32 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <HAL_ADC_MspInit+0x90>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	4a19      	ldr	r2, [pc, #100]	; (8000a40 <HAL_ADC_MspInit+0x90>)
 80009dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e0:	6453      	str	r3, [r2, #68]	; 0x44
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <HAL_ADC_MspInit+0x90>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <HAL_ADC_MspInit+0x90>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <HAL_ADC_MspInit+0x90>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <HAL_ADC_MspInit+0x90>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <HAL_ADC_MspInit+0x94>)
 8000a1e:	f002 fa63 	bl	8002ee8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2105      	movs	r1, #5
 8000a26:	2012      	movs	r0, #18
 8000a28:	f001 fe32 	bl	8002690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000a2c:	2012      	movs	r0, #18
 8000a2e:	f001 fe4b 	bl	80026c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a32:	bf00      	nop
 8000a34:	3728      	adds	r7, #40	; 0x28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40012000 	.word	0x40012000
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020000 	.word	0x40020000

08000a48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_DMA_Init+0x4c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <MX_DMA_Init+0x4c>)
 8000a58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_DMA_Init+0x4c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2105      	movs	r1, #5
 8000a6e:	203a      	movs	r0, #58	; 0x3a
 8000a70:	f001 fe0e 	bl	8002690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a74:	203a      	movs	r0, #58	; 0x3a
 8000a76:	f001 fe27 	bl	80026c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2105      	movs	r1, #5
 8000a7e:	2046      	movs	r0, #70	; 0x46
 8000a80:	f001 fe06 	bl	8002690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000a84:	2046      	movs	r0, #70	; 0x46
 8000a86:	f001 fe1f 	bl	80026c8 <HAL_NVIC_EnableIRQ>

}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800

08000a98 <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationTickHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <vApplicationGetIdleTaskMemory+0x30>)
 8000aca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2280      	movs	r2, #128	; 0x80
 8000ad0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000b28 	.word	0x20000b28
 8000ae4:	20000b7c 	.word	0x20000b7c

08000ae8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <vApplicationGetTimerTaskMemory+0x2c>)
 8000af8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <vApplicationGetTimerTaskMemory+0x30>)
 8000afe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b06:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	20000d7c 	.word	0x20000d7c
 8000b18:	20000dd0 	.word	0x20000dd0

08000b1c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b1c:	b5b0      	push	{r4, r5, r7, lr}
 8000b1e:	b0d6      	sub	sp, #344	; 0x158
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of MUTEX_ADC_GOING */
  osMutexDef(MUTEX_ADC_GOING);
 8000b22:	2300      	movs	r3, #0
 8000b24:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  MUTEX_ADC_GOINGHandle = osMutexCreate(osMutex(MUTEX_ADC_GOING));
 8000b2e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000b32:	4618      	mov	r0, r3
 8000b34:	f005 f844 	bl	8005bc0 <osMutexCreate>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	4a98      	ldr	r2, [pc, #608]	; (8000d9c <MX_FREERTOS_Init+0x280>)
 8000b3c:	6013      	str	r3, [r2, #0]

  /* definition and creation of MUTEX_UART_GOING */
  osMutexDef(MUTEX_UART_GOING);
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8000b44:	2300      	movs	r3, #0
 8000b46:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  MUTEX_UART_GOINGHandle = osMutexCreate(osMutex(MUTEX_UART_GOING));
 8000b4a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f005 f836 	bl	8005bc0 <osMutexCreate>
 8000b54:	4603      	mov	r3, r0
 8000b56:	4a92      	ldr	r2, [pc, #584]	; (8000da0 <MX_FREERTOS_Init+0x284>)
 8000b58:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of SEM_BIN_ADC_COMPLETE */
  osSemaphoreDef(SEM_BIN_ADC_COMPLETE);
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  SEM_BIN_ADC_COMPLETEHandle = osSemaphoreCreate(osSemaphore(SEM_BIN_ADC_COMPLETE), 1);
 8000b66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f005 f83f 	bl	8005bf0 <osSemaphoreCreate>
 8000b72:	4603      	mov	r3, r0
 8000b74:	4a8b      	ldr	r2, [pc, #556]	; (8000da4 <MX_FREERTOS_Init+0x288>)
 8000b76:	6013      	str	r3, [r2, #0]

  /* definition and creation of SEM_BIN_UART_COMPLETE */
  osSemaphoreDef(SEM_BIN_UART_COMPLETE);
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  SEM_BIN_UART_COMPLETEHandle = osSemaphoreCreate(osSemaphore(SEM_BIN_UART_COMPLETE), 1);
 8000b84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b88:	2101      	movs	r1, #1
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f005 f830 	bl	8005bf0 <osSemaphoreCreate>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4a85      	ldr	r2, [pc, #532]	; (8000da8 <MX_FREERTOS_Init+0x28c>)
 8000b94:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of RTOS_TIMER_1 */
  osTimerDef(RTOS_TIMER_1, TIMER_CALLBACK);
 8000b96:	4b85      	ldr	r3, [pc, #532]	; (8000dac <MX_FREERTOS_Init+0x290>)
 8000b98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  RTOS_TIMER_1Handle = osTimerCreate(osTimer(RTOS_TIMER_1), osTimerPeriodic, NULL);
 8000ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4618      	mov	r0, r3
 8000bac:	f004 ffd4 	bl	8005b58 <osTimerCreate>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4a7f      	ldr	r2, [pc, #508]	; (8000db0 <MX_FREERTOS_Init+0x294>)
 8000bb4:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of ADC_QUEUE_UART_TX */
  osMessageQDef(ADC_QUEUE_UART_TX, 16, uint16_t);
 8000bb6:	4b7f      	ldr	r3, [pc, #508]	; (8000db4 <MX_FREERTOS_Init+0x298>)
 8000bb8:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8000bbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ADC_QUEUE_UART_TXHandle = osMessageCreate(osMessageQ(ADC_QUEUE_UART_TX), NULL);
 8000bc2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f005 f843 	bl	8005c54 <osMessageCreate>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4a79      	ldr	r2, [pc, #484]	; (8000db8 <MX_FREERTOS_Init+0x29c>)
 8000bd2:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_RX_QUEUE_ADC_TAK */
  osMessageQDef(UART_RX_QUEUE_ADC_TAK, 16, uint16_t);
 8000bd4:	4b77      	ldr	r3, [pc, #476]	; (8000db4 <MX_FREERTOS_Init+0x298>)
 8000bd6:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8000bda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UART_RX_QUEUE_ADC_TAKHandle = osMessageCreate(osMessageQ(UART_RX_QUEUE_ADC_TAK), NULL);
 8000be0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f005 f834 	bl	8005c54 <osMessageCreate>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4a73      	ldr	r2, [pc, #460]	; (8000dbc <MX_FREERTOS_Init+0x2a0>)
 8000bf0:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_RX_QUEUE_UART_TX */
  osMessageQDef(UART_RX_QUEUE_UART_TX, 16, uint16_t);
 8000bf2:	4b70      	ldr	r3, [pc, #448]	; (8000db4 <MX_FREERTOS_Init+0x298>)
 8000bf4:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8000bf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UART_RX_QUEUE_UART_TXHandle = osMessageCreate(osMessageQ(UART_RX_QUEUE_UART_TX), NULL);
 8000bfe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f005 f825 	bl	8005c54 <osMessageCreate>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a6c      	ldr	r2, [pc, #432]	; (8000dc0 <MX_FREERTOS_Init+0x2a4>)
 8000c0e:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_RX_QUEUE_ADC_CONFIG */
  osMessageQDef(UART_RX_QUEUE_ADC_CONFIG, 16, uint16_t);
 8000c10:	4b68      	ldr	r3, [pc, #416]	; (8000db4 <MX_FREERTOS_Init+0x298>)
 8000c12:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8000c16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UART_RX_QUEUE_ADC_CONFIGHandle = osMessageCreate(osMessageQ(UART_RX_QUEUE_ADC_CONFIG), NULL);
 8000c1c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f005 f816 	bl	8005c54 <osMessageCreate>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	4a66      	ldr	r2, [pc, #408]	; (8000dc4 <MX_FREERTOS_Init+0x2a8>)
 8000c2c:	6013      	str	r3, [r2, #0]

  /* definition and creation of INT_UART_QUEUE_UART_RX */
  osMessageQDef(INT_UART_QUEUE_UART_RX, 16, uint16_t);
 8000c2e:	4b61      	ldr	r3, [pc, #388]	; (8000db4 <MX_FREERTOS_Init+0x298>)
 8000c30:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8000c34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  INT_UART_QUEUE_UART_RXHandle = osMessageCreate(osMessageQ(INT_UART_QUEUE_UART_RX), NULL);
 8000c3a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f005 f807 	bl	8005c54 <osMessageCreate>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4a5f      	ldr	r2, [pc, #380]	; (8000dc8 <MX_FREERTOS_Init+0x2ac>)
 8000c4a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000c4c:	4b5f      	ldr	r3, [pc, #380]	; (8000dcc <MX_FREERTOS_Init+0x2b0>)
 8000c4e:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8000c52:	461d      	mov	r5, r3
 8000c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c60:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f004 ff15 	bl	8005a96 <osThreadCreate>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	4a58      	ldr	r2, [pc, #352]	; (8000dd0 <MX_FREERTOS_Init+0x2b4>)
 8000c70:	6013      	str	r3, [r2, #0]

  /* definition and creation of IDLE_TASK_1 */
  osThreadDef(IDLE_TASK_1, START_IDLE_TASK_1, osPriorityIdle, 0, 128);
 8000c72:	4b58      	ldr	r3, [pc, #352]	; (8000dd4 <MX_FREERTOS_Init+0x2b8>)
 8000c74:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000c78:	461d      	mov	r5, r3
 8000c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IDLE_TASK_1Handle = osThreadCreate(osThread(IDLE_TASK_1), NULL);
 8000c86:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f004 ff02 	bl	8005a96 <osThreadCreate>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4a50      	ldr	r2, [pc, #320]	; (8000dd8 <MX_FREERTOS_Init+0x2bc>)
 8000c96:	6013      	str	r3, [r2, #0]

  /* definition and creation of ADC_TAKE_TASK */
  osThreadDef(ADC_TAKE_TASK, ADC_TAKE_TASK_INIT, osPriorityNormal, 0, 128);
 8000c98:	4b50      	ldr	r3, [pc, #320]	; (8000ddc <MX_FREERTOS_Init+0x2c0>)
 8000c9a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000c9e:	461d      	mov	r5, r3
 8000ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ca8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_TAKE_TASKHandle = osThreadCreate(osThread(ADC_TAKE_TASK), NULL);
 8000cac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f004 feef 	bl	8005a96 <osThreadCreate>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	4a49      	ldr	r2, [pc, #292]	; (8000de0 <MX_FREERTOS_Init+0x2c4>)
 8000cbc:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_TX_TASK */
  osThreadDef(UART_TX_TASK, UART_TX_TASK_INIT, osPriorityNormal, 0, 128);
 8000cbe:	4b49      	ldr	r3, [pc, #292]	; (8000de4 <MX_FREERTOS_Init+0x2c8>)
 8000cc0:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000cc4:	461d      	mov	r5, r3
 8000cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_TX_TASKHandle = osThreadCreate(osThread(UART_TX_TASK), NULL);
 8000cd2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f004 fedc 	bl	8005a96 <osThreadCreate>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	4a41      	ldr	r2, [pc, #260]	; (8000de8 <MX_FREERTOS_Init+0x2cc>)
 8000ce2:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_RX_TASK */
  osThreadDef(UART_RX_TASK, UART_RX_TASK_INIT, osPriorityNormal, 0, 128);
 8000ce4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000ce8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000cec:	4a3f      	ldr	r2, [pc, #252]	; (8000dec <MX_FREERTOS_Init+0x2d0>)
 8000cee:	461c      	mov	r4, r3
 8000cf0:	4615      	mov	r5, r2
 8000cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_RX_TASKHandle = osThreadCreate(osThread(UART_RX_TASK), NULL);
 8000cfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f004 fec6 	bl	8005a96 <osThreadCreate>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a38      	ldr	r2, [pc, #224]	; (8000df0 <MX_FREERTOS_Init+0x2d4>)
 8000d0e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ADC_CONFIG_TASK */
  osThreadDef(ADC_CONFIG_TASK, ADC_CONFIG_TASK_INIT, osPriorityBelowNormal, 0, 128);
 8000d10:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000d14:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d18:	4a36      	ldr	r2, [pc, #216]	; (8000df4 <MX_FREERTOS_Init+0x2d8>)
 8000d1a:	461c      	mov	r4, r3
 8000d1c:	4615      	mov	r5, r2
 8000d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_CONFIG_TASKHandle = osThreadCreate(osThread(ADC_CONFIG_TASK), NULL);
 8000d2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f004 feb0 	bl	8005a96 <osThreadCreate>
 8000d36:	4603      	mov	r3, r0
 8000d38:	4a2f      	ldr	r2, [pc, #188]	; (8000df8 <MX_FREERTOS_Init+0x2dc>)
 8000d3a:	6013      	str	r3, [r2, #0]

  /* definition and creation of INT_TIMER_TASK */
  osThreadDef(INT_TIMER_TASK, INT_TIMER_TASK_INIT, osPriorityAboveNormal, 0, 128);
 8000d3c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000d40:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000d44:	4a2d      	ldr	r2, [pc, #180]	; (8000dfc <MX_FREERTOS_Init+0x2e0>)
 8000d46:	461c      	mov	r4, r3
 8000d48:	4615      	mov	r5, r2
 8000d4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  INT_TIMER_TASKHandle = osThreadCreate(osThread(INT_TIMER_TASK), NULL);
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f004 fe9a 	bl	8005a96 <osThreadCreate>
 8000d62:	4603      	mov	r3, r0
 8000d64:	4a26      	ldr	r2, [pc, #152]	; (8000e00 <MX_FREERTOS_Init+0x2e4>)
 8000d66:	6013      	str	r3, [r2, #0]

  /* definition and creation of INT_UART_TASK */
  osThreadDef(INT_UART_TASK, INT_UART_TASK_INIT, osPriorityAboveNormal, 0, 128);
 8000d68:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000d6c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8000d70:	4a24      	ldr	r2, [pc, #144]	; (8000e04 <MX_FREERTOS_Init+0x2e8>)
 8000d72:	461c      	mov	r4, r3
 8000d74:	4615      	mov	r5, r2
 8000d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  INT_UART_TASKHandle = osThreadCreate(osThread(INT_UART_TASK), NULL);
 8000d82:	463b      	mov	r3, r7
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f004 fe85 	bl	8005a96 <osThreadCreate>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4a1e      	ldr	r2, [pc, #120]	; (8000e08 <MX_FREERTOS_Init+0x2ec>)
 8000d90:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000d92:	bf00      	nop
 8000d94:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d9c:	20000b18 	.word	0x20000b18
 8000da0:	20000b1c 	.word	0x20000b1c
 8000da4:	20000b20 	.word	0x20000b20
 8000da8:	20000b24 	.word	0x20000b24
 8000dac:	08001129 	.word	0x08001129
 8000db0:	20000b14 	.word	0x20000b14
 8000db4:	0800936c 	.word	0x0800936c
 8000db8:	20000b00 	.word	0x20000b00
 8000dbc:	20000b04 	.word	0x20000b04
 8000dc0:	20000b08 	.word	0x20000b08
 8000dc4:	20000b0c 	.word	0x20000b0c
 8000dc8:	20000b10 	.word	0x20000b10
 8000dcc:	0800937c 	.word	0x0800937c
 8000dd0:	20000ae0 	.word	0x20000ae0
 8000dd4:	08009398 	.word	0x08009398
 8000dd8:	20000ae4 	.word	0x20000ae4
 8000ddc:	080093b4 	.word	0x080093b4
 8000de0:	20000ae8 	.word	0x20000ae8
 8000de4:	080093d0 	.word	0x080093d0
 8000de8:	20000aec 	.word	0x20000aec
 8000dec:	080093ec 	.word	0x080093ec
 8000df0:	20000af0 	.word	0x20000af0
 8000df4:	08009408 	.word	0x08009408
 8000df8:	20000af4 	.word	0x20000af4
 8000dfc:	08009424 	.word	0x08009424
 8000e00:	20000af8 	.word	0x20000af8
 8000e04:	08009440 	.word	0x08009440
 8000e08:	20000afc 	.word	0x20000afc

08000e0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  vTaskSuspend(NULL); // SUSPEND ITSELF
 8000e14:	2000      	movs	r0, #0
 8000e16:	f005 ff2f 	bl	8006c78 <vTaskSuspend>

  int i = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	  osDelay(1);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f004 fe85 	bl	8005b2e <osDelay>
	  i = i+1;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	3301      	adds	r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]

	  if(i==1000)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e30:	d1f5      	bne.n	8000e1e <StartDefaultTask+0x12>
	  {
		 i = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000e36:	2101      	movs	r1, #1
 8000e38:	4801      	ldr	r0, [pc, #4]	; (8000e40 <StartDefaultTask+0x34>)
 8000e3a:	f002 f9f2 	bl	8003222 <HAL_GPIO_TogglePin>
	  osDelay(1);
 8000e3e:	e7ee      	b.n	8000e1e <StartDefaultTask+0x12>
 8000e40:	40020400 	.word	0x40020400

08000e44 <START_IDLE_TASK_1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_START_IDLE_TASK_1 */
void START_IDLE_TASK_1(void const * argument)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN START_IDLE_TASK_1 */
  /* Infinite loop */

	vTaskSuspend(NULL); // SUSPEND ITSELF
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f005 ff13 	bl	8006c78 <vTaskSuspend>

  for(;;)
  {
    osDelay(1);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f004 fe6b 	bl	8005b2e <osDelay>
 8000e58:	e7fb      	b.n	8000e52 <START_IDLE_TASK_1+0xe>
	...

08000e5c <ADC_TAKE_TASK_INIT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADC_TAKE_TASK_INIT */
void ADC_TAKE_TASK_INIT(void const * argument)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
		char MSG[10]; //10 CHARACTER BUFFER (80bits) TO TRANSMIT OVER UART

	  /* Infinite loop */
	  for(;;)
	  {
		  osDelay(1);
 8000e64:	2001      	movs	r0, #1
 8000e66:	f004 fe62 	bl	8005b2e <osDelay>

		//---------------------------------------------------------------
			  // GET ADC VALUE:

			  //START CONVERSION:
			  HAL_ADC_Start(&hadc1); // PASSING ADC HANDLING ADDRES
 8000e6a:	480c      	ldr	r0, [pc, #48]	; (8000e9c <ADC_TAKE_TASK_INIT+0x40>)
 8000e6c:	f000 feb6 	bl	8001bdc <HAL_ADC_Start>

			  // WAIT TO ADC CONVERSION TO COMPLETE:
			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	4809      	ldr	r0, [pc, #36]	; (8000e9c <ADC_TAKE_TASK_INIT+0x40>)
 8000e76:	f000 ff65 	bl	8001d44 <HAL_ADC_PollForConversion>

			  //WHEN CONVERSION IS DONE GET 12bit VALUE: (0-4095)
			  RAW = HAL_ADC_GetValue(&hadc1);
 8000e7a:	4808      	ldr	r0, [pc, #32]	; (8000e9c <ADC_TAKE_TASK_INIT+0x40>)
 8000e7c:	f001 f8fd 	bl	800207a <HAL_ADC_GetValue>
 8000e80:	4603      	mov	r3, r0
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	82fb      	strh	r3, [r7, #22]

			  //MSG[10] = "POBRANO DANE Z ADC";
			 // sprintf(MSG,"POBRANO DANE Z ADC,  %hu\r\n", RAW);
			 // HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);

			  xQueueSend(ADC_QUEUE_UART_TXHandle, &RAW, portMAX_DELAY);
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <ADC_TAKE_TASK_INIT+0x44>)
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	f107 0116 	add.w	r1, r7, #22
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295
 8000e94:	f005 f940 	bl	8006118 <xQueueGenericSend>
		  osDelay(1);
 8000e98:	e7e4      	b.n	8000e64 <ADC_TAKE_TASK_INIT+0x8>
 8000e9a:	bf00      	nop
 8000e9c:	20000090 	.word	0x20000090
 8000ea0:	20000b00 	.word	0x20000b00

08000ea4 <UART_TX_TASK_INIT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_TASK_INIT */
void UART_TX_TASK_INIT(void const * argument)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
		//osTimerStart(RTOS_TIMER_1Handle, 500);

		 uint16_t RAW; // 12bit ADC READING
		 //uint16_t VOLTAGE_INT;
		 float VOLTAGE;
		 float DZIELNIK = 1/819;
 8000eac:	f04f 0300 	mov.w	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
		 char MSG[10]; //10 CHARACTER BUFFER (80bits) TO TRANSMIT OVER UART
		 int i = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]

	  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f004 fe39 	bl	8005b2e <osDelay>
	    xQueueReceive(ADC_QUEUE_UART_TXHandle, &RAW, portMAX_DELAY);
 8000ebc:	4b42      	ldr	r3, [pc, #264]	; (8000fc8 <UART_TX_TASK_INIT+0x124>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f107 0112 	add.w	r1, r7, #18
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f005 fabf 	bl	800644c <xQueueReceive>
	    i = i+1;
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	61fb      	str	r3, [r7, #28]
	    if(i==500)
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000eda:	d1ec      	bne.n	8000eb6 <UART_TX_TASK_INIT+0x12>
	    {
	    	i = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
	    //---------------------------------------------------------------

	       RAW = (float)RAW;
 8000ee0:	8a7b      	ldrh	r3, [r7, #18]
 8000ee2:	ee07 3a90 	vmov	s15, r3
 8000ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eee:	ee17 3a90 	vmov	r3, s15
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	827b      	strh	r3, [r7, #18]
	       VOLTAGE = RAW * DZIELNIK;
 8000ef6:	8a7b      	ldrh	r3, [r7, #18]
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f00:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f08:	edc7 7a05 	vstr	s15, [r7, #20]
	       //VOLTAGE = RAW/2;

	       sprintf(MSG,"\033c"); // WYSYLANIE KOMENDY CZYSZCZACEJ OKNO TERMINALA
 8000f0c:	f107 0308 	add.w	r3, r7, #8
 8000f10:	492e      	ldr	r1, [pc, #184]	; (8000fcc <UART_TX_TASK_INIT+0x128>)
 8000f12:	4618      	mov	r0, r3
 8000f14:	f007 fd82 	bl	8008a1c <siprintf>
	       HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8000f18:	f107 0308 	add.w	r3, r7, #8
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff f95f 	bl	80001e0 <strlen>
 8000f22:	4603      	mov	r3, r0
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	f107 0108 	add.w	r1, r7, #8
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2e:	4828      	ldr	r0, [pc, #160]	; (8000fd0 <UART_TX_TASK_INIT+0x12c>)
 8000f30:	f003 faaf 	bl	8004492 <HAL_UART_Transmit>

	   	   // CONVERT TO STRING: (HAVE TO INCLUDE LIB <string.h> <stdio.h>
	       sprintf(MSG,"ADC VALUE: %hu\r\n", RAW);
 8000f34:	8a7b      	ldrh	r3, [r7, #18]
 8000f36:	461a      	mov	r2, r3
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	4925      	ldr	r1, [pc, #148]	; (8000fd4 <UART_TX_TASK_INIT+0x130>)
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f007 fd6c 	bl	8008a1c <siprintf>
	   	   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff f949 	bl	80001e0 <strlen>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	f107 0108 	add.w	r1, r7, #8
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	481d      	ldr	r0, [pc, #116]	; (8000fd0 <UART_TX_TASK_INIT+0x12c>)
 8000f5c:	f003 fa99 	bl	8004492 <HAL_UART_Transmit>

	   	   MSG[10]="";
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <UART_TX_TASK_INIT+0x134>)
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	74bb      	strb	r3, [r7, #18]
	   	   // CONVERT TO STRING: (HAVE TO INCLUDE LIB <string.h> <stdio.h>
	   	   //sprintf(MSG,"VOLTAGE:  %hu\r\n ", VOLTAGE);
	   	   sprintf(MSG,"VOLTAGE:  ", VOLTAGE);
 8000f66:	6978      	ldr	r0, [r7, #20]
 8000f68:	f7ff faf6 	bl	8000558 <__aeabi_f2d>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	f107 0008 	add.w	r0, r7, #8
 8000f74:	4919      	ldr	r1, [pc, #100]	; (8000fdc <UART_TX_TASK_INIT+0x138>)
 8000f76:	f007 fd51 	bl	8008a1c <siprintf>
	   	   //sprintf(MSG,"VOLTAGE:  %hu\r\n ", RAW/2, "%.2f V");
	   	   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff f92e 	bl	80001e0 <strlen>
 8000f84:	4603      	mov	r3, r0
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	f107 0108 	add.w	r1, r7, #8
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f90:	480f      	ldr	r0, [pc, #60]	; (8000fd0 <UART_TX_TASK_INIT+0x12c>)
 8000f92:	f003 fa7e 	bl	8004492 <HAL_UART_Transmit>

	   	   MSG[10]="";
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <UART_TX_TASK_INIT+0x134>)
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	74bb      	strb	r3, [r7, #18]
	   	   sprintf(MSG,"V  ");
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	490f      	ldr	r1, [pc, #60]	; (8000fe0 <UART_TX_TASK_INIT+0x13c>)
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f007 fd3a 	bl	8008a1c <siprintf>
	   	   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff f917 	bl	80001e0 <strlen>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	f107 0108 	add.w	r1, r7, #8
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbe:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <UART_TX_TASK_INIT+0x12c>)
 8000fc0:	f003 fa67 	bl	8004492 <HAL_UART_Transmit>
	    osDelay(1);
 8000fc4:	e777      	b.n	8000eb6 <UART_TX_TASK_INIT+0x12>
 8000fc6:	bf00      	nop
 8000fc8:	20000b00 	.word	0x20000b00
 8000fcc:	0800945c 	.word	0x0800945c
 8000fd0:	200012ac 	.word	0x200012ac
 8000fd4:	08009460 	.word	0x08009460
 8000fd8:	08009474 	.word	0x08009474
 8000fdc:	08009478 	.word	0x08009478
 8000fe0:	08009484 	.word	0x08009484

08000fe4 <UART_RX_TASK_INIT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_TASK_INIT */
void UART_RX_TASK_INIT(void const * argument)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	  /* Infinite loop */
	  for(;;)
	  {

		  // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
		   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8000fec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff0:	4829      	ldr	r0, [pc, #164]	; (8001098 <UART_RX_TASK_INIT+0xb4>)
 8000ff2:	f002 f916 	bl	8003222 <HAL_GPIO_TogglePin>
		     HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000ff6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ffa:	4827      	ldr	r0, [pc, #156]	; (8001098 <UART_RX_TASK_INIT+0xb4>)
 8000ffc:	f002 f911 	bl	8003222 <HAL_GPIO_TogglePin>
		  // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
		     osDelay(100);
 8001000:	2064      	movs	r0, #100	; 0x64
 8001002:	f004 fd94 	bl	8005b2e <osDelay>


		     MSG_RX = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
		// HAL_UART_Receive(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
		  HAL_UART_Receive(&huart1, MSG_RX, strlen(MSG_RX), 1000);
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	461c      	mov	r4, r3
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff f8e5 	bl	80001e0 <strlen>
 8001016:	4603      	mov	r3, r0
 8001018:	b29a      	uxth	r2, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101e:	4621      	mov	r1, r4
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <UART_RX_TASK_INIT+0xb8>)
 8001022:	f003 fac8 	bl	80045b6 <HAL_UART_Receive>
		// HAL_UART_Receive_DMA(&huart1, (uint8_t*)MSG, strlen(MSG));
		  if(MSG_RX > 0)
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d004      	beq.n	8001036 <UART_RX_TASK_INIT+0x52>
		  {
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800102c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001030:	4819      	ldr	r0, [pc, #100]	; (8001098 <UART_RX_TASK_INIT+0xb4>)
 8001032:	f002 f8f6 	bl	8003222 <HAL_GPIO_TogglePin>
		  }


		  if(MSG_RX == 48)
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	2b30      	cmp	r3, #48	; 0x30
 800103a:	d107      	bne.n	800104c <UART_RX_TASK_INIT+0x68>
		  {
			   MODE=0; //START PAGE == QUIT
 800103c:	2300      	movs	r3, #0
 800103e:	73bb      	strb	r3, [r7, #14]


			   	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	2101      	movs	r1, #1
 8001044:	4814      	ldr	r0, [pc, #80]	; (8001098 <UART_RX_TASK_INIT+0xb4>)
 8001046:	f002 f8d3 	bl	80031f0 <HAL_GPIO_WritePin>
 800104a:	e012      	b.n	8001072 <UART_RX_TASK_INIT+0x8e>
			   	//HAL_Delay(1000);

		  }
		  else if(MSG_RX == 57)
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	2b39      	cmp	r3, #57	; 0x39
 8001050:	d107      	bne.n	8001062 <UART_RX_TASK_INIT+0x7e>
		  		  {
		  			   MODE=0; //START PAGE == QUIT
 8001052:	2300      	movs	r3, #0
 8001054:	73bb      	strb	r3, [r7, #14]


		  			   	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2101      	movs	r1, #1
 800105a:	480f      	ldr	r0, [pc, #60]	; (8001098 <UART_RX_TASK_INIT+0xb4>)
 800105c:	f002 f8c8 	bl	80031f0 <HAL_GPIO_WritePin>
 8001060:	e007      	b.n	8001072 <UART_RX_TASK_INIT+0x8e>
		  			   	//HAL_Delay(1000);

		  		  }
		  else if(MSG_RX==49 && MODE==0)
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	2b31      	cmp	r3, #49	; 0x31
 8001066:	d104      	bne.n	8001072 <UART_RX_TASK_INIT+0x8e>
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <UART_RX_TASK_INIT+0x8e>
		  {
		  	   MODE=1; //
 800106e:	2301      	movs	r3, #1
 8001070:	73bb      	strb	r3, [r7, #14]
		 // QUEUE_MSG = ACD_PIN;
		 // QUEUE_MSG = QUEUE_MSG<<8;
		 // QUEUE_MSG = QUEUE_MSG + MODE;
		 // xQueueSend(UART_READ_QUEUE_UART_SENDHandle, &QUEUE_MSG, portMAX_DELAY);

		  xQueueSend(UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <UART_RX_TASK_INIT+0xbc>)
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	f107 010e 	add.w	r1, r7, #14
 800107a:	2300      	movs	r3, #0
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	f005 f84a 	bl	8006118 <xQueueGenericSend>
		  xQueueSend(UART_RX_QUEUE_ADC_CONFIGHandle, &ADC_PIN, portMAX_DELAY);
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <UART_RX_TASK_INIT+0xc0>)
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	f107 010d 	add.w	r1, r7, #13
 800108c:	2300      	movs	r3, #0
 800108e:	f04f 32ff 	mov.w	r2, #4294967295
 8001092:	f005 f841 	bl	8006118 <xQueueGenericSend>
		   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8001096:	e7a9      	b.n	8000fec <UART_RX_TASK_INIT+0x8>
 8001098:	40020400 	.word	0x40020400
 800109c:	200012ac 	.word	0x200012ac
 80010a0:	20000b08 	.word	0x20000b08
 80010a4:	20000b0c 	.word	0x20000b0c

080010a8 <ADC_CONFIG_TASK_INIT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADC_CONFIG_TASK_INIT */
void ADC_CONFIG_TASK_INIT(void const * argument)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_CONFIG_TASK_INIT */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010b0:	2001      	movs	r0, #1
 80010b2:	f004 fd3c 	bl	8005b2e <osDelay>
 80010b6:	e7fb      	b.n	80010b0 <ADC_CONFIG_TASK_INIT+0x8>

080010b8 <INT_TIMER_TASK_INIT>:



/* USER CODE END Header_INT_TIMER_TASK_INIT */
void INT_TIMER_TASK_INIT(void const * argument)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN INT_TIMER_TASK_INIT */
  /* Infinite loop */
  for(;;)
  {
    vTaskSuspend(NULL); // SUSPEND ITSELF
 80010c0:	2000      	movs	r0, #0
 80010c2:	f005 fdd9 	bl	8006c78 <vTaskSuspend>
    // TASK WILL RUN WHEN ISR OCCOUR

    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 80010c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ca:	4802      	ldr	r0, [pc, #8]	; (80010d4 <INT_TIMER_TASK_INIT+0x1c>)
 80010cc:	f002 f8a9 	bl	8003222 <HAL_GPIO_TogglePin>
    vTaskSuspend(NULL); // SUSPEND ITSELF
 80010d0:	e7f6      	b.n	80010c0 <INT_TIMER_TASK_INIT+0x8>
 80010d2:	bf00      	nop
 80010d4:	40020400 	.word	0x40020400

080010d8 <INT_UART_TASK_INIT>:



/* USER CODE END Header_INT_UART_TASK_INIT */
void INT_UART_TASK_INIT(void const * argument)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	osDelay(100);
 80010e0:	2064      	movs	r0, #100	; 0x64
 80010e2:	f004 fd24 	bl	8005b2e <osDelay>
	// PRZERWANIE WYWYLYWANE PO OTRZYMANIU CAŁEGO BUFORA
	// - TUTAJ USTAWIONEGO NA JEDEN BAJT
	//	HAL_UART_Receive_IT(&huart1, MSG_RX, 1);

	uint8_t MSG_RX;
	HAL_UART_Receive_IT(&huart1, MSG_RX, 2);
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	2202      	movs	r2, #2
 80010ea:	4619      	mov	r1, r3
 80010ec:	480b      	ldr	r0, [pc, #44]	; (800111c <INT_UART_TASK_INIT+0x44>)
 80010ee:	f003 fb04 	bl	80046fa <HAL_UART_Receive_IT>

	// START THE DMA:
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) RxBuf, RxBuf_SIZE);
 80010f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f6:	490a      	ldr	r1, [pc, #40]	; (8001120 <INT_UART_TASK_INIT+0x48>)
 80010f8:	4808      	ldr	r0, [pc, #32]	; (800111c <INT_UART_TASK_INIT+0x44>)
 80010fa:	f003 fb2e 	bl	800475a <HAL_UARTEx_ReceiveToIdle_DMA>
	//__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);

  for(;;)
  {
	  vTaskSuspend(NULL); // SUSPEND ITSELF
 80010fe:	2000      	movs	r0, #0
 8001100:	f005 fdba 	bl	8006c78 <vTaskSuspend>
	      // TASK WILL RUN WHEN ISR OCCOUR

	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001104:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001108:	4806      	ldr	r0, [pc, #24]	; (8001124 <INT_UART_TASK_INIT+0x4c>)
 800110a:	f002 f88a 	bl	8003222 <HAL_GPIO_TogglePin>

	  // START THE DMA AGAIN:
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) RxBuf, RxBuf_SIZE);
 800110e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001112:	4903      	ldr	r1, [pc, #12]	; (8001120 <INT_UART_TASK_INIT+0x48>)
 8001114:	4801      	ldr	r0, [pc, #4]	; (800111c <INT_UART_TASK_INIT+0x44>)
 8001116:	f003 fb20 	bl	800475a <HAL_UARTEx_ReceiveToIdle_DMA>
	  vTaskSuspend(NULL); // SUSPEND ITSELF
 800111a:	e7f0      	b.n	80010fe <INT_UART_TASK_INIT+0x26>
 800111c:	200012ac 	.word	0x200012ac
 8001120:	200000d8 	.word	0x200000d8
 8001124:	40020400 	.word	0x40020400

08001128 <TIMER_CALLBACK>:



/* TIMER_CALLBACK function */
void TIMER_CALLBACK(void const * argument)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <HAL_UART_RxCpltCallback>:
//{

//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001144:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001148:	480e      	ldr	r0, [pc, #56]	; (8001184 <HAL_UART_RxCpltCallback+0x48>)
 800114a:	f002 f86a 	bl	8003222 <HAL_GPIO_TogglePin>

	uint8_t MSG_RX;
	HAL_UART_Receive_IT(&huart1, MSG_RX, 2);
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	2202      	movs	r2, #2
 8001152:	4619      	mov	r1, r3
 8001154:	480c      	ldr	r0, [pc, #48]	; (8001188 <HAL_UART_RxCpltCallback+0x4c>)
 8001156:	f003 fad0 	bl	80046fa <HAL_UART_Receive_IT>

	// WZNAWIANIE ZADANIA DO OBSŁUGI TEGO PRZERW ANIA:
	   BaseType_t checkIfYieldRequired;
    // xTaskResumeFromISR( TASK_HANDLER)
	   checkIfYieldRequired = xTaskResumeFromISR(INT_UART_TASKHandle);
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_UART_RxCpltCallback+0x50>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f005 fe4e 	bl	8006e00 <xTaskResumeFromISR>
 8001164:	60b8      	str	r0, [r7, #8]
	   portYIELD_FROM_ISR(checkIfYieldRequired);
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d007      	beq.n	800117c <HAL_UART_RxCpltCallback+0x40>
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_UART_RxCpltCallback+0x54>)
 800116e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	f3bf 8f4f 	dsb	sy
 8001178:	f3bf 8f6f 	isb	sy
}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40020400 	.word	0x40020400
 8001188:	200012ac 	.word	0x200012ac
 800118c:	20000afc 	.word	0x20000afc
 8001190:	e000ed04 	.word	0xe000ed04

08001194 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800119c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a0:	4803      	ldr	r0, [pc, #12]	; (80011b0 <HAL_UART_RxHalfCpltCallback+0x1c>)
 80011a2:	f002 f83e 	bl	8003222 <HAL_GPIO_TogglePin>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40020400 	.word	0x40020400

080011b4 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);

 // WZNAWIANIE ZADANIA DO OBSŁUGI TEGO PRZERW ANIA:
    BaseType_t checkIfYieldRequired;
 // xTaskResumeFromISR( TASK_HANDLER)
	checkIfYieldRequired = xTaskResumeFromISR(INT_UART_TASKHandle);
 80011c0:	4b40      	ldr	r3, [pc, #256]	; (80012c4 <HAL_UARTEx_RxEventCallback+0x110>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f005 fe1b 	bl	8006e00 <xTaskResumeFromISR>
 80011ca:	6138      	str	r0, [r7, #16]
	portYIELD_FROM_ISR(checkIfYieldRequired);
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d007      	beq.n	80011e2 <HAL_UARTEx_RxEventCallback+0x2e>
 80011d2:	4b3d      	ldr	r3, [pc, #244]	; (80012c8 <HAL_UARTEx_RxEventCallback+0x114>)
 80011d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	f3bf 8f4f 	dsb	sy
 80011de:	f3bf 8f6f 	isb	sy

	if (huart->Instance == USART1)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a39      	ldr	r2, [pc, #228]	; (80012cc <HAL_UARTEx_RxEventCallback+0x118>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d14b      	bne.n	8001284 <HAL_UARTEx_RxEventCallback+0xd0>
	{
		oldPos = newPos;  // Update the last position before copying new data
 80011ec:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <HAL_UARTEx_RxEventCallback+0x11c>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <HAL_UARTEx_RxEventCallback+0x120>)
 80011f4:	801a      	strh	r2, [r3, #0]

		// If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 //This is to maintain the circular buffer
		 // The old data in the main buffer will be overlapped

		if (oldPos+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 80011f6:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <HAL_UARTEx_RxEventCallback+0x120>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	887b      	ldrh	r3, [r7, #2]
 8001200:	4413      	add	r3, r2
 8001202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001206:	dd24      	ble.n	8001252 <HAL_UARTEx_RxEventCallback+0x9e>
		{
			uint16_t datatocopy = MainBuf_SIZE-oldPos;  // find out how much space is left in the main buffer
 8001208:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <HAL_UARTEx_RxEventCallback+0x120>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	b29b      	uxth	r3, r3
 800120e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001212:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, datatocopy);  // copy data in that remaining space
 8001214:	4b2f      	ldr	r3, [pc, #188]	; (80012d4 <HAL_UARTEx_RxEventCallback+0x120>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	b29b      	uxth	r3, r3
 800121a:	461a      	mov	r2, r3
 800121c:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <HAL_UARTEx_RxEventCallback+0x124>)
 800121e:	4413      	add	r3, r2
 8001220:	89fa      	ldrh	r2, [r7, #14]
 8001222:	492e      	ldr	r1, [pc, #184]	; (80012dc <HAL_UARTEx_RxEventCallback+0x128>)
 8001224:	4618      	mov	r0, r3
 8001226:	f007 fbe3 	bl	80089f0 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 800122a:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <HAL_UARTEx_RxEventCallback+0x120>)
 800122c:	2200      	movs	r2, #0
 800122e:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));  // copy the remaining data
 8001230:	89fb      	ldrh	r3, [r7, #14]
 8001232:	4a2a      	ldr	r2, [pc, #168]	; (80012dc <HAL_UARTEx_RxEventCallback+0x128>)
 8001234:	1899      	adds	r1, r3, r2
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	89fb      	ldrh	r3, [r7, #14]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	461a      	mov	r2, r3
 800123e:	4826      	ldr	r0, [pc, #152]	; (80012d8 <HAL_UARTEx_RxEventCallback+0x124>)
 8001240:	f007 fbd6 	bl	80089f0 <memcpy>
			newPos = (Size-datatocopy);  // update the position
 8001244:	887a      	ldrh	r2, [r7, #2]
 8001246:	89fb      	ldrh	r3, [r7, #14]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	b29a      	uxth	r2, r3
 800124c:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <HAL_UARTEx_RxEventCallback+0x11c>)
 800124e:	801a      	strh	r2, [r3, #0]
 8001250:	e012      	b.n	8001278 <HAL_UARTEx_RxEventCallback+0xc4>
		//if the current position + new data size is less than the main buffer
		 // we will simply copy the data into the buffer and update the position

		else
		{
			memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, Size);
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <HAL_UARTEx_RxEventCallback+0x120>)
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	b29b      	uxth	r3, r3
 8001258:	461a      	mov	r2, r3
 800125a:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <HAL_UARTEx_RxEventCallback+0x124>)
 800125c:	4413      	add	r3, r2
 800125e:	887a      	ldrh	r2, [r7, #2]
 8001260:	491e      	ldr	r1, [pc, #120]	; (80012dc <HAL_UARTEx_RxEventCallback+0x128>)
 8001262:	4618      	mov	r0, r3
 8001264:	f007 fbc4 	bl	80089f0 <memcpy>
			newPos = Size+oldPos;
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_UARTEx_RxEventCallback+0x120>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	b29a      	uxth	r2, r3
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	4413      	add	r3, r2
 8001272:	b29a      	uxth	r2, r3
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001276:	801a      	strh	r2, [r3, #0]
		}


		// start the DMA again
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) RxBuf, RxBuf_SIZE);
 8001278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800127c:	4917      	ldr	r1, [pc, #92]	; (80012dc <HAL_UARTEx_RxEventCallback+0x128>)
 800127e:	4818      	ldr	r0, [pc, #96]	; (80012e0 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001280:	f003 fa6b 	bl	800475a <HAL_UARTEx_ReceiveToIdle_DMA>

	}

	//
	// Let's say we want to check for the keyword "OK" within our incoming DATA
		for (int i=0; i<Size; i++)
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	e013      	b.n	80012b2 <HAL_UARTEx_RxEventCallback+0xfe>
		{
			if ((RxBuf[i] == 'O') && (RxBuf[i+1] == 'K'))
 800128a:	4a14      	ldr	r2, [pc, #80]	; (80012dc <HAL_UARTEx_RxEventCallback+0x128>)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	4413      	add	r3, r2
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b4f      	cmp	r3, #79	; 0x4f
 8001296:	d109      	bne.n	80012ac <HAL_UARTEx_RxEventCallback+0xf8>
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	3301      	adds	r3, #1
 800129c:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <HAL_UARTEx_RxEventCallback+0x128>)
 800129e:	5cd3      	ldrb	r3, [r2, r3]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b4b      	cmp	r3, #75	; 0x4b
 80012a4:	d102      	bne.n	80012ac <HAL_UARTEx_RxEventCallback+0xf8>
			{
				isOK = 1;
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_UARTEx_RxEventCallback+0x130>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	601a      	str	r2, [r3, #0]
		for (int i=0; i<Size; i++)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3301      	adds	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	dbe7      	blt.n	800128a <HAL_UARTEx_RxEventCallback+0xd6>
			}
		}


}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000afc 	.word	0x20000afc
 80012c8:	e000ed04 	.word	0xe000ed04
 80012cc:	40011000 	.word	0x40011000
 80012d0:	20000ada 	.word	0x20000ada
 80012d4:	20000ad8 	.word	0x20000ad8
 80012d8:	200002d8 	.word	0x200002d8
 80012dc:	200000d8 	.word	0x200000d8
 80012e0:	200012ac 	.word	0x200012ac
 80012e4:	20000adc 	.word	0x20000adc

080012e8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MX_GPIO_Init+0x80>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a18      	ldr	r2, [pc, #96]	; (8001368 <MX_GPIO_Init+0x80>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_GPIO_Init+0x80>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_GPIO_Init+0x80>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a11      	ldr	r2, [pc, #68]	; (8001368 <MX_GPIO_Init+0x80>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_GPIO_Init+0x80>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14
 8001336:	2200      	movs	r2, #0
 8001338:	f24e 0103 	movw	r1, #57347	; 0xe003
 800133c:	480b      	ldr	r0, [pc, #44]	; (800136c <MX_GPIO_Init+0x84>)
 800133e:	f001 ff57 	bl	80031f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14
 8001342:	f24e 0303 	movw	r3, #57347	; 0xe003
 8001346:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001348:	2311      	movs	r3, #17
 800134a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134c:	2301      	movs	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	4619      	mov	r1, r3
 800135a:	4804      	ldr	r0, [pc, #16]	; (800136c <MX_GPIO_Init+0x84>)
 800135c:	f001 fdc4 	bl	8002ee8 <HAL_GPIO_Init>

}
 8001360:	bf00      	nop
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40020400 	.word	0x40020400

08001370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001374:	f000 fbac 	bl	8001ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001378:	f000 f812 	bl	80013a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137c:	f7ff ffb4 	bl	80012e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001380:	f7ff fb62 	bl	8000a48 <MX_DMA_Init>
  MX_ADC1_Init();
 8001384:	f7ff fac2 	bl	800090c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001388:	f000 fa96 	bl	80018b8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800138c:	f000 f9d2 	bl	8001734 <MX_TIM1_Init>
  MX_TIM11_Init();
 8001390:	f000 fa20 	bl	80017d4 <MX_TIM11_Init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001394:	f7ff fbc2 	bl	8000b1c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001398:	f004 fb76 	bl	8005a88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800139c:	e7fe      	b.n	800139c <main+0x2c>
	...

080013a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b094      	sub	sp, #80	; 0x50
 80013a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a6:	f107 0320 	add.w	r3, r7, #32
 80013aa:	2230      	movs	r2, #48	; 0x30
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f007 fb2c 	bl	8008a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	4b28      	ldr	r3, [pc, #160]	; (800146c <SystemClock_Config+0xcc>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	4a27      	ldr	r2, [pc, #156]	; (800146c <SystemClock_Config+0xcc>)
 80013ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d2:	6413      	str	r3, [r2, #64]	; 0x40
 80013d4:	4b25      	ldr	r3, [pc, #148]	; (800146c <SystemClock_Config+0xcc>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	4b22      	ldr	r3, [pc, #136]	; (8001470 <SystemClock_Config+0xd0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013ec:	4a20      	ldr	r2, [pc, #128]	; (8001470 <SystemClock_Config+0xd0>)
 80013ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <SystemClock_Config+0xd0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001400:	2302      	movs	r3, #2
 8001402:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001404:	2301      	movs	r3, #1
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001408:	2310      	movs	r3, #16
 800140a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140c:	2302      	movs	r3, #2
 800140e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001410:	2300      	movs	r3, #0
 8001412:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001414:	2310      	movs	r3, #16
 8001416:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001418:	23a8      	movs	r3, #168	; 0xa8
 800141a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800141c:	2302      	movs	r3, #2
 800141e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001420:	2304      	movs	r3, #4
 8001422:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001424:	f107 0320 	add.w	r3, r7, #32
 8001428:	4618      	mov	r0, r3
 800142a:	f001 ff15 	bl	8003258 <HAL_RCC_OscConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001434:	f000 f830 	bl	8001498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001438:	230f      	movs	r3, #15
 800143a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143c:	2302      	movs	r3, #2
 800143e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001448:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	2102      	movs	r1, #2
 8001454:	4618      	mov	r0, r3
 8001456:	f002 f977 	bl	8003748 <HAL_RCC_ClockConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001460:	f000 f81a 	bl	8001498 <Error_Handler>
  }
}
 8001464:	bf00      	nop
 8001466:	3750      	adds	r7, #80	; 0x50
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800
 8001470:	40007000 	.word	0x40007000

08001474 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a04      	ldr	r2, [pc, #16]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d101      	bne.n	800148a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001486:	f000 fb45 	bl	8001b14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40014400 	.word	0x40014400

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}
 800149e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <Error_Handler+0x8>
	...

080014a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_MspInit+0x54>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a11      	ldr	r2, [pc, #68]	; (80014f8 <HAL_MspInit+0x54>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <HAL_MspInit+0x54>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_MspInit+0x54>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <HAL_MspInit+0x54>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <HAL_MspInit+0x54>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	210f      	movs	r1, #15
 80014e6:	f06f 0001 	mvn.w	r0, #1
 80014ea:	f001 f8d1 	bl	8002690 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800

080014fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08c      	sub	sp, #48	; 0x30
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <HAL_InitTick+0xd0>)
 8001512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001514:	4a2d      	ldr	r2, [pc, #180]	; (80015cc <HAL_InitTick+0xd0>)
 8001516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151a:	6453      	str	r3, [r2, #68]	; 0x44
 800151c:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <HAL_InitTick+0xd0>)
 800151e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001528:	f107 020c 	add.w	r2, r7, #12
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4611      	mov	r1, r2
 8001532:	4618      	mov	r0, r3
 8001534:	f002 fae8 	bl	8003b08 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001538:	f002 fad2 	bl	8003ae0 <HAL_RCC_GetPCLK2Freq>
 800153c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800153e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001540:	4a23      	ldr	r2, [pc, #140]	; (80015d0 <HAL_InitTick+0xd4>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	0c9b      	lsrs	r3, r3, #18
 8001548:	3b01      	subs	r3, #1
 800154a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800154c:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <HAL_InitTick+0xd8>)
 800154e:	4a22      	ldr	r2, [pc, #136]	; (80015d8 <HAL_InitTick+0xdc>)
 8001550:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_InitTick+0xd8>)
 8001554:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001558:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800155a:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <HAL_InitTick+0xd8>)
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001560:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <HAL_InitTick+0xd8>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <HAL_InitTick+0xd8>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <HAL_InitTick+0xd8>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001572:	4818      	ldr	r0, [pc, #96]	; (80015d4 <HAL_InitTick+0xd8>)
 8001574:	f002 fafa 	bl	8003b6c <HAL_TIM_Base_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800157e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001582:	2b00      	cmp	r3, #0
 8001584:	d11b      	bne.n	80015be <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001586:	4813      	ldr	r0, [pc, #76]	; (80015d4 <HAL_InitTick+0xd8>)
 8001588:	f002 fb40 	bl	8003c0c <HAL_TIM_Base_Start_IT>
 800158c:	4603      	mov	r3, r0
 800158e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001592:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001596:	2b00      	cmp	r3, #0
 8001598:	d111      	bne.n	80015be <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800159a:	2019      	movs	r0, #25
 800159c:	f001 f894 	bl	80026c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b0f      	cmp	r3, #15
 80015a4:	d808      	bhi.n	80015b8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80015a6:	2200      	movs	r2, #0
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	2019      	movs	r0, #25
 80015ac:	f001 f870 	bl	8002690 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015b0:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <HAL_InitTick+0xe0>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e002      	b.n	80015be <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80015be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3730      	adds	r7, #48	; 0x30
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	431bde83 	.word	0x431bde83
 80015d4:	200011d0 	.word	0x200011d0
 80015d8:	40014400 	.word	0x40014400
 80015dc:	20000004 	.word	0x20000004

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <NMI_Handler+0x4>

080015e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <MemManage_Handler+0x4>

080015f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <BusFault_Handler+0x4>

080015f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <UsageFault_Handler+0x4>

080015fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <ADC_IRQHandler+0x10>)
 8001612:	f000 fc22 	bl	8001e5a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000090 	.word	0x20000090

08001620 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001624:	4803      	ldr	r0, [pc, #12]	; (8001634 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001626:	f002 fb53 	bl	8003cd0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800162a:	4803      	ldr	r0, [pc, #12]	; (8001638 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800162c:	f002 fb50 	bl	8003cd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	2000121c 	.word	0x2000121c
 8001638:	200011d0 	.word	0x200011d0

0800163c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001640:	4806      	ldr	r0, [pc, #24]	; (800165c <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8001642:	f002 fb45 	bl	8003cd0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001646:	4806      	ldr	r0, [pc, #24]	; (8001660 <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 8001648:	f002 fb42 	bl	8003cd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */


  	  // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 	 // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800164c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 8001652:	f001 fde6 	bl	8003222 <HAL_GPIO_TogglePin>
 	 // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000121c 	.word	0x2000121c
 8001660:	20001264 	.word	0x20001264
 8001664:	40020400 	.word	0x40020400

08001668 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <USART1_IRQHandler+0x10>)
 800166e:	f003 f8d9 	bl	8004824 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200012ac 	.word	0x200012ac

0800167c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <DMA2_Stream2_IRQHandler+0x10>)
 8001682:	f001 f9c7 	bl	8002a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200012f0 	.word	0x200012f0

08001690 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <DMA2_Stream7_IRQHandler+0x10>)
 8001696:	f001 f9bd 	bl	8002a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20001350 	.word	0x20001350

080016a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ac:	4a14      	ldr	r2, [pc, #80]	; (8001700 <_sbrk+0x5c>)
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <_sbrk+0x60>)
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d102      	bne.n	80016c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <_sbrk+0x64>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <_sbrk+0x68>)
 80016c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <_sbrk+0x64>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d207      	bcs.n	80016e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d4:	f007 f962 	bl	800899c <__errno>
 80016d8:	4603      	mov	r3, r0
 80016da:	220c      	movs	r2, #12
 80016dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016de:	f04f 33ff 	mov.w	r3, #4294967295
 80016e2:	e009      	b.n	80016f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	4a05      	ldr	r2, [pc, #20]	; (8001708 <_sbrk+0x64>)
 80016f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016f6:	68fb      	ldr	r3, [r7, #12]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20018000 	.word	0x20018000
 8001704:	00000400 	.word	0x00000400
 8001708:	20001218 	.word	0x20001218
 800170c:	20005258 	.word	0x20005258

08001710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <SystemInit+0x20>)
 8001716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800171a:	4a05      	ldr	r2, [pc, #20]	; (8001730 <SystemInit+0x20>)
 800171c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001748:	463b      	mov	r3, r7
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001750:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <MX_TIM1_Init+0x98>)
 8001752:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <MX_TIM1_Init+0x9c>)
 8001754:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <MX_TIM1_Init+0x98>)
 8001758:	2200      	movs	r2, #0
 800175a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <MX_TIM1_Init+0x98>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <MX_TIM1_Init+0x98>)
 8001764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001768:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <MX_TIM1_Init+0x98>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <MX_TIM1_Init+0x98>)
 8001772:	2200      	movs	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <MX_TIM1_Init+0x98>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800177c:	4813      	ldr	r0, [pc, #76]	; (80017cc <MX_TIM1_Init+0x98>)
 800177e:	f002 f9f5 	bl	8003b6c <HAL_TIM_Base_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001788:	f7ff fe86 	bl	8001498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800178c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001790:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	4619      	mov	r1, r3
 8001798:	480c      	ldr	r0, [pc, #48]	; (80017cc <MX_TIM1_Init+0x98>)
 800179a:	f002 fba1 	bl	8003ee0 <HAL_TIM_ConfigClockSource>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80017a4:	f7ff fe78 	bl	8001498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017b0:	463b      	mov	r3, r7
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_TIM1_Init+0x98>)
 80017b6:	f002 fd9d 	bl	80042f4 <HAL_TIMEx_MasterConfigSynchronization>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80017c0:	f7ff fe6a 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	2000121c 	.word	0x2000121c
 80017d0:	40010000 	.word	0x40010000

080017d4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_TIM11_Init+0x40>)
 80017da:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <MX_TIM11_Init+0x44>)
 80017dc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8399;
 80017de:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <MX_TIM11_Init+0x40>)
 80017e0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80017e4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <MX_TIM11_Init+0x40>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_TIM11_Init+0x40>)
 80017ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80017f2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <MX_TIM11_Init+0x40>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_TIM11_Init+0x40>)
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001800:	4804      	ldr	r0, [pc, #16]	; (8001814 <MX_TIM11_Init+0x40>)
 8001802:	f002 f9b3 	bl	8003b6c <HAL_TIM_Base_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 800180c:	f7ff fe44 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20001264 	.word	0x20001264
 8001818:	40014800 	.word	0x40014800

0800181c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a20      	ldr	r2, [pc, #128]	; (80018ac <HAL_TIM_Base_MspInit+0x90>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d11e      	bne.n	800186c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <HAL_TIM_Base_MspInit+0x94>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	4a1e      	ldr	r2, [pc, #120]	; (80018b0 <HAL_TIM_Base_MspInit+0x94>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6453      	str	r3, [r2, #68]	; 0x44
 800183e:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <HAL_TIM_Base_MspInit+0x94>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2105      	movs	r1, #5
 800184e:	2019      	movs	r0, #25
 8001850:	f000 ff1e 	bl	8002690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001854:	2019      	movs	r0, #25
 8001856:	f000 ff37 	bl	80026c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2105      	movs	r1, #5
 800185e:	201a      	movs	r0, #26
 8001860:	f000 ff16 	bl	8002690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001864:	201a      	movs	r0, #26
 8001866:	f000 ff2f 	bl	80026c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800186a:	e01a      	b.n	80018a2 <HAL_TIM_Base_MspInit+0x86>
  else if(tim_baseHandle->Instance==TIM11)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a10      	ldr	r2, [pc, #64]	; (80018b4 <HAL_TIM_Base_MspInit+0x98>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d115      	bne.n	80018a2 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <HAL_TIM_Base_MspInit+0x94>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	4a0c      	ldr	r2, [pc, #48]	; (80018b0 <HAL_TIM_Base_MspInit+0x94>)
 8001880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001884:	6453      	str	r3, [r2, #68]	; 0x44
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_TIM_Base_MspInit+0x94>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2105      	movs	r1, #5
 8001896:	201a      	movs	r0, #26
 8001898:	f000 fefa 	bl	8002690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800189c:	201a      	movs	r0, #26
 800189e:	f000 ff13 	bl	80026c8 <HAL_NVIC_EnableIRQ>
}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40010000 	.word	0x40010000
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40014800 	.word	0x40014800

080018b8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_USART1_UART_Init+0x4c>)
 80018be:	4a12      	ldr	r2, [pc, #72]	; (8001908 <MX_USART1_UART_Init+0x50>)
 80018c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <MX_USART1_UART_Init+0x4c>)
 80018c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_USART1_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <MX_USART1_UART_Init+0x4c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <MX_USART1_UART_Init+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <MX_USART1_UART_Init+0x4c>)
 80018de:	220c      	movs	r2, #12
 80018e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <MX_USART1_UART_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <MX_USART1_UART_Init+0x4c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <MX_USART1_UART_Init+0x4c>)
 80018f0:	f002 fd82 	bl	80043f8 <HAL_UART_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018fa:	f7ff fdcd 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200012ac 	.word	0x200012ac
 8001908:	40011000 	.word	0x40011000

0800190c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a4d      	ldr	r2, [pc, #308]	; (8001a60 <HAL_UART_MspInit+0x154>)
 800192a:	4293      	cmp	r3, r2
 800192c:	f040 8093 	bne.w	8001a56 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	4b4b      	ldr	r3, [pc, #300]	; (8001a64 <HAL_UART_MspInit+0x158>)
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	4a4a      	ldr	r2, [pc, #296]	; (8001a64 <HAL_UART_MspInit+0x158>)
 800193a:	f043 0310 	orr.w	r3, r3, #16
 800193e:	6453      	str	r3, [r2, #68]	; 0x44
 8001940:	4b48      	ldr	r3, [pc, #288]	; (8001a64 <HAL_UART_MspInit+0x158>)
 8001942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <HAL_UART_MspInit+0x158>)
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	4a43      	ldr	r2, [pc, #268]	; (8001a64 <HAL_UART_MspInit+0x158>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6313      	str	r3, [r2, #48]	; 0x30
 800195c:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <HAL_UART_MspInit+0x158>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001968:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800197a:	2307      	movs	r3, #7
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	4838      	ldr	r0, [pc, #224]	; (8001a68 <HAL_UART_MspInit+0x15c>)
 8001986:	f001 faaf 	bl	8002ee8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800198a:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <HAL_UART_MspInit+0x160>)
 800198c:	4a38      	ldr	r2, [pc, #224]	; (8001a70 <HAL_UART_MspInit+0x164>)
 800198e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001990:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <HAL_UART_MspInit+0x160>)
 8001992:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001996:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001998:	4b34      	ldr	r3, [pc, #208]	; (8001a6c <HAL_UART_MspInit+0x160>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800199e:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <HAL_UART_MspInit+0x160>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019a4:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <HAL_UART_MspInit+0x160>)
 80019a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019aa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ac:	4b2f      	ldr	r3, [pc, #188]	; (8001a6c <HAL_UART_MspInit+0x160>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b2:	4b2e      	ldr	r3, [pc, #184]	; (8001a6c <HAL_UART_MspInit+0x160>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80019b8:	4b2c      	ldr	r3, [pc, #176]	; (8001a6c <HAL_UART_MspInit+0x160>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019be:	4b2b      	ldr	r3, [pc, #172]	; (8001a6c <HAL_UART_MspInit+0x160>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019c4:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <HAL_UART_MspInit+0x160>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80019ca:	4828      	ldr	r0, [pc, #160]	; (8001a6c <HAL_UART_MspInit+0x160>)
 80019cc:	f000 fe8a 	bl	80026e4 <HAL_DMA_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80019d6:	f7ff fd5f 	bl	8001498 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <HAL_UART_MspInit+0x160>)
 80019de:	639a      	str	r2, [r3, #56]	; 0x38
 80019e0:	4a22      	ldr	r2, [pc, #136]	; (8001a6c <HAL_UART_MspInit+0x160>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80019e6:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <HAL_UART_MspInit+0x168>)
 80019e8:	4a23      	ldr	r2, [pc, #140]	; (8001a78 <HAL_UART_MspInit+0x16c>)
 80019ea:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <HAL_UART_MspInit+0x168>)
 80019ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <HAL_UART_MspInit+0x168>)
 80019f6:	2240      	movs	r2, #64	; 0x40
 80019f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <HAL_UART_MspInit+0x168>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <HAL_UART_MspInit+0x168>)
 8001a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a06:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <HAL_UART_MspInit+0x168>)
 8001a0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a0e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a10:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <HAL_UART_MspInit+0x168>)
 8001a12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a16:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <HAL_UART_MspInit+0x168>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_UART_MspInit+0x168>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <HAL_UART_MspInit+0x168>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001a2a:	4812      	ldr	r0, [pc, #72]	; (8001a74 <HAL_UART_MspInit+0x168>)
 8001a2c:	f000 fe5a 	bl	80026e4 <HAL_DMA_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001a36:	f7ff fd2f 	bl	8001498 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <HAL_UART_MspInit+0x168>)
 8001a3e:	635a      	str	r2, [r3, #52]	; 0x34
 8001a40:	4a0c      	ldr	r2, [pc, #48]	; (8001a74 <HAL_UART_MspInit+0x168>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2105      	movs	r1, #5
 8001a4a:	2025      	movs	r0, #37	; 0x25
 8001a4c:	f000 fe20 	bl	8002690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a50:	2025      	movs	r0, #37	; 0x25
 8001a52:	f000 fe39 	bl	80026c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a56:	bf00      	nop
 8001a58:	3728      	adds	r7, #40	; 0x28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40011000 	.word	0x40011000
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	200012f0 	.word	0x200012f0
 8001a70:	40026440 	.word	0x40026440
 8001a74:	20001350 	.word	0x20001350
 8001a78:	400264b8 	.word	0x400264b8

08001a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a80:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a82:	490e      	ldr	r1, [pc, #56]	; (8001abc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a84:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a88:	e002      	b.n	8001a90 <LoopCopyDataInit>

08001a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8e:	3304      	adds	r3, #4

08001a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a94:	d3f9      	bcc.n	8001a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a96:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a98:	4c0b      	ldr	r4, [pc, #44]	; (8001ac8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a9c:	e001      	b.n	8001aa2 <LoopFillZerobss>

08001a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa0:	3204      	adds	r2, #4

08001aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa4:	d3fb      	bcc.n	8001a9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aa6:	f7ff fe33 	bl	8001710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aaa:	f006 ff7d 	bl	80089a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aae:	f7ff fc5f 	bl	8001370 <main>
  bx  lr    
 8001ab2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ab4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001abc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ac0:	08009508 	.word	0x08009508
  ldr r2, =_sbss
 8001ac4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001ac8:	20005254 	.word	0x20005254

08001acc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <DMA1_Stream0_IRQHandler>
	...

08001ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <HAL_Init+0x40>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <HAL_Init+0x40>)
 8001ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_Init+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <HAL_Init+0x40>)
 8001ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_Init+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_Init+0x40>)
 8001af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f000 fdbe 	bl	800267a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afe:	2005      	movs	r0, #5
 8001b00:	f7ff fcfc 	bl	80014fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b04:	f7ff fcce 	bl	80014a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023c00 	.word	0x40023c00

08001b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_IncTick+0x20>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x24>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <HAL_IncTick+0x24>)
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000008 	.word	0x20000008
 8001b38:	200013b0 	.word	0x200013b0

08001b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <HAL_GetTick+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	200013b0 	.word	0x200013b0

08001b54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e033      	b.n	8001bd2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7fe ff1c 	bl	80009b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d118      	bne.n	8001bc4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b9a:	f023 0302 	bic.w	r3, r3, #2
 8001b9e:	f043 0202 	orr.w	r2, r3, #2
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fbb4 	bl	8002314 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f023 0303 	bic.w	r3, r3, #3
 8001bba:	f043 0201 	orr.w	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
 8001bc2:	e001      	b.n	8001bc8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_ADC_Start+0x1a>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e097      	b.n	8001d26 <HAL_ADC_Start+0x14a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d018      	beq.n	8001c3e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c1c:	4b45      	ldr	r3, [pc, #276]	; (8001d34 <HAL_ADC_Start+0x158>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a45      	ldr	r2, [pc, #276]	; (8001d38 <HAL_ADC_Start+0x15c>)
 8001c22:	fba2 2303 	umull	r2, r3, r2, r3
 8001c26:	0c9a      	lsrs	r2, r3, #18
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c30:	e002      	b.n	8001c38 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f9      	bne.n	8001c32 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d15f      	bne.n	8001d0c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c8a:	d106      	bne.n	8001c9a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c90:	f023 0206 	bic.w	r2, r3, #6
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	645a      	str	r2, [r3, #68]	; 0x44
 8001c98:	e002      	b.n	8001ca0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_ADC_Start+0x160>)
 8001caa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cb4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10f      	bne.n	8001ce2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d129      	bne.n	8001d24 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	e020      	b.n	8001d24 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a16      	ldr	r2, [pc, #88]	; (8001d40 <HAL_ADC_Start+0x164>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d11b      	bne.n	8001d24 <HAL_ADC_Start+0x148>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d114      	bne.n	8001d24 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	e00b      	b.n	8001d24 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f043 0210 	orr.w	r2, r3, #16
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1c:	f043 0201 	orr.w	r2, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20000000 	.word	0x20000000
 8001d38:	431bde83 	.word	0x431bde83
 8001d3c:	40012300 	.word	0x40012300
 8001d40:	40012000 	.word	0x40012000

08001d44 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d60:	d113      	bne.n	8001d8a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d70:	d10b      	bne.n	8001d8a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f043 0220 	orr.w	r2, r3, #32
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e063      	b.n	8001e52 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d8a:	f7ff fed7 	bl	8001b3c <HAL_GetTick>
 8001d8e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d90:	e021      	b.n	8001dd6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d01d      	beq.n	8001dd6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d007      	beq.n	8001db0 <HAL_ADC_PollForConversion+0x6c>
 8001da0:	f7ff fecc 	bl	8001b3c <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d212      	bcs.n	8001dd6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f043 0204 	orr.w	r2, r3, #4
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e03d      	b.n	8001e52 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d1d6      	bne.n	8001d92 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0212 	mvn.w	r2, #18
 8001dec:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d123      	bne.n	8001e50 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d11f      	bne.n	8001e50 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d006      	beq.n	8001e2c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d111      	bne.n	8001e50 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d105      	bne.n	8001e50 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	f043 0201 	orr.w	r2, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d049      	beq.n	8001f24 <HAL_ADC_IRQHandler+0xca>
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d046      	beq.n	8001f24 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d105      	bne.n	8001eae <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d12b      	bne.n	8001f14 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d127      	bne.n	8001f14 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d006      	beq.n	8001ee0 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d119      	bne.n	8001f14 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0220 	bic.w	r2, r2, #32
 8001eee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f043 0201 	orr.w	r2, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f8bd 	bl	8002094 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f06f 0212 	mvn.w	r2, #18
 8001f22:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f32:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d057      	beq.n	8001fea <HAL_ADC_IRQHandler+0x190>
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d054      	beq.n	8001fea <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d105      	bne.n	8001f58 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d139      	bne.n	8001fda <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d12b      	bne.n	8001fda <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d124      	bne.n	8001fda <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d11d      	bne.n	8001fda <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d119      	bne.n	8001fda <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fb4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d105      	bne.n	8001fda <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f043 0201 	orr.w	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fa96 	bl	800250c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 020c 	mvn.w	r2, #12
 8001fe8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d017      	beq.n	8002030 <HAL_ADC_IRQHandler+0x1d6>
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d014      	beq.n	8002030 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d10d      	bne.n	8002030 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f841 	bl	80020a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f06f 0201 	mvn.w	r2, #1
 800202e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0320 	and.w	r3, r3, #32
 8002036:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800203e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d015      	beq.n	8002072 <HAL_ADC_IRQHandler+0x218>
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d012      	beq.n	8002072 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	f043 0202 	orr.w	r2, r3, #2
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0220 	mvn.w	r2, #32
 8002060:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f82a 	bl	80020bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0220 	mvn.w	r2, #32
 8002070:	601a      	str	r2, [r3, #0]
  }
}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x1c>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e105      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x228>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b09      	cmp	r3, #9
 80020fa:	d925      	bls.n	8002148 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68d9      	ldr	r1, [r3, #12]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	4613      	mov	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4413      	add	r3, r2
 8002110:	3b1e      	subs	r3, #30
 8002112:	2207      	movs	r2, #7
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43da      	mvns	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	400a      	ands	r2, r1
 8002120:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68d9      	ldr	r1, [r3, #12]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	b29b      	uxth	r3, r3
 8002132:	4618      	mov	r0, r3
 8002134:	4603      	mov	r3, r0
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4403      	add	r3, r0
 800213a:	3b1e      	subs	r3, #30
 800213c:	409a      	lsls	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	e022      	b.n	800218e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6919      	ldr	r1, [r3, #16]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	b29b      	uxth	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	2207      	movs	r2, #7
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43da      	mvns	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	400a      	ands	r2, r1
 800216a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6919      	ldr	r1, [r3, #16]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	b29b      	uxth	r3, r3
 800217c:	4618      	mov	r0, r3
 800217e:	4603      	mov	r3, r0
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4403      	add	r3, r0
 8002184:	409a      	lsls	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b06      	cmp	r3, #6
 8002194:	d824      	bhi.n	80021e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	3b05      	subs	r3, #5
 80021a8:	221f      	movs	r2, #31
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	400a      	ands	r2, r1
 80021b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	4618      	mov	r0, r3
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	3b05      	subs	r3, #5
 80021d2:	fa00 f203 	lsl.w	r2, r0, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	635a      	str	r2, [r3, #52]	; 0x34
 80021de:	e04c      	b.n	800227a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b0c      	cmp	r3, #12
 80021e6:	d824      	bhi.n	8002232 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	3b23      	subs	r3, #35	; 0x23
 80021fa:	221f      	movs	r2, #31
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43da      	mvns	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	400a      	ands	r2, r1
 8002208:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	b29b      	uxth	r3, r3
 8002216:	4618      	mov	r0, r3
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	3b23      	subs	r3, #35	; 0x23
 8002224:	fa00 f203 	lsl.w	r2, r0, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	631a      	str	r2, [r3, #48]	; 0x30
 8002230:	e023      	b.n	800227a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	3b41      	subs	r3, #65	; 0x41
 8002244:	221f      	movs	r2, #31
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	400a      	ands	r2, r1
 8002252:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	4618      	mov	r0, r3
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	3b41      	subs	r3, #65	; 0x41
 800226e:	fa00 f203 	lsl.w	r2, r0, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800227a:	4b22      	ldr	r3, [pc, #136]	; (8002304 <HAL_ADC_ConfigChannel+0x234>)
 800227c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a21      	ldr	r2, [pc, #132]	; (8002308 <HAL_ADC_ConfigChannel+0x238>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d109      	bne.n	800229c <HAL_ADC_ConfigChannel+0x1cc>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b12      	cmp	r3, #18
 800228e:	d105      	bne.n	800229c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a19      	ldr	r2, [pc, #100]	; (8002308 <HAL_ADC_ConfigChannel+0x238>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d123      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x21e>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d003      	beq.n	80022b6 <HAL_ADC_ConfigChannel+0x1e6>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b11      	cmp	r3, #17
 80022b4:	d11b      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b10      	cmp	r3, #16
 80022c8:	d111      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <HAL_ADC_ConfigChannel+0x23c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a10      	ldr	r2, [pc, #64]	; (8002310 <HAL_ADC_ConfigChannel+0x240>)
 80022d0:	fba2 2303 	umull	r2, r3, r2, r3
 80022d4:	0c9a      	lsrs	r2, r3, #18
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022e0:	e002      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f9      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	40012300 	.word	0x40012300
 8002308:	40012000 	.word	0x40012000
 800230c:	20000000 	.word	0x20000000
 8002310:	431bde83 	.word	0x431bde83

08002314 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800231c:	4b79      	ldr	r3, [pc, #484]	; (8002504 <ADC_Init+0x1f0>)
 800231e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	431a      	orrs	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002348:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	021a      	lsls	r2, r3, #8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800236c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800238e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6899      	ldr	r1, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a6:	4a58      	ldr	r2, [pc, #352]	; (8002508 <ADC_Init+0x1f4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d022      	beq.n	80023f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6899      	ldr	r1, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6899      	ldr	r1, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	e00f      	b.n	8002412 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002410:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0202 	bic.w	r2, r2, #2
 8002420:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6899      	ldr	r1, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	7e1b      	ldrb	r3, [r3, #24]
 800242c:	005a      	lsls	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01b      	beq.n	8002478 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800244e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800245e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6859      	ldr	r1, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	3b01      	subs	r3, #1
 800246c:	035a      	lsls	r2, r3, #13
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	e007      	b.n	8002488 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002486:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002496:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	051a      	lsls	r2, r3, #20
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6899      	ldr	r1, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024ca:	025a      	lsls	r2, r3, #9
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6899      	ldr	r1, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	029a      	lsls	r2, r3, #10
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	609a      	str	r2, [r3, #8]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	40012300 	.word	0x40012300
 8002508:	0f000001 	.word	0x0f000001

0800250c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800254c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002552:	4a04      	ldr	r2, [pc, #16]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	60d3      	str	r3, [r2, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <__NVIC_GetPriorityGrouping+0x18>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	f003 0307 	and.w	r3, r3, #7
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	2b00      	cmp	r3, #0
 8002594:	db0b      	blt.n	80025ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	4907      	ldr	r1, [pc, #28]	; (80025bc <__NVIC_EnableIRQ+0x38>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	2001      	movs	r0, #1
 80025a6:	fa00 f202 	lsl.w	r2, r0, r2
 80025aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000e100 	.word	0xe000e100

080025c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	db0a      	blt.n	80025ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	490c      	ldr	r1, [pc, #48]	; (800260c <__NVIC_SetPriority+0x4c>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	440b      	add	r3, r1
 80025e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e8:	e00a      	b.n	8002600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4908      	ldr	r1, [pc, #32]	; (8002610 <__NVIC_SetPriority+0x50>)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	3b04      	subs	r3, #4
 80025f8:	0112      	lsls	r2, r2, #4
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	440b      	add	r3, r1
 80025fe:	761a      	strb	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000e100 	.word	0xe000e100
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f1c3 0307 	rsb	r3, r3, #7
 800262e:	2b04      	cmp	r3, #4
 8002630:	bf28      	it	cs
 8002632:	2304      	movcs	r3, #4
 8002634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3304      	adds	r3, #4
 800263a:	2b06      	cmp	r3, #6
 800263c:	d902      	bls.n	8002644 <NVIC_EncodePriority+0x30>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3b03      	subs	r3, #3
 8002642:	e000      	b.n	8002646 <NVIC_EncodePriority+0x32>
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	f04f 32ff 	mov.w	r2, #4294967295
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	401a      	ands	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800265c:	f04f 31ff 	mov.w	r1, #4294967295
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	43d9      	mvns	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	4313      	orrs	r3, r2
         );
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	; 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff ff4c 	bl	8002520 <__NVIC_SetPriorityGrouping>
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026a2:	f7ff ff61 	bl	8002568 <__NVIC_GetPriorityGrouping>
 80026a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	6978      	ldr	r0, [r7, #20]
 80026ae:	f7ff ffb1 	bl	8002614 <NVIC_EncodePriority>
 80026b2:	4602      	mov	r2, r0
 80026b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff80 	bl	80025c0 <__NVIC_SetPriority>
}
 80026c0:	bf00      	nop
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ff54 	bl	8002584 <__NVIC_EnableIRQ>
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026f0:	f7ff fa24 	bl	8001b3c <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e099      	b.n	8002834 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002720:	e00f      	b.n	8002742 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002722:	f7ff fa0b 	bl	8001b3c <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b05      	cmp	r3, #5
 800272e:	d908      	bls.n	8002742 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2220      	movs	r2, #32
 8002734:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2203      	movs	r2, #3
 800273a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e078      	b.n	8002834 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1e8      	bne.n	8002722 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	4b38      	ldr	r3, [pc, #224]	; (800283c <HAL_DMA_Init+0x158>)
 800275c:	4013      	ands	r3, r2
 800275e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800276e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	2b04      	cmp	r3, #4
 800279a:	d107      	bne.n	80027ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	4313      	orrs	r3, r2
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f023 0307 	bic.w	r3, r3, #7
 80027c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d117      	bne.n	8002806 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00e      	beq.n	8002806 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 fb01 	bl	8002df0 <DMA_CheckFifoParam>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2240      	movs	r2, #64	; 0x40
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002802:	2301      	movs	r3, #1
 8002804:	e016      	b.n	8002834 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fab8 	bl	8002d84 <DMA_CalcBaseAndBitshift>
 8002814:	4603      	mov	r3, r0
 8002816:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	223f      	movs	r2, #63	; 0x3f
 800281e:	409a      	lsls	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	f010803f 	.word	0xf010803f

08002840 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002856:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_DMA_Start_IT+0x26>
 8002862:	2302      	movs	r3, #2
 8002864:	e040      	b.n	80028e8 <HAL_DMA_Start_IT+0xa8>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b01      	cmp	r3, #1
 8002878:	d12f      	bne.n	80028da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2202      	movs	r2, #2
 800287e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 fa4a 	bl	8002d28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002898:	223f      	movs	r2, #63	; 0x3f
 800289a:	409a      	lsls	r2, r3
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0216 	orr.w	r2, r2, #22
 80028ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d007      	beq.n	80028c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0208 	orr.w	r2, r2, #8
 80028c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	e005      	b.n	80028e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028e2:	2302      	movs	r3, #2
 80028e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028fe:	f7ff f91d 	bl	8001b3c <HAL_GetTick>
 8002902:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d008      	beq.n	8002922 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2280      	movs	r2, #128	; 0x80
 8002914:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e052      	b.n	80029c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0216 	bic.w	r2, r2, #22
 8002930:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002940:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d103      	bne.n	8002952 <HAL_DMA_Abort+0x62>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294e:	2b00      	cmp	r3, #0
 8002950:	d007      	beq.n	8002962 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0208 	bic.w	r2, r2, #8
 8002960:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0201 	bic.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002972:	e013      	b.n	800299c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002974:	f7ff f8e2 	bl	8001b3c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b05      	cmp	r3, #5
 8002980:	d90c      	bls.n	800299c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2220      	movs	r2, #32
 8002986:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2203      	movs	r2, #3
 800298c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e015      	b.n	80029c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1e4      	bne.n	8002974 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ae:	223f      	movs	r2, #63	; 0x3f
 80029b0:	409a      	lsls	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d004      	beq.n	80029ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2280      	movs	r2, #128	; 0x80
 80029e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e00c      	b.n	8002a08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2205      	movs	r2, #5
 80029f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a20:	4b8e      	ldr	r3, [pc, #568]	; (8002c5c <HAL_DMA_IRQHandler+0x248>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a8e      	ldr	r2, [pc, #568]	; (8002c60 <HAL_DMA_IRQHandler+0x24c>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	0a9b      	lsrs	r3, r3, #10
 8002a2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3e:	2208      	movs	r2, #8
 8002a40:	409a      	lsls	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d01a      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d013      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0204 	bic.w	r2, r2, #4
 8002a66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a78:	f043 0201 	orr.w	r2, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a84:	2201      	movs	r2, #1
 8002a86:	409a      	lsls	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d012      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00b      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aae:	f043 0202 	orr.w	r2, r3, #2
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aba:	2204      	movs	r2, #4
 8002abc:	409a      	lsls	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d012      	beq.n	8002aec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00b      	beq.n	8002aec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad8:	2204      	movs	r2, #4
 8002ada:	409a      	lsls	r2, r3
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae4:	f043 0204 	orr.w	r2, r3, #4
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	2210      	movs	r2, #16
 8002af2:	409a      	lsls	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d043      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d03c      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0e:	2210      	movs	r2, #16
 8002b10:	409a      	lsls	r2, r3
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d018      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d108      	bne.n	8002b44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d024      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	4798      	blx	r3
 8002b42:	e01f      	b.n	8002b84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d01b      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	4798      	blx	r3
 8002b54:	e016      	b.n	8002b84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d107      	bne.n	8002b74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0208 	bic.w	r2, r2, #8
 8002b72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b88:	2220      	movs	r2, #32
 8002b8a:	409a      	lsls	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 808f 	beq.w	8002cb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 8087 	beq.w	8002cb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002baa:	2220      	movs	r2, #32
 8002bac:	409a      	lsls	r2, r3
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b05      	cmp	r3, #5
 8002bbc:	d136      	bne.n	8002c2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0216 	bic.w	r2, r2, #22
 8002bcc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695a      	ldr	r2, [r3, #20]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d103      	bne.n	8002bee <HAL_DMA_IRQHandler+0x1da>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0208 	bic.w	r2, r2, #8
 8002bfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c02:	223f      	movs	r2, #63	; 0x3f
 8002c04:	409a      	lsls	r2, r3
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d07e      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	4798      	blx	r3
        }
        return;
 8002c2a:	e079      	b.n	8002d20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d01d      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10d      	bne.n	8002c64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d031      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	4798      	blx	r3
 8002c58:	e02c      	b.n	8002cb4 <HAL_DMA_IRQHandler+0x2a0>
 8002c5a:	bf00      	nop
 8002c5c:	20000000 	.word	0x20000000
 8002c60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d023      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	4798      	blx	r3
 8002c74:	e01e      	b.n	8002cb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10f      	bne.n	8002ca4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0210 	bic.w	r2, r2, #16
 8002c92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d032      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d022      	beq.n	8002d0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2205      	movs	r2, #5
 8002ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d307      	bcc.n	8002cfc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f2      	bne.n	8002ce0 <HAL_DMA_IRQHandler+0x2cc>
 8002cfa:	e000      	b.n	8002cfe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002cfc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	4798      	blx	r3
 8002d1e:	e000      	b.n	8002d22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d20:	bf00      	nop
    }
  }
}
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b40      	cmp	r3, #64	; 0x40
 8002d54:	d108      	bne.n	8002d68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d66:	e007      	b.n	8002d78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	60da      	str	r2, [r3, #12]
}
 8002d78:	bf00      	nop
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	3b10      	subs	r3, #16
 8002d94:	4a14      	ldr	r2, [pc, #80]	; (8002de8 <DMA_CalcBaseAndBitshift+0x64>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	091b      	lsrs	r3, r3, #4
 8002d9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d9e:	4a13      	ldr	r2, [pc, #76]	; (8002dec <DMA_CalcBaseAndBitshift+0x68>)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4413      	add	r3, r2
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d909      	bls.n	8002dc6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dba:	f023 0303 	bic.w	r3, r3, #3
 8002dbe:	1d1a      	adds	r2, r3, #4
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	659a      	str	r2, [r3, #88]	; 0x58
 8002dc4:	e007      	b.n	8002dd6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dce:	f023 0303 	bic.w	r3, r3, #3
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	aaaaaaab 	.word	0xaaaaaaab
 8002dec:	080094bc 	.word	0x080094bc

08002df0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d11f      	bne.n	8002e4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d856      	bhi.n	8002ebe <DMA_CheckFifoParam+0xce>
 8002e10:	a201      	add	r2, pc, #4	; (adr r2, 8002e18 <DMA_CheckFifoParam+0x28>)
 8002e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e16:	bf00      	nop
 8002e18:	08002e29 	.word	0x08002e29
 8002e1c:	08002e3b 	.word	0x08002e3b
 8002e20:	08002e29 	.word	0x08002e29
 8002e24:	08002ebf 	.word	0x08002ebf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d046      	beq.n	8002ec2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e38:	e043      	b.n	8002ec2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e42:	d140      	bne.n	8002ec6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e48:	e03d      	b.n	8002ec6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e52:	d121      	bne.n	8002e98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d837      	bhi.n	8002eca <DMA_CheckFifoParam+0xda>
 8002e5a:	a201      	add	r2, pc, #4	; (adr r2, 8002e60 <DMA_CheckFifoParam+0x70>)
 8002e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e60:	08002e71 	.word	0x08002e71
 8002e64:	08002e77 	.word	0x08002e77
 8002e68:	08002e71 	.word	0x08002e71
 8002e6c:	08002e89 	.word	0x08002e89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
      break;
 8002e74:	e030      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d025      	beq.n	8002ece <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e86:	e022      	b.n	8002ece <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e90:	d11f      	bne.n	8002ed2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e96:	e01c      	b.n	8002ed2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d903      	bls.n	8002ea6 <DMA_CheckFifoParam+0xb6>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d003      	beq.n	8002eac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ea4:	e018      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	73fb      	strb	r3, [r7, #15]
      break;
 8002eaa:	e015      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00e      	beq.n	8002ed6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
      break;
 8002ebc:	e00b      	b.n	8002ed6 <DMA_CheckFifoParam+0xe6>
      break;
 8002ebe:	bf00      	nop
 8002ec0:	e00a      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ec2:	bf00      	nop
 8002ec4:	e008      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e006      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e004      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e002      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ed2:	bf00      	nop
 8002ed4:	e000      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop

08002ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b089      	sub	sp, #36	; 0x24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	e159      	b.n	80031b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f04:	2201      	movs	r2, #1
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	f040 8148 	bne.w	80031b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d005      	beq.n	8002f3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d130      	bne.n	8002f9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	2203      	movs	r2, #3
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f70:	2201      	movs	r2, #1
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	f003 0201 	and.w	r2, r3, #1
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d017      	beq.n	8002fd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d123      	bne.n	800302c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	08da      	lsrs	r2, r3, #3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3208      	adds	r2, #8
 8002fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	220f      	movs	r2, #15
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	08da      	lsrs	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3208      	adds	r2, #8
 8003026:	69b9      	ldr	r1, [r7, #24]
 8003028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	2203      	movs	r2, #3
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0203 	and.w	r2, r3, #3
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80a2 	beq.w	80031b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	4b57      	ldr	r3, [pc, #348]	; (80031d0 <HAL_GPIO_Init+0x2e8>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	4a56      	ldr	r2, [pc, #344]	; (80031d0 <HAL_GPIO_Init+0x2e8>)
 8003078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800307c:	6453      	str	r3, [r2, #68]	; 0x44
 800307e:	4b54      	ldr	r3, [pc, #336]	; (80031d0 <HAL_GPIO_Init+0x2e8>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800308a:	4a52      	ldr	r2, [pc, #328]	; (80031d4 <HAL_GPIO_Init+0x2ec>)
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	3302      	adds	r3, #2
 8003092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	220f      	movs	r2, #15
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4013      	ands	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a49      	ldr	r2, [pc, #292]	; (80031d8 <HAL_GPIO_Init+0x2f0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d019      	beq.n	80030ea <HAL_GPIO_Init+0x202>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a48      	ldr	r2, [pc, #288]	; (80031dc <HAL_GPIO_Init+0x2f4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_GPIO_Init+0x1fe>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a47      	ldr	r2, [pc, #284]	; (80031e0 <HAL_GPIO_Init+0x2f8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00d      	beq.n	80030e2 <HAL_GPIO_Init+0x1fa>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a46      	ldr	r2, [pc, #280]	; (80031e4 <HAL_GPIO_Init+0x2fc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <HAL_GPIO_Init+0x1f6>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a45      	ldr	r2, [pc, #276]	; (80031e8 <HAL_GPIO_Init+0x300>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_GPIO_Init+0x1f2>
 80030d6:	2304      	movs	r3, #4
 80030d8:	e008      	b.n	80030ec <HAL_GPIO_Init+0x204>
 80030da:	2307      	movs	r3, #7
 80030dc:	e006      	b.n	80030ec <HAL_GPIO_Init+0x204>
 80030de:	2303      	movs	r3, #3
 80030e0:	e004      	b.n	80030ec <HAL_GPIO_Init+0x204>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e002      	b.n	80030ec <HAL_GPIO_Init+0x204>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_GPIO_Init+0x204>
 80030ea:	2300      	movs	r3, #0
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	f002 0203 	and.w	r2, r2, #3
 80030f2:	0092      	lsls	r2, r2, #2
 80030f4:	4093      	lsls	r3, r2
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030fc:	4935      	ldr	r1, [pc, #212]	; (80031d4 <HAL_GPIO_Init+0x2ec>)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	089b      	lsrs	r3, r3, #2
 8003102:	3302      	adds	r3, #2
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800310a:	4b38      	ldr	r3, [pc, #224]	; (80031ec <HAL_GPIO_Init+0x304>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800312e:	4a2f      	ldr	r2, [pc, #188]	; (80031ec <HAL_GPIO_Init+0x304>)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003134:	4b2d      	ldr	r3, [pc, #180]	; (80031ec <HAL_GPIO_Init+0x304>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003158:	4a24      	ldr	r2, [pc, #144]	; (80031ec <HAL_GPIO_Init+0x304>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800315e:	4b23      	ldr	r3, [pc, #140]	; (80031ec <HAL_GPIO_Init+0x304>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003182:	4a1a      	ldr	r2, [pc, #104]	; (80031ec <HAL_GPIO_Init+0x304>)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003188:	4b18      	ldr	r3, [pc, #96]	; (80031ec <HAL_GPIO_Init+0x304>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031ac:	4a0f      	ldr	r2, [pc, #60]	; (80031ec <HAL_GPIO_Init+0x304>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3301      	adds	r3, #1
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b0f      	cmp	r3, #15
 80031bc:	f67f aea2 	bls.w	8002f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3724      	adds	r7, #36	; 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40013800 	.word	0x40013800
 80031d8:	40020000 	.word	0x40020000
 80031dc:	40020400 	.word	0x40020400
 80031e0:	40020800 	.word	0x40020800
 80031e4:	40020c00 	.word	0x40020c00
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40013c00 	.word	0x40013c00

080031f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	807b      	strh	r3, [r7, #2]
 80031fc:	4613      	mov	r3, r2
 80031fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003200:	787b      	ldrb	r3, [r7, #1]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003206:	887a      	ldrh	r2, [r7, #2]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800320c:	e003      	b.n	8003216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800320e:	887b      	ldrh	r3, [r7, #2]
 8003210:	041a      	lsls	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	619a      	str	r2, [r3, #24]
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003222:	b480      	push	{r7}
 8003224:	b085      	sub	sp, #20
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003234:	887a      	ldrh	r2, [r7, #2]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4013      	ands	r3, r2
 800323a:	041a      	lsls	r2, r3, #16
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	43d9      	mvns	r1, r3
 8003240:	887b      	ldrh	r3, [r7, #2]
 8003242:	400b      	ands	r3, r1
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	619a      	str	r2, [r3, #24]
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e267      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d075      	beq.n	8003362 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003276:	4b88      	ldr	r3, [pc, #544]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b04      	cmp	r3, #4
 8003280:	d00c      	beq.n	800329c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003282:	4b85      	ldr	r3, [pc, #532]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800328a:	2b08      	cmp	r3, #8
 800328c:	d112      	bne.n	80032b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800328e:	4b82      	ldr	r3, [pc, #520]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800329a:	d10b      	bne.n	80032b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329c:	4b7e      	ldr	r3, [pc, #504]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d05b      	beq.n	8003360 <HAL_RCC_OscConfig+0x108>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d157      	bne.n	8003360 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e242      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032bc:	d106      	bne.n	80032cc <HAL_RCC_OscConfig+0x74>
 80032be:	4b76      	ldr	r3, [pc, #472]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a75      	ldr	r2, [pc, #468]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e01d      	b.n	8003308 <HAL_RCC_OscConfig+0xb0>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x98>
 80032d6:	4b70      	ldr	r3, [pc, #448]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a6f      	ldr	r2, [pc, #444]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4b6d      	ldr	r3, [pc, #436]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6c      	ldr	r2, [pc, #432]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e00b      	b.n	8003308 <HAL_RCC_OscConfig+0xb0>
 80032f0:	4b69      	ldr	r3, [pc, #420]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a68      	ldr	r2, [pc, #416]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4b66      	ldr	r3, [pc, #408]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a65      	ldr	r2, [pc, #404]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fe fc14 	bl	8001b3c <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003318:	f7fe fc10 	bl	8001b3c <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e207      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b5b      	ldr	r3, [pc, #364]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0xc0>
 8003336:	e014      	b.n	8003362 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe fc00 	bl	8001b3c <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003340:	f7fe fbfc 	bl	8001b3c <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e1f3      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003352:	4b51      	ldr	r3, [pc, #324]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0xe8>
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d063      	beq.n	8003436 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800336e:	4b4a      	ldr	r3, [pc, #296]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00b      	beq.n	8003392 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337a:	4b47      	ldr	r3, [pc, #284]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003382:	2b08      	cmp	r3, #8
 8003384:	d11c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003386:	4b44      	ldr	r3, [pc, #272]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d116      	bne.n	80033c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003392:	4b41      	ldr	r3, [pc, #260]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_RCC_OscConfig+0x152>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d001      	beq.n	80033aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e1c7      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033aa:	4b3b      	ldr	r3, [pc, #236]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4937      	ldr	r1, [pc, #220]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033be:	e03a      	b.n	8003436 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d020      	beq.n	800340a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c8:	4b34      	ldr	r3, [pc, #208]	; (800349c <HAL_RCC_OscConfig+0x244>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ce:	f7fe fbb5 	bl	8001b3c <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d6:	f7fe fbb1 	bl	8001b3c <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e1a8      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e8:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f4:	4b28      	ldr	r3, [pc, #160]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4925      	ldr	r1, [pc, #148]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]
 8003408:	e015      	b.n	8003436 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340a:	4b24      	ldr	r3, [pc, #144]	; (800349c <HAL_RCC_OscConfig+0x244>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003410:	f7fe fb94 	bl	8001b3c <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003418:	f7fe fb90 	bl	8001b3c <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e187      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342a:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d036      	beq.n	80034b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d016      	beq.n	8003478 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344a:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <HAL_RCC_OscConfig+0x248>)
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7fe fb74 	bl	8001b3c <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003458:	f7fe fb70 	bl	8001b3c <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e167      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346a:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800346c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x200>
 8003476:	e01b      	b.n	80034b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003478:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <HAL_RCC_OscConfig+0x248>)
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347e:	f7fe fb5d 	bl	8001b3c <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003484:	e00e      	b.n	80034a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003486:	f7fe fb59 	bl	8001b3c <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d907      	bls.n	80034a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e150      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
 8003498:	40023800 	.word	0x40023800
 800349c:	42470000 	.word	0x42470000
 80034a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a4:	4b88      	ldr	r3, [pc, #544]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1ea      	bne.n	8003486 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8097 	beq.w	80035ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034be:	2300      	movs	r3, #0
 80034c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c2:	4b81      	ldr	r3, [pc, #516]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10f      	bne.n	80034ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	4b7d      	ldr	r3, [pc, #500]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4a7c      	ldr	r2, [pc, #496]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6413      	str	r3, [r2, #64]	; 0x40
 80034de:	4b7a      	ldr	r3, [pc, #488]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ea:	2301      	movs	r3, #1
 80034ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ee:	4b77      	ldr	r3, [pc, #476]	; (80036cc <HAL_RCC_OscConfig+0x474>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d118      	bne.n	800352c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fa:	4b74      	ldr	r3, [pc, #464]	; (80036cc <HAL_RCC_OscConfig+0x474>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a73      	ldr	r2, [pc, #460]	; (80036cc <HAL_RCC_OscConfig+0x474>)
 8003500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003506:	f7fe fb19 	bl	8001b3c <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350e:	f7fe fb15 	bl	8001b3c <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e10c      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	4b6a      	ldr	r3, [pc, #424]	; (80036cc <HAL_RCC_OscConfig+0x474>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d106      	bne.n	8003542 <HAL_RCC_OscConfig+0x2ea>
 8003534:	4b64      	ldr	r3, [pc, #400]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	4a63      	ldr	r2, [pc, #396]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6713      	str	r3, [r2, #112]	; 0x70
 8003540:	e01c      	b.n	800357c <HAL_RCC_OscConfig+0x324>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b05      	cmp	r3, #5
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0x30c>
 800354a:	4b5f      	ldr	r3, [pc, #380]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	4a5e      	ldr	r2, [pc, #376]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003550:	f043 0304 	orr.w	r3, r3, #4
 8003554:	6713      	str	r3, [r2, #112]	; 0x70
 8003556:	4b5c      	ldr	r3, [pc, #368]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	4a5b      	ldr	r2, [pc, #364]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	6713      	str	r3, [r2, #112]	; 0x70
 8003562:	e00b      	b.n	800357c <HAL_RCC_OscConfig+0x324>
 8003564:	4b58      	ldr	r3, [pc, #352]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	4a57      	ldr	r2, [pc, #348]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	6713      	str	r3, [r2, #112]	; 0x70
 8003570:	4b55      	ldr	r3, [pc, #340]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	4a54      	ldr	r2, [pc, #336]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003576:	f023 0304 	bic.w	r3, r3, #4
 800357a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d015      	beq.n	80035b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7fe fada 	bl	8001b3c <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800358c:	f7fe fad6 	bl	8001b3c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	; 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e0cb      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a2:	4b49      	ldr	r3, [pc, #292]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0ee      	beq.n	800358c <HAL_RCC_OscConfig+0x334>
 80035ae:	e014      	b.n	80035da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b0:	f7fe fac4 	bl	8001b3c <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b8:	f7fe fac0 	bl	8001b3c <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e0b5      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ce:	4b3e      	ldr	r3, [pc, #248]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1ee      	bne.n	80035b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d105      	bne.n	80035ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e0:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	4a38      	ldr	r2, [pc, #224]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80a1 	beq.w	8003738 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035f6:	4b34      	ldr	r3, [pc, #208]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d05c      	beq.n	80036bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d141      	bne.n	800368e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360a:	4b31      	ldr	r3, [pc, #196]	; (80036d0 <HAL_RCC_OscConfig+0x478>)
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fe fa94 	bl	8001b3c <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003618:	f7fe fa90 	bl	8001b3c <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e087      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362a:	4b27      	ldr	r3, [pc, #156]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69da      	ldr	r2, [r3, #28]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	019b      	lsls	r3, r3, #6
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	3b01      	subs	r3, #1
 8003650:	041b      	lsls	r3, r3, #16
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	061b      	lsls	r3, r3, #24
 800365a:	491b      	ldr	r1, [pc, #108]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003660:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <HAL_RCC_OscConfig+0x478>)
 8003662:	2201      	movs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fe fa69 	bl	8001b3c <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366e:	f7fe fa65 	bl	8001b3c <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e05c      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003680:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x416>
 800368c:	e054      	b.n	8003738 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368e:	4b10      	ldr	r3, [pc, #64]	; (80036d0 <HAL_RCC_OscConfig+0x478>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fe fa52 	bl	8001b3c <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800369c:	f7fe fa4e 	bl	8001b3c <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e045      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x444>
 80036ba:	e03d      	b.n	8003738 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d107      	bne.n	80036d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e038      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40007000 	.word	0x40007000
 80036d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036d4:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <HAL_RCC_OscConfig+0x4ec>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d028      	beq.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d121      	bne.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d11a      	bne.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003704:	4013      	ands	r3, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800370a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800370c:	4293      	cmp	r3, r2
 800370e:	d111      	bne.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	3b01      	subs	r3, #1
 800371e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	d107      	bne.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800

08003748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0cc      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800375c:	4b68      	ldr	r3, [pc, #416]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d90c      	bls.n	8003784 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376a:	4b65      	ldr	r3, [pc, #404]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003772:	4b63      	ldr	r3, [pc, #396]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d001      	beq.n	8003784 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0b8      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d020      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800379c:	4b59      	ldr	r3, [pc, #356]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	4a58      	ldr	r2, [pc, #352]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037b4:	4b53      	ldr	r3, [pc, #332]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	4a52      	ldr	r2, [pc, #328]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c0:	4b50      	ldr	r3, [pc, #320]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	494d      	ldr	r1, [pc, #308]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d044      	beq.n	8003868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d107      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e6:	4b47      	ldr	r3, [pc, #284]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d119      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e07f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d003      	beq.n	8003806 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003802:	2b03      	cmp	r3, #3
 8003804:	d107      	bne.n	8003816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003806:	4b3f      	ldr	r3, [pc, #252]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e06f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003816:	4b3b      	ldr	r3, [pc, #236]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e067      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003826:	4b37      	ldr	r3, [pc, #220]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f023 0203 	bic.w	r2, r3, #3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	4934      	ldr	r1, [pc, #208]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	4313      	orrs	r3, r2
 8003836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003838:	f7fe f980 	bl	8001b3c <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383e:	e00a      	b.n	8003856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003840:	f7fe f97c 	bl	8001b3c <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	; 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e04f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003856:	4b2b      	ldr	r3, [pc, #172]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 020c 	and.w	r2, r3, #12
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	429a      	cmp	r2, r3
 8003866:	d1eb      	bne.n	8003840 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003868:	4b25      	ldr	r3, [pc, #148]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d20c      	bcs.n	8003890 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b22      	ldr	r3, [pc, #136]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b20      	ldr	r3, [pc, #128]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e032      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800389c:	4b19      	ldr	r3, [pc, #100]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4916      	ldr	r1, [pc, #88]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d009      	beq.n	80038ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ba:	4b12      	ldr	r3, [pc, #72]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	490e      	ldr	r1, [pc, #56]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038ce:	f000 f821 	bl	8003914 <HAL_RCC_GetSysClockFreq>
 80038d2:	4602      	mov	r2, r0
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	490a      	ldr	r1, [pc, #40]	; (8003908 <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	5ccb      	ldrb	r3, [r1, r3]
 80038e2:	fa22 f303 	lsr.w	r3, r2, r3
 80038e6:	4a09      	ldr	r2, [pc, #36]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038ea:	4b09      	ldr	r3, [pc, #36]	; (8003910 <HAL_RCC_ClockConfig+0x1c8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fd fe04 	bl	80014fc <HAL_InitTick>

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40023c00 	.word	0x40023c00
 8003904:	40023800 	.word	0x40023800
 8003908:	080094a4 	.word	0x080094a4
 800390c:	20000000 	.word	0x20000000
 8003910:	20000004 	.word	0x20000004

08003914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003918:	b090      	sub	sp, #64	; 0x40
 800391a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	637b      	str	r3, [r7, #52]	; 0x34
 8003920:	2300      	movs	r3, #0
 8003922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003924:	2300      	movs	r3, #0
 8003926:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800392c:	4b59      	ldr	r3, [pc, #356]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x180>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 030c 	and.w	r3, r3, #12
 8003934:	2b08      	cmp	r3, #8
 8003936:	d00d      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0x40>
 8003938:	2b08      	cmp	r3, #8
 800393a:	f200 80a1 	bhi.w	8003a80 <HAL_RCC_GetSysClockFreq+0x16c>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0x34>
 8003942:	2b04      	cmp	r3, #4
 8003944:	d003      	beq.n	800394e <HAL_RCC_GetSysClockFreq+0x3a>
 8003946:	e09b      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003948:	4b53      	ldr	r3, [pc, #332]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x184>)
 800394a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800394c:	e09b      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800394e:	4b53      	ldr	r3, [pc, #332]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x188>)
 8003950:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003952:	e098      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003954:	4b4f      	ldr	r3, [pc, #316]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800395c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800395e:	4b4d      	ldr	r3, [pc, #308]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d028      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396a:	4b4a      	ldr	r3, [pc, #296]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x180>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	099b      	lsrs	r3, r3, #6
 8003970:	2200      	movs	r2, #0
 8003972:	623b      	str	r3, [r7, #32]
 8003974:	627a      	str	r2, [r7, #36]	; 0x24
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800397c:	2100      	movs	r1, #0
 800397e:	4b47      	ldr	r3, [pc, #284]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x188>)
 8003980:	fb03 f201 	mul.w	r2, r3, r1
 8003984:	2300      	movs	r3, #0
 8003986:	fb00 f303 	mul.w	r3, r0, r3
 800398a:	4413      	add	r3, r2
 800398c:	4a43      	ldr	r2, [pc, #268]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x188>)
 800398e:	fba0 1202 	umull	r1, r2, r0, r2
 8003992:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003994:	460a      	mov	r2, r1
 8003996:	62ba      	str	r2, [r7, #40]	; 0x28
 8003998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800399a:	4413      	add	r3, r2
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800399e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a0:	2200      	movs	r2, #0
 80039a2:	61bb      	str	r3, [r7, #24]
 80039a4:	61fa      	str	r2, [r7, #28]
 80039a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039ae:	f7fc fe2b 	bl	8000608 <__aeabi_uldivmod>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4613      	mov	r3, r2
 80039b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039ba:	e053      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039bc:	4b35      	ldr	r3, [pc, #212]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x180>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	099b      	lsrs	r3, r3, #6
 80039c2:	2200      	movs	r2, #0
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	617a      	str	r2, [r7, #20]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039ce:	f04f 0b00 	mov.w	fp, #0
 80039d2:	4652      	mov	r2, sl
 80039d4:	465b      	mov	r3, fp
 80039d6:	f04f 0000 	mov.w	r0, #0
 80039da:	f04f 0100 	mov.w	r1, #0
 80039de:	0159      	lsls	r1, r3, #5
 80039e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039e4:	0150      	lsls	r0, r2, #5
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	ebb2 080a 	subs.w	r8, r2, sl
 80039ee:	eb63 090b 	sbc.w	r9, r3, fp
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a06:	ebb2 0408 	subs.w	r4, r2, r8
 8003a0a:	eb63 0509 	sbc.w	r5, r3, r9
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	00eb      	lsls	r3, r5, #3
 8003a18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a1c:	00e2      	lsls	r2, r4, #3
 8003a1e:	4614      	mov	r4, r2
 8003a20:	461d      	mov	r5, r3
 8003a22:	eb14 030a 	adds.w	r3, r4, sl
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	eb45 030b 	adc.w	r3, r5, fp
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	028b      	lsls	r3, r1, #10
 8003a3e:	4621      	mov	r1, r4
 8003a40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a44:	4621      	mov	r1, r4
 8003a46:	028a      	lsls	r2, r1, #10
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4e:	2200      	movs	r2, #0
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	60fa      	str	r2, [r7, #12]
 8003a54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a58:	f7fc fdd6 	bl	8000608 <__aeabi_uldivmod>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4613      	mov	r3, r2
 8003a62:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	0c1b      	lsrs	r3, r3, #16
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003a74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a7e:	e002      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3740      	adds	r7, #64	; 0x40
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a92:	bf00      	nop
 8003a94:	40023800 	.word	0x40023800
 8003a98:	00f42400 	.word	0x00f42400
 8003a9c:	017d7840 	.word	0x017d7840

08003aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000000 	.word	0x20000000

08003ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003abc:	f7ff fff0 	bl	8003aa0 <HAL_RCC_GetHCLKFreq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	0a9b      	lsrs	r3, r3, #10
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	4903      	ldr	r1, [pc, #12]	; (8003adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	080094b4 	.word	0x080094b4

08003ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ae4:	f7ff ffdc 	bl	8003aa0 <HAL_RCC_GetHCLKFreq>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	0b5b      	lsrs	r3, r3, #13
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	4903      	ldr	r1, [pc, #12]	; (8003b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003af6:	5ccb      	ldrb	r3, [r1, r3]
 8003af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40023800 	.word	0x40023800
 8003b04:	080094b4 	.word	0x080094b4

08003b08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	220f      	movs	r2, #15
 8003b16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b18:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <HAL_RCC_GetClockConfig+0x5c>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0203 	and.w	r2, r3, #3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b24:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <HAL_RCC_GetClockConfig+0x5c>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <HAL_RCC_GetClockConfig+0x5c>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b3c:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <HAL_RCC_GetClockConfig+0x5c>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	08db      	lsrs	r3, r3, #3
 8003b42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b4a:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <HAL_RCC_GetClockConfig+0x60>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0207 	and.w	r2, r3, #7
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	601a      	str	r2, [r3, #0]
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800
 8003b68:	40023c00 	.word	0x40023c00

08003b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e041      	b.n	8003c02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fd fe42 	bl	800181c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4610      	mov	r0, r2
 8003bac:	f000 fa88 	bl	80040c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d001      	beq.n	8003c24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e044      	b.n	8003cae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a1e      	ldr	r2, [pc, #120]	; (8003cbc <HAL_TIM_Base_Start_IT+0xb0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d018      	beq.n	8003c78 <HAL_TIM_Base_Start_IT+0x6c>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c4e:	d013      	beq.n	8003c78 <HAL_TIM_Base_Start_IT+0x6c>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1a      	ldr	r2, [pc, #104]	; (8003cc0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00e      	beq.n	8003c78 <HAL_TIM_Base_Start_IT+0x6c>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a19      	ldr	r2, [pc, #100]	; (8003cc4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d009      	beq.n	8003c78 <HAL_TIM_Base_Start_IT+0x6c>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a17      	ldr	r2, [pc, #92]	; (8003cc8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d004      	beq.n	8003c78 <HAL_TIM_Base_Start_IT+0x6c>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a16      	ldr	r2, [pc, #88]	; (8003ccc <HAL_TIM_Base_Start_IT+0xc0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d111      	bne.n	8003c9c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b06      	cmp	r3, #6
 8003c88:	d010      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0201 	orr.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9a:	e007      	b.n	8003cac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	40000400 	.word	0x40000400
 8003cc4:	40000800 	.word	0x40000800
 8003cc8:	40000c00 	.word	0x40000c00
 8003ccc:	40014000 	.word	0x40014000

08003cd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d122      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d11b      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f06f 0202 	mvn.w	r2, #2
 8003cfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f9b5 	bl	8004082 <HAL_TIM_IC_CaptureCallback>
 8003d18:	e005      	b.n	8003d26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f9a7 	bl	800406e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f9b8 	bl	8004096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d122      	bne.n	8003d80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d11b      	bne.n	8003d80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0204 	mvn.w	r2, #4
 8003d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2202      	movs	r2, #2
 8003d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f98b 	bl	8004082 <HAL_TIM_IC_CaptureCallback>
 8003d6c:	e005      	b.n	8003d7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f97d 	bl	800406e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f98e 	bl	8004096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d122      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d11b      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0208 	mvn.w	r2, #8
 8003da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2204      	movs	r2, #4
 8003daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f961 	bl	8004082 <HAL_TIM_IC_CaptureCallback>
 8003dc0:	e005      	b.n	8003dce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f953 	bl	800406e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f964 	bl	8004096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f003 0310 	and.w	r3, r3, #16
 8003dde:	2b10      	cmp	r3, #16
 8003de0:	d122      	bne.n	8003e28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 0310 	and.w	r3, r3, #16
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d11b      	bne.n	8003e28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0210 	mvn.w	r2, #16
 8003df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2208      	movs	r2, #8
 8003dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f937 	bl	8004082 <HAL_TIM_IC_CaptureCallback>
 8003e14:	e005      	b.n	8003e22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f929 	bl	800406e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f93a 	bl	8004096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d10e      	bne.n	8003e54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d107      	bne.n	8003e54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f06f 0201 	mvn.w	r2, #1
 8003e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fd fb10 	bl	8001474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5e:	2b80      	cmp	r3, #128	; 0x80
 8003e60:	d10e      	bne.n	8003e80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6c:	2b80      	cmp	r3, #128	; 0x80
 8003e6e:	d107      	bne.n	8003e80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fab2 	bl	80043e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8a:	2b40      	cmp	r3, #64	; 0x40
 8003e8c:	d10e      	bne.n	8003eac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e98:	2b40      	cmp	r3, #64	; 0x40
 8003e9a:	d107      	bne.n	8003eac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f8ff 	bl	80040aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b20      	cmp	r3, #32
 8003ec6:	d107      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0220 	mvn.w	r2, #32
 8003ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fa7c 	bl	80043d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ed8:	bf00      	nop
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_TIM_ConfigClockSource+0x1c>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e0b4      	b.n	8004066 <HAL_TIM_ConfigClockSource+0x186>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f34:	d03e      	beq.n	8003fb4 <HAL_TIM_ConfigClockSource+0xd4>
 8003f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f3a:	f200 8087 	bhi.w	800404c <HAL_TIM_ConfigClockSource+0x16c>
 8003f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f42:	f000 8086 	beq.w	8004052 <HAL_TIM_ConfigClockSource+0x172>
 8003f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f4a:	d87f      	bhi.n	800404c <HAL_TIM_ConfigClockSource+0x16c>
 8003f4c:	2b70      	cmp	r3, #112	; 0x70
 8003f4e:	d01a      	beq.n	8003f86 <HAL_TIM_ConfigClockSource+0xa6>
 8003f50:	2b70      	cmp	r3, #112	; 0x70
 8003f52:	d87b      	bhi.n	800404c <HAL_TIM_ConfigClockSource+0x16c>
 8003f54:	2b60      	cmp	r3, #96	; 0x60
 8003f56:	d050      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x11a>
 8003f58:	2b60      	cmp	r3, #96	; 0x60
 8003f5a:	d877      	bhi.n	800404c <HAL_TIM_ConfigClockSource+0x16c>
 8003f5c:	2b50      	cmp	r3, #80	; 0x50
 8003f5e:	d03c      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0xfa>
 8003f60:	2b50      	cmp	r3, #80	; 0x50
 8003f62:	d873      	bhi.n	800404c <HAL_TIM_ConfigClockSource+0x16c>
 8003f64:	2b40      	cmp	r3, #64	; 0x40
 8003f66:	d058      	beq.n	800401a <HAL_TIM_ConfigClockSource+0x13a>
 8003f68:	2b40      	cmp	r3, #64	; 0x40
 8003f6a:	d86f      	bhi.n	800404c <HAL_TIM_ConfigClockSource+0x16c>
 8003f6c:	2b30      	cmp	r3, #48	; 0x30
 8003f6e:	d064      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x15a>
 8003f70:	2b30      	cmp	r3, #48	; 0x30
 8003f72:	d86b      	bhi.n	800404c <HAL_TIM_ConfigClockSource+0x16c>
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d060      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x15a>
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d867      	bhi.n	800404c <HAL_TIM_ConfigClockSource+0x16c>
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d05c      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x15a>
 8003f80:	2b10      	cmp	r3, #16
 8003f82:	d05a      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x15a>
 8003f84:	e062      	b.n	800404c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	6899      	ldr	r1, [r3, #8]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f000 f98d 	bl	80042b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	609a      	str	r2, [r3, #8]
      break;
 8003fb2:	e04f      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	6899      	ldr	r1, [r3, #8]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f000 f976 	bl	80042b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fd6:	609a      	str	r2, [r3, #8]
      break;
 8003fd8:	e03c      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6859      	ldr	r1, [r3, #4]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f000 f8ea 	bl	80041c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2150      	movs	r1, #80	; 0x50
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 f943 	bl	800427e <TIM_ITRx_SetConfig>
      break;
 8003ff8:	e02c      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6859      	ldr	r1, [r3, #4]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	461a      	mov	r2, r3
 8004008:	f000 f909 	bl	800421e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2160      	movs	r1, #96	; 0x60
 8004012:	4618      	mov	r0, r3
 8004014:	f000 f933 	bl	800427e <TIM_ITRx_SetConfig>
      break;
 8004018:	e01c      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6859      	ldr	r1, [r3, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	461a      	mov	r2, r3
 8004028:	f000 f8ca 	bl	80041c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2140      	movs	r1, #64	; 0x40
 8004032:	4618      	mov	r0, r3
 8004034:	f000 f923 	bl	800427e <TIM_ITRx_SetConfig>
      break;
 8004038:	e00c      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4619      	mov	r1, r3
 8004044:	4610      	mov	r0, r2
 8004046:	f000 f91a 	bl	800427e <TIM_ITRx_SetConfig>
      break;
 800404a:	e003      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
      break;
 8004050:	e000      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004052:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004064:	7bfb      	ldrb	r3, [r7, #15]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a34      	ldr	r2, [pc, #208]	; (80041a4 <TIM_Base_SetConfig+0xe4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00f      	beq.n	80040f8 <TIM_Base_SetConfig+0x38>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040de:	d00b      	beq.n	80040f8 <TIM_Base_SetConfig+0x38>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a31      	ldr	r2, [pc, #196]	; (80041a8 <TIM_Base_SetConfig+0xe8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d007      	beq.n	80040f8 <TIM_Base_SetConfig+0x38>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a30      	ldr	r2, [pc, #192]	; (80041ac <TIM_Base_SetConfig+0xec>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d003      	beq.n	80040f8 <TIM_Base_SetConfig+0x38>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a2f      	ldr	r2, [pc, #188]	; (80041b0 <TIM_Base_SetConfig+0xf0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d108      	bne.n	800410a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a25      	ldr	r2, [pc, #148]	; (80041a4 <TIM_Base_SetConfig+0xe4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01b      	beq.n	800414a <TIM_Base_SetConfig+0x8a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004118:	d017      	beq.n	800414a <TIM_Base_SetConfig+0x8a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a22      	ldr	r2, [pc, #136]	; (80041a8 <TIM_Base_SetConfig+0xe8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d013      	beq.n	800414a <TIM_Base_SetConfig+0x8a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a21      	ldr	r2, [pc, #132]	; (80041ac <TIM_Base_SetConfig+0xec>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00f      	beq.n	800414a <TIM_Base_SetConfig+0x8a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a20      	ldr	r2, [pc, #128]	; (80041b0 <TIM_Base_SetConfig+0xf0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00b      	beq.n	800414a <TIM_Base_SetConfig+0x8a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a1f      	ldr	r2, [pc, #124]	; (80041b4 <TIM_Base_SetConfig+0xf4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d007      	beq.n	800414a <TIM_Base_SetConfig+0x8a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a1e      	ldr	r2, [pc, #120]	; (80041b8 <TIM_Base_SetConfig+0xf8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d003      	beq.n	800414a <TIM_Base_SetConfig+0x8a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a1d      	ldr	r2, [pc, #116]	; (80041bc <TIM_Base_SetConfig+0xfc>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d108      	bne.n	800415c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a08      	ldr	r2, [pc, #32]	; (80041a4 <TIM_Base_SetConfig+0xe4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d103      	bne.n	8004190 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	615a      	str	r2, [r3, #20]
}
 8004196:	bf00      	nop
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40010000 	.word	0x40010000
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40000800 	.word	0x40000800
 80041b0:	40000c00 	.word	0x40000c00
 80041b4:	40014000 	.word	0x40014000
 80041b8:	40014400 	.word	0x40014400
 80041bc:	40014800 	.word	0x40014800

080041c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f023 0201 	bic.w	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f023 030a 	bic.w	r3, r3, #10
 80041fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	621a      	str	r2, [r3, #32]
}
 8004212:	bf00      	nop
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800421e:	b480      	push	{r7}
 8004220:	b087      	sub	sp, #28
 8004222:	af00      	add	r7, sp, #0
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	f023 0210 	bic.w	r2, r3, #16
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004248:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	031b      	lsls	r3, r3, #12
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800425a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	621a      	str	r2, [r3, #32]
}
 8004272:	bf00      	nop
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800427e:	b480      	push	{r7}
 8004280:	b085      	sub	sp, #20
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004294:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	f043 0307 	orr.w	r3, r3, #7
 80042a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	609a      	str	r2, [r3, #8]
}
 80042a8:	bf00      	nop
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	021a      	lsls	r2, r3, #8
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4313      	orrs	r3, r2
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	609a      	str	r2, [r3, #8]
}
 80042e8:	bf00      	nop
 80042ea:	371c      	adds	r7, #28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004308:	2302      	movs	r3, #2
 800430a:	e050      	b.n	80043ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004332:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a1c      	ldr	r2, [pc, #112]	; (80043bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d018      	beq.n	8004382 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004358:	d013      	beq.n	8004382 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a18      	ldr	r2, [pc, #96]	; (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d00e      	beq.n	8004382 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a16      	ldr	r2, [pc, #88]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d009      	beq.n	8004382 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a15      	ldr	r2, [pc, #84]	; (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d004      	beq.n	8004382 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a13      	ldr	r2, [pc, #76]	; (80043cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d10c      	bne.n	800439c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	4313      	orrs	r3, r2
 8004392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40010000 	.word	0x40010000
 80043c0:	40000400 	.word	0x40000400
 80043c4:	40000800 	.word	0x40000800
 80043c8:	40000c00 	.word	0x40000c00
 80043cc:	40014000 	.word	0x40014000

080043d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e03f      	b.n	800448a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7fd fa74 	bl	800190c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2224      	movs	r2, #36	; 0x24
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800443a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f001 f897 	bl	8005570 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004450:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695a      	ldr	r2, [r3, #20]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004460:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004470:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b08a      	sub	sp, #40	; 0x28
 8004496:	af02      	add	r7, sp, #8
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	4613      	mov	r3, r2
 80044a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d17c      	bne.n	80045ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <HAL_UART_Transmit+0x2c>
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e075      	b.n	80045ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_UART_Transmit+0x3e>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e06e      	b.n	80045ae <HAL_UART_Transmit+0x11c>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2221      	movs	r2, #33	; 0x21
 80044e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044e6:	f7fd fb29 	bl	8001b3c <HAL_GetTick>
 80044ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	88fa      	ldrh	r2, [r7, #6]
 80044f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	88fa      	ldrh	r2, [r7, #6]
 80044f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004500:	d108      	bne.n	8004514 <HAL_UART_Transmit+0x82>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d104      	bne.n	8004514 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	e003      	b.n	800451c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004518:	2300      	movs	r3, #0
 800451a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004524:	e02a      	b.n	800457c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2200      	movs	r2, #0
 800452e:	2180      	movs	r1, #128	; 0x80
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 fd11 	bl	8004f58 <UART_WaitOnFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e036      	b.n	80045ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10b      	bne.n	800455e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	461a      	mov	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004554:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	3302      	adds	r3, #2
 800455a:	61bb      	str	r3, [r7, #24]
 800455c:	e007      	b.n	800456e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	781a      	ldrb	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	3301      	adds	r3, #1
 800456c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004572:	b29b      	uxth	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1cf      	bne.n	8004526 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2200      	movs	r2, #0
 800458e:	2140      	movs	r1, #64	; 0x40
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 fce1 	bl	8004f58 <UART_WaitOnFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e006      	b.n	80045ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	e000      	b.n	80045ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045ac:	2302      	movs	r3, #2
  }
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3720      	adds	r7, #32
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b08a      	sub	sp, #40	; 0x28
 80045ba:	af02      	add	r7, sp, #8
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	603b      	str	r3, [r7, #0]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	f040 808c 	bne.w	80046f0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <HAL_UART_Receive+0x2e>
 80045de:	88fb      	ldrh	r3, [r7, #6]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e084      	b.n	80046f2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <HAL_UART_Receive+0x40>
 80045f2:	2302      	movs	r3, #2
 80045f4:	e07d      	b.n	80046f2 <HAL_UART_Receive+0x13c>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2222      	movs	r2, #34	; 0x22
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004612:	f7fd fa93 	bl	8001b3c <HAL_GetTick>
 8004616:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	88fa      	ldrh	r2, [r7, #6]
 800461c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	88fa      	ldrh	r2, [r7, #6]
 8004622:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462c:	d108      	bne.n	8004640 <HAL_UART_Receive+0x8a>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d104      	bne.n	8004640 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004636:	2300      	movs	r3, #0
 8004638:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	61bb      	str	r3, [r7, #24]
 800463e:	e003      	b.n	8004648 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004644:	2300      	movs	r3, #0
 8004646:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004650:	e043      	b.n	80046da <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2200      	movs	r2, #0
 800465a:	2120      	movs	r1, #32
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 fc7b 	bl	8004f58 <UART_WaitOnFlagUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e042      	b.n	80046f2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10c      	bne.n	800468c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	b29b      	uxth	r3, r3
 800467a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467e:	b29a      	uxth	r2, r3
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	3302      	adds	r3, #2
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	e01f      	b.n	80046cc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004694:	d007      	beq.n	80046a6 <HAL_UART_Receive+0xf0>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <HAL_UART_Receive+0xfe>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	e008      	b.n	80046c6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	3301      	adds	r3, #1
 80046ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1b6      	bne.n	8004652 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	e000      	b.n	80046f2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80046f0:	2302      	movs	r3, #2
  }
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3720      	adds	r7, #32
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b084      	sub	sp, #16
 80046fe:	af00      	add	r7, sp, #0
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	4613      	mov	r3, r2
 8004706:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b20      	cmp	r3, #32
 8004712:	d11d      	bne.n	8004750 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <HAL_UART_Receive_IT+0x26>
 800471a:	88fb      	ldrh	r3, [r7, #6]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e016      	b.n	8004752 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_UART_Receive_IT+0x38>
 800472e:	2302      	movs	r3, #2
 8004730:	e00f      	b.n	8004752 <HAL_UART_Receive_IT+0x58>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004740:	88fb      	ldrh	r3, [r7, #6]
 8004742:	461a      	mov	r2, r3
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 fc74 	bl	8005034 <UART_Start_Receive_IT>
 800474c:	4603      	mov	r3, r0
 800474e:	e000      	b.n	8004752 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004750:	2302      	movs	r3, #2
  }
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b08c      	sub	sp, #48	; 0x30
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	4613      	mov	r3, r2
 8004766:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b20      	cmp	r3, #32
 8004772:	d152      	bne.n	800481a <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800477a:	88fb      	ldrh	r3, [r7, #6]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e04b      	b.n	800481c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800478a:	2b01      	cmp	r3, #1
 800478c:	d101      	bne.n	8004792 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800478e:	2302      	movs	r3, #2
 8004790:	e044      	b.n	800481c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	461a      	mov	r2, r3
 80047a4:	68b9      	ldr	r1, [r7, #8]
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fc82 	bl	80050b0 <UART_Start_Receive_DMA>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80047b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d12c      	bne.n	8004814 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d125      	bne.n	800480e <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047c2:	2300      	movs	r3, #0
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	330c      	adds	r3, #12
 80047de:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	617b      	str	r3, [r7, #20]
   return(result);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f043 0310 	orr.w	r3, r3, #16
 80047ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	330c      	adds	r3, #12
 80047f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047f8:	627a      	str	r2, [r7, #36]	; 0x24
 80047fa:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6a39      	ldr	r1, [r7, #32]
 80047fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	61fb      	str	r3, [r7, #28]
   return(result);
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e5      	bne.n	80047d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800480c:	e002      	b.n	8004814 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004814:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004818:	e000      	b.n	800481c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800481a:	2302      	movs	r3, #2
  }
}
 800481c:	4618      	mov	r0, r3
 800481e:	3730      	adds	r7, #48	; 0x30
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b0ba      	sub	sp, #232	; 0xe8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800484a:	2300      	movs	r3, #0
 800484c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004850:	2300      	movs	r3, #0
 8004852:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10f      	bne.n	800488a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800486a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <HAL_UART_IRQHandler+0x66>
 8004876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800487a:	f003 0320 	and.w	r3, r3, #32
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fdb9 	bl	80053fa <UART_Receive_IT>
      return;
 8004888:	e256      	b.n	8004d38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800488a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 80de 	beq.w	8004a50 <HAL_UART_IRQHandler+0x22c>
 8004894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d106      	bne.n	80048ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 80d1 	beq.w	8004a50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00b      	beq.n	80048d2 <HAL_UART_IRQHandler+0xae>
 80048ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f043 0201 	orr.w	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00b      	beq.n	80048f6 <HAL_UART_IRQHandler+0xd2>
 80048de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f043 0202 	orr.w	r2, r3, #2
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00b      	beq.n	800491a <HAL_UART_IRQHandler+0xf6>
 8004902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f043 0204 	orr.w	r2, r3, #4
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800491a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d011      	beq.n	800494a <HAL_UART_IRQHandler+0x126>
 8004926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b00      	cmp	r3, #0
 8004930:	d105      	bne.n	800493e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d005      	beq.n	800494a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f043 0208 	orr.w	r2, r3, #8
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 81ed 	beq.w	8004d2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_UART_IRQHandler+0x14e>
 8004960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004964:	f003 0320 	and.w	r3, r3, #32
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fd44 	bl	80053fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b40      	cmp	r3, #64	; 0x40
 800497e:	bf0c      	ite	eq
 8004980:	2301      	moveq	r3, #1
 8004982:	2300      	movne	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d103      	bne.n	800499e <HAL_UART_IRQHandler+0x17a>
 8004996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800499a:	2b00      	cmp	r3, #0
 800499c:	d04f      	beq.n	8004a3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fc4c 	bl	800523c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ae:	2b40      	cmp	r3, #64	; 0x40
 80049b0:	d141      	bne.n	8004a36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3314      	adds	r3, #20
 80049b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3314      	adds	r3, #20
 80049da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1d9      	bne.n	80049b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d013      	beq.n	8004a2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	4a7d      	ldr	r2, [pc, #500]	; (8004c00 <HAL_UART_IRQHandler+0x3dc>)
 8004a0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fd ffdc 	bl	80029d0 <HAL_DMA_Abort_IT>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d016      	beq.n	8004a4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a28:	4610      	mov	r0, r2
 8004a2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a2c:	e00e      	b.n	8004a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f990 	bl	8004d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a34:	e00a      	b.n	8004a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f98c 	bl	8004d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a3c:	e006      	b.n	8004a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f988 	bl	8004d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a4a:	e170      	b.n	8004d2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4c:	bf00      	nop
    return;
 8004a4e:	e16e      	b.n	8004d2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	f040 814a 	bne.w	8004cee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 8143 	beq.w	8004cee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a6c:	f003 0310 	and.w	r3, r3, #16
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 813c 	beq.w	8004cee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a76:	2300      	movs	r3, #0
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	60bb      	str	r3, [r7, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a96:	2b40      	cmp	r3, #64	; 0x40
 8004a98:	f040 80b4 	bne.w	8004c04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004aa8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8140 	beq.w	8004d32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ab6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004aba:	429a      	cmp	r2, r3
 8004abc:	f080 8139 	bcs.w	8004d32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ac6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ad2:	f000 8088 	beq.w	8004be6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	330c      	adds	r3, #12
 8004adc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004af4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1d9      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3314      	adds	r3, #20
 8004b28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b2c:	e853 3f00 	ldrex	r3, [r3]
 8004b30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b34:	f023 0301 	bic.w	r3, r3, #1
 8004b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3314      	adds	r3, #20
 8004b42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e1      	bne.n	8004b22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3314      	adds	r3, #20
 8004b64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3314      	adds	r3, #20
 8004b7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b8a:	e841 2300 	strex	r3, r2, [r1]
 8004b8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1e3      	bne.n	8004b5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb6:	f023 0310 	bic.w	r3, r3, #16
 8004bba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	330c      	adds	r3, #12
 8004bc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004bc8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004bca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bd0:	e841 2300 	strex	r3, r2, [r1]
 8004bd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e3      	bne.n	8004ba4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fd fe85 	bl	80028f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fc fadc 	bl	80011b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bfc:	e099      	b.n	8004d32 <HAL_UART_IRQHandler+0x50e>
 8004bfe:	bf00      	nop
 8004c00:	08005303 	.word	0x08005303
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 808b 	beq.w	8004d36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8086 	beq.w	8004d36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	330c      	adds	r3, #12
 8004c30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	330c      	adds	r3, #12
 8004c4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c4e:	647a      	str	r2, [r7, #68]	; 0x44
 8004c50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c56:	e841 2300 	strex	r3, r2, [r1]
 8004c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1e3      	bne.n	8004c2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3314      	adds	r3, #20
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	e853 3f00 	ldrex	r3, [r3]
 8004c70:	623b      	str	r3, [r7, #32]
   return(result);
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3314      	adds	r3, #20
 8004c82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c86:	633a      	str	r2, [r7, #48]	; 0x30
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e3      	bne.n	8004c62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	330c      	adds	r3, #12
 8004cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0310 	bic.w	r3, r3, #16
 8004cbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ccc:	61fa      	str	r2, [r7, #28]
 8004cce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	69b9      	ldr	r1, [r7, #24]
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	617b      	str	r3, [r7, #20]
   return(result);
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e3      	bne.n	8004ca8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ce0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7fc fa64 	bl	80011b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cec:	e023      	b.n	8004d36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d009      	beq.n	8004d0e <HAL_UART_IRQHandler+0x4ea>
 8004cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fb0f 	bl	800532a <UART_Transmit_IT>
    return;
 8004d0c:	e014      	b.n	8004d38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00e      	beq.n	8004d38 <HAL_UART_IRQHandler+0x514>
 8004d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d008      	beq.n	8004d38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fb4f 	bl	80053ca <UART_EndTransmit_IT>
    return;
 8004d2c:	e004      	b.n	8004d38 <HAL_UART_IRQHandler+0x514>
    return;
 8004d2e:	bf00      	nop
 8004d30:	e002      	b.n	8004d38 <HAL_UART_IRQHandler+0x514>
      return;
 8004d32:	bf00      	nop
 8004d34:	e000      	b.n	8004d38 <HAL_UART_IRQHandler+0x514>
      return;
 8004d36:	bf00      	nop
  }
}
 8004d38:	37e8      	adds	r7, #232	; 0xe8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop

08004d40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b09c      	sub	sp, #112	; 0x70
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d172      	bne.n	8004e6a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d86:	2200      	movs	r2, #0
 8004d88:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	330c      	adds	r3, #12
 8004d90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d94:	e853 3f00 	ldrex	r3, [r3]
 8004d98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004da0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	330c      	adds	r3, #12
 8004da8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004daa:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dac:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004db0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004db2:	e841 2300 	strex	r3, r2, [r1]
 8004db6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1e5      	bne.n	8004d8a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3314      	adds	r3, #20
 8004dc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd0:	f023 0301 	bic.w	r3, r3, #1
 8004dd4:	667b      	str	r3, [r7, #100]	; 0x64
 8004dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3314      	adds	r3, #20
 8004ddc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004dde:	647a      	str	r2, [r7, #68]	; 0x44
 8004de0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004de4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1e5      	bne.n	8004dbe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3314      	adds	r3, #20
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	623b      	str	r3, [r7, #32]
   return(result);
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e08:	663b      	str	r3, [r7, #96]	; 0x60
 8004e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3314      	adds	r3, #20
 8004e10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e12:	633a      	str	r2, [r7, #48]	; 0x30
 8004e14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e5      	bne.n	8004df2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d119      	bne.n	8004e6a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	e853 3f00 	ldrex	r3, [r3]
 8004e44:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f023 0310 	bic.w	r3, r3, #16
 8004e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330c      	adds	r3, #12
 8004e54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e56:	61fa      	str	r2, [r7, #28]
 8004e58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	69b9      	ldr	r1, [r7, #24]
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	e841 2300 	strex	r3, r2, [r1]
 8004e62:	617b      	str	r3, [r7, #20]
   return(result);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1e5      	bne.n	8004e36 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d106      	bne.n	8004e80 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e76:	4619      	mov	r1, r3
 8004e78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e7a:	f7fc f99b 	bl	80011b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e7e:	e002      	b.n	8004e86 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004e80:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e82:	f7fc f95b 	bl	800113c <HAL_UART_RxCpltCallback>
}
 8004e86:	bf00      	nop
 8004e88:	3770      	adds	r7, #112	; 0x70
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d108      	bne.n	8004eb6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ea8:	085b      	lsrs	r3, r3, #1
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	4619      	mov	r1, r3
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f7fc f980 	bl	80011b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004eb4:	e002      	b.n	8004ebc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f7fc f96c 	bl	8001194 <HAL_UART_RxHalfCpltCallback>
}
 8004ebc:	bf00      	nop
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee0:	2b80      	cmp	r3, #128	; 0x80
 8004ee2:	bf0c      	ite	eq
 8004ee4:	2301      	moveq	r3, #1
 8004ee6:	2300      	movne	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b21      	cmp	r3, #33	; 0x21
 8004ef6:	d108      	bne.n	8004f0a <UART_DMAError+0x46>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d005      	beq.n	8004f0a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2200      	movs	r2, #0
 8004f02:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004f04:	68b8      	ldr	r0, [r7, #8]
 8004f06:	f000 f971 	bl	80051ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f14:	2b40      	cmp	r3, #64	; 0x40
 8004f16:	bf0c      	ite	eq
 8004f18:	2301      	moveq	r3, #1
 8004f1a:	2300      	movne	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b22      	cmp	r3, #34	; 0x22
 8004f2a:	d108      	bne.n	8004f3e <UART_DMAError+0x7a>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2200      	movs	r2, #0
 8004f36:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004f38:	68b8      	ldr	r0, [r7, #8]
 8004f3a:	f000 f97f 	bl	800523c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f043 0210 	orr.w	r2, r3, #16
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f4a:	68b8      	ldr	r0, [r7, #8]
 8004f4c:	f7ff ff02 	bl	8004d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f50:	bf00      	nop
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b090      	sub	sp, #64	; 0x40
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	603b      	str	r3, [r7, #0]
 8004f64:	4613      	mov	r3, r2
 8004f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f68:	e050      	b.n	800500c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f70:	d04c      	beq.n	800500c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f78:	f7fc fde0 	bl	8001b3c <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d241      	bcs.n	800500c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	330c      	adds	r3, #12
 8004f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	e853 3f00 	ldrex	r3, [r3]
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fa8:	637a      	str	r2, [r7, #52]	; 0x34
 8004faa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e5      	bne.n	8004f88 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3314      	adds	r3, #20
 8004fc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	e853 3f00 	ldrex	r3, [r3]
 8004fca:	613b      	str	r3, [r7, #16]
   return(result);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f023 0301 	bic.w	r3, r3, #1
 8004fd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3314      	adds	r3, #20
 8004fda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fdc:	623a      	str	r2, [r7, #32]
 8004fde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe0:	69f9      	ldr	r1, [r7, #28]
 8004fe2:	6a3a      	ldr	r2, [r7, #32]
 8004fe4:	e841 2300 	strex	r3, r2, [r1]
 8004fe8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e5      	bne.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e00f      	b.n	800502c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	4013      	ands	r3, r2
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	429a      	cmp	r2, r3
 800501a:	bf0c      	ite	eq
 800501c:	2301      	moveq	r3, #1
 800501e:	2300      	movne	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	429a      	cmp	r2, r3
 8005028:	d09f      	beq.n	8004f6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3740      	adds	r7, #64	; 0x40
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	4613      	mov	r3, r2
 8005040:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	88fa      	ldrh	r2, [r7, #6]
 800504c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	88fa      	ldrh	r2, [r7, #6]
 8005052:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2222      	movs	r2, #34	; 0x22
 800505e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68da      	ldr	r2, [r3, #12]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005080:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	695a      	ldr	r2, [r3, #20]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0220 	orr.w	r2, r2, #32
 80050a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b098      	sub	sp, #96	; 0x60
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	4613      	mov	r3, r2
 80050bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	88fa      	ldrh	r2, [r7, #6]
 80050c8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2222      	movs	r2, #34	; 0x22
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	4a40      	ldr	r2, [pc, #256]	; (80051e0 <UART_Start_Receive_DMA+0x130>)
 80050de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e4:	4a3f      	ldr	r2, [pc, #252]	; (80051e4 <UART_Start_Receive_DMA+0x134>)
 80050e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	4a3e      	ldr	r2, [pc, #248]	; (80051e8 <UART_Start_Receive_DMA+0x138>)
 80050ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	2200      	movs	r2, #0
 80050f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80050f8:	f107 0308 	add.w	r3, r7, #8
 80050fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3304      	adds	r3, #4
 8005108:	4619      	mov	r1, r3
 800510a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	88fb      	ldrh	r3, [r7, #6]
 8005110:	f7fd fb96 	bl	8002840 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005114:	2300      	movs	r3, #0
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d019      	beq.n	800516e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	330c      	adds	r3, #12
 8005140:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800514a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800514c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005150:	65bb      	str	r3, [r7, #88]	; 0x58
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	330c      	adds	r3, #12
 8005158:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800515a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800515c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005160:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1e5      	bne.n	800513a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3314      	adds	r3, #20
 8005174:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	657b      	str	r3, [r7, #84]	; 0x54
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3314      	adds	r3, #20
 800518c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800518e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005190:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e5      	bne.n	800516e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3314      	adds	r3, #20
 80051a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	617b      	str	r3, [r7, #20]
   return(result);
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051b8:	653b      	str	r3, [r7, #80]	; 0x50
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3314      	adds	r3, #20
 80051c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80051c2:	627a      	str	r2, [r7, #36]	; 0x24
 80051c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c6:	6a39      	ldr	r1, [r7, #32]
 80051c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1e5      	bne.n	80051a2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3760      	adds	r7, #96	; 0x60
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	08004d69 	.word	0x08004d69
 80051e4:	08004e8f 	.word	0x08004e8f
 80051e8:	08004ec5 	.word	0x08004ec5

080051ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b089      	sub	sp, #36	; 0x24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	330c      	adds	r3, #12
 80051fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	e853 3f00 	ldrex	r3, [r3]
 8005202:	60bb      	str	r3, [r7, #8]
   return(result);
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800520a:	61fb      	str	r3, [r7, #28]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	330c      	adds	r3, #12
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	61ba      	str	r2, [r7, #24]
 8005216:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	6979      	ldr	r1, [r7, #20]
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	e841 2300 	strex	r3, r2, [r1]
 8005220:	613b      	str	r3, [r7, #16]
   return(result);
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e5      	bne.n	80051f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005230:	bf00      	nop
 8005232:	3724      	adds	r7, #36	; 0x24
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b095      	sub	sp, #84	; 0x54
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330c      	adds	r3, #12
 800524a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524e:	e853 3f00 	ldrex	r3, [r3]
 8005252:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005256:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800525a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	330c      	adds	r3, #12
 8005262:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005264:	643a      	str	r2, [r7, #64]	; 0x40
 8005266:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005268:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800526a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800526c:	e841 2300 	strex	r3, r2, [r1]
 8005270:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1e5      	bne.n	8005244 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3314      	adds	r3, #20
 800527e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	e853 3f00 	ldrex	r3, [r3]
 8005286:	61fb      	str	r3, [r7, #28]
   return(result);
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f023 0301 	bic.w	r3, r3, #1
 800528e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3314      	adds	r3, #20
 8005296:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005298:	62fa      	str	r2, [r7, #44]	; 0x2c
 800529a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800529e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e5      	bne.n	8005278 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d119      	bne.n	80052e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	330c      	adds	r3, #12
 80052ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f023 0310 	bic.w	r3, r3, #16
 80052ca:	647b      	str	r3, [r7, #68]	; 0x44
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	330c      	adds	r3, #12
 80052d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052d4:	61ba      	str	r2, [r7, #24]
 80052d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d8:	6979      	ldr	r1, [r7, #20]
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	e841 2300 	strex	r3, r2, [r1]
 80052e0:	613b      	str	r3, [r7, #16]
   return(result);
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e5      	bne.n	80052b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80052f6:	bf00      	nop
 80052f8:	3754      	adds	r7, #84	; 0x54
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f7ff fd19 	bl	8004d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005322:	bf00      	nop
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800532a:	b480      	push	{r7}
 800532c:	b085      	sub	sp, #20
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b21      	cmp	r3, #33	; 0x21
 800533c:	d13e      	bne.n	80053bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005346:	d114      	bne.n	8005372 <UART_Transmit_IT+0x48>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d110      	bne.n	8005372 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005364:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	1c9a      	adds	r2, r3, #2
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	621a      	str	r2, [r3, #32]
 8005370:	e008      	b.n	8005384 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	1c59      	adds	r1, r3, #1
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6211      	str	r1, [r2, #32]
 800537c:	781a      	ldrb	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b01      	subs	r3, #1
 800538c:	b29b      	uxth	r3, r3
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	4619      	mov	r1, r3
 8005392:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10f      	bne.n	80053b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	e000      	b.n	80053be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053bc:	2302      	movs	r3, #2
  }
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b082      	sub	sp, #8
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7ff fca8 	bl	8004d40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b08c      	sub	sp, #48	; 0x30
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b22      	cmp	r3, #34	; 0x22
 800540c:	f040 80ab 	bne.w	8005566 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005418:	d117      	bne.n	800544a <UART_Receive_IT+0x50>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d113      	bne.n	800544a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005422:	2300      	movs	r3, #0
 8005424:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005438:	b29a      	uxth	r2, r3
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005442:	1c9a      	adds	r2, r3, #2
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	629a      	str	r2, [r3, #40]	; 0x28
 8005448:	e026      	b.n	8005498 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005450:	2300      	movs	r3, #0
 8005452:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545c:	d007      	beq.n	800546e <UART_Receive_IT+0x74>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10a      	bne.n	800547c <UART_Receive_IT+0x82>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	b2da      	uxtb	r2, r3
 8005476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	e008      	b.n	800548e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	b2db      	uxtb	r3, r3
 8005484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005488:	b2da      	uxtb	r2, r3
 800548a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800549c:	b29b      	uxth	r3, r3
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	4619      	mov	r1, r3
 80054a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d15a      	bne.n	8005562 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0220 	bic.w	r2, r2, #32
 80054ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695a      	ldr	r2, [r3, #20]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0201 	bic.w	r2, r2, #1
 80054da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d135      	bne.n	8005558 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	330c      	adds	r3, #12
 80054f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	613b      	str	r3, [r7, #16]
   return(result);
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f023 0310 	bic.w	r3, r3, #16
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	330c      	adds	r3, #12
 8005510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005512:	623a      	str	r2, [r7, #32]
 8005514:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	69f9      	ldr	r1, [r7, #28]
 8005518:	6a3a      	ldr	r2, [r7, #32]
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e5      	bne.n	80054f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0310 	and.w	r3, r3, #16
 8005530:	2b10      	cmp	r3, #16
 8005532:	d10a      	bne.n	800554a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005534:	2300      	movs	r3, #0
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800554e:	4619      	mov	r1, r3
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7fb fe2f 	bl	80011b4 <HAL_UARTEx_RxEventCallback>
 8005556:	e002      	b.n	800555e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7fb fdef 	bl	800113c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	e002      	b.n	8005568 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	e000      	b.n	8005568 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005566:	2302      	movs	r3, #2
  }
}
 8005568:	4618      	mov	r0, r3
 800556a:	3730      	adds	r7, #48	; 0x30
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005574:	b0c0      	sub	sp, #256	; 0x100
 8005576:	af00      	add	r7, sp, #0
 8005578:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800557c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558c:	68d9      	ldr	r1, [r3, #12]
 800558e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	ea40 0301 	orr.w	r3, r0, r1
 8005598:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800559a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	431a      	orrs	r2, r3
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055c8:	f021 010c 	bic.w	r1, r1, #12
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055d6:	430b      	orrs	r3, r1
 80055d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ea:	6999      	ldr	r1, [r3, #24]
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	ea40 0301 	orr.w	r3, r0, r1
 80055f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4b8f      	ldr	r3, [pc, #572]	; (800583c <UART_SetConfig+0x2cc>)
 8005600:	429a      	cmp	r2, r3
 8005602:	d005      	beq.n	8005610 <UART_SetConfig+0xa0>
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	4b8d      	ldr	r3, [pc, #564]	; (8005840 <UART_SetConfig+0x2d0>)
 800560c:	429a      	cmp	r2, r3
 800560e:	d104      	bne.n	800561a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005610:	f7fe fa66 	bl	8003ae0 <HAL_RCC_GetPCLK2Freq>
 8005614:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005618:	e003      	b.n	8005622 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800561a:	f7fe fa4d 	bl	8003ab8 <HAL_RCC_GetPCLK1Freq>
 800561e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800562c:	f040 810c 	bne.w	8005848 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005634:	2200      	movs	r2, #0
 8005636:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800563a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800563e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005642:	4622      	mov	r2, r4
 8005644:	462b      	mov	r3, r5
 8005646:	1891      	adds	r1, r2, r2
 8005648:	65b9      	str	r1, [r7, #88]	; 0x58
 800564a:	415b      	adcs	r3, r3
 800564c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800564e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005652:	4621      	mov	r1, r4
 8005654:	eb12 0801 	adds.w	r8, r2, r1
 8005658:	4629      	mov	r1, r5
 800565a:	eb43 0901 	adc.w	r9, r3, r1
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800566a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800566e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005672:	4690      	mov	r8, r2
 8005674:	4699      	mov	r9, r3
 8005676:	4623      	mov	r3, r4
 8005678:	eb18 0303 	adds.w	r3, r8, r3
 800567c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005680:	462b      	mov	r3, r5
 8005682:	eb49 0303 	adc.w	r3, r9, r3
 8005686:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800568a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005696:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800569a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800569e:	460b      	mov	r3, r1
 80056a0:	18db      	adds	r3, r3, r3
 80056a2:	653b      	str	r3, [r7, #80]	; 0x50
 80056a4:	4613      	mov	r3, r2
 80056a6:	eb42 0303 	adc.w	r3, r2, r3
 80056aa:	657b      	str	r3, [r7, #84]	; 0x54
 80056ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056b4:	f7fa ffa8 	bl	8000608 <__aeabi_uldivmod>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	4b61      	ldr	r3, [pc, #388]	; (8005844 <UART_SetConfig+0x2d4>)
 80056be:	fba3 2302 	umull	r2, r3, r3, r2
 80056c2:	095b      	lsrs	r3, r3, #5
 80056c4:	011c      	lsls	r4, r3, #4
 80056c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ca:	2200      	movs	r2, #0
 80056cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80056d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80056d8:	4642      	mov	r2, r8
 80056da:	464b      	mov	r3, r9
 80056dc:	1891      	adds	r1, r2, r2
 80056de:	64b9      	str	r1, [r7, #72]	; 0x48
 80056e0:	415b      	adcs	r3, r3
 80056e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80056e8:	4641      	mov	r1, r8
 80056ea:	eb12 0a01 	adds.w	sl, r2, r1
 80056ee:	4649      	mov	r1, r9
 80056f0:	eb43 0b01 	adc.w	fp, r3, r1
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	f04f 0300 	mov.w	r3, #0
 80056fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005700:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005704:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005708:	4692      	mov	sl, r2
 800570a:	469b      	mov	fp, r3
 800570c:	4643      	mov	r3, r8
 800570e:	eb1a 0303 	adds.w	r3, sl, r3
 8005712:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005716:	464b      	mov	r3, r9
 8005718:	eb4b 0303 	adc.w	r3, fp, r3
 800571c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800572c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005730:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005734:	460b      	mov	r3, r1
 8005736:	18db      	adds	r3, r3, r3
 8005738:	643b      	str	r3, [r7, #64]	; 0x40
 800573a:	4613      	mov	r3, r2
 800573c:	eb42 0303 	adc.w	r3, r2, r3
 8005740:	647b      	str	r3, [r7, #68]	; 0x44
 8005742:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005746:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800574a:	f7fa ff5d 	bl	8000608 <__aeabi_uldivmod>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4611      	mov	r1, r2
 8005754:	4b3b      	ldr	r3, [pc, #236]	; (8005844 <UART_SetConfig+0x2d4>)
 8005756:	fba3 2301 	umull	r2, r3, r3, r1
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	2264      	movs	r2, #100	; 0x64
 800575e:	fb02 f303 	mul.w	r3, r2, r3
 8005762:	1acb      	subs	r3, r1, r3
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800576a:	4b36      	ldr	r3, [pc, #216]	; (8005844 <UART_SetConfig+0x2d4>)
 800576c:	fba3 2302 	umull	r2, r3, r3, r2
 8005770:	095b      	lsrs	r3, r3, #5
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005778:	441c      	add	r4, r3
 800577a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800577e:	2200      	movs	r2, #0
 8005780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005784:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005788:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800578c:	4642      	mov	r2, r8
 800578e:	464b      	mov	r3, r9
 8005790:	1891      	adds	r1, r2, r2
 8005792:	63b9      	str	r1, [r7, #56]	; 0x38
 8005794:	415b      	adcs	r3, r3
 8005796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005798:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800579c:	4641      	mov	r1, r8
 800579e:	1851      	adds	r1, r2, r1
 80057a0:	6339      	str	r1, [r7, #48]	; 0x30
 80057a2:	4649      	mov	r1, r9
 80057a4:	414b      	adcs	r3, r1
 80057a6:	637b      	str	r3, [r7, #52]	; 0x34
 80057a8:	f04f 0200 	mov.w	r2, #0
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057b4:	4659      	mov	r1, fp
 80057b6:	00cb      	lsls	r3, r1, #3
 80057b8:	4651      	mov	r1, sl
 80057ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057be:	4651      	mov	r1, sl
 80057c0:	00ca      	lsls	r2, r1, #3
 80057c2:	4610      	mov	r0, r2
 80057c4:	4619      	mov	r1, r3
 80057c6:	4603      	mov	r3, r0
 80057c8:	4642      	mov	r2, r8
 80057ca:	189b      	adds	r3, r3, r2
 80057cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057d0:	464b      	mov	r3, r9
 80057d2:	460a      	mov	r2, r1
 80057d4:	eb42 0303 	adc.w	r3, r2, r3
 80057d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80057ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80057f0:	460b      	mov	r3, r1
 80057f2:	18db      	adds	r3, r3, r3
 80057f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057f6:	4613      	mov	r3, r2
 80057f8:	eb42 0303 	adc.w	r3, r2, r3
 80057fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005802:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005806:	f7fa feff 	bl	8000608 <__aeabi_uldivmod>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	4b0d      	ldr	r3, [pc, #52]	; (8005844 <UART_SetConfig+0x2d4>)
 8005810:	fba3 1302 	umull	r1, r3, r3, r2
 8005814:	095b      	lsrs	r3, r3, #5
 8005816:	2164      	movs	r1, #100	; 0x64
 8005818:	fb01 f303 	mul.w	r3, r1, r3
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	3332      	adds	r3, #50	; 0x32
 8005822:	4a08      	ldr	r2, [pc, #32]	; (8005844 <UART_SetConfig+0x2d4>)
 8005824:	fba2 2303 	umull	r2, r3, r2, r3
 8005828:	095b      	lsrs	r3, r3, #5
 800582a:	f003 0207 	and.w	r2, r3, #7
 800582e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4422      	add	r2, r4
 8005836:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005838:	e105      	b.n	8005a46 <UART_SetConfig+0x4d6>
 800583a:	bf00      	nop
 800583c:	40011000 	.word	0x40011000
 8005840:	40011400 	.word	0x40011400
 8005844:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800584c:	2200      	movs	r2, #0
 800584e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005852:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005856:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800585a:	4642      	mov	r2, r8
 800585c:	464b      	mov	r3, r9
 800585e:	1891      	adds	r1, r2, r2
 8005860:	6239      	str	r1, [r7, #32]
 8005862:	415b      	adcs	r3, r3
 8005864:	627b      	str	r3, [r7, #36]	; 0x24
 8005866:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800586a:	4641      	mov	r1, r8
 800586c:	1854      	adds	r4, r2, r1
 800586e:	4649      	mov	r1, r9
 8005870:	eb43 0501 	adc.w	r5, r3, r1
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	00eb      	lsls	r3, r5, #3
 800587e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005882:	00e2      	lsls	r2, r4, #3
 8005884:	4614      	mov	r4, r2
 8005886:	461d      	mov	r5, r3
 8005888:	4643      	mov	r3, r8
 800588a:	18e3      	adds	r3, r4, r3
 800588c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005890:	464b      	mov	r3, r9
 8005892:	eb45 0303 	adc.w	r3, r5, r3
 8005896:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800589a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	f04f 0300 	mov.w	r3, #0
 80058b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058b6:	4629      	mov	r1, r5
 80058b8:	008b      	lsls	r3, r1, #2
 80058ba:	4621      	mov	r1, r4
 80058bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058c0:	4621      	mov	r1, r4
 80058c2:	008a      	lsls	r2, r1, #2
 80058c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058c8:	f7fa fe9e 	bl	8000608 <__aeabi_uldivmod>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4b60      	ldr	r3, [pc, #384]	; (8005a54 <UART_SetConfig+0x4e4>)
 80058d2:	fba3 2302 	umull	r2, r3, r3, r2
 80058d6:	095b      	lsrs	r3, r3, #5
 80058d8:	011c      	lsls	r4, r3, #4
 80058da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058de:	2200      	movs	r2, #0
 80058e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80058e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80058ec:	4642      	mov	r2, r8
 80058ee:	464b      	mov	r3, r9
 80058f0:	1891      	adds	r1, r2, r2
 80058f2:	61b9      	str	r1, [r7, #24]
 80058f4:	415b      	adcs	r3, r3
 80058f6:	61fb      	str	r3, [r7, #28]
 80058f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058fc:	4641      	mov	r1, r8
 80058fe:	1851      	adds	r1, r2, r1
 8005900:	6139      	str	r1, [r7, #16]
 8005902:	4649      	mov	r1, r9
 8005904:	414b      	adcs	r3, r1
 8005906:	617b      	str	r3, [r7, #20]
 8005908:	f04f 0200 	mov.w	r2, #0
 800590c:	f04f 0300 	mov.w	r3, #0
 8005910:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005914:	4659      	mov	r1, fp
 8005916:	00cb      	lsls	r3, r1, #3
 8005918:	4651      	mov	r1, sl
 800591a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800591e:	4651      	mov	r1, sl
 8005920:	00ca      	lsls	r2, r1, #3
 8005922:	4610      	mov	r0, r2
 8005924:	4619      	mov	r1, r3
 8005926:	4603      	mov	r3, r0
 8005928:	4642      	mov	r2, r8
 800592a:	189b      	adds	r3, r3, r2
 800592c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005930:	464b      	mov	r3, r9
 8005932:	460a      	mov	r2, r1
 8005934:	eb42 0303 	adc.w	r3, r2, r3
 8005938:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	67bb      	str	r3, [r7, #120]	; 0x78
 8005946:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005948:	f04f 0200 	mov.w	r2, #0
 800594c:	f04f 0300 	mov.w	r3, #0
 8005950:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005954:	4649      	mov	r1, r9
 8005956:	008b      	lsls	r3, r1, #2
 8005958:	4641      	mov	r1, r8
 800595a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800595e:	4641      	mov	r1, r8
 8005960:	008a      	lsls	r2, r1, #2
 8005962:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005966:	f7fa fe4f 	bl	8000608 <__aeabi_uldivmod>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4b39      	ldr	r3, [pc, #228]	; (8005a54 <UART_SetConfig+0x4e4>)
 8005970:	fba3 1302 	umull	r1, r3, r3, r2
 8005974:	095b      	lsrs	r3, r3, #5
 8005976:	2164      	movs	r1, #100	; 0x64
 8005978:	fb01 f303 	mul.w	r3, r1, r3
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	3332      	adds	r3, #50	; 0x32
 8005982:	4a34      	ldr	r2, [pc, #208]	; (8005a54 <UART_SetConfig+0x4e4>)
 8005984:	fba2 2303 	umull	r2, r3, r2, r3
 8005988:	095b      	lsrs	r3, r3, #5
 800598a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800598e:	441c      	add	r4, r3
 8005990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005994:	2200      	movs	r2, #0
 8005996:	673b      	str	r3, [r7, #112]	; 0x70
 8005998:	677a      	str	r2, [r7, #116]	; 0x74
 800599a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800599e:	4642      	mov	r2, r8
 80059a0:	464b      	mov	r3, r9
 80059a2:	1891      	adds	r1, r2, r2
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	415b      	adcs	r3, r3
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059ae:	4641      	mov	r1, r8
 80059b0:	1851      	adds	r1, r2, r1
 80059b2:	6039      	str	r1, [r7, #0]
 80059b4:	4649      	mov	r1, r9
 80059b6:	414b      	adcs	r3, r1
 80059b8:	607b      	str	r3, [r7, #4]
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059c6:	4659      	mov	r1, fp
 80059c8:	00cb      	lsls	r3, r1, #3
 80059ca:	4651      	mov	r1, sl
 80059cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059d0:	4651      	mov	r1, sl
 80059d2:	00ca      	lsls	r2, r1, #3
 80059d4:	4610      	mov	r0, r2
 80059d6:	4619      	mov	r1, r3
 80059d8:	4603      	mov	r3, r0
 80059da:	4642      	mov	r2, r8
 80059dc:	189b      	adds	r3, r3, r2
 80059de:	66bb      	str	r3, [r7, #104]	; 0x68
 80059e0:	464b      	mov	r3, r9
 80059e2:	460a      	mov	r2, r1
 80059e4:	eb42 0303 	adc.w	r3, r2, r3
 80059e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	663b      	str	r3, [r7, #96]	; 0x60
 80059f4:	667a      	str	r2, [r7, #100]	; 0x64
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a02:	4649      	mov	r1, r9
 8005a04:	008b      	lsls	r3, r1, #2
 8005a06:	4641      	mov	r1, r8
 8005a08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a0c:	4641      	mov	r1, r8
 8005a0e:	008a      	lsls	r2, r1, #2
 8005a10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a14:	f7fa fdf8 	bl	8000608 <__aeabi_uldivmod>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4b0d      	ldr	r3, [pc, #52]	; (8005a54 <UART_SetConfig+0x4e4>)
 8005a1e:	fba3 1302 	umull	r1, r3, r3, r2
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	2164      	movs	r1, #100	; 0x64
 8005a26:	fb01 f303 	mul.w	r3, r1, r3
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	3332      	adds	r3, #50	; 0x32
 8005a30:	4a08      	ldr	r2, [pc, #32]	; (8005a54 <UART_SetConfig+0x4e4>)
 8005a32:	fba2 2303 	umull	r2, r3, r2, r3
 8005a36:	095b      	lsrs	r3, r3, #5
 8005a38:	f003 020f 	and.w	r2, r3, #15
 8005a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4422      	add	r2, r4
 8005a44:	609a      	str	r2, [r3, #8]
}
 8005a46:	bf00      	nop
 8005a48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a52:	bf00      	nop
 8005a54:	51eb851f 	.word	0x51eb851f

08005a58 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	4603      	mov	r3, r0
 8005a60:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a6a:	2b84      	cmp	r3, #132	; 0x84
 8005a6c:	d005      	beq.n	8005a7a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005a6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4413      	add	r3, r2
 8005a76:	3303      	adds	r3, #3
 8005a78:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005a8c:	f001 fa2a 	bl	8006ee4 <vTaskStartScheduler>
  
  return osOK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005a96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a98:	b089      	sub	sp, #36	; 0x24
 8005a9a:	af04      	add	r7, sp, #16
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d020      	beq.n	8005aea <osThreadCreate+0x54>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01c      	beq.n	8005aea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685c      	ldr	r4, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681d      	ldr	r5, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691e      	ldr	r6, [r3, #16]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7ff ffc8 	bl	8005a58 <makeFreeRtosPriority>
 8005ac8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ad2:	9202      	str	r2, [sp, #8]
 8005ad4:	9301      	str	r3, [sp, #4]
 8005ad6:	9100      	str	r1, [sp, #0]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	4632      	mov	r2, r6
 8005adc:	4629      	mov	r1, r5
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f000 ff02 	bl	80068e8 <xTaskCreateStatic>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	e01c      	b.n	8005b24 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685c      	ldr	r4, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005af6:	b29e      	uxth	r6, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff ffaa 	bl	8005a58 <makeFreeRtosPriority>
 8005b04:	4602      	mov	r2, r0
 8005b06:	f107 030c 	add.w	r3, r7, #12
 8005b0a:	9301      	str	r3, [sp, #4]
 8005b0c:	9200      	str	r2, [sp, #0]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	4632      	mov	r2, r6
 8005b12:	4629      	mov	r1, r5
 8005b14:	4620      	mov	r0, r4
 8005b16:	f000 ff44 	bl	80069a2 <xTaskCreate>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d001      	beq.n	8005b24 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	e000      	b.n	8005b26 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005b24:	68fb      	ldr	r3, [r7, #12]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b2e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <osDelay+0x16>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	e000      	b.n	8005b46 <osDelay+0x18>
 8005b44:	2301      	movs	r3, #1
 8005b46:	4618      	mov	r0, r3
 8005b48:	f001 f862 	bl	8006c10 <vTaskDelay>
  
  return osOK;
 8005b4c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
	...

08005b58 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	460b      	mov	r3, r1
 8005b62:	607a      	str	r2, [r7, #4]
 8005b64:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d013      	beq.n	8005b96 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8005b6e:	7afb      	ldrb	r3, [r7, #11]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <osTimerCreate+0x20>
 8005b74:	2101      	movs	r1, #1
 8005b76:	e000      	b.n	8005b7a <osTimerCreate+0x22>
 8005b78:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8005b82:	9201      	str	r2, [sp, #4]
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	460a      	mov	r2, r1
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	480b      	ldr	r0, [pc, #44]	; (8005bbc <osTimerCreate+0x64>)
 8005b8e:	f001 ff66 	bl	8007a5e <xTimerCreateStatic>
 8005b92:	4603      	mov	r3, r0
 8005b94:	e00e      	b.n	8005bb4 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8005b96:	7afb      	ldrb	r3, [r7, #11]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <osTimerCreate+0x48>
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	e000      	b.n	8005ba2 <osTimerCreate+0x4a>
 8005ba0:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2101      	movs	r1, #1
 8005bac:	4803      	ldr	r0, [pc, #12]	; (8005bbc <osTimerCreate+0x64>)
 8005bae:	f001 ff35 	bl	8007a1c <xTimerCreate>
 8005bb2:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	08009488 	.word	0x08009488

08005bc0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d007      	beq.n	8005be0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	2001      	movs	r0, #1
 8005bd8:	f000 fa83 	bl	80060e2 <xQueueCreateMutexStatic>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	e003      	b.n	8005be8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005be0:	2001      	movs	r0, #1
 8005be2:	f000 fa66 	bl	80060b2 <xQueueCreateMutex>
 8005be6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00f      	beq.n	8005c22 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d10a      	bne.n	8005c1e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2203      	movs	r2, #3
 8005c0e:	9200      	str	r2, [sp, #0]
 8005c10:	2200      	movs	r2, #0
 8005c12:	2100      	movs	r1, #0
 8005c14:	2001      	movs	r0, #1
 8005c16:	f000 f961 	bl	8005edc <xQueueGenericCreateStatic>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	e016      	b.n	8005c4c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e014      	b.n	8005c4c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d110      	bne.n	8005c4a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005c28:	2203      	movs	r2, #3
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	2001      	movs	r0, #1
 8005c2e:	f000 f9cd 	bl	8005fcc <xQueueGenericCreate>
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d005      	beq.n	8005c46 <osSemaphoreCreate+0x56>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2100      	movs	r1, #0
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 fa69 	bl	8006118 <xQueueGenericSend>
      return sema;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	e000      	b.n	8005c4c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005c4a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005c54:	b590      	push	{r4, r7, lr}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d011      	beq.n	8005c8a <osMessageCreate+0x36>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00d      	beq.n	8005c8a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6818      	ldr	r0, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6859      	ldr	r1, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	2400      	movs	r4, #0
 8005c80:	9400      	str	r4, [sp, #0]
 8005c82:	f000 f92b 	bl	8005edc <xQueueGenericCreateStatic>
 8005c86:	4603      	mov	r3, r0
 8005c88:	e008      	b.n	8005c9c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6818      	ldr	r0, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	4619      	mov	r1, r3
 8005c96:	f000 f999 	bl	8005fcc <xQueueGenericCreate>
 8005c9a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd90      	pop	{r4, r7, pc}

08005ca4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f103 0208 	add.w	r2, r3, #8
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f103 0208 	add.w	r2, r3, #8
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f103 0208 	add.w	r2, r3, #8
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b085      	sub	sp, #20
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	601a      	str	r2, [r3, #0]
}
 8005d3a:	bf00      	nop
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5c:	d103      	bne.n	8005d66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	e00c      	b.n	8005d80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	3308      	adds	r3, #8
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	e002      	b.n	8005d74 <vListInsert+0x2e>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d2f6      	bcs.n	8005d6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	601a      	str	r2, [r3, #0]
}
 8005dac:	bf00      	nop
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6892      	ldr	r2, [r2, #8]
 8005dce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	6852      	ldr	r2, [r2, #4]
 8005dd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d103      	bne.n	8005dec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	1e5a      	subs	r2, r3, #1
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10a      	bne.n	8005e36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e32:	bf00      	nop
 8005e34:	e7fe      	b.n	8005e34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e36:	f002 faa5 	bl	8008384 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e42:	68f9      	ldr	r1, [r7, #12]
 8005e44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e46:	fb01 f303 	mul.w	r3, r1, r3
 8005e4a:	441a      	add	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e66:	3b01      	subs	r3, #1
 8005e68:	68f9      	ldr	r1, [r7, #12]
 8005e6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e6c:	fb01 f303 	mul.w	r3, r1, r3
 8005e70:	441a      	add	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	22ff      	movs	r2, #255	; 0xff
 8005e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	22ff      	movs	r2, #255	; 0xff
 8005e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d114      	bne.n	8005eb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01a      	beq.n	8005eca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3310      	adds	r3, #16
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f001 faaf 	bl	80073fc <xTaskRemoveFromEventList>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d012      	beq.n	8005eca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <xQueueGenericReset+0xcc>)
 8005ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	e009      	b.n	8005eca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3310      	adds	r3, #16
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff fef2 	bl	8005ca4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	3324      	adds	r3, #36	; 0x24
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7ff feed 	bl	8005ca4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005eca:	f002 fa8b 	bl	80083e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ece:	2301      	movs	r3, #1
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	e000ed04 	.word	0xe000ed04

08005edc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08e      	sub	sp, #56	; 0x38
 8005ee0:	af02      	add	r7, sp, #8
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <xQueueGenericCreateStatic+0x52>
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <xQueueGenericCreateStatic+0x56>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <xQueueGenericCreateStatic+0x58>
 8005f32:	2300      	movs	r3, #0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	623b      	str	r3, [r7, #32]
}
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d102      	bne.n	8005f5a <xQueueGenericCreateStatic+0x7e>
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <xQueueGenericCreateStatic+0x82>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e000      	b.n	8005f60 <xQueueGenericCreateStatic+0x84>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10a      	bne.n	8005f7a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	61fb      	str	r3, [r7, #28]
}
 8005f76:	bf00      	nop
 8005f78:	e7fe      	b.n	8005f78 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f7a:	2348      	movs	r3, #72	; 0x48
 8005f7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2b48      	cmp	r3, #72	; 0x48
 8005f82:	d00a      	beq.n	8005f9a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	61bb      	str	r3, [r7, #24]
}
 8005f96:	bf00      	nop
 8005f98:	e7fe      	b.n	8005f98 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f9a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00d      	beq.n	8005fc2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	68b9      	ldr	r1, [r7, #8]
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 f83f 	bl	8006040 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3730      	adds	r7, #48	; 0x30
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08a      	sub	sp, #40	; 0x28
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10a      	bne.n	8005ff6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	613b      	str	r3, [r7, #16]
}
 8005ff2:	bf00      	nop
 8005ff4:	e7fe      	b.n	8005ff4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	fb02 f303 	mul.w	r3, r2, r3
 8005ffe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	3348      	adds	r3, #72	; 0x48
 8006004:	4618      	mov	r0, r3
 8006006:	f002 fadf 	bl	80085c8 <pvPortMalloc>
 800600a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d011      	beq.n	8006036 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	3348      	adds	r3, #72	; 0x48
 800601a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006024:	79fa      	ldrb	r2, [r7, #7]
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	4613      	mov	r3, r2
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	68b9      	ldr	r1, [r7, #8]
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 f805 	bl	8006040 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006036:	69bb      	ldr	r3, [r7, #24]
	}
 8006038:	4618      	mov	r0, r3
 800603a:	3720      	adds	r7, #32
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d103      	bne.n	800605c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	601a      	str	r2, [r3, #0]
 800605a:	e002      	b.n	8006062 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800606e:	2101      	movs	r1, #1
 8006070:	69b8      	ldr	r0, [r7, #24]
 8006072:	f7ff fecb 	bl	8005e0c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006076:	bf00      	nop
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800607e:	b580      	push	{r7, lr}
 8006080:	b082      	sub	sp, #8
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00e      	beq.n	80060aa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800609e:	2300      	movs	r3, #0
 80060a0:	2200      	movs	r2, #0
 80060a2:	2100      	movs	r1, #0
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f837 	bl	8006118 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80060aa:	bf00      	nop
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b086      	sub	sp, #24
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	4603      	mov	r3, r0
 80060ba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80060bc:	2301      	movs	r3, #1
 80060be:	617b      	str	r3, [r7, #20]
 80060c0:	2300      	movs	r3, #0
 80060c2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80060c4:	79fb      	ldrb	r3, [r7, #7]
 80060c6:	461a      	mov	r2, r3
 80060c8:	6939      	ldr	r1, [r7, #16]
 80060ca:	6978      	ldr	r0, [r7, #20]
 80060cc:	f7ff ff7e 	bl	8005fcc <xQueueGenericCreate>
 80060d0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f7ff ffd3 	bl	800607e <prvInitialiseMutex>

		return xNewQueue;
 80060d8:	68fb      	ldr	r3, [r7, #12]
	}
 80060da:	4618      	mov	r0, r3
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b088      	sub	sp, #32
 80060e6:	af02      	add	r7, sp, #8
 80060e8:	4603      	mov	r3, r0
 80060ea:	6039      	str	r1, [r7, #0]
 80060ec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80060ee:	2301      	movs	r3, #1
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	2300      	movs	r3, #0
 80060f4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2200      	movs	r2, #0
 80060fe:	6939      	ldr	r1, [r7, #16]
 8006100:	6978      	ldr	r0, [r7, #20]
 8006102:	f7ff feeb 	bl	8005edc <xQueueGenericCreateStatic>
 8006106:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f7ff ffb8 	bl	800607e <prvInitialiseMutex>

		return xNewQueue;
 800610e:	68fb      	ldr	r3, [r7, #12]
	}
 8006110:	4618      	mov	r0, r3
 8006112:	3718      	adds	r7, #24
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08e      	sub	sp, #56	; 0x38
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006126:	2300      	movs	r3, #0
 8006128:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800612e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <xQueueGenericSend+0x32>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006146:	bf00      	nop
 8006148:	e7fe      	b.n	8006148 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d103      	bne.n	8006158 <xQueueGenericSend+0x40>
 8006150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <xQueueGenericSend+0x44>
 8006158:	2301      	movs	r3, #1
 800615a:	e000      	b.n	800615e <xQueueGenericSend+0x46>
 800615c:	2300      	movs	r3, #0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10a      	bne.n	8006178 <xQueueGenericSend+0x60>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d103      	bne.n	8006186 <xQueueGenericSend+0x6e>
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <xQueueGenericSend+0x72>
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <xQueueGenericSend+0x74>
 800618a:	2300      	movs	r3, #0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10a      	bne.n	80061a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	623b      	str	r3, [r7, #32]
}
 80061a2:	bf00      	nop
 80061a4:	e7fe      	b.n	80061a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061a6:	f001 fae7 	bl	8007778 <xTaskGetSchedulerState>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d102      	bne.n	80061b6 <xQueueGenericSend+0x9e>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <xQueueGenericSend+0xa2>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <xQueueGenericSend+0xa4>
 80061ba:	2300      	movs	r3, #0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10a      	bne.n	80061d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	61fb      	str	r3, [r7, #28]
}
 80061d2:	bf00      	nop
 80061d4:	e7fe      	b.n	80061d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061d6:	f002 f8d5 	bl	8008384 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d302      	bcc.n	80061ec <xQueueGenericSend+0xd4>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d129      	bne.n	8006240 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	68b9      	ldr	r1, [r7, #8]
 80061f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061f2:	f000 fa0b 	bl	800660c <prvCopyDataToQueue>
 80061f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d010      	beq.n	8006222 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	3324      	adds	r3, #36	; 0x24
 8006204:	4618      	mov	r0, r3
 8006206:	f001 f8f9 	bl	80073fc <xTaskRemoveFromEventList>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d013      	beq.n	8006238 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006210:	4b3f      	ldr	r3, [pc, #252]	; (8006310 <xQueueGenericSend+0x1f8>)
 8006212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	e00a      	b.n	8006238 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006224:	2b00      	cmp	r3, #0
 8006226:	d007      	beq.n	8006238 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006228:	4b39      	ldr	r3, [pc, #228]	; (8006310 <xQueueGenericSend+0x1f8>)
 800622a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800622e:	601a      	str	r2, [r3, #0]
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006238:	f002 f8d4 	bl	80083e4 <vPortExitCritical>
				return pdPASS;
 800623c:	2301      	movs	r3, #1
 800623e:	e063      	b.n	8006308 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d103      	bne.n	800624e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006246:	f002 f8cd 	bl	80083e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800624a:	2300      	movs	r3, #0
 800624c:	e05c      	b.n	8006308 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800624e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006250:	2b00      	cmp	r3, #0
 8006252:	d106      	bne.n	8006262 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006254:	f107 0314 	add.w	r3, r7, #20
 8006258:	4618      	mov	r0, r3
 800625a:	f001 f931 	bl	80074c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800625e:	2301      	movs	r3, #1
 8006260:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006262:	f002 f8bf 	bl	80083e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006266:	f000 fea3 	bl	8006fb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800626a:	f002 f88b 	bl	8008384 <vPortEnterCritical>
 800626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006270:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006274:	b25b      	sxtb	r3, r3
 8006276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627a:	d103      	bne.n	8006284 <xQueueGenericSend+0x16c>
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800628a:	b25b      	sxtb	r3, r3
 800628c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006290:	d103      	bne.n	800629a <xQueueGenericSend+0x182>
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800629a:	f002 f8a3 	bl	80083e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800629e:	1d3a      	adds	r2, r7, #4
 80062a0:	f107 0314 	add.w	r3, r7, #20
 80062a4:	4611      	mov	r1, r2
 80062a6:	4618      	mov	r0, r3
 80062a8:	f001 f920 	bl	80074ec <xTaskCheckForTimeOut>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d124      	bne.n	80062fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062b4:	f000 faa2 	bl	80067fc <prvIsQueueFull>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d018      	beq.n	80062f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	3310      	adds	r3, #16
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	4611      	mov	r1, r2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f001 f848 	bl	800735c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80062cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062ce:	f000 fa2d 	bl	800672c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80062d2:	f000 fe7b 	bl	8006fcc <xTaskResumeAll>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f47f af7c 	bne.w	80061d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80062de:	4b0c      	ldr	r3, [pc, #48]	; (8006310 <xQueueGenericSend+0x1f8>)
 80062e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	e772      	b.n	80061d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062f2:	f000 fa1b 	bl	800672c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062f6:	f000 fe69 	bl	8006fcc <xTaskResumeAll>
 80062fa:	e76c      	b.n	80061d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062fe:	f000 fa15 	bl	800672c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006302:	f000 fe63 	bl	8006fcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006306:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006308:	4618      	mov	r0, r3
 800630a:	3738      	adds	r7, #56	; 0x38
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	e000ed04 	.word	0xe000ed04

08006314 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b090      	sub	sp, #64	; 0x40
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10a      	bne.n	8006342 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800633e:	bf00      	nop
 8006340:	e7fe      	b.n	8006340 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d103      	bne.n	8006350 <xQueueGenericSendFromISR+0x3c>
 8006348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <xQueueGenericSendFromISR+0x40>
 8006350:	2301      	movs	r3, #1
 8006352:	e000      	b.n	8006356 <xQueueGenericSendFromISR+0x42>
 8006354:	2300      	movs	r3, #0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10a      	bne.n	8006370 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800636c:	bf00      	nop
 800636e:	e7fe      	b.n	800636e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b02      	cmp	r3, #2
 8006374:	d103      	bne.n	800637e <xQueueGenericSendFromISR+0x6a>
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637a:	2b01      	cmp	r3, #1
 800637c:	d101      	bne.n	8006382 <xQueueGenericSendFromISR+0x6e>
 800637e:	2301      	movs	r3, #1
 8006380:	e000      	b.n	8006384 <xQueueGenericSendFromISR+0x70>
 8006382:	2300      	movs	r3, #0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10a      	bne.n	800639e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	623b      	str	r3, [r7, #32]
}
 800639a:	bf00      	nop
 800639c:	e7fe      	b.n	800639c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800639e:	f002 f8d3 	bl	8008548 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063a2:	f3ef 8211 	mrs	r2, BASEPRI
 80063a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	61fa      	str	r2, [r7, #28]
 80063b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d302      	bcc.n	80063d0 <xQueueGenericSendFromISR+0xbc>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d12f      	bne.n	8006430 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063e6:	f000 f911 	bl	800660c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80063ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f2:	d112      	bne.n	800641a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d016      	beq.n	800642a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fe:	3324      	adds	r3, #36	; 0x24
 8006400:	4618      	mov	r0, r3
 8006402:	f000 fffb 	bl	80073fc <xTaskRemoveFromEventList>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00e      	beq.n	800642a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00b      	beq.n	800642a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	e007      	b.n	800642a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800641a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800641e:	3301      	adds	r3, #1
 8006420:	b2db      	uxtb	r3, r3
 8006422:	b25a      	sxtb	r2, r3
 8006424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800642a:	2301      	movs	r3, #1
 800642c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800642e:	e001      	b.n	8006434 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006430:	2300      	movs	r3, #0
 8006432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006436:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800643e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006442:	4618      	mov	r0, r3
 8006444:	3740      	adds	r7, #64	; 0x40
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
	...

0800644c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b08c      	sub	sp, #48	; 0x30
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006458:	2300      	movs	r3, #0
 800645a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10a      	bne.n	800647c <xQueueReceive+0x30>
	__asm volatile
 8006466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	623b      	str	r3, [r7, #32]
}
 8006478:	bf00      	nop
 800647a:	e7fe      	b.n	800647a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d103      	bne.n	800648a <xQueueReceive+0x3e>
 8006482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <xQueueReceive+0x42>
 800648a:	2301      	movs	r3, #1
 800648c:	e000      	b.n	8006490 <xQueueReceive+0x44>
 800648e:	2300      	movs	r3, #0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10a      	bne.n	80064aa <xQueueReceive+0x5e>
	__asm volatile
 8006494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	61fb      	str	r3, [r7, #28]
}
 80064a6:	bf00      	nop
 80064a8:	e7fe      	b.n	80064a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064aa:	f001 f965 	bl	8007778 <xTaskGetSchedulerState>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d102      	bne.n	80064ba <xQueueReceive+0x6e>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <xQueueReceive+0x72>
 80064ba:	2301      	movs	r3, #1
 80064bc:	e000      	b.n	80064c0 <xQueueReceive+0x74>
 80064be:	2300      	movs	r3, #0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10a      	bne.n	80064da <xQueueReceive+0x8e>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	61bb      	str	r3, [r7, #24]
}
 80064d6:	bf00      	nop
 80064d8:	e7fe      	b.n	80064d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064da:	f001 ff53 	bl	8008384 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d01f      	beq.n	800652a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064ea:	68b9      	ldr	r1, [r7, #8]
 80064ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064ee:	f000 f8f7 	bl	80066e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	1e5a      	subs	r2, r3, #1
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00f      	beq.n	8006522 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	3310      	adds	r3, #16
 8006506:	4618      	mov	r0, r3
 8006508:	f000 ff78 	bl	80073fc <xTaskRemoveFromEventList>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d007      	beq.n	8006522 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006512:	4b3d      	ldr	r3, [pc, #244]	; (8006608 <xQueueReceive+0x1bc>)
 8006514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006522:	f001 ff5f 	bl	80083e4 <vPortExitCritical>
				return pdPASS;
 8006526:	2301      	movs	r3, #1
 8006528:	e069      	b.n	80065fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d103      	bne.n	8006538 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006530:	f001 ff58 	bl	80083e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006534:	2300      	movs	r3, #0
 8006536:	e062      	b.n	80065fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	2b00      	cmp	r3, #0
 800653c:	d106      	bne.n	800654c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800653e:	f107 0310 	add.w	r3, r7, #16
 8006542:	4618      	mov	r0, r3
 8006544:	f000 ffbc 	bl	80074c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006548:	2301      	movs	r3, #1
 800654a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800654c:	f001 ff4a 	bl	80083e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006550:	f000 fd2e 	bl	8006fb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006554:	f001 ff16 	bl	8008384 <vPortEnterCritical>
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800655e:	b25b      	sxtb	r3, r3
 8006560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006564:	d103      	bne.n	800656e <xQueueReceive+0x122>
 8006566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006574:	b25b      	sxtb	r3, r3
 8006576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657a:	d103      	bne.n	8006584 <xQueueReceive+0x138>
 800657c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006584:	f001 ff2e 	bl	80083e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006588:	1d3a      	adds	r2, r7, #4
 800658a:	f107 0310 	add.w	r3, r7, #16
 800658e:	4611      	mov	r1, r2
 8006590:	4618      	mov	r0, r3
 8006592:	f000 ffab 	bl	80074ec <xTaskCheckForTimeOut>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d123      	bne.n	80065e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800659c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800659e:	f000 f917 	bl	80067d0 <prvIsQueueEmpty>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d017      	beq.n	80065d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	3324      	adds	r3, #36	; 0x24
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	4611      	mov	r1, r2
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 fed3 	bl	800735c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065b8:	f000 f8b8 	bl	800672c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065bc:	f000 fd06 	bl	8006fcc <xTaskResumeAll>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d189      	bne.n	80064da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80065c6:	4b10      	ldr	r3, [pc, #64]	; (8006608 <xQueueReceive+0x1bc>)
 80065c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	e780      	b.n	80064da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80065d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065da:	f000 f8a7 	bl	800672c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065de:	f000 fcf5 	bl	8006fcc <xTaskResumeAll>
 80065e2:	e77a      	b.n	80064da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80065e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065e6:	f000 f8a1 	bl	800672c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065ea:	f000 fcef 	bl	8006fcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065f0:	f000 f8ee 	bl	80067d0 <prvIsQueueEmpty>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f43f af6f 	beq.w	80064da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3730      	adds	r7, #48	; 0x30
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	e000ed04 	.word	0xe000ed04

0800660c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006618:	2300      	movs	r3, #0
 800661a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10d      	bne.n	8006646 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d14d      	bne.n	80066ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	4618      	mov	r0, r3
 8006638:	f001 f8bc 	bl	80077b4 <xTaskPriorityDisinherit>
 800663c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	609a      	str	r2, [r3, #8]
 8006644:	e043      	b.n	80066ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d119      	bne.n	8006680 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6858      	ldr	r0, [r3, #4]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006654:	461a      	mov	r2, r3
 8006656:	68b9      	ldr	r1, [r7, #8]
 8006658:	f002 f9ca 	bl	80089f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006664:	441a      	add	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	429a      	cmp	r2, r3
 8006674:	d32b      	bcc.n	80066ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	605a      	str	r2, [r3, #4]
 800667e:	e026      	b.n	80066ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	68d8      	ldr	r0, [r3, #12]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006688:	461a      	mov	r2, r3
 800668a:	68b9      	ldr	r1, [r7, #8]
 800668c:	f002 f9b0 	bl	80089f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006698:	425b      	negs	r3, r3
 800669a:	441a      	add	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d207      	bcs.n	80066bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	425b      	negs	r3, r3
 80066b6:	441a      	add	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d105      	bne.n	80066ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d002      	beq.n	80066ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80066d6:	697b      	ldr	r3, [r7, #20]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3718      	adds	r7, #24
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d018      	beq.n	8006724 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	441a      	add	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	429a      	cmp	r2, r3
 800670a:	d303      	bcc.n	8006714 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68d9      	ldr	r1, [r3, #12]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	461a      	mov	r2, r3
 800671e:	6838      	ldr	r0, [r7, #0]
 8006720:	f002 f966 	bl	80089f0 <memcpy>
	}
}
 8006724:	bf00      	nop
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006734:	f001 fe26 	bl	8008384 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800673e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006740:	e011      	b.n	8006766 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	2b00      	cmp	r3, #0
 8006748:	d012      	beq.n	8006770 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	3324      	adds	r3, #36	; 0x24
 800674e:	4618      	mov	r0, r3
 8006750:	f000 fe54 	bl	80073fc <xTaskRemoveFromEventList>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800675a:	f000 ff29 	bl	80075b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800675e:	7bfb      	ldrb	r3, [r7, #15]
 8006760:	3b01      	subs	r3, #1
 8006762:	b2db      	uxtb	r3, r3
 8006764:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800676a:	2b00      	cmp	r3, #0
 800676c:	dce9      	bgt.n	8006742 <prvUnlockQueue+0x16>
 800676e:	e000      	b.n	8006772 <prvUnlockQueue+0x46>
					break;
 8006770:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	22ff      	movs	r2, #255	; 0xff
 8006776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800677a:	f001 fe33 	bl	80083e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800677e:	f001 fe01 	bl	8008384 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006788:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800678a:	e011      	b.n	80067b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d012      	beq.n	80067ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3310      	adds	r3, #16
 8006798:	4618      	mov	r0, r3
 800679a:	f000 fe2f 	bl	80073fc <xTaskRemoveFromEventList>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067a4:	f000 ff04 	bl	80075b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067a8:	7bbb      	ldrb	r3, [r7, #14]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	dce9      	bgt.n	800678c <prvUnlockQueue+0x60>
 80067b8:	e000      	b.n	80067bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	22ff      	movs	r2, #255	; 0xff
 80067c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067c4:	f001 fe0e 	bl	80083e4 <vPortExitCritical>
}
 80067c8:	bf00      	nop
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067d8:	f001 fdd4 	bl	8008384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d102      	bne.n	80067ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80067e4:	2301      	movs	r3, #1
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	e001      	b.n	80067ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80067ea:	2300      	movs	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067ee:	f001 fdf9 	bl	80083e4 <vPortExitCritical>

	return xReturn;
 80067f2:	68fb      	ldr	r3, [r7, #12]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006804:	f001 fdbe 	bl	8008384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006810:	429a      	cmp	r2, r3
 8006812:	d102      	bne.n	800681a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006814:	2301      	movs	r3, #1
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	e001      	b.n	800681e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800681a:	2300      	movs	r3, #0
 800681c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800681e:	f001 fde1 	bl	80083e4 <vPortExitCritical>

	return xReturn;
 8006822:	68fb      	ldr	r3, [r7, #12]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006836:	2300      	movs	r3, #0
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	e014      	b.n	8006866 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800683c:	4a0f      	ldr	r2, [pc, #60]	; (800687c <vQueueAddToRegistry+0x50>)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10b      	bne.n	8006860 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006848:	490c      	ldr	r1, [pc, #48]	; (800687c <vQueueAddToRegistry+0x50>)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006852:	4a0a      	ldr	r2, [pc, #40]	; (800687c <vQueueAddToRegistry+0x50>)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	4413      	add	r3, r2
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800685e:	e006      	b.n	800686e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3301      	adds	r3, #1
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2b07      	cmp	r3, #7
 800686a:	d9e7      	bls.n	800683c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800686c:	bf00      	nop
 800686e:	bf00      	nop
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	200013b4 	.word	0x200013b4

08006880 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006890:	f001 fd78 	bl	8008384 <vPortEnterCritical>
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800689a:	b25b      	sxtb	r3, r3
 800689c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a0:	d103      	bne.n	80068aa <vQueueWaitForMessageRestricted+0x2a>
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068b0:	b25b      	sxtb	r3, r3
 80068b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b6:	d103      	bne.n	80068c0 <vQueueWaitForMessageRestricted+0x40>
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068c0:	f001 fd90 	bl	80083e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d106      	bne.n	80068da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	3324      	adds	r3, #36	; 0x24
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	68b9      	ldr	r1, [r7, #8]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 fd65 	bl	80073a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80068da:	6978      	ldr	r0, [r7, #20]
 80068dc:	f7ff ff26 	bl	800672c <prvUnlockQueue>
	}
 80068e0:	bf00      	nop
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08e      	sub	sp, #56	; 0x38
 80068ec:	af04      	add	r7, sp, #16
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10a      	bne.n	8006912 <xTaskCreateStatic+0x2a>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	623b      	str	r3, [r7, #32]
}
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10a      	bne.n	800692e <xTaskCreateStatic+0x46>
	__asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	61fb      	str	r3, [r7, #28]
}
 800692a:	bf00      	nop
 800692c:	e7fe      	b.n	800692c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800692e:	2354      	movs	r3, #84	; 0x54
 8006930:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	2b54      	cmp	r3, #84	; 0x54
 8006936:	d00a      	beq.n	800694e <xTaskCreateStatic+0x66>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	61bb      	str	r3, [r7, #24]
}
 800694a:	bf00      	nop
 800694c:	e7fe      	b.n	800694c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800694e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01e      	beq.n	8006994 <xTaskCreateStatic+0xac>
 8006956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01b      	beq.n	8006994 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800695c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006964:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	2202      	movs	r2, #2
 800696a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800696e:	2300      	movs	r3, #0
 8006970:	9303      	str	r3, [sp, #12]
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	9302      	str	r3, [sp, #8]
 8006976:	f107 0314 	add.w	r3, r7, #20
 800697a:	9301      	str	r3, [sp, #4]
 800697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	68b9      	ldr	r1, [r7, #8]
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 f850 	bl	8006a2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800698c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800698e:	f000 f8d5 	bl	8006b3c <prvAddNewTaskToReadyList>
 8006992:	e001      	b.n	8006998 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006994:	2300      	movs	r3, #0
 8006996:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006998:	697b      	ldr	r3, [r7, #20]
	}
 800699a:	4618      	mov	r0, r3
 800699c:	3728      	adds	r7, #40	; 0x28
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b08c      	sub	sp, #48	; 0x30
 80069a6:	af04      	add	r7, sp, #16
 80069a8:	60f8      	str	r0, [r7, #12]
 80069aa:	60b9      	str	r1, [r7, #8]
 80069ac:	603b      	str	r3, [r7, #0]
 80069ae:	4613      	mov	r3, r2
 80069b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80069b2:	88fb      	ldrh	r3, [r7, #6]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4618      	mov	r0, r3
 80069b8:	f001 fe06 	bl	80085c8 <pvPortMalloc>
 80069bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00e      	beq.n	80069e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80069c4:	2054      	movs	r0, #84	; 0x54
 80069c6:	f001 fdff 	bl	80085c8 <pvPortMalloc>
 80069ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	631a      	str	r2, [r3, #48]	; 0x30
 80069d8:	e005      	b.n	80069e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80069da:	6978      	ldr	r0, [r7, #20]
 80069dc:	f001 fec0 	bl	8008760 <vPortFree>
 80069e0:	e001      	b.n	80069e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069e2:	2300      	movs	r3, #0
 80069e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d017      	beq.n	8006a1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069f4:	88fa      	ldrh	r2, [r7, #6]
 80069f6:	2300      	movs	r3, #0
 80069f8:	9303      	str	r3, [sp, #12]
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	9302      	str	r3, [sp, #8]
 80069fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a00:	9301      	str	r3, [sp, #4]
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	68b9      	ldr	r1, [r7, #8]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f80e 	bl	8006a2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a10:	69f8      	ldr	r0, [r7, #28]
 8006a12:	f000 f893 	bl	8006b3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a16:	2301      	movs	r3, #1
 8006a18:	61bb      	str	r3, [r7, #24]
 8006a1a:	e002      	b.n	8006a22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a22:	69bb      	ldr	r3, [r7, #24]
	}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3720      	adds	r7, #32
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
 8006a38:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a44:	3b01      	subs	r3, #1
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	f023 0307 	bic.w	r3, r3, #7
 8006a52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	f003 0307 	and.w	r3, r3, #7
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	617b      	str	r3, [r7, #20]
}
 8006a70:	bf00      	nop
 8006a72:	e7fe      	b.n	8006a72 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d01f      	beq.n	8006aba <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	61fb      	str	r3, [r7, #28]
 8006a7e:	e012      	b.n	8006aa6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	4413      	add	r3, r2
 8006a86:	7819      	ldrb	r1, [r3, #0]
 8006a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	3334      	adds	r3, #52	; 0x34
 8006a90:	460a      	mov	r2, r1
 8006a92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	4413      	add	r3, r2
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d006      	beq.n	8006aae <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	61fb      	str	r3, [r7, #28]
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	2b0f      	cmp	r3, #15
 8006aaa:	d9e9      	bls.n	8006a80 <prvInitialiseNewTask+0x54>
 8006aac:	e000      	b.n	8006ab0 <prvInitialiseNewTask+0x84>
			{
				break;
 8006aae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ab8:	e003      	b.n	8006ac2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac4:	2b06      	cmp	r3, #6
 8006ac6:	d901      	bls.n	8006acc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ac8:	2306      	movs	r3, #6
 8006aca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ad0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ad6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ada:	2200      	movs	r2, #0
 8006adc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7ff f8fe 	bl	8005ce4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	3318      	adds	r3, #24
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7ff f8f9 	bl	8005ce4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006af6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afa:	f1c3 0207 	rsb	r2, r3, #7
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	68f9      	ldr	r1, [r7, #12]
 8006b1a:	69b8      	ldr	r0, [r7, #24]
 8006b1c:	f001 fb02 	bl	8008124 <pxPortInitialiseStack>
 8006b20:	4602      	mov	r2, r0
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b32:	bf00      	nop
 8006b34:	3720      	adds	r7, #32
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
	...

08006b3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b44:	f001 fc1e 	bl	8008384 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b48:	4b2a      	ldr	r3, [pc, #168]	; (8006bf4 <prvAddNewTaskToReadyList+0xb8>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	4a29      	ldr	r2, [pc, #164]	; (8006bf4 <prvAddNewTaskToReadyList+0xb8>)
 8006b50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b52:	4b29      	ldr	r3, [pc, #164]	; (8006bf8 <prvAddNewTaskToReadyList+0xbc>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d109      	bne.n	8006b6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b5a:	4a27      	ldr	r2, [pc, #156]	; (8006bf8 <prvAddNewTaskToReadyList+0xbc>)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b60:	4b24      	ldr	r3, [pc, #144]	; (8006bf4 <prvAddNewTaskToReadyList+0xb8>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d110      	bne.n	8006b8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b68:	f000 fd48 	bl	80075fc <prvInitialiseTaskLists>
 8006b6c:	e00d      	b.n	8006b8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b6e:	4b23      	ldr	r3, [pc, #140]	; (8006bfc <prvAddNewTaskToReadyList+0xc0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d109      	bne.n	8006b8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b76:	4b20      	ldr	r3, [pc, #128]	; (8006bf8 <prvAddNewTaskToReadyList+0xbc>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d802      	bhi.n	8006b8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b84:	4a1c      	ldr	r2, [pc, #112]	; (8006bf8 <prvAddNewTaskToReadyList+0xbc>)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b8a:	4b1d      	ldr	r3, [pc, #116]	; (8006c00 <prvAddNewTaskToReadyList+0xc4>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	4a1b      	ldr	r2, [pc, #108]	; (8006c00 <prvAddNewTaskToReadyList+0xc4>)
 8006b92:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	2201      	movs	r2, #1
 8006b9a:	409a      	lsls	r2, r3
 8006b9c:	4b19      	ldr	r3, [pc, #100]	; (8006c04 <prvAddNewTaskToReadyList+0xc8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	4a18      	ldr	r2, [pc, #96]	; (8006c04 <prvAddNewTaskToReadyList+0xc8>)
 8006ba4:	6013      	str	r3, [r2, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006baa:	4613      	mov	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4a15      	ldr	r2, [pc, #84]	; (8006c08 <prvAddNewTaskToReadyList+0xcc>)
 8006bb4:	441a      	add	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	3304      	adds	r3, #4
 8006bba:	4619      	mov	r1, r3
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	f7ff f89e 	bl	8005cfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006bc2:	f001 fc0f 	bl	80083e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006bc6:	4b0d      	ldr	r3, [pc, #52]	; (8006bfc <prvAddNewTaskToReadyList+0xc0>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00e      	beq.n	8006bec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006bce:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <prvAddNewTaskToReadyList+0xbc>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d207      	bcs.n	8006bec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006bdc:	4b0b      	ldr	r3, [pc, #44]	; (8006c0c <prvAddNewTaskToReadyList+0xd0>)
 8006bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be2:	601a      	str	r2, [r3, #0]
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bec:	bf00      	nop
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	200014f4 	.word	0x200014f4
 8006bf8:	200013f4 	.word	0x200013f4
 8006bfc:	20001500 	.word	0x20001500
 8006c00:	20001510 	.word	0x20001510
 8006c04:	200014fc 	.word	0x200014fc
 8006c08:	200013f8 	.word	0x200013f8
 8006c0c:	e000ed04 	.word	0xe000ed04

08006c10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d017      	beq.n	8006c52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c22:	4b13      	ldr	r3, [pc, #76]	; (8006c70 <vTaskDelay+0x60>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00a      	beq.n	8006c40 <vTaskDelay+0x30>
	__asm volatile
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	60bb      	str	r3, [r7, #8]
}
 8006c3c:	bf00      	nop
 8006c3e:	e7fe      	b.n	8006c3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c40:	f000 f9b6 	bl	8006fb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c44:	2100      	movs	r1, #0
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fe3a 	bl	80078c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c4c:	f000 f9be 	bl	8006fcc <xTaskResumeAll>
 8006c50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d107      	bne.n	8006c68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006c58:	4b06      	ldr	r3, [pc, #24]	; (8006c74 <vTaskDelay+0x64>)
 8006c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c68:	bf00      	nop
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	2000151c 	.word	0x2000151c
 8006c74:	e000ed04 	.word	0xe000ed04

08006c78 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006c80:	f001 fb80 	bl	8008384 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d102      	bne.n	8006c90 <vTaskSuspend+0x18>
 8006c8a:	4b3c      	ldr	r3, [pc, #240]	; (8006d7c <vTaskSuspend+0x104>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	e000      	b.n	8006c92 <vTaskSuspend+0x1a>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3304      	adds	r3, #4
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7ff f88d 	bl	8005db8 <uxListRemove>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d115      	bne.n	8006cd0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca8:	4935      	ldr	r1, [pc, #212]	; (8006d80 <vTaskSuspend+0x108>)
 8006caa:	4613      	mov	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	440b      	add	r3, r1
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10a      	bne.n	8006cd0 <vTaskSuspend+0x58>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc4:	43da      	mvns	r2, r3
 8006cc6:	4b2f      	ldr	r3, [pc, #188]	; (8006d84 <vTaskSuspend+0x10c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	4a2d      	ldr	r2, [pc, #180]	; (8006d84 <vTaskSuspend+0x10c>)
 8006cce:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d004      	beq.n	8006ce2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	3318      	adds	r3, #24
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff f86b 	bl	8005db8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4827      	ldr	r0, [pc, #156]	; (8006d88 <vTaskSuspend+0x110>)
 8006cea:	f7ff f808 	bl	8005cfe <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d103      	bne.n	8006d02 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006d02:	f001 fb6f 	bl	80083e4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006d06:	4b21      	ldr	r3, [pc, #132]	; (8006d8c <vTaskSuspend+0x114>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d005      	beq.n	8006d1a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006d0e:	f001 fb39 	bl	8008384 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006d12:	f000 fd11 	bl	8007738 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006d16:	f001 fb65 	bl	80083e4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006d1a:	4b18      	ldr	r3, [pc, #96]	; (8006d7c <vTaskSuspend+0x104>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d127      	bne.n	8006d74 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8006d24:	4b19      	ldr	r3, [pc, #100]	; (8006d8c <vTaskSuspend+0x114>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d017      	beq.n	8006d5c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006d2c:	4b18      	ldr	r3, [pc, #96]	; (8006d90 <vTaskSuspend+0x118>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00a      	beq.n	8006d4a <vTaskSuspend+0xd2>
	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	60bb      	str	r3, [r7, #8]
}
 8006d46:	bf00      	nop
 8006d48:	e7fe      	b.n	8006d48 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8006d4a:	4b12      	ldr	r3, [pc, #72]	; (8006d94 <vTaskSuspend+0x11c>)
 8006d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d5a:	e00b      	b.n	8006d74 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006d5c:	4b0a      	ldr	r3, [pc, #40]	; (8006d88 <vTaskSuspend+0x110>)
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	4b0d      	ldr	r3, [pc, #52]	; (8006d98 <vTaskSuspend+0x120>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d103      	bne.n	8006d70 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8006d68:	4b04      	ldr	r3, [pc, #16]	; (8006d7c <vTaskSuspend+0x104>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]
	}
 8006d6e:	e001      	b.n	8006d74 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8006d70:	f000 fa98 	bl	80072a4 <vTaskSwitchContext>
	}
 8006d74:	bf00      	nop
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	200013f4 	.word	0x200013f4
 8006d80:	200013f8 	.word	0x200013f8
 8006d84:	200014fc 	.word	0x200014fc
 8006d88:	200014e0 	.word	0x200014e0
 8006d8c:	20001500 	.word	0x20001500
 8006d90:	2000151c 	.word	0x2000151c
 8006d94:	e000ed04 	.word	0xe000ed04
 8006d98:	200014f4 	.word	0x200014f4

08006d9c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006da4:	2300      	movs	r3, #0
 8006da6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10a      	bne.n	8006dc8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8006db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	60fb      	str	r3, [r7, #12]
}
 8006dc4:	bf00      	nop
 8006dc6:	e7fe      	b.n	8006dc6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	4a0a      	ldr	r2, [pc, #40]	; (8006df8 <prvTaskIsTaskSuspended+0x5c>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d10a      	bne.n	8006de8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd6:	4a09      	ldr	r2, [pc, #36]	; (8006dfc <prvTaskIsTaskSuspended+0x60>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d005      	beq.n	8006de8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8006de4:	2301      	movs	r3, #1
 8006de6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006de8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006dea:	4618      	mov	r0, r3
 8006dec:	371c      	adds	r7, #28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	200014e0 	.word	0x200014e0
 8006dfc:	200014b4 	.word	0x200014b4

08006e00 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08a      	sub	sp, #40	; 0x28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10a      	bne.n	8006e2c <xTaskResumeFromISR+0x2c>
	__asm volatile
 8006e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	61bb      	str	r3, [r7, #24]
}
 8006e28:	bf00      	nop
 8006e2a:	e7fe      	b.n	8006e2a <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e2c:	f001 fb8c 	bl	8008548 <vPortValidateInterruptPriority>
	__asm volatile
 8006e30:	f3ef 8211 	mrs	r2, BASEPRI
 8006e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	617a      	str	r2, [r7, #20]
 8006e46:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006e48:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e4a:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006e4c:	6a38      	ldr	r0, [r7, #32]
 8006e4e:	f7ff ffa5 	bl	8006d9c <prvTaskIsTaskSuspended>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d02f      	beq.n	8006eb8 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e58:	4b1d      	ldr	r3, [pc, #116]	; (8006ed0 <xTaskResumeFromISR+0xd0>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d125      	bne.n	8006eac <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e64:	4b1b      	ldr	r3, [pc, #108]	; (8006ed4 <xTaskResumeFromISR+0xd4>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d301      	bcc.n	8006e72 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	3304      	adds	r3, #4
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fe ff9e 	bl	8005db8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e7c:	6a3b      	ldr	r3, [r7, #32]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	2201      	movs	r2, #1
 8006e82:	409a      	lsls	r2, r3
 8006e84:	4b14      	ldr	r3, [pc, #80]	; (8006ed8 <xTaskResumeFromISR+0xd8>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	4a13      	ldr	r2, [pc, #76]	; (8006ed8 <xTaskResumeFromISR+0xd8>)
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e92:	4613      	mov	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4a10      	ldr	r2, [pc, #64]	; (8006edc <xTaskResumeFromISR+0xdc>)
 8006e9c:	441a      	add	r2, r3
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	f7fe ff2a 	bl	8005cfe <vListInsertEnd>
 8006eaa:	e005      	b.n	8006eb8 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	3318      	adds	r3, #24
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	480b      	ldr	r0, [pc, #44]	; (8006ee0 <xTaskResumeFromISR+0xe0>)
 8006eb4:	f7fe ff23 	bl	8005cfe <vListInsertEnd>
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f383 8811 	msr	BASEPRI, r3
}
 8006ec2:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3728      	adds	r7, #40	; 0x28
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	2000151c 	.word	0x2000151c
 8006ed4:	200013f4 	.word	0x200013f4
 8006ed8:	200014fc 	.word	0x200014fc
 8006edc:	200013f8 	.word	0x200013f8
 8006ee0:	200014b4 	.word	0x200014b4

08006ee4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b08a      	sub	sp, #40	; 0x28
 8006ee8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ef2:	463a      	mov	r2, r7
 8006ef4:	1d39      	adds	r1, r7, #4
 8006ef6:	f107 0308 	add.w	r3, r7, #8
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7f9 fdda 	bl	8000ab4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	9202      	str	r2, [sp, #8]
 8006f08:	9301      	str	r3, [sp, #4]
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	460a      	mov	r2, r1
 8006f12:	4921      	ldr	r1, [pc, #132]	; (8006f98 <vTaskStartScheduler+0xb4>)
 8006f14:	4821      	ldr	r0, [pc, #132]	; (8006f9c <vTaskStartScheduler+0xb8>)
 8006f16:	f7ff fce7 	bl	80068e8 <xTaskCreateStatic>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	4a20      	ldr	r2, [pc, #128]	; (8006fa0 <vTaskStartScheduler+0xbc>)
 8006f1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f20:	4b1f      	ldr	r3, [pc, #124]	; (8006fa0 <vTaskStartScheduler+0xbc>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	e001      	b.n	8006f32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d102      	bne.n	8006f3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f38:	f000 fd28 	bl	800798c <xTimerCreateTimerTask>
 8006f3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d116      	bne.n	8006f72 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	613b      	str	r3, [r7, #16]
}
 8006f56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f58:	4b12      	ldr	r3, [pc, #72]	; (8006fa4 <vTaskStartScheduler+0xc0>)
 8006f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f60:	4b11      	ldr	r3, [pc, #68]	; (8006fa8 <vTaskStartScheduler+0xc4>)
 8006f62:	2201      	movs	r2, #1
 8006f64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f66:	4b11      	ldr	r3, [pc, #68]	; (8006fac <vTaskStartScheduler+0xc8>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f6c:	f001 f968 	bl	8008240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f70:	e00e      	b.n	8006f90 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f78:	d10a      	bne.n	8006f90 <vTaskStartScheduler+0xac>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	60fb      	str	r3, [r7, #12]
}
 8006f8c:	bf00      	nop
 8006f8e:	e7fe      	b.n	8006f8e <vTaskStartScheduler+0xaa>
}
 8006f90:	bf00      	nop
 8006f92:	3718      	adds	r7, #24
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	0800948c 	.word	0x0800948c
 8006f9c:	080075c9 	.word	0x080075c9
 8006fa0:	20001518 	.word	0x20001518
 8006fa4:	20001514 	.word	0x20001514
 8006fa8:	20001500 	.word	0x20001500
 8006fac:	200014f8 	.word	0x200014f8

08006fb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006fb4:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <vTaskSuspendAll+0x18>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	4a03      	ldr	r2, [pc, #12]	; (8006fc8 <vTaskSuspendAll+0x18>)
 8006fbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006fbe:	bf00      	nop
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	2000151c 	.word	0x2000151c

08006fcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fda:	4b41      	ldr	r3, [pc, #260]	; (80070e0 <xTaskResumeAll+0x114>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10a      	bne.n	8006ff8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	603b      	str	r3, [r7, #0]
}
 8006ff4:	bf00      	nop
 8006ff6:	e7fe      	b.n	8006ff6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ff8:	f001 f9c4 	bl	8008384 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ffc:	4b38      	ldr	r3, [pc, #224]	; (80070e0 <xTaskResumeAll+0x114>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3b01      	subs	r3, #1
 8007002:	4a37      	ldr	r2, [pc, #220]	; (80070e0 <xTaskResumeAll+0x114>)
 8007004:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007006:	4b36      	ldr	r3, [pc, #216]	; (80070e0 <xTaskResumeAll+0x114>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d161      	bne.n	80070d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800700e:	4b35      	ldr	r3, [pc, #212]	; (80070e4 <xTaskResumeAll+0x118>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d05d      	beq.n	80070d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007016:	e02e      	b.n	8007076 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007018:	4b33      	ldr	r3, [pc, #204]	; (80070e8 <xTaskResumeAll+0x11c>)
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3318      	adds	r3, #24
 8007024:	4618      	mov	r0, r3
 8007026:	f7fe fec7 	bl	8005db8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3304      	adds	r3, #4
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe fec2 	bl	8005db8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	2201      	movs	r2, #1
 800703a:	409a      	lsls	r2, r3
 800703c:	4b2b      	ldr	r3, [pc, #172]	; (80070ec <xTaskResumeAll+0x120>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4313      	orrs	r3, r2
 8007042:	4a2a      	ldr	r2, [pc, #168]	; (80070ec <xTaskResumeAll+0x120>)
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704a:	4613      	mov	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4a27      	ldr	r2, [pc, #156]	; (80070f0 <xTaskResumeAll+0x124>)
 8007054:	441a      	add	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3304      	adds	r3, #4
 800705a:	4619      	mov	r1, r3
 800705c:	4610      	mov	r0, r2
 800705e:	f7fe fe4e 	bl	8005cfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007066:	4b23      	ldr	r3, [pc, #140]	; (80070f4 <xTaskResumeAll+0x128>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	429a      	cmp	r2, r3
 800706e:	d302      	bcc.n	8007076 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007070:	4b21      	ldr	r3, [pc, #132]	; (80070f8 <xTaskResumeAll+0x12c>)
 8007072:	2201      	movs	r2, #1
 8007074:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007076:	4b1c      	ldr	r3, [pc, #112]	; (80070e8 <xTaskResumeAll+0x11c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1cc      	bne.n	8007018 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007084:	f000 fb58 	bl	8007738 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007088:	4b1c      	ldr	r3, [pc, #112]	; (80070fc <xTaskResumeAll+0x130>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d010      	beq.n	80070b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007094:	f000 f846 	bl	8007124 <xTaskIncrementTick>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800709e:	4b16      	ldr	r3, [pc, #88]	; (80070f8 <xTaskResumeAll+0x12c>)
 80070a0:	2201      	movs	r2, #1
 80070a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1f1      	bne.n	8007094 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80070b0:	4b12      	ldr	r3, [pc, #72]	; (80070fc <xTaskResumeAll+0x130>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070b6:	4b10      	ldr	r3, [pc, #64]	; (80070f8 <xTaskResumeAll+0x12c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d009      	beq.n	80070d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070be:	2301      	movs	r3, #1
 80070c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070c2:	4b0f      	ldr	r3, [pc, #60]	; (8007100 <xTaskResumeAll+0x134>)
 80070c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070d2:	f001 f987 	bl	80083e4 <vPortExitCritical>

	return xAlreadyYielded;
 80070d6:	68bb      	ldr	r3, [r7, #8]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	2000151c 	.word	0x2000151c
 80070e4:	200014f4 	.word	0x200014f4
 80070e8:	200014b4 	.word	0x200014b4
 80070ec:	200014fc 	.word	0x200014fc
 80070f0:	200013f8 	.word	0x200013f8
 80070f4:	200013f4 	.word	0x200013f4
 80070f8:	20001508 	.word	0x20001508
 80070fc:	20001504 	.word	0x20001504
 8007100:	e000ed04 	.word	0xe000ed04

08007104 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800710a:	4b05      	ldr	r3, [pc, #20]	; (8007120 <xTaskGetTickCount+0x1c>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007110:	687b      	ldr	r3, [r7, #4]
}
 8007112:	4618      	mov	r0, r3
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	200014f8 	.word	0x200014f8

08007124 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800712a:	2300      	movs	r3, #0
 800712c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800712e:	4b52      	ldr	r3, [pc, #328]	; (8007278 <xTaskIncrementTick+0x154>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	f040 8094 	bne.w	8007260 <xTaskIncrementTick+0x13c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007138:	4b50      	ldr	r3, [pc, #320]	; (800727c <xTaskIncrementTick+0x158>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3301      	adds	r3, #1
 800713e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007140:	4a4e      	ldr	r2, [pc, #312]	; (800727c <xTaskIncrementTick+0x158>)
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d120      	bne.n	800718e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800714c:	4b4c      	ldr	r3, [pc, #304]	; (8007280 <xTaskIncrementTick+0x15c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00a      	beq.n	800716c <xTaskIncrementTick+0x48>
	__asm volatile
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	603b      	str	r3, [r7, #0]
}
 8007168:	bf00      	nop
 800716a:	e7fe      	b.n	800716a <xTaskIncrementTick+0x46>
 800716c:	4b44      	ldr	r3, [pc, #272]	; (8007280 <xTaskIncrementTick+0x15c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	4b44      	ldr	r3, [pc, #272]	; (8007284 <xTaskIncrementTick+0x160>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a42      	ldr	r2, [pc, #264]	; (8007280 <xTaskIncrementTick+0x15c>)
 8007178:	6013      	str	r3, [r2, #0]
 800717a:	4a42      	ldr	r2, [pc, #264]	; (8007284 <xTaskIncrementTick+0x160>)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6013      	str	r3, [r2, #0]
 8007180:	4b41      	ldr	r3, [pc, #260]	; (8007288 <xTaskIncrementTick+0x164>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3301      	adds	r3, #1
 8007186:	4a40      	ldr	r2, [pc, #256]	; (8007288 <xTaskIncrementTick+0x164>)
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	f000 fad5 	bl	8007738 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800718e:	4b3f      	ldr	r3, [pc, #252]	; (800728c <xTaskIncrementTick+0x168>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	429a      	cmp	r2, r3
 8007196:	d348      	bcc.n	800722a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007198:	4b39      	ldr	r3, [pc, #228]	; (8007280 <xTaskIncrementTick+0x15c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d104      	bne.n	80071ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071a2:	4b3a      	ldr	r3, [pc, #232]	; (800728c <xTaskIncrementTick+0x168>)
 80071a4:	f04f 32ff 	mov.w	r2, #4294967295
 80071a8:	601a      	str	r2, [r3, #0]
					break;
 80071aa:	e03e      	b.n	800722a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ac:	4b34      	ldr	r3, [pc, #208]	; (8007280 <xTaskIncrementTick+0x15c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d203      	bcs.n	80071cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071c4:	4a31      	ldr	r2, [pc, #196]	; (800728c <xTaskIncrementTick+0x168>)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071ca:	e02e      	b.n	800722a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	3304      	adds	r3, #4
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fe fdf1 	bl	8005db8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d004      	beq.n	80071e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	3318      	adds	r3, #24
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fe fde8 	bl	8005db8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	2201      	movs	r2, #1
 80071ee:	409a      	lsls	r2, r3
 80071f0:	4b27      	ldr	r3, [pc, #156]	; (8007290 <xTaskIncrementTick+0x16c>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	4a26      	ldr	r2, [pc, #152]	; (8007290 <xTaskIncrementTick+0x16c>)
 80071f8:	6013      	str	r3, [r2, #0]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4a23      	ldr	r2, [pc, #140]	; (8007294 <xTaskIncrementTick+0x170>)
 8007208:	441a      	add	r2, r3
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	3304      	adds	r3, #4
 800720e:	4619      	mov	r1, r3
 8007210:	4610      	mov	r0, r2
 8007212:	f7fe fd74 	bl	8005cfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721a:	4b1f      	ldr	r3, [pc, #124]	; (8007298 <xTaskIncrementTick+0x174>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007220:	429a      	cmp	r2, r3
 8007222:	d3b9      	bcc.n	8007198 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007224:	2301      	movs	r3, #1
 8007226:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007228:	e7b6      	b.n	8007198 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800722a:	4b1b      	ldr	r3, [pc, #108]	; (8007298 <xTaskIncrementTick+0x174>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007230:	4918      	ldr	r1, [pc, #96]	; (8007294 <xTaskIncrementTick+0x170>)
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	440b      	add	r3, r1
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d901      	bls.n	8007246 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007242:	2301      	movs	r3, #1
 8007244:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8007246:	4b15      	ldr	r3, [pc, #84]	; (800729c <xTaskIncrementTick+0x178>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <xTaskIncrementTick+0x12e>
			{
				vApplicationTickHook();
 800724e:	f7f9 fc2a 	bl	8000aa6 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007252:	4b13      	ldr	r3, [pc, #76]	; (80072a0 <xTaskIncrementTick+0x17c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d009      	beq.n	800726e <xTaskIncrementTick+0x14a>
			{
				xSwitchRequired = pdTRUE;
 800725a:	2301      	movs	r3, #1
 800725c:	617b      	str	r3, [r7, #20]
 800725e:	e006      	b.n	800726e <xTaskIncrementTick+0x14a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007260:	4b0e      	ldr	r3, [pc, #56]	; (800729c <xTaskIncrementTick+0x178>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3301      	adds	r3, #1
 8007266:	4a0d      	ldr	r2, [pc, #52]	; (800729c <xTaskIncrementTick+0x178>)
 8007268:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800726a:	f7f9 fc1c 	bl	8000aa6 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800726e:	697b      	ldr	r3, [r7, #20]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	2000151c 	.word	0x2000151c
 800727c:	200014f8 	.word	0x200014f8
 8007280:	200014ac 	.word	0x200014ac
 8007284:	200014b0 	.word	0x200014b0
 8007288:	2000150c 	.word	0x2000150c
 800728c:	20001514 	.word	0x20001514
 8007290:	200014fc 	.word	0x200014fc
 8007294:	200013f8 	.word	0x200013f8
 8007298:	200013f4 	.word	0x200013f4
 800729c:	20001504 	.word	0x20001504
 80072a0:	20001508 	.word	0x20001508

080072a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072a4:	b480      	push	{r7}
 80072a6:	b087      	sub	sp, #28
 80072a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072aa:	4b27      	ldr	r3, [pc, #156]	; (8007348 <vTaskSwitchContext+0xa4>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d003      	beq.n	80072ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072b2:	4b26      	ldr	r3, [pc, #152]	; (800734c <vTaskSwitchContext+0xa8>)
 80072b4:	2201      	movs	r2, #1
 80072b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072b8:	e03f      	b.n	800733a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80072ba:	4b24      	ldr	r3, [pc, #144]	; (800734c <vTaskSwitchContext+0xa8>)
 80072bc:	2200      	movs	r2, #0
 80072be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072c0:	4b23      	ldr	r3, [pc, #140]	; (8007350 <vTaskSwitchContext+0xac>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	fab3 f383 	clz	r3, r3
 80072cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80072ce:	7afb      	ldrb	r3, [r7, #11]
 80072d0:	f1c3 031f 	rsb	r3, r3, #31
 80072d4:	617b      	str	r3, [r7, #20]
 80072d6:	491f      	ldr	r1, [pc, #124]	; (8007354 <vTaskSwitchContext+0xb0>)
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	4613      	mov	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	440b      	add	r3, r1
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10a      	bne.n	8007300 <vTaskSwitchContext+0x5c>
	__asm volatile
 80072ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	607b      	str	r3, [r7, #4]
}
 80072fc:	bf00      	nop
 80072fe:	e7fe      	b.n	80072fe <vTaskSwitchContext+0x5a>
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	4613      	mov	r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	4413      	add	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4a12      	ldr	r2, [pc, #72]	; (8007354 <vTaskSwitchContext+0xb0>)
 800730c:	4413      	add	r3, r2
 800730e:	613b      	str	r3, [r7, #16]
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	605a      	str	r2, [r3, #4]
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	3308      	adds	r3, #8
 8007322:	429a      	cmp	r2, r3
 8007324:	d104      	bne.n	8007330 <vTaskSwitchContext+0x8c>
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	605a      	str	r2, [r3, #4]
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	4a08      	ldr	r2, [pc, #32]	; (8007358 <vTaskSwitchContext+0xb4>)
 8007338:	6013      	str	r3, [r2, #0]
}
 800733a:	bf00      	nop
 800733c:	371c      	adds	r7, #28
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	2000151c 	.word	0x2000151c
 800734c:	20001508 	.word	0x20001508
 8007350:	200014fc 	.word	0x200014fc
 8007354:	200013f8 	.word	0x200013f8
 8007358:	200013f4 	.word	0x200013f4

0800735c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10a      	bne.n	8007382 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	60fb      	str	r3, [r7, #12]
}
 800737e:	bf00      	nop
 8007380:	e7fe      	b.n	8007380 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007382:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <vTaskPlaceOnEventList+0x44>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3318      	adds	r3, #24
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fe fcdb 	bl	8005d46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007390:	2101      	movs	r1, #1
 8007392:	6838      	ldr	r0, [r7, #0]
 8007394:	f000 fa94 	bl	80078c0 <prvAddCurrentTaskToDelayedList>
}
 8007398:	bf00      	nop
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	200013f4 	.word	0x200013f4

080073a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10a      	bne.n	80073cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80073b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	617b      	str	r3, [r7, #20]
}
 80073c8:	bf00      	nop
 80073ca:	e7fe      	b.n	80073ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073cc:	4b0a      	ldr	r3, [pc, #40]	; (80073f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3318      	adds	r3, #24
 80073d2:	4619      	mov	r1, r3
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f7fe fc92 	bl	8005cfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80073e0:	f04f 33ff 	mov.w	r3, #4294967295
 80073e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073e6:	6879      	ldr	r1, [r7, #4]
 80073e8:	68b8      	ldr	r0, [r7, #8]
 80073ea:	f000 fa69 	bl	80078c0 <prvAddCurrentTaskToDelayedList>
	}
 80073ee:	bf00      	nop
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	200013f4 	.word	0x200013f4

080073fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10a      	bne.n	8007428 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	60fb      	str	r3, [r7, #12]
}
 8007424:	bf00      	nop
 8007426:	e7fe      	b.n	8007426 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	3318      	adds	r3, #24
 800742c:	4618      	mov	r0, r3
 800742e:	f7fe fcc3 	bl	8005db8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007432:	4b1d      	ldr	r3, [pc, #116]	; (80074a8 <xTaskRemoveFromEventList+0xac>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d11c      	bne.n	8007474 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	3304      	adds	r3, #4
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe fcba 	bl	8005db8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007448:	2201      	movs	r2, #1
 800744a:	409a      	lsls	r2, r3
 800744c:	4b17      	ldr	r3, [pc, #92]	; (80074ac <xTaskRemoveFromEventList+0xb0>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4313      	orrs	r3, r2
 8007452:	4a16      	ldr	r2, [pc, #88]	; (80074ac <xTaskRemoveFromEventList+0xb0>)
 8007454:	6013      	str	r3, [r2, #0]
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745a:	4613      	mov	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4a13      	ldr	r2, [pc, #76]	; (80074b0 <xTaskRemoveFromEventList+0xb4>)
 8007464:	441a      	add	r2, r3
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	3304      	adds	r3, #4
 800746a:	4619      	mov	r1, r3
 800746c:	4610      	mov	r0, r2
 800746e:	f7fe fc46 	bl	8005cfe <vListInsertEnd>
 8007472:	e005      	b.n	8007480 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	3318      	adds	r3, #24
 8007478:	4619      	mov	r1, r3
 800747a:	480e      	ldr	r0, [pc, #56]	; (80074b4 <xTaskRemoveFromEventList+0xb8>)
 800747c:	f7fe fc3f 	bl	8005cfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007484:	4b0c      	ldr	r3, [pc, #48]	; (80074b8 <xTaskRemoveFromEventList+0xbc>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748a:	429a      	cmp	r2, r3
 800748c:	d905      	bls.n	800749a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800748e:	2301      	movs	r3, #1
 8007490:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007492:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <xTaskRemoveFromEventList+0xc0>)
 8007494:	2201      	movs	r2, #1
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	e001      	b.n	800749e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800749a:	2300      	movs	r3, #0
 800749c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800749e:	697b      	ldr	r3, [r7, #20]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	2000151c 	.word	0x2000151c
 80074ac:	200014fc 	.word	0x200014fc
 80074b0:	200013f8 	.word	0x200013f8
 80074b4:	200014b4 	.word	0x200014b4
 80074b8:	200013f4 	.word	0x200013f4
 80074bc:	20001508 	.word	0x20001508

080074c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074c8:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <vTaskInternalSetTimeOutState+0x24>)
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074d0:	4b05      	ldr	r3, [pc, #20]	; (80074e8 <vTaskInternalSetTimeOutState+0x28>)
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	605a      	str	r2, [r3, #4]
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	2000150c 	.word	0x2000150c
 80074e8:	200014f8 	.word	0x200014f8

080074ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b088      	sub	sp, #32
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10a      	bne.n	8007512 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	613b      	str	r3, [r7, #16]
}
 800750e:	bf00      	nop
 8007510:	e7fe      	b.n	8007510 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10a      	bne.n	800752e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751c:	f383 8811 	msr	BASEPRI, r3
 8007520:	f3bf 8f6f 	isb	sy
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	60fb      	str	r3, [r7, #12]
}
 800752a:	bf00      	nop
 800752c:	e7fe      	b.n	800752c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800752e:	f000 ff29 	bl	8008384 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007532:	4b1d      	ldr	r3, [pc, #116]	; (80075a8 <xTaskCheckForTimeOut+0xbc>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754a:	d102      	bne.n	8007552 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800754c:	2300      	movs	r3, #0
 800754e:	61fb      	str	r3, [r7, #28]
 8007550:	e023      	b.n	800759a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	4b15      	ldr	r3, [pc, #84]	; (80075ac <xTaskCheckForTimeOut+0xc0>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	429a      	cmp	r2, r3
 800755c:	d007      	beq.n	800756e <xTaskCheckForTimeOut+0x82>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	69ba      	ldr	r2, [r7, #24]
 8007564:	429a      	cmp	r2, r3
 8007566:	d302      	bcc.n	800756e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007568:	2301      	movs	r3, #1
 800756a:	61fb      	str	r3, [r7, #28]
 800756c:	e015      	b.n	800759a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	429a      	cmp	r2, r3
 8007576:	d20b      	bcs.n	8007590 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	1ad2      	subs	r2, r2, r3
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7ff ff9b 	bl	80074c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800758a:	2300      	movs	r3, #0
 800758c:	61fb      	str	r3, [r7, #28]
 800758e:	e004      	b.n	800759a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007596:	2301      	movs	r3, #1
 8007598:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800759a:	f000 ff23 	bl	80083e4 <vPortExitCritical>

	return xReturn;
 800759e:	69fb      	ldr	r3, [r7, #28]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3720      	adds	r7, #32
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	200014f8 	.word	0x200014f8
 80075ac:	2000150c 	.word	0x2000150c

080075b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075b0:	b480      	push	{r7}
 80075b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075b4:	4b03      	ldr	r3, [pc, #12]	; (80075c4 <vTaskMissedYield+0x14>)
 80075b6:	2201      	movs	r2, #1
 80075b8:	601a      	str	r2, [r3, #0]
}
 80075ba:	bf00      	nop
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	20001508 	.word	0x20001508

080075c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075d0:	f000 f854 	bl	800767c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075d4:	4b07      	ldr	r3, [pc, #28]	; (80075f4 <prvIdleTask+0x2c>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d907      	bls.n	80075ec <prvIdleTask+0x24>
			{
				taskYIELD();
 80075dc:	4b06      	ldr	r3, [pc, #24]	; (80075f8 <prvIdleTask+0x30>)
 80075de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80075ec:	f7f9 fa54 	bl	8000a98 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80075f0:	e7ee      	b.n	80075d0 <prvIdleTask+0x8>
 80075f2:	bf00      	nop
 80075f4:	200013f8 	.word	0x200013f8
 80075f8:	e000ed04 	.word	0xe000ed04

080075fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007602:	2300      	movs	r3, #0
 8007604:	607b      	str	r3, [r7, #4]
 8007606:	e00c      	b.n	8007622 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	4613      	mov	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4a12      	ldr	r2, [pc, #72]	; (800765c <prvInitialiseTaskLists+0x60>)
 8007614:	4413      	add	r3, r2
 8007616:	4618      	mov	r0, r3
 8007618:	f7fe fb44 	bl	8005ca4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3301      	adds	r3, #1
 8007620:	607b      	str	r3, [r7, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b06      	cmp	r3, #6
 8007626:	d9ef      	bls.n	8007608 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007628:	480d      	ldr	r0, [pc, #52]	; (8007660 <prvInitialiseTaskLists+0x64>)
 800762a:	f7fe fb3b 	bl	8005ca4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800762e:	480d      	ldr	r0, [pc, #52]	; (8007664 <prvInitialiseTaskLists+0x68>)
 8007630:	f7fe fb38 	bl	8005ca4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007634:	480c      	ldr	r0, [pc, #48]	; (8007668 <prvInitialiseTaskLists+0x6c>)
 8007636:	f7fe fb35 	bl	8005ca4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800763a:	480c      	ldr	r0, [pc, #48]	; (800766c <prvInitialiseTaskLists+0x70>)
 800763c:	f7fe fb32 	bl	8005ca4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007640:	480b      	ldr	r0, [pc, #44]	; (8007670 <prvInitialiseTaskLists+0x74>)
 8007642:	f7fe fb2f 	bl	8005ca4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007646:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <prvInitialiseTaskLists+0x78>)
 8007648:	4a05      	ldr	r2, [pc, #20]	; (8007660 <prvInitialiseTaskLists+0x64>)
 800764a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800764c:	4b0a      	ldr	r3, [pc, #40]	; (8007678 <prvInitialiseTaskLists+0x7c>)
 800764e:	4a05      	ldr	r2, [pc, #20]	; (8007664 <prvInitialiseTaskLists+0x68>)
 8007650:	601a      	str	r2, [r3, #0]
}
 8007652:	bf00      	nop
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	200013f8 	.word	0x200013f8
 8007660:	20001484 	.word	0x20001484
 8007664:	20001498 	.word	0x20001498
 8007668:	200014b4 	.word	0x200014b4
 800766c:	200014c8 	.word	0x200014c8
 8007670:	200014e0 	.word	0x200014e0
 8007674:	200014ac 	.word	0x200014ac
 8007678:	200014b0 	.word	0x200014b0

0800767c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007682:	e019      	b.n	80076b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007684:	f000 fe7e 	bl	8008384 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007688:	4b10      	ldr	r3, [pc, #64]	; (80076cc <prvCheckTasksWaitingTermination+0x50>)
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3304      	adds	r3, #4
 8007694:	4618      	mov	r0, r3
 8007696:	f7fe fb8f 	bl	8005db8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800769a:	4b0d      	ldr	r3, [pc, #52]	; (80076d0 <prvCheckTasksWaitingTermination+0x54>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	3b01      	subs	r3, #1
 80076a0:	4a0b      	ldr	r2, [pc, #44]	; (80076d0 <prvCheckTasksWaitingTermination+0x54>)
 80076a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076a4:	4b0b      	ldr	r3, [pc, #44]	; (80076d4 <prvCheckTasksWaitingTermination+0x58>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	4a0a      	ldr	r2, [pc, #40]	; (80076d4 <prvCheckTasksWaitingTermination+0x58>)
 80076ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076ae:	f000 fe99 	bl	80083e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f810 	bl	80076d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076b8:	4b06      	ldr	r3, [pc, #24]	; (80076d4 <prvCheckTasksWaitingTermination+0x58>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1e1      	bne.n	8007684 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076c0:	bf00      	nop
 80076c2:	bf00      	nop
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	200014c8 	.word	0x200014c8
 80076d0:	200014f4 	.word	0x200014f4
 80076d4:	200014dc 	.word	0x200014dc

080076d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d108      	bne.n	80076fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ee:	4618      	mov	r0, r3
 80076f0:	f001 f836 	bl	8008760 <vPortFree>
				vPortFree( pxTCB );
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f001 f833 	bl	8008760 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076fa:	e018      	b.n	800772e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007702:	2b01      	cmp	r3, #1
 8007704:	d103      	bne.n	800770e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f001 f82a 	bl	8008760 <vPortFree>
	}
 800770c:	e00f      	b.n	800772e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007714:	2b02      	cmp	r3, #2
 8007716:	d00a      	beq.n	800772e <prvDeleteTCB+0x56>
	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	60fb      	str	r3, [r7, #12]
}
 800772a:	bf00      	nop
 800772c:	e7fe      	b.n	800772c <prvDeleteTCB+0x54>
	}
 800772e:	bf00      	nop
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800773e:	4b0c      	ldr	r3, [pc, #48]	; (8007770 <prvResetNextTaskUnblockTime+0x38>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d104      	bne.n	8007752 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007748:	4b0a      	ldr	r3, [pc, #40]	; (8007774 <prvResetNextTaskUnblockTime+0x3c>)
 800774a:	f04f 32ff 	mov.w	r2, #4294967295
 800774e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007750:	e008      	b.n	8007764 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007752:	4b07      	ldr	r3, [pc, #28]	; (8007770 <prvResetNextTaskUnblockTime+0x38>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	4a04      	ldr	r2, [pc, #16]	; (8007774 <prvResetNextTaskUnblockTime+0x3c>)
 8007762:	6013      	str	r3, [r2, #0]
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	200014ac 	.word	0x200014ac
 8007774:	20001514 	.word	0x20001514

08007778 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800777e:	4b0b      	ldr	r3, [pc, #44]	; (80077ac <xTaskGetSchedulerState+0x34>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d102      	bne.n	800778c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007786:	2301      	movs	r3, #1
 8007788:	607b      	str	r3, [r7, #4]
 800778a:	e008      	b.n	800779e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800778c:	4b08      	ldr	r3, [pc, #32]	; (80077b0 <xTaskGetSchedulerState+0x38>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d102      	bne.n	800779a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007794:	2302      	movs	r3, #2
 8007796:	607b      	str	r3, [r7, #4]
 8007798:	e001      	b.n	800779e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800779a:	2300      	movs	r3, #0
 800779c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800779e:	687b      	ldr	r3, [r7, #4]
	}
 80077a0:	4618      	mov	r0, r3
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	20001500 	.word	0x20001500
 80077b0:	2000151c 	.word	0x2000151c

080077b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077c0:	2300      	movs	r3, #0
 80077c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d06e      	beq.n	80078a8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077ca:	4b3a      	ldr	r3, [pc, #232]	; (80078b4 <xTaskPriorityDisinherit+0x100>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d00a      	beq.n	80077ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80077d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	60fb      	str	r3, [r7, #12]
}
 80077e6:	bf00      	nop
 80077e8:	e7fe      	b.n	80077e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10a      	bne.n	8007808 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	60bb      	str	r3, [r7, #8]
}
 8007804:	bf00      	nop
 8007806:	e7fe      	b.n	8007806 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800780c:	1e5a      	subs	r2, r3, #1
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781a:	429a      	cmp	r2, r3
 800781c:	d044      	beq.n	80078a8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007822:	2b00      	cmp	r3, #0
 8007824:	d140      	bne.n	80078a8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	3304      	adds	r3, #4
 800782a:	4618      	mov	r0, r3
 800782c:	f7fe fac4 	bl	8005db8 <uxListRemove>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d115      	bne.n	8007862 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783a:	491f      	ldr	r1, [pc, #124]	; (80078b8 <xTaskPriorityDisinherit+0x104>)
 800783c:	4613      	mov	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	440b      	add	r3, r1
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10a      	bne.n	8007862 <xTaskPriorityDisinherit+0xae>
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007850:	2201      	movs	r2, #1
 8007852:	fa02 f303 	lsl.w	r3, r2, r3
 8007856:	43da      	mvns	r2, r3
 8007858:	4b18      	ldr	r3, [pc, #96]	; (80078bc <xTaskPriorityDisinherit+0x108>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4013      	ands	r3, r2
 800785e:	4a17      	ldr	r2, [pc, #92]	; (80078bc <xTaskPriorityDisinherit+0x108>)
 8007860:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786e:	f1c3 0207 	rsb	r2, r3, #7
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787a:	2201      	movs	r2, #1
 800787c:	409a      	lsls	r2, r3
 800787e:	4b0f      	ldr	r3, [pc, #60]	; (80078bc <xTaskPriorityDisinherit+0x108>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4313      	orrs	r3, r2
 8007884:	4a0d      	ldr	r2, [pc, #52]	; (80078bc <xTaskPriorityDisinherit+0x108>)
 8007886:	6013      	str	r3, [r2, #0]
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788c:	4613      	mov	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4a08      	ldr	r2, [pc, #32]	; (80078b8 <xTaskPriorityDisinherit+0x104>)
 8007896:	441a      	add	r2, r3
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	3304      	adds	r3, #4
 800789c:	4619      	mov	r1, r3
 800789e:	4610      	mov	r0, r2
 80078a0:	f7fe fa2d 	bl	8005cfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80078a4:	2301      	movs	r3, #1
 80078a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078a8:	697b      	ldr	r3, [r7, #20]
	}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	200013f4 	.word	0x200013f4
 80078b8:	200013f8 	.word	0x200013f8
 80078bc:	200014fc 	.word	0x200014fc

080078c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078ca:	4b29      	ldr	r3, [pc, #164]	; (8007970 <prvAddCurrentTaskToDelayedList+0xb0>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078d0:	4b28      	ldr	r3, [pc, #160]	; (8007974 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3304      	adds	r3, #4
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fe fa6e 	bl	8005db8 <uxListRemove>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10b      	bne.n	80078fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80078e2:	4b24      	ldr	r3, [pc, #144]	; (8007974 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	2201      	movs	r2, #1
 80078ea:	fa02 f303 	lsl.w	r3, r2, r3
 80078ee:	43da      	mvns	r2, r3
 80078f0:	4b21      	ldr	r3, [pc, #132]	; (8007978 <prvAddCurrentTaskToDelayedList+0xb8>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4013      	ands	r3, r2
 80078f6:	4a20      	ldr	r2, [pc, #128]	; (8007978 <prvAddCurrentTaskToDelayedList+0xb8>)
 80078f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007900:	d10a      	bne.n	8007918 <prvAddCurrentTaskToDelayedList+0x58>
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d007      	beq.n	8007918 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007908:	4b1a      	ldr	r3, [pc, #104]	; (8007974 <prvAddCurrentTaskToDelayedList+0xb4>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3304      	adds	r3, #4
 800790e:	4619      	mov	r1, r3
 8007910:	481a      	ldr	r0, [pc, #104]	; (800797c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007912:	f7fe f9f4 	bl	8005cfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007916:	e026      	b.n	8007966 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4413      	add	r3, r2
 800791e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007920:	4b14      	ldr	r3, [pc, #80]	; (8007974 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	429a      	cmp	r2, r3
 800792e:	d209      	bcs.n	8007944 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007930:	4b13      	ldr	r3, [pc, #76]	; (8007980 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	4b0f      	ldr	r3, [pc, #60]	; (8007974 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3304      	adds	r3, #4
 800793a:	4619      	mov	r1, r3
 800793c:	4610      	mov	r0, r2
 800793e:	f7fe fa02 	bl	8005d46 <vListInsert>
}
 8007942:	e010      	b.n	8007966 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007944:	4b0f      	ldr	r3, [pc, #60]	; (8007984 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	4b0a      	ldr	r3, [pc, #40]	; (8007974 <prvAddCurrentTaskToDelayedList+0xb4>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3304      	adds	r3, #4
 800794e:	4619      	mov	r1, r3
 8007950:	4610      	mov	r0, r2
 8007952:	f7fe f9f8 	bl	8005d46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007956:	4b0c      	ldr	r3, [pc, #48]	; (8007988 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	429a      	cmp	r2, r3
 800795e:	d202      	bcs.n	8007966 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007960:	4a09      	ldr	r2, [pc, #36]	; (8007988 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	6013      	str	r3, [r2, #0]
}
 8007966:	bf00      	nop
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	200014f8 	.word	0x200014f8
 8007974:	200013f4 	.word	0x200013f4
 8007978:	200014fc 	.word	0x200014fc
 800797c:	200014e0 	.word	0x200014e0
 8007980:	200014b0 	.word	0x200014b0
 8007984:	200014ac 	.word	0x200014ac
 8007988:	20001514 	.word	0x20001514

0800798c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b08a      	sub	sp, #40	; 0x28
 8007990:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007992:	2300      	movs	r3, #0
 8007994:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007996:	f000 fb85 	bl	80080a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800799a:	4b1c      	ldr	r3, [pc, #112]	; (8007a0c <xTimerCreateTimerTask+0x80>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d021      	beq.n	80079e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80079a2:	2300      	movs	r3, #0
 80079a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80079a6:	2300      	movs	r3, #0
 80079a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80079aa:	1d3a      	adds	r2, r7, #4
 80079ac:	f107 0108 	add.w	r1, r7, #8
 80079b0:	f107 030c 	add.w	r3, r7, #12
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7f9 f897 	bl	8000ae8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80079ba:	6879      	ldr	r1, [r7, #4]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	9202      	str	r2, [sp, #8]
 80079c2:	9301      	str	r3, [sp, #4]
 80079c4:	2302      	movs	r3, #2
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	2300      	movs	r3, #0
 80079ca:	460a      	mov	r2, r1
 80079cc:	4910      	ldr	r1, [pc, #64]	; (8007a10 <xTimerCreateTimerTask+0x84>)
 80079ce:	4811      	ldr	r0, [pc, #68]	; (8007a14 <xTimerCreateTimerTask+0x88>)
 80079d0:	f7fe ff8a 	bl	80068e8 <xTaskCreateStatic>
 80079d4:	4603      	mov	r3, r0
 80079d6:	4a10      	ldr	r2, [pc, #64]	; (8007a18 <xTimerCreateTimerTask+0x8c>)
 80079d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80079da:	4b0f      	ldr	r3, [pc, #60]	; (8007a18 <xTimerCreateTimerTask+0x8c>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80079e2:	2301      	movs	r3, #1
 80079e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10a      	bne.n	8007a02 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	613b      	str	r3, [r7, #16]
}
 80079fe:	bf00      	nop
 8007a00:	e7fe      	b.n	8007a00 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007a02:	697b      	ldr	r3, [r7, #20]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	20001550 	.word	0x20001550
 8007a10:	08009494 	.word	0x08009494
 8007a14:	08007c85 	.word	0x08007c85
 8007a18:	20001554 	.word	0x20001554

08007a1c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b088      	sub	sp, #32
 8007a20:	af02      	add	r7, sp, #8
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007a2a:	2028      	movs	r0, #40	; 0x28
 8007a2c:	f000 fdcc 	bl	80085c8 <pvPortMalloc>
 8007a30:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00d      	beq.n	8007a54 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	9301      	str	r3, [sp, #4]
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	68b9      	ldr	r1, [r7, #8]
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f000 f843 	bl	8007ada <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007a54:	697b      	ldr	r3, [r7, #20]
	}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b08a      	sub	sp, #40	; 0x28
 8007a62:	af02      	add	r7, sp, #8
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	607a      	str	r2, [r7, #4]
 8007a6a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007a6c:	2328      	movs	r3, #40	; 0x28
 8007a6e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	2b28      	cmp	r3, #40	; 0x28
 8007a74:	d00a      	beq.n	8007a8c <xTimerCreateStatic+0x2e>
	__asm volatile
 8007a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	61bb      	str	r3, [r7, #24]
}
 8007a88:	bf00      	nop
 8007a8a:	e7fe      	b.n	8007a8a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10a      	bne.n	8007aaa <xTimerCreateStatic+0x4c>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	617b      	str	r3, [r7, #20]
}
 8007aa6:	bf00      	nop
 8007aa8:	e7fe      	b.n	8007aa8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aac:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00d      	beq.n	8007ad0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	9301      	str	r3, [sp, #4]
 8007ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	68b9      	ldr	r1, [r7, #8]
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f000 f805 	bl	8007ada <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007ad0:	69fb      	ldr	r3, [r7, #28]
	}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3720      	adds	r7, #32
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b086      	sub	sp, #24
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	60f8      	str	r0, [r7, #12]
 8007ae2:	60b9      	str	r1, [r7, #8]
 8007ae4:	607a      	str	r2, [r7, #4]
 8007ae6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	617b      	str	r3, [r7, #20]
}
 8007b00:	bf00      	nop
 8007b02:	e7fe      	b.n	8007b02 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d01e      	beq.n	8007b48 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007b0a:	f000 facb 	bl	80080a4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	6a3a      	ldr	r2, [r7, #32]
 8007b24:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	3304      	adds	r3, #4
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fe f8da 	bl	8005ce4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d008      	beq.n	8007b48 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b3c:	f043 0304 	orr.w	r3, r3, #4
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007b48:	bf00      	nop
 8007b4a:	3718      	adds	r7, #24
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b08a      	sub	sp, #40	; 0x28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10a      	bne.n	8007b7e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	623b      	str	r3, [r7, #32]
}
 8007b7a:	bf00      	nop
 8007b7c:	e7fe      	b.n	8007b7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007b7e:	4b1a      	ldr	r3, [pc, #104]	; (8007be8 <xTimerGenericCommand+0x98>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d02a      	beq.n	8007bdc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2b05      	cmp	r3, #5
 8007b96:	dc18      	bgt.n	8007bca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b98:	f7ff fdee 	bl	8007778 <xTaskGetSchedulerState>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d109      	bne.n	8007bb6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ba2:	4b11      	ldr	r3, [pc, #68]	; (8007be8 <xTimerGenericCommand+0x98>)
 8007ba4:	6818      	ldr	r0, [r3, #0]
 8007ba6:	f107 0114 	add.w	r1, r7, #20
 8007baa:	2300      	movs	r3, #0
 8007bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bae:	f7fe fab3 	bl	8006118 <xQueueGenericSend>
 8007bb2:	6278      	str	r0, [r7, #36]	; 0x24
 8007bb4:	e012      	b.n	8007bdc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007bb6:	4b0c      	ldr	r3, [pc, #48]	; (8007be8 <xTimerGenericCommand+0x98>)
 8007bb8:	6818      	ldr	r0, [r3, #0]
 8007bba:	f107 0114 	add.w	r1, r7, #20
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f7fe faa9 	bl	8006118 <xQueueGenericSend>
 8007bc6:	6278      	str	r0, [r7, #36]	; 0x24
 8007bc8:	e008      	b.n	8007bdc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007bca:	4b07      	ldr	r3, [pc, #28]	; (8007be8 <xTimerGenericCommand+0x98>)
 8007bcc:	6818      	ldr	r0, [r3, #0]
 8007bce:	f107 0114 	add.w	r1, r7, #20
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	f7fe fb9d 	bl	8006314 <xQueueGenericSendFromISR>
 8007bda:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3728      	adds	r7, #40	; 0x28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	20001550 	.word	0x20001550

08007bec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b088      	sub	sp, #32
 8007bf0:	af02      	add	r7, sp, #8
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bf6:	4b22      	ldr	r3, [pc, #136]	; (8007c80 <prvProcessExpiredTimer+0x94>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	3304      	adds	r3, #4
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fe f8d7 	bl	8005db8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d022      	beq.n	8007c5e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	699a      	ldr	r2, [r3, #24]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	18d1      	adds	r1, r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	683a      	ldr	r2, [r7, #0]
 8007c24:	6978      	ldr	r0, [r7, #20]
 8007c26:	f000 f8d1 	bl	8007dcc <prvInsertTimerInActiveList>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d01f      	beq.n	8007c70 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c30:	2300      	movs	r3, #0
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	2300      	movs	r3, #0
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	2100      	movs	r1, #0
 8007c3a:	6978      	ldr	r0, [r7, #20]
 8007c3c:	f7ff ff88 	bl	8007b50 <xTimerGenericCommand>
 8007c40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d113      	bne.n	8007c70 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4c:	f383 8811 	msr	BASEPRI, r3
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f3bf 8f4f 	dsb	sy
 8007c58:	60fb      	str	r3, [r7, #12]
}
 8007c5a:	bf00      	nop
 8007c5c:	e7fe      	b.n	8007c5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c64:	f023 0301 	bic.w	r3, r3, #1
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	6978      	ldr	r0, [r7, #20]
 8007c76:	4798      	blx	r3
}
 8007c78:	bf00      	nop
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	20001548 	.word	0x20001548

08007c84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c8c:	f107 0308 	add.w	r3, r7, #8
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 f857 	bl	8007d44 <prvGetNextExpireTime>
 8007c96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f000 f803 	bl	8007ca8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ca2:	f000 f8d5 	bl	8007e50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ca6:	e7f1      	b.n	8007c8c <prvTimerTask+0x8>

08007ca8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007cb2:	f7ff f97d 	bl	8006fb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cb6:	f107 0308 	add.w	r3, r7, #8
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 f866 	bl	8007d8c <prvSampleTimeNow>
 8007cc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d130      	bne.n	8007d2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10a      	bne.n	8007ce4 <prvProcessTimerOrBlockTask+0x3c>
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d806      	bhi.n	8007ce4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007cd6:	f7ff f979 	bl	8006fcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007cda:	68f9      	ldr	r1, [r7, #12]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7ff ff85 	bl	8007bec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ce2:	e024      	b.n	8007d2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d008      	beq.n	8007cfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007cea:	4b13      	ldr	r3, [pc, #76]	; (8007d38 <prvProcessTimerOrBlockTask+0x90>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <prvProcessTimerOrBlockTask+0x50>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e000      	b.n	8007cfa <prvProcessTimerOrBlockTask+0x52>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007cfc:	4b0f      	ldr	r3, [pc, #60]	; (8007d3c <prvProcessTimerOrBlockTask+0x94>)
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	4619      	mov	r1, r3
 8007d0a:	f7fe fdb9 	bl	8006880 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d0e:	f7ff f95d 	bl	8006fcc <xTaskResumeAll>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10a      	bne.n	8007d2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007d18:	4b09      	ldr	r3, [pc, #36]	; (8007d40 <prvProcessTimerOrBlockTask+0x98>)
 8007d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	f3bf 8f6f 	isb	sy
}
 8007d28:	e001      	b.n	8007d2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007d2a:	f7ff f94f 	bl	8006fcc <xTaskResumeAll>
}
 8007d2e:	bf00      	nop
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	2000154c 	.word	0x2000154c
 8007d3c:	20001550 	.word	0x20001550
 8007d40:	e000ed04 	.word	0xe000ed04

08007d44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007d4c:	4b0e      	ldr	r3, [pc, #56]	; (8007d88 <prvGetNextExpireTime+0x44>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <prvGetNextExpireTime+0x16>
 8007d56:	2201      	movs	r2, #1
 8007d58:	e000      	b.n	8007d5c <prvGetNextExpireTime+0x18>
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d105      	bne.n	8007d74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d68:	4b07      	ldr	r3, [pc, #28]	; (8007d88 <prvGetNextExpireTime+0x44>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	60fb      	str	r3, [r7, #12]
 8007d72:	e001      	b.n	8007d78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007d78:	68fb      	ldr	r3, [r7, #12]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	20001548 	.word	0x20001548

08007d8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007d94:	f7ff f9b6 	bl	8007104 <xTaskGetTickCount>
 8007d98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007d9a:	4b0b      	ldr	r3, [pc, #44]	; (8007dc8 <prvSampleTimeNow+0x3c>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d205      	bcs.n	8007db0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007da4:	f000 f91a 	bl	8007fdc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	e002      	b.n	8007db6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007db6:	4a04      	ldr	r2, [pc, #16]	; (8007dc8 <prvSampleTimeNow+0x3c>)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20001558 	.word	0x20001558

08007dcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
 8007dd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d812      	bhi.n	8007e18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	1ad2      	subs	r2, r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	699b      	ldr	r3, [r3, #24]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d302      	bcc.n	8007e06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e00:	2301      	movs	r3, #1
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	e01b      	b.n	8007e3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e06:	4b10      	ldr	r3, [pc, #64]	; (8007e48 <prvInsertTimerInActiveList+0x7c>)
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3304      	adds	r3, #4
 8007e0e:	4619      	mov	r1, r3
 8007e10:	4610      	mov	r0, r2
 8007e12:	f7fd ff98 	bl	8005d46 <vListInsert>
 8007e16:	e012      	b.n	8007e3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d206      	bcs.n	8007e2e <prvInsertTimerInActiveList+0x62>
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d302      	bcc.n	8007e2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	617b      	str	r3, [r7, #20]
 8007e2c:	e007      	b.n	8007e3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e2e:	4b07      	ldr	r3, [pc, #28]	; (8007e4c <prvInsertTimerInActiveList+0x80>)
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	3304      	adds	r3, #4
 8007e36:	4619      	mov	r1, r3
 8007e38:	4610      	mov	r0, r2
 8007e3a:	f7fd ff84 	bl	8005d46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007e3e:	697b      	ldr	r3, [r7, #20]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3718      	adds	r7, #24
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	2000154c 	.word	0x2000154c
 8007e4c:	20001548 	.word	0x20001548

08007e50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08c      	sub	sp, #48	; 0x30
 8007e54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e56:	e0ae      	b.n	8007fb6 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f2c0 80aa 	blt.w	8007fb4 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d004      	beq.n	8007e76 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	3304      	adds	r3, #4
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fd ffa1 	bl	8005db8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e76:	1d3b      	adds	r3, r7, #4
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7ff ff87 	bl	8007d8c <prvSampleTimeNow>
 8007e7e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b09      	cmp	r3, #9
 8007e84:	f200 8097 	bhi.w	8007fb6 <prvProcessReceivedCommands+0x166>
 8007e88:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <prvProcessReceivedCommands+0x40>)
 8007e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8e:	bf00      	nop
 8007e90:	08007eb9 	.word	0x08007eb9
 8007e94:	08007eb9 	.word	0x08007eb9
 8007e98:	08007eb9 	.word	0x08007eb9
 8007e9c:	08007f2d 	.word	0x08007f2d
 8007ea0:	08007f41 	.word	0x08007f41
 8007ea4:	08007f8b 	.word	0x08007f8b
 8007ea8:	08007eb9 	.word	0x08007eb9
 8007eac:	08007eb9 	.word	0x08007eb9
 8007eb0:	08007f2d 	.word	0x08007f2d
 8007eb4:	08007f41 	.word	0x08007f41
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ebe:	f043 0301 	orr.w	r3, r3, #1
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	18d1      	adds	r1, r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6a3a      	ldr	r2, [r7, #32]
 8007ed6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ed8:	f7ff ff78 	bl	8007dcc <prvInsertTimerInActiveList>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d069      	beq.n	8007fb6 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ee8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ef0:	f003 0304 	and.w	r3, r3, #4
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d05e      	beq.n	8007fb6 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	441a      	add	r2, r3
 8007f00:	2300      	movs	r3, #0
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	2300      	movs	r3, #0
 8007f06:	2100      	movs	r1, #0
 8007f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f0a:	f7ff fe21 	bl	8007b50 <xTimerGenericCommand>
 8007f0e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d14f      	bne.n	8007fb6 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8007f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1a:	f383 8811 	msr	BASEPRI, r3
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	61bb      	str	r3, [r7, #24]
}
 8007f28:	bf00      	nop
 8007f2a:	e7fe      	b.n	8007f2a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f32:	f023 0301 	bic.w	r3, r3, #1
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8007f3e:	e03a      	b.n	8007fb6 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f46:	f043 0301 	orr.w	r3, r3, #1
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10a      	bne.n	8007f76 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	617b      	str	r3, [r7, #20]
}
 8007f72:	bf00      	nop
 8007f74:	e7fe      	b.n	8007f74 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	699a      	ldr	r2, [r3, #24]
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	18d1      	adds	r1, r2, r3
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	6a3a      	ldr	r2, [r7, #32]
 8007f82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f84:	f7ff ff22 	bl	8007dcc <prvInsertTimerInActiveList>
					break;
 8007f88:	e015      	b.n	8007fb6 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f90:	f003 0302 	and.w	r3, r3, #2
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d103      	bne.n	8007fa0 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8007f98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f9a:	f000 fbe1 	bl	8008760 <vPortFree>
 8007f9e:	e00a      	b.n	8007fb6 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007fa6:	f023 0301 	bic.w	r3, r3, #1
 8007faa:	b2da      	uxtb	r2, r3
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007fb2:	e000      	b.n	8007fb6 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007fb4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007fb6:	4b08      	ldr	r3, [pc, #32]	; (8007fd8 <prvProcessReceivedCommands+0x188>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f107 0108 	add.w	r1, r7, #8
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7fe fa43 	bl	800644c <xQueueReceive>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f47f af45 	bne.w	8007e58 <prvProcessReceivedCommands+0x8>
	}
}
 8007fce:	bf00      	nop
 8007fd0:	bf00      	nop
 8007fd2:	3728      	adds	r7, #40	; 0x28
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	20001550 	.word	0x20001550

08007fdc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fe2:	e048      	b.n	8008076 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fe4:	4b2d      	ldr	r3, [pc, #180]	; (800809c <prvSwitchTimerLists+0xc0>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fee:	4b2b      	ldr	r3, [pc, #172]	; (800809c <prvSwitchTimerLists+0xc0>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7fd fedb 	bl	8005db8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008010:	f003 0304 	and.w	r3, r3, #4
 8008014:	2b00      	cmp	r3, #0
 8008016:	d02e      	beq.n	8008076 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	4413      	add	r3, r2
 8008020:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	429a      	cmp	r2, r3
 8008028:	d90e      	bls.n	8008048 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008036:	4b19      	ldr	r3, [pc, #100]	; (800809c <prvSwitchTimerLists+0xc0>)
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3304      	adds	r3, #4
 800803e:	4619      	mov	r1, r3
 8008040:	4610      	mov	r0, r2
 8008042:	f7fd fe80 	bl	8005d46 <vListInsert>
 8008046:	e016      	b.n	8008076 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008048:	2300      	movs	r3, #0
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	2300      	movs	r3, #0
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	2100      	movs	r1, #0
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f7ff fd7c 	bl	8007b50 <xTimerGenericCommand>
 8008058:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d10a      	bne.n	8008076 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	603b      	str	r3, [r7, #0]
}
 8008072:	bf00      	nop
 8008074:	e7fe      	b.n	8008074 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008076:	4b09      	ldr	r3, [pc, #36]	; (800809c <prvSwitchTimerLists+0xc0>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1b1      	bne.n	8007fe4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008080:	4b06      	ldr	r3, [pc, #24]	; (800809c <prvSwitchTimerLists+0xc0>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008086:	4b06      	ldr	r3, [pc, #24]	; (80080a0 <prvSwitchTimerLists+0xc4>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a04      	ldr	r2, [pc, #16]	; (800809c <prvSwitchTimerLists+0xc0>)
 800808c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800808e:	4a04      	ldr	r2, [pc, #16]	; (80080a0 <prvSwitchTimerLists+0xc4>)
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	6013      	str	r3, [r2, #0]
}
 8008094:	bf00      	nop
 8008096:	3718      	adds	r7, #24
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	20001548 	.word	0x20001548
 80080a0:	2000154c 	.word	0x2000154c

080080a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80080aa:	f000 f96b 	bl	8008384 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80080ae:	4b15      	ldr	r3, [pc, #84]	; (8008104 <prvCheckForValidListAndQueue+0x60>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d120      	bne.n	80080f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80080b6:	4814      	ldr	r0, [pc, #80]	; (8008108 <prvCheckForValidListAndQueue+0x64>)
 80080b8:	f7fd fdf4 	bl	8005ca4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80080bc:	4813      	ldr	r0, [pc, #76]	; (800810c <prvCheckForValidListAndQueue+0x68>)
 80080be:	f7fd fdf1 	bl	8005ca4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80080c2:	4b13      	ldr	r3, [pc, #76]	; (8008110 <prvCheckForValidListAndQueue+0x6c>)
 80080c4:	4a10      	ldr	r2, [pc, #64]	; (8008108 <prvCheckForValidListAndQueue+0x64>)
 80080c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80080c8:	4b12      	ldr	r3, [pc, #72]	; (8008114 <prvCheckForValidListAndQueue+0x70>)
 80080ca:	4a10      	ldr	r2, [pc, #64]	; (800810c <prvCheckForValidListAndQueue+0x68>)
 80080cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80080ce:	2300      	movs	r3, #0
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	4b11      	ldr	r3, [pc, #68]	; (8008118 <prvCheckForValidListAndQueue+0x74>)
 80080d4:	4a11      	ldr	r2, [pc, #68]	; (800811c <prvCheckForValidListAndQueue+0x78>)
 80080d6:	210c      	movs	r1, #12
 80080d8:	200a      	movs	r0, #10
 80080da:	f7fd feff 	bl	8005edc <xQueueGenericCreateStatic>
 80080de:	4603      	mov	r3, r0
 80080e0:	4a08      	ldr	r2, [pc, #32]	; (8008104 <prvCheckForValidListAndQueue+0x60>)
 80080e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80080e4:	4b07      	ldr	r3, [pc, #28]	; (8008104 <prvCheckForValidListAndQueue+0x60>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d005      	beq.n	80080f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80080ec:	4b05      	ldr	r3, [pc, #20]	; (8008104 <prvCheckForValidListAndQueue+0x60>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	490b      	ldr	r1, [pc, #44]	; (8008120 <prvCheckForValidListAndQueue+0x7c>)
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fe fb9a 	bl	800682c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080f8:	f000 f974 	bl	80083e4 <vPortExitCritical>
}
 80080fc:	bf00      	nop
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	20001550 	.word	0x20001550
 8008108:	20001520 	.word	0x20001520
 800810c:	20001534 	.word	0x20001534
 8008110:	20001548 	.word	0x20001548
 8008114:	2000154c 	.word	0x2000154c
 8008118:	200015d4 	.word	0x200015d4
 800811c:	2000155c 	.word	0x2000155c
 8008120:	0800949c 	.word	0x0800949c

08008124 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	3b04      	subs	r3, #4
 8008134:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800813c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3b04      	subs	r3, #4
 8008142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	f023 0201 	bic.w	r2, r3, #1
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3b04      	subs	r3, #4
 8008152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008154:	4a0c      	ldr	r2, [pc, #48]	; (8008188 <pxPortInitialiseStack+0x64>)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	3b14      	subs	r3, #20
 800815e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3b04      	subs	r3, #4
 800816a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f06f 0202 	mvn.w	r2, #2
 8008172:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	3b20      	subs	r3, #32
 8008178:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800817a:	68fb      	ldr	r3, [r7, #12]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	0800818d 	.word	0x0800818d

0800818c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008192:	2300      	movs	r3, #0
 8008194:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008196:	4b12      	ldr	r3, [pc, #72]	; (80081e0 <prvTaskExitError+0x54>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819e:	d00a      	beq.n	80081b6 <prvTaskExitError+0x2a>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	60fb      	str	r3, [r7, #12]
}
 80081b2:	bf00      	nop
 80081b4:	e7fe      	b.n	80081b4 <prvTaskExitError+0x28>
	__asm volatile
 80081b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	60bb      	str	r3, [r7, #8]
}
 80081c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80081ca:	bf00      	nop
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d0fc      	beq.n	80081cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80081d2:	bf00      	nop
 80081d4:	bf00      	nop
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	2000000c 	.word	0x2000000c
	...

080081f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081f0:	4b07      	ldr	r3, [pc, #28]	; (8008210 <pxCurrentTCBConst2>)
 80081f2:	6819      	ldr	r1, [r3, #0]
 80081f4:	6808      	ldr	r0, [r1, #0]
 80081f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fa:	f380 8809 	msr	PSP, r0
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f04f 0000 	mov.w	r0, #0
 8008206:	f380 8811 	msr	BASEPRI, r0
 800820a:	4770      	bx	lr
 800820c:	f3af 8000 	nop.w

08008210 <pxCurrentTCBConst2>:
 8008210:	200013f4 	.word	0x200013f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008214:	bf00      	nop
 8008216:	bf00      	nop

08008218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008218:	4808      	ldr	r0, [pc, #32]	; (800823c <prvPortStartFirstTask+0x24>)
 800821a:	6800      	ldr	r0, [r0, #0]
 800821c:	6800      	ldr	r0, [r0, #0]
 800821e:	f380 8808 	msr	MSP, r0
 8008222:	f04f 0000 	mov.w	r0, #0
 8008226:	f380 8814 	msr	CONTROL, r0
 800822a:	b662      	cpsie	i
 800822c:	b661      	cpsie	f
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	df00      	svc	0
 8008238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800823a:	bf00      	nop
 800823c:	e000ed08 	.word	0xe000ed08

08008240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008246:	4b46      	ldr	r3, [pc, #280]	; (8008360 <xPortStartScheduler+0x120>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a46      	ldr	r2, [pc, #280]	; (8008364 <xPortStartScheduler+0x124>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d10a      	bne.n	8008266 <xPortStartScheduler+0x26>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	613b      	str	r3, [r7, #16]
}
 8008262:	bf00      	nop
 8008264:	e7fe      	b.n	8008264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008266:	4b3e      	ldr	r3, [pc, #248]	; (8008360 <xPortStartScheduler+0x120>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a3f      	ldr	r2, [pc, #252]	; (8008368 <xPortStartScheduler+0x128>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d10a      	bne.n	8008286 <xPortStartScheduler+0x46>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	60fb      	str	r3, [r7, #12]
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008286:	4b39      	ldr	r3, [pc, #228]	; (800836c <xPortStartScheduler+0x12c>)
 8008288:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	b2db      	uxtb	r3, r3
 8008290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	22ff      	movs	r2, #255	; 0xff
 8008296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	b2db      	uxtb	r3, r3
 800829e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80082a0:	78fb      	ldrb	r3, [r7, #3]
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	4b31      	ldr	r3, [pc, #196]	; (8008370 <xPortStartScheduler+0x130>)
 80082ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80082ae:	4b31      	ldr	r3, [pc, #196]	; (8008374 <xPortStartScheduler+0x134>)
 80082b0:	2207      	movs	r2, #7
 80082b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082b4:	e009      	b.n	80082ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80082b6:	4b2f      	ldr	r3, [pc, #188]	; (8008374 <xPortStartScheduler+0x134>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	4a2d      	ldr	r2, [pc, #180]	; (8008374 <xPortStartScheduler+0x134>)
 80082be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80082c0:	78fb      	ldrb	r3, [r7, #3]
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	005b      	lsls	r3, r3, #1
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082ca:	78fb      	ldrb	r3, [r7, #3]
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d2:	2b80      	cmp	r3, #128	; 0x80
 80082d4:	d0ef      	beq.n	80082b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082d6:	4b27      	ldr	r3, [pc, #156]	; (8008374 <xPortStartScheduler+0x134>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f1c3 0307 	rsb	r3, r3, #7
 80082de:	2b04      	cmp	r3, #4
 80082e0:	d00a      	beq.n	80082f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80082e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e6:	f383 8811 	msr	BASEPRI, r3
 80082ea:	f3bf 8f6f 	isb	sy
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	60bb      	str	r3, [r7, #8]
}
 80082f4:	bf00      	nop
 80082f6:	e7fe      	b.n	80082f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082f8:	4b1e      	ldr	r3, [pc, #120]	; (8008374 <xPortStartScheduler+0x134>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	021b      	lsls	r3, r3, #8
 80082fe:	4a1d      	ldr	r2, [pc, #116]	; (8008374 <xPortStartScheduler+0x134>)
 8008300:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008302:	4b1c      	ldr	r3, [pc, #112]	; (8008374 <xPortStartScheduler+0x134>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800830a:	4a1a      	ldr	r2, [pc, #104]	; (8008374 <xPortStartScheduler+0x134>)
 800830c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	b2da      	uxtb	r2, r3
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008316:	4b18      	ldr	r3, [pc, #96]	; (8008378 <xPortStartScheduler+0x138>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a17      	ldr	r2, [pc, #92]	; (8008378 <xPortStartScheduler+0x138>)
 800831c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008320:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008322:	4b15      	ldr	r3, [pc, #84]	; (8008378 <xPortStartScheduler+0x138>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a14      	ldr	r2, [pc, #80]	; (8008378 <xPortStartScheduler+0x138>)
 8008328:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800832c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800832e:	f000 f8dd 	bl	80084ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008332:	4b12      	ldr	r3, [pc, #72]	; (800837c <xPortStartScheduler+0x13c>)
 8008334:	2200      	movs	r2, #0
 8008336:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008338:	f000 f8fc 	bl	8008534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800833c:	4b10      	ldr	r3, [pc, #64]	; (8008380 <xPortStartScheduler+0x140>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a0f      	ldr	r2, [pc, #60]	; (8008380 <xPortStartScheduler+0x140>)
 8008342:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008346:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008348:	f7ff ff66 	bl	8008218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800834c:	f7fe ffaa 	bl	80072a4 <vTaskSwitchContext>
	prvTaskExitError();
 8008350:	f7ff ff1c 	bl	800818c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3718      	adds	r7, #24
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	e000ed00 	.word	0xe000ed00
 8008364:	410fc271 	.word	0x410fc271
 8008368:	410fc270 	.word	0x410fc270
 800836c:	e000e400 	.word	0xe000e400
 8008370:	2000161c 	.word	0x2000161c
 8008374:	20001620 	.word	0x20001620
 8008378:	e000ed20 	.word	0xe000ed20
 800837c:	2000000c 	.word	0x2000000c
 8008380:	e000ef34 	.word	0xe000ef34

08008384 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	607b      	str	r3, [r7, #4]
}
 800839c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800839e:	4b0f      	ldr	r3, [pc, #60]	; (80083dc <vPortEnterCritical+0x58>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3301      	adds	r3, #1
 80083a4:	4a0d      	ldr	r2, [pc, #52]	; (80083dc <vPortEnterCritical+0x58>)
 80083a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80083a8:	4b0c      	ldr	r3, [pc, #48]	; (80083dc <vPortEnterCritical+0x58>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d10f      	bne.n	80083d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80083b0:	4b0b      	ldr	r3, [pc, #44]	; (80083e0 <vPortEnterCritical+0x5c>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00a      	beq.n	80083d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	603b      	str	r3, [r7, #0]
}
 80083cc:	bf00      	nop
 80083ce:	e7fe      	b.n	80083ce <vPortEnterCritical+0x4a>
	}
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	2000000c 	.word	0x2000000c
 80083e0:	e000ed04 	.word	0xe000ed04

080083e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083ea:	4b12      	ldr	r3, [pc, #72]	; (8008434 <vPortExitCritical+0x50>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10a      	bne.n	8008408 <vPortExitCritical+0x24>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	607b      	str	r3, [r7, #4]
}
 8008404:	bf00      	nop
 8008406:	e7fe      	b.n	8008406 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008408:	4b0a      	ldr	r3, [pc, #40]	; (8008434 <vPortExitCritical+0x50>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3b01      	subs	r3, #1
 800840e:	4a09      	ldr	r2, [pc, #36]	; (8008434 <vPortExitCritical+0x50>)
 8008410:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008412:	4b08      	ldr	r3, [pc, #32]	; (8008434 <vPortExitCritical+0x50>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d105      	bne.n	8008426 <vPortExitCritical+0x42>
 800841a:	2300      	movs	r3, #0
 800841c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	f383 8811 	msr	BASEPRI, r3
}
 8008424:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008426:	bf00      	nop
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	2000000c 	.word	0x2000000c
	...

08008440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008440:	f3ef 8009 	mrs	r0, PSP
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	4b15      	ldr	r3, [pc, #84]	; (80084a0 <pxCurrentTCBConst>)
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	f01e 0f10 	tst.w	lr, #16
 8008450:	bf08      	it	eq
 8008452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845a:	6010      	str	r0, [r2, #0]
 800845c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008464:	f380 8811 	msr	BASEPRI, r0
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f7fe ff18 	bl	80072a4 <vTaskSwitchContext>
 8008474:	f04f 0000 	mov.w	r0, #0
 8008478:	f380 8811 	msr	BASEPRI, r0
 800847c:	bc09      	pop	{r0, r3}
 800847e:	6819      	ldr	r1, [r3, #0]
 8008480:	6808      	ldr	r0, [r1, #0]
 8008482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008486:	f01e 0f10 	tst.w	lr, #16
 800848a:	bf08      	it	eq
 800848c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008490:	f380 8809 	msr	PSP, r0
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	f3af 8000 	nop.w

080084a0 <pxCurrentTCBConst>:
 80084a0:	200013f4 	.word	0x200013f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop

080084a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	607b      	str	r3, [r7, #4]
}
 80084c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80084c2:	f7fe fe2f 	bl	8007124 <xTaskIncrementTick>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d003      	beq.n	80084d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80084cc:	4b06      	ldr	r3, [pc, #24]	; (80084e8 <SysTick_Handler+0x40>)
 80084ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	2300      	movs	r3, #0
 80084d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	f383 8811 	msr	BASEPRI, r3
}
 80084de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80084e0:	bf00      	nop
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	e000ed04 	.word	0xe000ed04

080084ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084ec:	b480      	push	{r7}
 80084ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084f0:	4b0b      	ldr	r3, [pc, #44]	; (8008520 <vPortSetupTimerInterrupt+0x34>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084f6:	4b0b      	ldr	r3, [pc, #44]	; (8008524 <vPortSetupTimerInterrupt+0x38>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084fc:	4b0a      	ldr	r3, [pc, #40]	; (8008528 <vPortSetupTimerInterrupt+0x3c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a0a      	ldr	r2, [pc, #40]	; (800852c <vPortSetupTimerInterrupt+0x40>)
 8008502:	fba2 2303 	umull	r2, r3, r2, r3
 8008506:	099b      	lsrs	r3, r3, #6
 8008508:	4a09      	ldr	r2, [pc, #36]	; (8008530 <vPortSetupTimerInterrupt+0x44>)
 800850a:	3b01      	subs	r3, #1
 800850c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800850e:	4b04      	ldr	r3, [pc, #16]	; (8008520 <vPortSetupTimerInterrupt+0x34>)
 8008510:	2207      	movs	r2, #7
 8008512:	601a      	str	r2, [r3, #0]
}
 8008514:	bf00      	nop
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	e000e010 	.word	0xe000e010
 8008524:	e000e018 	.word	0xe000e018
 8008528:	20000000 	.word	0x20000000
 800852c:	10624dd3 	.word	0x10624dd3
 8008530:	e000e014 	.word	0xe000e014

08008534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008544 <vPortEnableVFP+0x10>
 8008538:	6801      	ldr	r1, [r0, #0]
 800853a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800853e:	6001      	str	r1, [r0, #0]
 8008540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008542:	bf00      	nop
 8008544:	e000ed88 	.word	0xe000ed88

08008548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800854e:	f3ef 8305 	mrs	r3, IPSR
 8008552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b0f      	cmp	r3, #15
 8008558:	d914      	bls.n	8008584 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800855a:	4a17      	ldr	r2, [pc, #92]	; (80085b8 <vPortValidateInterruptPriority+0x70>)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4413      	add	r3, r2
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008564:	4b15      	ldr	r3, [pc, #84]	; (80085bc <vPortValidateInterruptPriority+0x74>)
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	7afa      	ldrb	r2, [r7, #11]
 800856a:	429a      	cmp	r2, r3
 800856c:	d20a      	bcs.n	8008584 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	607b      	str	r3, [r7, #4]
}
 8008580:	bf00      	nop
 8008582:	e7fe      	b.n	8008582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008584:	4b0e      	ldr	r3, [pc, #56]	; (80085c0 <vPortValidateInterruptPriority+0x78>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800858c:	4b0d      	ldr	r3, [pc, #52]	; (80085c4 <vPortValidateInterruptPriority+0x7c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	429a      	cmp	r2, r3
 8008592:	d90a      	bls.n	80085aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	603b      	str	r3, [r7, #0]
}
 80085a6:	bf00      	nop
 80085a8:	e7fe      	b.n	80085a8 <vPortValidateInterruptPriority+0x60>
	}
 80085aa:	bf00      	nop
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	e000e3f0 	.word	0xe000e3f0
 80085bc:	2000161c 	.word	0x2000161c
 80085c0:	e000ed0c 	.word	0xe000ed0c
 80085c4:	20001620 	.word	0x20001620

080085c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b08a      	sub	sp, #40	; 0x28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80085d0:	2300      	movs	r3, #0
 80085d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80085d4:	f7fe fcec 	bl	8006fb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80085d8:	4b5b      	ldr	r3, [pc, #364]	; (8008748 <pvPortMalloc+0x180>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80085e0:	f000 f920 	bl	8008824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085e4:	4b59      	ldr	r3, [pc, #356]	; (800874c <pvPortMalloc+0x184>)
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4013      	ands	r3, r2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f040 8093 	bne.w	8008718 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d01d      	beq.n	8008634 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80085f8:	2208      	movs	r2, #8
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4413      	add	r3, r2
 80085fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f003 0307 	and.w	r3, r3, #7
 8008606:	2b00      	cmp	r3, #0
 8008608:	d014      	beq.n	8008634 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f023 0307 	bic.w	r3, r3, #7
 8008610:	3308      	adds	r3, #8
 8008612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00a      	beq.n	8008634 <pvPortMalloc+0x6c>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	617b      	str	r3, [r7, #20]
}
 8008630:	bf00      	nop
 8008632:	e7fe      	b.n	8008632 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d06e      	beq.n	8008718 <pvPortMalloc+0x150>
 800863a:	4b45      	ldr	r3, [pc, #276]	; (8008750 <pvPortMalloc+0x188>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	429a      	cmp	r2, r3
 8008642:	d869      	bhi.n	8008718 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008644:	4b43      	ldr	r3, [pc, #268]	; (8008754 <pvPortMalloc+0x18c>)
 8008646:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008648:	4b42      	ldr	r3, [pc, #264]	; (8008754 <pvPortMalloc+0x18c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800864e:	e004      	b.n	800865a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	429a      	cmp	r2, r3
 8008662:	d903      	bls.n	800866c <pvPortMalloc+0xa4>
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1f1      	bne.n	8008650 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800866c:	4b36      	ldr	r3, [pc, #216]	; (8008748 <pvPortMalloc+0x180>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008672:	429a      	cmp	r2, r3
 8008674:	d050      	beq.n	8008718 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2208      	movs	r2, #8
 800867c:	4413      	add	r3, r2
 800867e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	1ad2      	subs	r2, r2, r3
 8008690:	2308      	movs	r3, #8
 8008692:	005b      	lsls	r3, r3, #1
 8008694:	429a      	cmp	r2, r3
 8008696:	d91f      	bls.n	80086d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4413      	add	r3, r2
 800869e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	f003 0307 	and.w	r3, r3, #7
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <pvPortMalloc+0xf8>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	613b      	str	r3, [r7, #16]
}
 80086bc:	bf00      	nop
 80086be:	e7fe      	b.n	80086be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	685a      	ldr	r2, [r3, #4]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	1ad2      	subs	r2, r2, r3
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80086d2:	69b8      	ldr	r0, [r7, #24]
 80086d4:	f000 f908 	bl	80088e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80086d8:	4b1d      	ldr	r3, [pc, #116]	; (8008750 <pvPortMalloc+0x188>)
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	4a1b      	ldr	r2, [pc, #108]	; (8008750 <pvPortMalloc+0x188>)
 80086e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086e6:	4b1a      	ldr	r3, [pc, #104]	; (8008750 <pvPortMalloc+0x188>)
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	4b1b      	ldr	r3, [pc, #108]	; (8008758 <pvPortMalloc+0x190>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d203      	bcs.n	80086fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086f2:	4b17      	ldr	r3, [pc, #92]	; (8008750 <pvPortMalloc+0x188>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a18      	ldr	r2, [pc, #96]	; (8008758 <pvPortMalloc+0x190>)
 80086f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	685a      	ldr	r2, [r3, #4]
 80086fe:	4b13      	ldr	r3, [pc, #76]	; (800874c <pvPortMalloc+0x184>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	431a      	orrs	r2, r3
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	2200      	movs	r2, #0
 800870c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800870e:	4b13      	ldr	r3, [pc, #76]	; (800875c <pvPortMalloc+0x194>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3301      	adds	r3, #1
 8008714:	4a11      	ldr	r2, [pc, #68]	; (800875c <pvPortMalloc+0x194>)
 8008716:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008718:	f7fe fc58 	bl	8006fcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	f003 0307 	and.w	r3, r3, #7
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00a      	beq.n	800873c <pvPortMalloc+0x174>
	__asm volatile
 8008726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872a:	f383 8811 	msr	BASEPRI, r3
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	60fb      	str	r3, [r7, #12]
}
 8008738:	bf00      	nop
 800873a:	e7fe      	b.n	800873a <pvPortMalloc+0x172>
	return pvReturn;
 800873c:	69fb      	ldr	r3, [r7, #28]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3728      	adds	r7, #40	; 0x28
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	2000522c 	.word	0x2000522c
 800874c:	20005240 	.word	0x20005240
 8008750:	20005230 	.word	0x20005230
 8008754:	20005224 	.word	0x20005224
 8008758:	20005234 	.word	0x20005234
 800875c:	20005238 	.word	0x20005238

08008760 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d04d      	beq.n	800880e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008772:	2308      	movs	r3, #8
 8008774:	425b      	negs	r3, r3
 8008776:	697a      	ldr	r2, [r7, #20]
 8008778:	4413      	add	r3, r2
 800877a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	685a      	ldr	r2, [r3, #4]
 8008784:	4b24      	ldr	r3, [pc, #144]	; (8008818 <vPortFree+0xb8>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4013      	ands	r3, r2
 800878a:	2b00      	cmp	r3, #0
 800878c:	d10a      	bne.n	80087a4 <vPortFree+0x44>
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	60fb      	str	r3, [r7, #12]
}
 80087a0:	bf00      	nop
 80087a2:	e7fe      	b.n	80087a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00a      	beq.n	80087c2 <vPortFree+0x62>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	60bb      	str	r3, [r7, #8]
}
 80087be:	bf00      	nop
 80087c0:	e7fe      	b.n	80087c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	685a      	ldr	r2, [r3, #4]
 80087c6:	4b14      	ldr	r3, [pc, #80]	; (8008818 <vPortFree+0xb8>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4013      	ands	r3, r2
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d01e      	beq.n	800880e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d11a      	bne.n	800880e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	4b0e      	ldr	r3, [pc, #56]	; (8008818 <vPortFree+0xb8>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	43db      	mvns	r3, r3
 80087e2:	401a      	ands	r2, r3
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80087e8:	f7fe fbe2 	bl	8006fb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	685a      	ldr	r2, [r3, #4]
 80087f0:	4b0a      	ldr	r3, [pc, #40]	; (800881c <vPortFree+0xbc>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4413      	add	r3, r2
 80087f6:	4a09      	ldr	r2, [pc, #36]	; (800881c <vPortFree+0xbc>)
 80087f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087fa:	6938      	ldr	r0, [r7, #16]
 80087fc:	f000 f874 	bl	80088e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008800:	4b07      	ldr	r3, [pc, #28]	; (8008820 <vPortFree+0xc0>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	3301      	adds	r3, #1
 8008806:	4a06      	ldr	r2, [pc, #24]	; (8008820 <vPortFree+0xc0>)
 8008808:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800880a:	f7fe fbdf 	bl	8006fcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800880e:	bf00      	nop
 8008810:	3718      	adds	r7, #24
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	20005240 	.word	0x20005240
 800881c:	20005230 	.word	0x20005230
 8008820:	2000523c 	.word	0x2000523c

08008824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800882a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800882e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008830:	4b27      	ldr	r3, [pc, #156]	; (80088d0 <prvHeapInit+0xac>)
 8008832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f003 0307 	and.w	r3, r3, #7
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00c      	beq.n	8008858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	3307      	adds	r3, #7
 8008842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f023 0307 	bic.w	r3, r3, #7
 800884a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	4a1f      	ldr	r2, [pc, #124]	; (80088d0 <prvHeapInit+0xac>)
 8008854:	4413      	add	r3, r2
 8008856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800885c:	4a1d      	ldr	r2, [pc, #116]	; (80088d4 <prvHeapInit+0xb0>)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008862:	4b1c      	ldr	r3, [pc, #112]	; (80088d4 <prvHeapInit+0xb0>)
 8008864:	2200      	movs	r2, #0
 8008866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	4413      	add	r3, r2
 800886e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008870:	2208      	movs	r2, #8
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	1a9b      	subs	r3, r3, r2
 8008876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f023 0307 	bic.w	r3, r3, #7
 800887e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4a15      	ldr	r2, [pc, #84]	; (80088d8 <prvHeapInit+0xb4>)
 8008884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008886:	4b14      	ldr	r3, [pc, #80]	; (80088d8 <prvHeapInit+0xb4>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2200      	movs	r2, #0
 800888c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800888e:	4b12      	ldr	r3, [pc, #72]	; (80088d8 <prvHeapInit+0xb4>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2200      	movs	r2, #0
 8008894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	1ad2      	subs	r2, r2, r3
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80088a4:	4b0c      	ldr	r3, [pc, #48]	; (80088d8 <prvHeapInit+0xb4>)
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	4a0a      	ldr	r2, [pc, #40]	; (80088dc <prvHeapInit+0xb8>)
 80088b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	4a09      	ldr	r2, [pc, #36]	; (80088e0 <prvHeapInit+0xbc>)
 80088ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80088bc:	4b09      	ldr	r3, [pc, #36]	; (80088e4 <prvHeapInit+0xc0>)
 80088be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80088c2:	601a      	str	r2, [r3, #0]
}
 80088c4:	bf00      	nop
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr
 80088d0:	20001624 	.word	0x20001624
 80088d4:	20005224 	.word	0x20005224
 80088d8:	2000522c 	.word	0x2000522c
 80088dc:	20005234 	.word	0x20005234
 80088e0:	20005230 	.word	0x20005230
 80088e4:	20005240 	.word	0x20005240

080088e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088f0:	4b28      	ldr	r3, [pc, #160]	; (8008994 <prvInsertBlockIntoFreeList+0xac>)
 80088f2:	60fb      	str	r3, [r7, #12]
 80088f4:	e002      	b.n	80088fc <prvInsertBlockIntoFreeList+0x14>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	60fb      	str	r3, [r7, #12]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	429a      	cmp	r2, r3
 8008904:	d8f7      	bhi.n	80088f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	4413      	add	r3, r2
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	429a      	cmp	r2, r3
 8008916:	d108      	bne.n	800892a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	441a      	add	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	441a      	add	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	429a      	cmp	r2, r3
 800893c:	d118      	bne.n	8008970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	4b15      	ldr	r3, [pc, #84]	; (8008998 <prvInsertBlockIntoFreeList+0xb0>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	429a      	cmp	r2, r3
 8008948:	d00d      	beq.n	8008966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	441a      	add	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	e008      	b.n	8008978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008966:	4b0c      	ldr	r3, [pc, #48]	; (8008998 <prvInsertBlockIntoFreeList+0xb0>)
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	601a      	str	r2, [r3, #0]
 800896e:	e003      	b.n	8008978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	429a      	cmp	r2, r3
 800897e:	d002      	beq.n	8008986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008986:	bf00      	nop
 8008988:	3714      	adds	r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	20005224 	.word	0x20005224
 8008998:	2000522c 	.word	0x2000522c

0800899c <__errno>:
 800899c:	4b01      	ldr	r3, [pc, #4]	; (80089a4 <__errno+0x8>)
 800899e:	6818      	ldr	r0, [r3, #0]
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	20000010 	.word	0x20000010

080089a8 <__libc_init_array>:
 80089a8:	b570      	push	{r4, r5, r6, lr}
 80089aa:	4d0d      	ldr	r5, [pc, #52]	; (80089e0 <__libc_init_array+0x38>)
 80089ac:	4c0d      	ldr	r4, [pc, #52]	; (80089e4 <__libc_init_array+0x3c>)
 80089ae:	1b64      	subs	r4, r4, r5
 80089b0:	10a4      	asrs	r4, r4, #2
 80089b2:	2600      	movs	r6, #0
 80089b4:	42a6      	cmp	r6, r4
 80089b6:	d109      	bne.n	80089cc <__libc_init_array+0x24>
 80089b8:	4d0b      	ldr	r5, [pc, #44]	; (80089e8 <__libc_init_array+0x40>)
 80089ba:	4c0c      	ldr	r4, [pc, #48]	; (80089ec <__libc_init_array+0x44>)
 80089bc:	f000 fc8e 	bl	80092dc <_init>
 80089c0:	1b64      	subs	r4, r4, r5
 80089c2:	10a4      	asrs	r4, r4, #2
 80089c4:	2600      	movs	r6, #0
 80089c6:	42a6      	cmp	r6, r4
 80089c8:	d105      	bne.n	80089d6 <__libc_init_array+0x2e>
 80089ca:	bd70      	pop	{r4, r5, r6, pc}
 80089cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80089d0:	4798      	blx	r3
 80089d2:	3601      	adds	r6, #1
 80089d4:	e7ee      	b.n	80089b4 <__libc_init_array+0xc>
 80089d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089da:	4798      	blx	r3
 80089dc:	3601      	adds	r6, #1
 80089de:	e7f2      	b.n	80089c6 <__libc_init_array+0x1e>
 80089e0:	08009500 	.word	0x08009500
 80089e4:	08009500 	.word	0x08009500
 80089e8:	08009500 	.word	0x08009500
 80089ec:	08009504 	.word	0x08009504

080089f0 <memcpy>:
 80089f0:	440a      	add	r2, r1
 80089f2:	4291      	cmp	r1, r2
 80089f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80089f8:	d100      	bne.n	80089fc <memcpy+0xc>
 80089fa:	4770      	bx	lr
 80089fc:	b510      	push	{r4, lr}
 80089fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a06:	4291      	cmp	r1, r2
 8008a08:	d1f9      	bne.n	80089fe <memcpy+0xe>
 8008a0a:	bd10      	pop	{r4, pc}

08008a0c <memset>:
 8008a0c:	4402      	add	r2, r0
 8008a0e:	4603      	mov	r3, r0
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d100      	bne.n	8008a16 <memset+0xa>
 8008a14:	4770      	bx	lr
 8008a16:	f803 1b01 	strb.w	r1, [r3], #1
 8008a1a:	e7f9      	b.n	8008a10 <memset+0x4>

08008a1c <siprintf>:
 8008a1c:	b40e      	push	{r1, r2, r3}
 8008a1e:	b500      	push	{lr}
 8008a20:	b09c      	sub	sp, #112	; 0x70
 8008a22:	ab1d      	add	r3, sp, #116	; 0x74
 8008a24:	9002      	str	r0, [sp, #8]
 8008a26:	9006      	str	r0, [sp, #24]
 8008a28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a2c:	4809      	ldr	r0, [pc, #36]	; (8008a54 <siprintf+0x38>)
 8008a2e:	9107      	str	r1, [sp, #28]
 8008a30:	9104      	str	r1, [sp, #16]
 8008a32:	4909      	ldr	r1, [pc, #36]	; (8008a58 <siprintf+0x3c>)
 8008a34:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a38:	9105      	str	r1, [sp, #20]
 8008a3a:	6800      	ldr	r0, [r0, #0]
 8008a3c:	9301      	str	r3, [sp, #4]
 8008a3e:	a902      	add	r1, sp, #8
 8008a40:	f000 f868 	bl	8008b14 <_svfiprintf_r>
 8008a44:	9b02      	ldr	r3, [sp, #8]
 8008a46:	2200      	movs	r2, #0
 8008a48:	701a      	strb	r2, [r3, #0]
 8008a4a:	b01c      	add	sp, #112	; 0x70
 8008a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a50:	b003      	add	sp, #12
 8008a52:	4770      	bx	lr
 8008a54:	20000010 	.word	0x20000010
 8008a58:	ffff0208 	.word	0xffff0208

08008a5c <__ssputs_r>:
 8008a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a60:	688e      	ldr	r6, [r1, #8]
 8008a62:	429e      	cmp	r6, r3
 8008a64:	4682      	mov	sl, r0
 8008a66:	460c      	mov	r4, r1
 8008a68:	4690      	mov	r8, r2
 8008a6a:	461f      	mov	r7, r3
 8008a6c:	d838      	bhi.n	8008ae0 <__ssputs_r+0x84>
 8008a6e:	898a      	ldrh	r2, [r1, #12]
 8008a70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a74:	d032      	beq.n	8008adc <__ssputs_r+0x80>
 8008a76:	6825      	ldr	r5, [r4, #0]
 8008a78:	6909      	ldr	r1, [r1, #16]
 8008a7a:	eba5 0901 	sub.w	r9, r5, r1
 8008a7e:	6965      	ldr	r5, [r4, #20]
 8008a80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a88:	3301      	adds	r3, #1
 8008a8a:	444b      	add	r3, r9
 8008a8c:	106d      	asrs	r5, r5, #1
 8008a8e:	429d      	cmp	r5, r3
 8008a90:	bf38      	it	cc
 8008a92:	461d      	movcc	r5, r3
 8008a94:	0553      	lsls	r3, r2, #21
 8008a96:	d531      	bpl.n	8008afc <__ssputs_r+0xa0>
 8008a98:	4629      	mov	r1, r5
 8008a9a:	f000 fb55 	bl	8009148 <_malloc_r>
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	b950      	cbnz	r0, 8008ab8 <__ssputs_r+0x5c>
 8008aa2:	230c      	movs	r3, #12
 8008aa4:	f8ca 3000 	str.w	r3, [sl]
 8008aa8:	89a3      	ldrh	r3, [r4, #12]
 8008aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aae:	81a3      	strh	r3, [r4, #12]
 8008ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab8:	6921      	ldr	r1, [r4, #16]
 8008aba:	464a      	mov	r2, r9
 8008abc:	f7ff ff98 	bl	80089f0 <memcpy>
 8008ac0:	89a3      	ldrh	r3, [r4, #12]
 8008ac2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aca:	81a3      	strh	r3, [r4, #12]
 8008acc:	6126      	str	r6, [r4, #16]
 8008ace:	6165      	str	r5, [r4, #20]
 8008ad0:	444e      	add	r6, r9
 8008ad2:	eba5 0509 	sub.w	r5, r5, r9
 8008ad6:	6026      	str	r6, [r4, #0]
 8008ad8:	60a5      	str	r5, [r4, #8]
 8008ada:	463e      	mov	r6, r7
 8008adc:	42be      	cmp	r6, r7
 8008ade:	d900      	bls.n	8008ae2 <__ssputs_r+0x86>
 8008ae0:	463e      	mov	r6, r7
 8008ae2:	6820      	ldr	r0, [r4, #0]
 8008ae4:	4632      	mov	r2, r6
 8008ae6:	4641      	mov	r1, r8
 8008ae8:	f000 faa8 	bl	800903c <memmove>
 8008aec:	68a3      	ldr	r3, [r4, #8]
 8008aee:	1b9b      	subs	r3, r3, r6
 8008af0:	60a3      	str	r3, [r4, #8]
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	4433      	add	r3, r6
 8008af6:	6023      	str	r3, [r4, #0]
 8008af8:	2000      	movs	r0, #0
 8008afa:	e7db      	b.n	8008ab4 <__ssputs_r+0x58>
 8008afc:	462a      	mov	r2, r5
 8008afe:	f000 fb97 	bl	8009230 <_realloc_r>
 8008b02:	4606      	mov	r6, r0
 8008b04:	2800      	cmp	r0, #0
 8008b06:	d1e1      	bne.n	8008acc <__ssputs_r+0x70>
 8008b08:	6921      	ldr	r1, [r4, #16]
 8008b0a:	4650      	mov	r0, sl
 8008b0c:	f000 fab0 	bl	8009070 <_free_r>
 8008b10:	e7c7      	b.n	8008aa2 <__ssputs_r+0x46>
	...

08008b14 <_svfiprintf_r>:
 8008b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b18:	4698      	mov	r8, r3
 8008b1a:	898b      	ldrh	r3, [r1, #12]
 8008b1c:	061b      	lsls	r3, r3, #24
 8008b1e:	b09d      	sub	sp, #116	; 0x74
 8008b20:	4607      	mov	r7, r0
 8008b22:	460d      	mov	r5, r1
 8008b24:	4614      	mov	r4, r2
 8008b26:	d50e      	bpl.n	8008b46 <_svfiprintf_r+0x32>
 8008b28:	690b      	ldr	r3, [r1, #16]
 8008b2a:	b963      	cbnz	r3, 8008b46 <_svfiprintf_r+0x32>
 8008b2c:	2140      	movs	r1, #64	; 0x40
 8008b2e:	f000 fb0b 	bl	8009148 <_malloc_r>
 8008b32:	6028      	str	r0, [r5, #0]
 8008b34:	6128      	str	r0, [r5, #16]
 8008b36:	b920      	cbnz	r0, 8008b42 <_svfiprintf_r+0x2e>
 8008b38:	230c      	movs	r3, #12
 8008b3a:	603b      	str	r3, [r7, #0]
 8008b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b40:	e0d1      	b.n	8008ce6 <_svfiprintf_r+0x1d2>
 8008b42:	2340      	movs	r3, #64	; 0x40
 8008b44:	616b      	str	r3, [r5, #20]
 8008b46:	2300      	movs	r3, #0
 8008b48:	9309      	str	r3, [sp, #36]	; 0x24
 8008b4a:	2320      	movs	r3, #32
 8008b4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b50:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b54:	2330      	movs	r3, #48	; 0x30
 8008b56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d00 <_svfiprintf_r+0x1ec>
 8008b5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b5e:	f04f 0901 	mov.w	r9, #1
 8008b62:	4623      	mov	r3, r4
 8008b64:	469a      	mov	sl, r3
 8008b66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b6a:	b10a      	cbz	r2, 8008b70 <_svfiprintf_r+0x5c>
 8008b6c:	2a25      	cmp	r2, #37	; 0x25
 8008b6e:	d1f9      	bne.n	8008b64 <_svfiprintf_r+0x50>
 8008b70:	ebba 0b04 	subs.w	fp, sl, r4
 8008b74:	d00b      	beq.n	8008b8e <_svfiprintf_r+0x7a>
 8008b76:	465b      	mov	r3, fp
 8008b78:	4622      	mov	r2, r4
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	f7ff ff6d 	bl	8008a5c <__ssputs_r>
 8008b82:	3001      	adds	r0, #1
 8008b84:	f000 80aa 	beq.w	8008cdc <_svfiprintf_r+0x1c8>
 8008b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b8a:	445a      	add	r2, fp
 8008b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f000 80a2 	beq.w	8008cdc <_svfiprintf_r+0x1c8>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ba2:	f10a 0a01 	add.w	sl, sl, #1
 8008ba6:	9304      	str	r3, [sp, #16]
 8008ba8:	9307      	str	r3, [sp, #28]
 8008baa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bae:	931a      	str	r3, [sp, #104]	; 0x68
 8008bb0:	4654      	mov	r4, sl
 8008bb2:	2205      	movs	r2, #5
 8008bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bb8:	4851      	ldr	r0, [pc, #324]	; (8008d00 <_svfiprintf_r+0x1ec>)
 8008bba:	f7f7 fb19 	bl	80001f0 <memchr>
 8008bbe:	9a04      	ldr	r2, [sp, #16]
 8008bc0:	b9d8      	cbnz	r0, 8008bfa <_svfiprintf_r+0xe6>
 8008bc2:	06d0      	lsls	r0, r2, #27
 8008bc4:	bf44      	itt	mi
 8008bc6:	2320      	movmi	r3, #32
 8008bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bcc:	0711      	lsls	r1, r2, #28
 8008bce:	bf44      	itt	mi
 8008bd0:	232b      	movmi	r3, #43	; 0x2b
 8008bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8008bda:	2b2a      	cmp	r3, #42	; 0x2a
 8008bdc:	d015      	beq.n	8008c0a <_svfiprintf_r+0xf6>
 8008bde:	9a07      	ldr	r2, [sp, #28]
 8008be0:	4654      	mov	r4, sl
 8008be2:	2000      	movs	r0, #0
 8008be4:	f04f 0c0a 	mov.w	ip, #10
 8008be8:	4621      	mov	r1, r4
 8008bea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bee:	3b30      	subs	r3, #48	; 0x30
 8008bf0:	2b09      	cmp	r3, #9
 8008bf2:	d94e      	bls.n	8008c92 <_svfiprintf_r+0x17e>
 8008bf4:	b1b0      	cbz	r0, 8008c24 <_svfiprintf_r+0x110>
 8008bf6:	9207      	str	r2, [sp, #28]
 8008bf8:	e014      	b.n	8008c24 <_svfiprintf_r+0x110>
 8008bfa:	eba0 0308 	sub.w	r3, r0, r8
 8008bfe:	fa09 f303 	lsl.w	r3, r9, r3
 8008c02:	4313      	orrs	r3, r2
 8008c04:	9304      	str	r3, [sp, #16]
 8008c06:	46a2      	mov	sl, r4
 8008c08:	e7d2      	b.n	8008bb0 <_svfiprintf_r+0x9c>
 8008c0a:	9b03      	ldr	r3, [sp, #12]
 8008c0c:	1d19      	adds	r1, r3, #4
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	9103      	str	r1, [sp, #12]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	bfbb      	ittet	lt
 8008c16:	425b      	neglt	r3, r3
 8008c18:	f042 0202 	orrlt.w	r2, r2, #2
 8008c1c:	9307      	strge	r3, [sp, #28]
 8008c1e:	9307      	strlt	r3, [sp, #28]
 8008c20:	bfb8      	it	lt
 8008c22:	9204      	strlt	r2, [sp, #16]
 8008c24:	7823      	ldrb	r3, [r4, #0]
 8008c26:	2b2e      	cmp	r3, #46	; 0x2e
 8008c28:	d10c      	bne.n	8008c44 <_svfiprintf_r+0x130>
 8008c2a:	7863      	ldrb	r3, [r4, #1]
 8008c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c2e:	d135      	bne.n	8008c9c <_svfiprintf_r+0x188>
 8008c30:	9b03      	ldr	r3, [sp, #12]
 8008c32:	1d1a      	adds	r2, r3, #4
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	9203      	str	r2, [sp, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	bfb8      	it	lt
 8008c3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c40:	3402      	adds	r4, #2
 8008c42:	9305      	str	r3, [sp, #20]
 8008c44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d10 <_svfiprintf_r+0x1fc>
 8008c48:	7821      	ldrb	r1, [r4, #0]
 8008c4a:	2203      	movs	r2, #3
 8008c4c:	4650      	mov	r0, sl
 8008c4e:	f7f7 facf 	bl	80001f0 <memchr>
 8008c52:	b140      	cbz	r0, 8008c66 <_svfiprintf_r+0x152>
 8008c54:	2340      	movs	r3, #64	; 0x40
 8008c56:	eba0 000a 	sub.w	r0, r0, sl
 8008c5a:	fa03 f000 	lsl.w	r0, r3, r0
 8008c5e:	9b04      	ldr	r3, [sp, #16]
 8008c60:	4303      	orrs	r3, r0
 8008c62:	3401      	adds	r4, #1
 8008c64:	9304      	str	r3, [sp, #16]
 8008c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c6a:	4826      	ldr	r0, [pc, #152]	; (8008d04 <_svfiprintf_r+0x1f0>)
 8008c6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c70:	2206      	movs	r2, #6
 8008c72:	f7f7 fabd 	bl	80001f0 <memchr>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d038      	beq.n	8008cec <_svfiprintf_r+0x1d8>
 8008c7a:	4b23      	ldr	r3, [pc, #140]	; (8008d08 <_svfiprintf_r+0x1f4>)
 8008c7c:	bb1b      	cbnz	r3, 8008cc6 <_svfiprintf_r+0x1b2>
 8008c7e:	9b03      	ldr	r3, [sp, #12]
 8008c80:	3307      	adds	r3, #7
 8008c82:	f023 0307 	bic.w	r3, r3, #7
 8008c86:	3308      	adds	r3, #8
 8008c88:	9303      	str	r3, [sp, #12]
 8008c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c8c:	4433      	add	r3, r6
 8008c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c90:	e767      	b.n	8008b62 <_svfiprintf_r+0x4e>
 8008c92:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c96:	460c      	mov	r4, r1
 8008c98:	2001      	movs	r0, #1
 8008c9a:	e7a5      	b.n	8008be8 <_svfiprintf_r+0xd4>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	3401      	adds	r4, #1
 8008ca0:	9305      	str	r3, [sp, #20]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	f04f 0c0a 	mov.w	ip, #10
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cae:	3a30      	subs	r2, #48	; 0x30
 8008cb0:	2a09      	cmp	r2, #9
 8008cb2:	d903      	bls.n	8008cbc <_svfiprintf_r+0x1a8>
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d0c5      	beq.n	8008c44 <_svfiprintf_r+0x130>
 8008cb8:	9105      	str	r1, [sp, #20]
 8008cba:	e7c3      	b.n	8008c44 <_svfiprintf_r+0x130>
 8008cbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e7f0      	b.n	8008ca8 <_svfiprintf_r+0x194>
 8008cc6:	ab03      	add	r3, sp, #12
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	462a      	mov	r2, r5
 8008ccc:	4b0f      	ldr	r3, [pc, #60]	; (8008d0c <_svfiprintf_r+0x1f8>)
 8008cce:	a904      	add	r1, sp, #16
 8008cd0:	4638      	mov	r0, r7
 8008cd2:	f3af 8000 	nop.w
 8008cd6:	1c42      	adds	r2, r0, #1
 8008cd8:	4606      	mov	r6, r0
 8008cda:	d1d6      	bne.n	8008c8a <_svfiprintf_r+0x176>
 8008cdc:	89ab      	ldrh	r3, [r5, #12]
 8008cde:	065b      	lsls	r3, r3, #25
 8008ce0:	f53f af2c 	bmi.w	8008b3c <_svfiprintf_r+0x28>
 8008ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ce6:	b01d      	add	sp, #116	; 0x74
 8008ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cec:	ab03      	add	r3, sp, #12
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	462a      	mov	r2, r5
 8008cf2:	4b06      	ldr	r3, [pc, #24]	; (8008d0c <_svfiprintf_r+0x1f8>)
 8008cf4:	a904      	add	r1, sp, #16
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	f000 f87a 	bl	8008df0 <_printf_i>
 8008cfc:	e7eb      	b.n	8008cd6 <_svfiprintf_r+0x1c2>
 8008cfe:	bf00      	nop
 8008d00:	080094c4 	.word	0x080094c4
 8008d04:	080094ce 	.word	0x080094ce
 8008d08:	00000000 	.word	0x00000000
 8008d0c:	08008a5d 	.word	0x08008a5d
 8008d10:	080094ca 	.word	0x080094ca

08008d14 <_printf_common>:
 8008d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d18:	4616      	mov	r6, r2
 8008d1a:	4699      	mov	r9, r3
 8008d1c:	688a      	ldr	r2, [r1, #8]
 8008d1e:	690b      	ldr	r3, [r1, #16]
 8008d20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d24:	4293      	cmp	r3, r2
 8008d26:	bfb8      	it	lt
 8008d28:	4613      	movlt	r3, r2
 8008d2a:	6033      	str	r3, [r6, #0]
 8008d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d30:	4607      	mov	r7, r0
 8008d32:	460c      	mov	r4, r1
 8008d34:	b10a      	cbz	r2, 8008d3a <_printf_common+0x26>
 8008d36:	3301      	adds	r3, #1
 8008d38:	6033      	str	r3, [r6, #0]
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	0699      	lsls	r1, r3, #26
 8008d3e:	bf42      	ittt	mi
 8008d40:	6833      	ldrmi	r3, [r6, #0]
 8008d42:	3302      	addmi	r3, #2
 8008d44:	6033      	strmi	r3, [r6, #0]
 8008d46:	6825      	ldr	r5, [r4, #0]
 8008d48:	f015 0506 	ands.w	r5, r5, #6
 8008d4c:	d106      	bne.n	8008d5c <_printf_common+0x48>
 8008d4e:	f104 0a19 	add.w	sl, r4, #25
 8008d52:	68e3      	ldr	r3, [r4, #12]
 8008d54:	6832      	ldr	r2, [r6, #0]
 8008d56:	1a9b      	subs	r3, r3, r2
 8008d58:	42ab      	cmp	r3, r5
 8008d5a:	dc26      	bgt.n	8008daa <_printf_common+0x96>
 8008d5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d60:	1e13      	subs	r3, r2, #0
 8008d62:	6822      	ldr	r2, [r4, #0]
 8008d64:	bf18      	it	ne
 8008d66:	2301      	movne	r3, #1
 8008d68:	0692      	lsls	r2, r2, #26
 8008d6a:	d42b      	bmi.n	8008dc4 <_printf_common+0xb0>
 8008d6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d70:	4649      	mov	r1, r9
 8008d72:	4638      	mov	r0, r7
 8008d74:	47c0      	blx	r8
 8008d76:	3001      	adds	r0, #1
 8008d78:	d01e      	beq.n	8008db8 <_printf_common+0xa4>
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	68e5      	ldr	r5, [r4, #12]
 8008d7e:	6832      	ldr	r2, [r6, #0]
 8008d80:	f003 0306 	and.w	r3, r3, #6
 8008d84:	2b04      	cmp	r3, #4
 8008d86:	bf08      	it	eq
 8008d88:	1aad      	subeq	r5, r5, r2
 8008d8a:	68a3      	ldr	r3, [r4, #8]
 8008d8c:	6922      	ldr	r2, [r4, #16]
 8008d8e:	bf0c      	ite	eq
 8008d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d94:	2500      	movne	r5, #0
 8008d96:	4293      	cmp	r3, r2
 8008d98:	bfc4      	itt	gt
 8008d9a:	1a9b      	subgt	r3, r3, r2
 8008d9c:	18ed      	addgt	r5, r5, r3
 8008d9e:	2600      	movs	r6, #0
 8008da0:	341a      	adds	r4, #26
 8008da2:	42b5      	cmp	r5, r6
 8008da4:	d11a      	bne.n	8008ddc <_printf_common+0xc8>
 8008da6:	2000      	movs	r0, #0
 8008da8:	e008      	b.n	8008dbc <_printf_common+0xa8>
 8008daa:	2301      	movs	r3, #1
 8008dac:	4652      	mov	r2, sl
 8008dae:	4649      	mov	r1, r9
 8008db0:	4638      	mov	r0, r7
 8008db2:	47c0      	blx	r8
 8008db4:	3001      	adds	r0, #1
 8008db6:	d103      	bne.n	8008dc0 <_printf_common+0xac>
 8008db8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dc0:	3501      	adds	r5, #1
 8008dc2:	e7c6      	b.n	8008d52 <_printf_common+0x3e>
 8008dc4:	18e1      	adds	r1, r4, r3
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	2030      	movs	r0, #48	; 0x30
 8008dca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008dce:	4422      	add	r2, r4
 8008dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008dd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008dd8:	3302      	adds	r3, #2
 8008dda:	e7c7      	b.n	8008d6c <_printf_common+0x58>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	4622      	mov	r2, r4
 8008de0:	4649      	mov	r1, r9
 8008de2:	4638      	mov	r0, r7
 8008de4:	47c0      	blx	r8
 8008de6:	3001      	adds	r0, #1
 8008de8:	d0e6      	beq.n	8008db8 <_printf_common+0xa4>
 8008dea:	3601      	adds	r6, #1
 8008dec:	e7d9      	b.n	8008da2 <_printf_common+0x8e>
	...

08008df0 <_printf_i>:
 8008df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008df4:	7e0f      	ldrb	r7, [r1, #24]
 8008df6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008df8:	2f78      	cmp	r7, #120	; 0x78
 8008dfa:	4691      	mov	r9, r2
 8008dfc:	4680      	mov	r8, r0
 8008dfe:	460c      	mov	r4, r1
 8008e00:	469a      	mov	sl, r3
 8008e02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e06:	d807      	bhi.n	8008e18 <_printf_i+0x28>
 8008e08:	2f62      	cmp	r7, #98	; 0x62
 8008e0a:	d80a      	bhi.n	8008e22 <_printf_i+0x32>
 8008e0c:	2f00      	cmp	r7, #0
 8008e0e:	f000 80d8 	beq.w	8008fc2 <_printf_i+0x1d2>
 8008e12:	2f58      	cmp	r7, #88	; 0x58
 8008e14:	f000 80a3 	beq.w	8008f5e <_printf_i+0x16e>
 8008e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e20:	e03a      	b.n	8008e98 <_printf_i+0xa8>
 8008e22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e26:	2b15      	cmp	r3, #21
 8008e28:	d8f6      	bhi.n	8008e18 <_printf_i+0x28>
 8008e2a:	a101      	add	r1, pc, #4	; (adr r1, 8008e30 <_printf_i+0x40>)
 8008e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e30:	08008e89 	.word	0x08008e89
 8008e34:	08008e9d 	.word	0x08008e9d
 8008e38:	08008e19 	.word	0x08008e19
 8008e3c:	08008e19 	.word	0x08008e19
 8008e40:	08008e19 	.word	0x08008e19
 8008e44:	08008e19 	.word	0x08008e19
 8008e48:	08008e9d 	.word	0x08008e9d
 8008e4c:	08008e19 	.word	0x08008e19
 8008e50:	08008e19 	.word	0x08008e19
 8008e54:	08008e19 	.word	0x08008e19
 8008e58:	08008e19 	.word	0x08008e19
 8008e5c:	08008fa9 	.word	0x08008fa9
 8008e60:	08008ecd 	.word	0x08008ecd
 8008e64:	08008f8b 	.word	0x08008f8b
 8008e68:	08008e19 	.word	0x08008e19
 8008e6c:	08008e19 	.word	0x08008e19
 8008e70:	08008fcb 	.word	0x08008fcb
 8008e74:	08008e19 	.word	0x08008e19
 8008e78:	08008ecd 	.word	0x08008ecd
 8008e7c:	08008e19 	.word	0x08008e19
 8008e80:	08008e19 	.word	0x08008e19
 8008e84:	08008f93 	.word	0x08008f93
 8008e88:	682b      	ldr	r3, [r5, #0]
 8008e8a:	1d1a      	adds	r2, r3, #4
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	602a      	str	r2, [r5, #0]
 8008e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e0a3      	b.n	8008fe4 <_printf_i+0x1f4>
 8008e9c:	6820      	ldr	r0, [r4, #0]
 8008e9e:	6829      	ldr	r1, [r5, #0]
 8008ea0:	0606      	lsls	r6, r0, #24
 8008ea2:	f101 0304 	add.w	r3, r1, #4
 8008ea6:	d50a      	bpl.n	8008ebe <_printf_i+0xce>
 8008ea8:	680e      	ldr	r6, [r1, #0]
 8008eaa:	602b      	str	r3, [r5, #0]
 8008eac:	2e00      	cmp	r6, #0
 8008eae:	da03      	bge.n	8008eb8 <_printf_i+0xc8>
 8008eb0:	232d      	movs	r3, #45	; 0x2d
 8008eb2:	4276      	negs	r6, r6
 8008eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eb8:	485e      	ldr	r0, [pc, #376]	; (8009034 <_printf_i+0x244>)
 8008eba:	230a      	movs	r3, #10
 8008ebc:	e019      	b.n	8008ef2 <_printf_i+0x102>
 8008ebe:	680e      	ldr	r6, [r1, #0]
 8008ec0:	602b      	str	r3, [r5, #0]
 8008ec2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ec6:	bf18      	it	ne
 8008ec8:	b236      	sxthne	r6, r6
 8008eca:	e7ef      	b.n	8008eac <_printf_i+0xbc>
 8008ecc:	682b      	ldr	r3, [r5, #0]
 8008ece:	6820      	ldr	r0, [r4, #0]
 8008ed0:	1d19      	adds	r1, r3, #4
 8008ed2:	6029      	str	r1, [r5, #0]
 8008ed4:	0601      	lsls	r1, r0, #24
 8008ed6:	d501      	bpl.n	8008edc <_printf_i+0xec>
 8008ed8:	681e      	ldr	r6, [r3, #0]
 8008eda:	e002      	b.n	8008ee2 <_printf_i+0xf2>
 8008edc:	0646      	lsls	r6, r0, #25
 8008ede:	d5fb      	bpl.n	8008ed8 <_printf_i+0xe8>
 8008ee0:	881e      	ldrh	r6, [r3, #0]
 8008ee2:	4854      	ldr	r0, [pc, #336]	; (8009034 <_printf_i+0x244>)
 8008ee4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ee6:	bf0c      	ite	eq
 8008ee8:	2308      	moveq	r3, #8
 8008eea:	230a      	movne	r3, #10
 8008eec:	2100      	movs	r1, #0
 8008eee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ef2:	6865      	ldr	r5, [r4, #4]
 8008ef4:	60a5      	str	r5, [r4, #8]
 8008ef6:	2d00      	cmp	r5, #0
 8008ef8:	bfa2      	ittt	ge
 8008efa:	6821      	ldrge	r1, [r4, #0]
 8008efc:	f021 0104 	bicge.w	r1, r1, #4
 8008f00:	6021      	strge	r1, [r4, #0]
 8008f02:	b90e      	cbnz	r6, 8008f08 <_printf_i+0x118>
 8008f04:	2d00      	cmp	r5, #0
 8008f06:	d04d      	beq.n	8008fa4 <_printf_i+0x1b4>
 8008f08:	4615      	mov	r5, r2
 8008f0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f0e:	fb03 6711 	mls	r7, r3, r1, r6
 8008f12:	5dc7      	ldrb	r7, [r0, r7]
 8008f14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f18:	4637      	mov	r7, r6
 8008f1a:	42bb      	cmp	r3, r7
 8008f1c:	460e      	mov	r6, r1
 8008f1e:	d9f4      	bls.n	8008f0a <_printf_i+0x11a>
 8008f20:	2b08      	cmp	r3, #8
 8008f22:	d10b      	bne.n	8008f3c <_printf_i+0x14c>
 8008f24:	6823      	ldr	r3, [r4, #0]
 8008f26:	07de      	lsls	r6, r3, #31
 8008f28:	d508      	bpl.n	8008f3c <_printf_i+0x14c>
 8008f2a:	6923      	ldr	r3, [r4, #16]
 8008f2c:	6861      	ldr	r1, [r4, #4]
 8008f2e:	4299      	cmp	r1, r3
 8008f30:	bfde      	ittt	le
 8008f32:	2330      	movle	r3, #48	; 0x30
 8008f34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f3c:	1b52      	subs	r2, r2, r5
 8008f3e:	6122      	str	r2, [r4, #16]
 8008f40:	f8cd a000 	str.w	sl, [sp]
 8008f44:	464b      	mov	r3, r9
 8008f46:	aa03      	add	r2, sp, #12
 8008f48:	4621      	mov	r1, r4
 8008f4a:	4640      	mov	r0, r8
 8008f4c:	f7ff fee2 	bl	8008d14 <_printf_common>
 8008f50:	3001      	adds	r0, #1
 8008f52:	d14c      	bne.n	8008fee <_printf_i+0x1fe>
 8008f54:	f04f 30ff 	mov.w	r0, #4294967295
 8008f58:	b004      	add	sp, #16
 8008f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f5e:	4835      	ldr	r0, [pc, #212]	; (8009034 <_printf_i+0x244>)
 8008f60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f64:	6829      	ldr	r1, [r5, #0]
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f6c:	6029      	str	r1, [r5, #0]
 8008f6e:	061d      	lsls	r5, r3, #24
 8008f70:	d514      	bpl.n	8008f9c <_printf_i+0x1ac>
 8008f72:	07df      	lsls	r7, r3, #31
 8008f74:	bf44      	itt	mi
 8008f76:	f043 0320 	orrmi.w	r3, r3, #32
 8008f7a:	6023      	strmi	r3, [r4, #0]
 8008f7c:	b91e      	cbnz	r6, 8008f86 <_printf_i+0x196>
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	f023 0320 	bic.w	r3, r3, #32
 8008f84:	6023      	str	r3, [r4, #0]
 8008f86:	2310      	movs	r3, #16
 8008f88:	e7b0      	b.n	8008eec <_printf_i+0xfc>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	f043 0320 	orr.w	r3, r3, #32
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	2378      	movs	r3, #120	; 0x78
 8008f94:	4828      	ldr	r0, [pc, #160]	; (8009038 <_printf_i+0x248>)
 8008f96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f9a:	e7e3      	b.n	8008f64 <_printf_i+0x174>
 8008f9c:	0659      	lsls	r1, r3, #25
 8008f9e:	bf48      	it	mi
 8008fa0:	b2b6      	uxthmi	r6, r6
 8008fa2:	e7e6      	b.n	8008f72 <_printf_i+0x182>
 8008fa4:	4615      	mov	r5, r2
 8008fa6:	e7bb      	b.n	8008f20 <_printf_i+0x130>
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	6826      	ldr	r6, [r4, #0]
 8008fac:	6961      	ldr	r1, [r4, #20]
 8008fae:	1d18      	adds	r0, r3, #4
 8008fb0:	6028      	str	r0, [r5, #0]
 8008fb2:	0635      	lsls	r5, r6, #24
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	d501      	bpl.n	8008fbc <_printf_i+0x1cc>
 8008fb8:	6019      	str	r1, [r3, #0]
 8008fba:	e002      	b.n	8008fc2 <_printf_i+0x1d2>
 8008fbc:	0670      	lsls	r0, r6, #25
 8008fbe:	d5fb      	bpl.n	8008fb8 <_printf_i+0x1c8>
 8008fc0:	8019      	strh	r1, [r3, #0]
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	6123      	str	r3, [r4, #16]
 8008fc6:	4615      	mov	r5, r2
 8008fc8:	e7ba      	b.n	8008f40 <_printf_i+0x150>
 8008fca:	682b      	ldr	r3, [r5, #0]
 8008fcc:	1d1a      	adds	r2, r3, #4
 8008fce:	602a      	str	r2, [r5, #0]
 8008fd0:	681d      	ldr	r5, [r3, #0]
 8008fd2:	6862      	ldr	r2, [r4, #4]
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	f7f7 f90a 	bl	80001f0 <memchr>
 8008fdc:	b108      	cbz	r0, 8008fe2 <_printf_i+0x1f2>
 8008fde:	1b40      	subs	r0, r0, r5
 8008fe0:	6060      	str	r0, [r4, #4]
 8008fe2:	6863      	ldr	r3, [r4, #4]
 8008fe4:	6123      	str	r3, [r4, #16]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fec:	e7a8      	b.n	8008f40 <_printf_i+0x150>
 8008fee:	6923      	ldr	r3, [r4, #16]
 8008ff0:	462a      	mov	r2, r5
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	4640      	mov	r0, r8
 8008ff6:	47d0      	blx	sl
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	d0ab      	beq.n	8008f54 <_printf_i+0x164>
 8008ffc:	6823      	ldr	r3, [r4, #0]
 8008ffe:	079b      	lsls	r3, r3, #30
 8009000:	d413      	bmi.n	800902a <_printf_i+0x23a>
 8009002:	68e0      	ldr	r0, [r4, #12]
 8009004:	9b03      	ldr	r3, [sp, #12]
 8009006:	4298      	cmp	r0, r3
 8009008:	bfb8      	it	lt
 800900a:	4618      	movlt	r0, r3
 800900c:	e7a4      	b.n	8008f58 <_printf_i+0x168>
 800900e:	2301      	movs	r3, #1
 8009010:	4632      	mov	r2, r6
 8009012:	4649      	mov	r1, r9
 8009014:	4640      	mov	r0, r8
 8009016:	47d0      	blx	sl
 8009018:	3001      	adds	r0, #1
 800901a:	d09b      	beq.n	8008f54 <_printf_i+0x164>
 800901c:	3501      	adds	r5, #1
 800901e:	68e3      	ldr	r3, [r4, #12]
 8009020:	9903      	ldr	r1, [sp, #12]
 8009022:	1a5b      	subs	r3, r3, r1
 8009024:	42ab      	cmp	r3, r5
 8009026:	dcf2      	bgt.n	800900e <_printf_i+0x21e>
 8009028:	e7eb      	b.n	8009002 <_printf_i+0x212>
 800902a:	2500      	movs	r5, #0
 800902c:	f104 0619 	add.w	r6, r4, #25
 8009030:	e7f5      	b.n	800901e <_printf_i+0x22e>
 8009032:	bf00      	nop
 8009034:	080094d5 	.word	0x080094d5
 8009038:	080094e6 	.word	0x080094e6

0800903c <memmove>:
 800903c:	4288      	cmp	r0, r1
 800903e:	b510      	push	{r4, lr}
 8009040:	eb01 0402 	add.w	r4, r1, r2
 8009044:	d902      	bls.n	800904c <memmove+0x10>
 8009046:	4284      	cmp	r4, r0
 8009048:	4623      	mov	r3, r4
 800904a:	d807      	bhi.n	800905c <memmove+0x20>
 800904c:	1e43      	subs	r3, r0, #1
 800904e:	42a1      	cmp	r1, r4
 8009050:	d008      	beq.n	8009064 <memmove+0x28>
 8009052:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009056:	f803 2f01 	strb.w	r2, [r3, #1]!
 800905a:	e7f8      	b.n	800904e <memmove+0x12>
 800905c:	4402      	add	r2, r0
 800905e:	4601      	mov	r1, r0
 8009060:	428a      	cmp	r2, r1
 8009062:	d100      	bne.n	8009066 <memmove+0x2a>
 8009064:	bd10      	pop	{r4, pc}
 8009066:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800906a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800906e:	e7f7      	b.n	8009060 <memmove+0x24>

08009070 <_free_r>:
 8009070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009072:	2900      	cmp	r1, #0
 8009074:	d044      	beq.n	8009100 <_free_r+0x90>
 8009076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800907a:	9001      	str	r0, [sp, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	f1a1 0404 	sub.w	r4, r1, #4
 8009082:	bfb8      	it	lt
 8009084:	18e4      	addlt	r4, r4, r3
 8009086:	f000 f913 	bl	80092b0 <__malloc_lock>
 800908a:	4a1e      	ldr	r2, [pc, #120]	; (8009104 <_free_r+0x94>)
 800908c:	9801      	ldr	r0, [sp, #4]
 800908e:	6813      	ldr	r3, [r2, #0]
 8009090:	b933      	cbnz	r3, 80090a0 <_free_r+0x30>
 8009092:	6063      	str	r3, [r4, #4]
 8009094:	6014      	str	r4, [r2, #0]
 8009096:	b003      	add	sp, #12
 8009098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800909c:	f000 b90e 	b.w	80092bc <__malloc_unlock>
 80090a0:	42a3      	cmp	r3, r4
 80090a2:	d908      	bls.n	80090b6 <_free_r+0x46>
 80090a4:	6825      	ldr	r5, [r4, #0]
 80090a6:	1961      	adds	r1, r4, r5
 80090a8:	428b      	cmp	r3, r1
 80090aa:	bf01      	itttt	eq
 80090ac:	6819      	ldreq	r1, [r3, #0]
 80090ae:	685b      	ldreq	r3, [r3, #4]
 80090b0:	1949      	addeq	r1, r1, r5
 80090b2:	6021      	streq	r1, [r4, #0]
 80090b4:	e7ed      	b.n	8009092 <_free_r+0x22>
 80090b6:	461a      	mov	r2, r3
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	b10b      	cbz	r3, 80090c0 <_free_r+0x50>
 80090bc:	42a3      	cmp	r3, r4
 80090be:	d9fa      	bls.n	80090b6 <_free_r+0x46>
 80090c0:	6811      	ldr	r1, [r2, #0]
 80090c2:	1855      	adds	r5, r2, r1
 80090c4:	42a5      	cmp	r5, r4
 80090c6:	d10b      	bne.n	80090e0 <_free_r+0x70>
 80090c8:	6824      	ldr	r4, [r4, #0]
 80090ca:	4421      	add	r1, r4
 80090cc:	1854      	adds	r4, r2, r1
 80090ce:	42a3      	cmp	r3, r4
 80090d0:	6011      	str	r1, [r2, #0]
 80090d2:	d1e0      	bne.n	8009096 <_free_r+0x26>
 80090d4:	681c      	ldr	r4, [r3, #0]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	6053      	str	r3, [r2, #4]
 80090da:	4421      	add	r1, r4
 80090dc:	6011      	str	r1, [r2, #0]
 80090de:	e7da      	b.n	8009096 <_free_r+0x26>
 80090e0:	d902      	bls.n	80090e8 <_free_r+0x78>
 80090e2:	230c      	movs	r3, #12
 80090e4:	6003      	str	r3, [r0, #0]
 80090e6:	e7d6      	b.n	8009096 <_free_r+0x26>
 80090e8:	6825      	ldr	r5, [r4, #0]
 80090ea:	1961      	adds	r1, r4, r5
 80090ec:	428b      	cmp	r3, r1
 80090ee:	bf04      	itt	eq
 80090f0:	6819      	ldreq	r1, [r3, #0]
 80090f2:	685b      	ldreq	r3, [r3, #4]
 80090f4:	6063      	str	r3, [r4, #4]
 80090f6:	bf04      	itt	eq
 80090f8:	1949      	addeq	r1, r1, r5
 80090fa:	6021      	streq	r1, [r4, #0]
 80090fc:	6054      	str	r4, [r2, #4]
 80090fe:	e7ca      	b.n	8009096 <_free_r+0x26>
 8009100:	b003      	add	sp, #12
 8009102:	bd30      	pop	{r4, r5, pc}
 8009104:	20005244 	.word	0x20005244

08009108 <sbrk_aligned>:
 8009108:	b570      	push	{r4, r5, r6, lr}
 800910a:	4e0e      	ldr	r6, [pc, #56]	; (8009144 <sbrk_aligned+0x3c>)
 800910c:	460c      	mov	r4, r1
 800910e:	6831      	ldr	r1, [r6, #0]
 8009110:	4605      	mov	r5, r0
 8009112:	b911      	cbnz	r1, 800911a <sbrk_aligned+0x12>
 8009114:	f000 f8bc 	bl	8009290 <_sbrk_r>
 8009118:	6030      	str	r0, [r6, #0]
 800911a:	4621      	mov	r1, r4
 800911c:	4628      	mov	r0, r5
 800911e:	f000 f8b7 	bl	8009290 <_sbrk_r>
 8009122:	1c43      	adds	r3, r0, #1
 8009124:	d00a      	beq.n	800913c <sbrk_aligned+0x34>
 8009126:	1cc4      	adds	r4, r0, #3
 8009128:	f024 0403 	bic.w	r4, r4, #3
 800912c:	42a0      	cmp	r0, r4
 800912e:	d007      	beq.n	8009140 <sbrk_aligned+0x38>
 8009130:	1a21      	subs	r1, r4, r0
 8009132:	4628      	mov	r0, r5
 8009134:	f000 f8ac 	bl	8009290 <_sbrk_r>
 8009138:	3001      	adds	r0, #1
 800913a:	d101      	bne.n	8009140 <sbrk_aligned+0x38>
 800913c:	f04f 34ff 	mov.w	r4, #4294967295
 8009140:	4620      	mov	r0, r4
 8009142:	bd70      	pop	{r4, r5, r6, pc}
 8009144:	20005248 	.word	0x20005248

08009148 <_malloc_r>:
 8009148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800914c:	1ccd      	adds	r5, r1, #3
 800914e:	f025 0503 	bic.w	r5, r5, #3
 8009152:	3508      	adds	r5, #8
 8009154:	2d0c      	cmp	r5, #12
 8009156:	bf38      	it	cc
 8009158:	250c      	movcc	r5, #12
 800915a:	2d00      	cmp	r5, #0
 800915c:	4607      	mov	r7, r0
 800915e:	db01      	blt.n	8009164 <_malloc_r+0x1c>
 8009160:	42a9      	cmp	r1, r5
 8009162:	d905      	bls.n	8009170 <_malloc_r+0x28>
 8009164:	230c      	movs	r3, #12
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	2600      	movs	r6, #0
 800916a:	4630      	mov	r0, r6
 800916c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009170:	4e2e      	ldr	r6, [pc, #184]	; (800922c <_malloc_r+0xe4>)
 8009172:	f000 f89d 	bl	80092b0 <__malloc_lock>
 8009176:	6833      	ldr	r3, [r6, #0]
 8009178:	461c      	mov	r4, r3
 800917a:	bb34      	cbnz	r4, 80091ca <_malloc_r+0x82>
 800917c:	4629      	mov	r1, r5
 800917e:	4638      	mov	r0, r7
 8009180:	f7ff ffc2 	bl	8009108 <sbrk_aligned>
 8009184:	1c43      	adds	r3, r0, #1
 8009186:	4604      	mov	r4, r0
 8009188:	d14d      	bne.n	8009226 <_malloc_r+0xde>
 800918a:	6834      	ldr	r4, [r6, #0]
 800918c:	4626      	mov	r6, r4
 800918e:	2e00      	cmp	r6, #0
 8009190:	d140      	bne.n	8009214 <_malloc_r+0xcc>
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	4631      	mov	r1, r6
 8009196:	4638      	mov	r0, r7
 8009198:	eb04 0803 	add.w	r8, r4, r3
 800919c:	f000 f878 	bl	8009290 <_sbrk_r>
 80091a0:	4580      	cmp	r8, r0
 80091a2:	d13a      	bne.n	800921a <_malloc_r+0xd2>
 80091a4:	6821      	ldr	r1, [r4, #0]
 80091a6:	3503      	adds	r5, #3
 80091a8:	1a6d      	subs	r5, r5, r1
 80091aa:	f025 0503 	bic.w	r5, r5, #3
 80091ae:	3508      	adds	r5, #8
 80091b0:	2d0c      	cmp	r5, #12
 80091b2:	bf38      	it	cc
 80091b4:	250c      	movcc	r5, #12
 80091b6:	4629      	mov	r1, r5
 80091b8:	4638      	mov	r0, r7
 80091ba:	f7ff ffa5 	bl	8009108 <sbrk_aligned>
 80091be:	3001      	adds	r0, #1
 80091c0:	d02b      	beq.n	800921a <_malloc_r+0xd2>
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	442b      	add	r3, r5
 80091c6:	6023      	str	r3, [r4, #0]
 80091c8:	e00e      	b.n	80091e8 <_malloc_r+0xa0>
 80091ca:	6822      	ldr	r2, [r4, #0]
 80091cc:	1b52      	subs	r2, r2, r5
 80091ce:	d41e      	bmi.n	800920e <_malloc_r+0xc6>
 80091d0:	2a0b      	cmp	r2, #11
 80091d2:	d916      	bls.n	8009202 <_malloc_r+0xba>
 80091d4:	1961      	adds	r1, r4, r5
 80091d6:	42a3      	cmp	r3, r4
 80091d8:	6025      	str	r5, [r4, #0]
 80091da:	bf18      	it	ne
 80091dc:	6059      	strne	r1, [r3, #4]
 80091de:	6863      	ldr	r3, [r4, #4]
 80091e0:	bf08      	it	eq
 80091e2:	6031      	streq	r1, [r6, #0]
 80091e4:	5162      	str	r2, [r4, r5]
 80091e6:	604b      	str	r3, [r1, #4]
 80091e8:	4638      	mov	r0, r7
 80091ea:	f104 060b 	add.w	r6, r4, #11
 80091ee:	f000 f865 	bl	80092bc <__malloc_unlock>
 80091f2:	f026 0607 	bic.w	r6, r6, #7
 80091f6:	1d23      	adds	r3, r4, #4
 80091f8:	1af2      	subs	r2, r6, r3
 80091fa:	d0b6      	beq.n	800916a <_malloc_r+0x22>
 80091fc:	1b9b      	subs	r3, r3, r6
 80091fe:	50a3      	str	r3, [r4, r2]
 8009200:	e7b3      	b.n	800916a <_malloc_r+0x22>
 8009202:	6862      	ldr	r2, [r4, #4]
 8009204:	42a3      	cmp	r3, r4
 8009206:	bf0c      	ite	eq
 8009208:	6032      	streq	r2, [r6, #0]
 800920a:	605a      	strne	r2, [r3, #4]
 800920c:	e7ec      	b.n	80091e8 <_malloc_r+0xa0>
 800920e:	4623      	mov	r3, r4
 8009210:	6864      	ldr	r4, [r4, #4]
 8009212:	e7b2      	b.n	800917a <_malloc_r+0x32>
 8009214:	4634      	mov	r4, r6
 8009216:	6876      	ldr	r6, [r6, #4]
 8009218:	e7b9      	b.n	800918e <_malloc_r+0x46>
 800921a:	230c      	movs	r3, #12
 800921c:	603b      	str	r3, [r7, #0]
 800921e:	4638      	mov	r0, r7
 8009220:	f000 f84c 	bl	80092bc <__malloc_unlock>
 8009224:	e7a1      	b.n	800916a <_malloc_r+0x22>
 8009226:	6025      	str	r5, [r4, #0]
 8009228:	e7de      	b.n	80091e8 <_malloc_r+0xa0>
 800922a:	bf00      	nop
 800922c:	20005244 	.word	0x20005244

08009230 <_realloc_r>:
 8009230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009234:	4680      	mov	r8, r0
 8009236:	4614      	mov	r4, r2
 8009238:	460e      	mov	r6, r1
 800923a:	b921      	cbnz	r1, 8009246 <_realloc_r+0x16>
 800923c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009240:	4611      	mov	r1, r2
 8009242:	f7ff bf81 	b.w	8009148 <_malloc_r>
 8009246:	b92a      	cbnz	r2, 8009254 <_realloc_r+0x24>
 8009248:	f7ff ff12 	bl	8009070 <_free_r>
 800924c:	4625      	mov	r5, r4
 800924e:	4628      	mov	r0, r5
 8009250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009254:	f000 f838 	bl	80092c8 <_malloc_usable_size_r>
 8009258:	4284      	cmp	r4, r0
 800925a:	4607      	mov	r7, r0
 800925c:	d802      	bhi.n	8009264 <_realloc_r+0x34>
 800925e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009262:	d812      	bhi.n	800928a <_realloc_r+0x5a>
 8009264:	4621      	mov	r1, r4
 8009266:	4640      	mov	r0, r8
 8009268:	f7ff ff6e 	bl	8009148 <_malloc_r>
 800926c:	4605      	mov	r5, r0
 800926e:	2800      	cmp	r0, #0
 8009270:	d0ed      	beq.n	800924e <_realloc_r+0x1e>
 8009272:	42bc      	cmp	r4, r7
 8009274:	4622      	mov	r2, r4
 8009276:	4631      	mov	r1, r6
 8009278:	bf28      	it	cs
 800927a:	463a      	movcs	r2, r7
 800927c:	f7ff fbb8 	bl	80089f0 <memcpy>
 8009280:	4631      	mov	r1, r6
 8009282:	4640      	mov	r0, r8
 8009284:	f7ff fef4 	bl	8009070 <_free_r>
 8009288:	e7e1      	b.n	800924e <_realloc_r+0x1e>
 800928a:	4635      	mov	r5, r6
 800928c:	e7df      	b.n	800924e <_realloc_r+0x1e>
	...

08009290 <_sbrk_r>:
 8009290:	b538      	push	{r3, r4, r5, lr}
 8009292:	4d06      	ldr	r5, [pc, #24]	; (80092ac <_sbrk_r+0x1c>)
 8009294:	2300      	movs	r3, #0
 8009296:	4604      	mov	r4, r0
 8009298:	4608      	mov	r0, r1
 800929a:	602b      	str	r3, [r5, #0]
 800929c:	f7f8 fa02 	bl	80016a4 <_sbrk>
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	d102      	bne.n	80092aa <_sbrk_r+0x1a>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	b103      	cbz	r3, 80092aa <_sbrk_r+0x1a>
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	bd38      	pop	{r3, r4, r5, pc}
 80092ac:	2000524c 	.word	0x2000524c

080092b0 <__malloc_lock>:
 80092b0:	4801      	ldr	r0, [pc, #4]	; (80092b8 <__malloc_lock+0x8>)
 80092b2:	f000 b811 	b.w	80092d8 <__retarget_lock_acquire_recursive>
 80092b6:	bf00      	nop
 80092b8:	20005250 	.word	0x20005250

080092bc <__malloc_unlock>:
 80092bc:	4801      	ldr	r0, [pc, #4]	; (80092c4 <__malloc_unlock+0x8>)
 80092be:	f000 b80c 	b.w	80092da <__retarget_lock_release_recursive>
 80092c2:	bf00      	nop
 80092c4:	20005250 	.word	0x20005250

080092c8 <_malloc_usable_size_r>:
 80092c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092cc:	1f18      	subs	r0, r3, #4
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	bfbc      	itt	lt
 80092d2:	580b      	ldrlt	r3, [r1, r0]
 80092d4:	18c0      	addlt	r0, r0, r3
 80092d6:	4770      	bx	lr

080092d8 <__retarget_lock_acquire_recursive>:
 80092d8:	4770      	bx	lr

080092da <__retarget_lock_release_recursive>:
 80092da:	4770      	bx	lr

080092dc <_init>:
 80092dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092de:	bf00      	nop
 80092e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092e2:	bc08      	pop	{r3}
 80092e4:	469e      	mov	lr, r3
 80092e6:	4770      	bx	lr

080092e8 <_fini>:
 80092e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ea:	bf00      	nop
 80092ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ee:	bc08      	pop	{r3}
 80092f0:	469e      	mov	lr, r3
 80092f2:	4770      	bx	lr
