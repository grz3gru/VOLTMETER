
VOLTMETER_ADC_UART_FREE_RTOS_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c22c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000073c  0800c3d0  0800c3d0  0001c3d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb0c  0800cb0c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb0c  0800cb0c  0001cb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb14  0800cb14  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb14  0800cb14  0001cb14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb18  0800cb18  0001cb18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cb1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049d8  200001e0  0800ccfc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bb8  0800ccfc  00024bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b450  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004140  00000000  00000000  0003b660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0003f7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001488  00000000  00000000  00040de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b218  00000000  00000000  00042268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dcbf  00000000  00000000  0005d480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a44e0  00000000  00000000  0007b13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f61f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cb4  00000000  00000000  0011f670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c3b4 	.word	0x0800c3b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800c3b4 	.word	0x0800c3b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ece:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ed0:	4a21      	ldr	r2, [pc, #132]	; (8000f58 <MX_ADC1_Init+0x9c>)
 8000ed2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ed6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000edc:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000efe:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <MX_ADC1_Init+0xa0>)
 8000f00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f1e:	f001 fc31 	bl	8002784 <HAL_ADC_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f28:	f001 f83e 	bl	8001fa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f30:	2301      	movs	r3, #1
 8000f32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f3e:	f001 fedf 	bl	8002d00 <HAL_ADC_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f48:	f001 f82e 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200001fc 	.word	0x200001fc
 8000f58:	40012000 	.word	0x40012000
 8000f5c:	0f000001 	.word	0x0f000001

08000f60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <HAL_ADC_MspInit+0x8c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d12f      	bne.n	8000fe2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <HAL_ADC_MspInit+0x90>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a19      	ldr	r2, [pc, #100]	; (8000ff0 <HAL_ADC_MspInit+0x90>)
 8000f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <HAL_ADC_MspInit+0x90>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <HAL_ADC_MspInit+0x90>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <HAL_ADC_MspInit+0x90>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <HAL_ADC_MspInit+0x90>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <HAL_ADC_MspInit+0x94>)
 8000fce:	f002 fda3 	bl	8003b18 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2105      	movs	r1, #5
 8000fd6:	2012      	movs	r0, #18
 8000fd8:	f002 f972 	bl	80032c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000fdc:	2012      	movs	r0, #18
 8000fde:	f002 f98b 	bl	80032f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	; 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40012000 	.word	0x40012000
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <MX_DMA_Init+0x4c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <MX_DMA_Init+0x4c>)
 8001008:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <MX_DMA_Init+0x4c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2105      	movs	r1, #5
 800101e:	203a      	movs	r0, #58	; 0x3a
 8001020:	f002 f94e 	bl	80032c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001024:	203a      	movs	r0, #58	; 0x3a
 8001026:	f002 f967 	bl	80032f8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2105      	movs	r1, #5
 800102e:	2046      	movs	r0, #70	; 0x46
 8001030:	f002 f946 	bl	80032c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001034:	2046      	movs	r0, #70	; 0x46
 8001036:	f002 f95f 	bl	80032f8 <HAL_NVIC_EnableIRQ>

}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800

08001048 <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationTickHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4a07      	ldr	r2, [pc, #28]	; (8001090 <vApplicationGetIdleTaskMemory+0x2c>)
 8001074:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <vApplicationGetIdleTaskMemory+0x30>)
 800107a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2280      	movs	r2, #128	; 0x80
 8001080:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	2000048c 	.word	0x2000048c
 8001094:	200004e0 	.word	0x200004e0

08001098 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80010a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <vApplicationGetTimerTaskMemory+0x30>)
 80010ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	200006e0 	.word	0x200006e0
 80010c8:	20000734 	.word	0x20000734

080010cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b0d6      	sub	sp, #344	; 0x158
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of MUTEX_ADC_GOING */
  osMutexDef(MUTEX_ADC_GOING);
 80010d2:	2300      	movs	r3, #0
 80010d4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  MUTEX_ADC_GOINGHandle = osMutexCreate(osMutex(MUTEX_ADC_GOING));
 80010de:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80010e2:	4618      	mov	r0, r3
 80010e4:	f005 fa88 	bl	80065f8 <osMutexCreate>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4a98      	ldr	r2, [pc, #608]	; (800134c <MX_FREERTOS_Init+0x280>)
 80010ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of MUTEX_UART_GOING */
  osMutexDef(MUTEX_UART_GOING);
 80010ee:	2300      	movs	r3, #0
 80010f0:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  MUTEX_UART_GOINGHandle = osMutexCreate(osMutex(MUTEX_UART_GOING));
 80010fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80010fe:	4618      	mov	r0, r3
 8001100:	f005 fa7a 	bl	80065f8 <osMutexCreate>
 8001104:	4603      	mov	r3, r0
 8001106:	4a92      	ldr	r2, [pc, #584]	; (8001350 <MX_FREERTOS_Init+0x284>)
 8001108:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of SEM_BIN_ADC_COMPLETE */
  osSemaphoreDef(SEM_BIN_ADC_COMPLETE);
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  SEM_BIN_ADC_COMPLETEHandle = osSemaphoreCreate(osSemaphore(SEM_BIN_ADC_COMPLETE), 1);
 8001116:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800111a:	2101      	movs	r1, #1
 800111c:	4618      	mov	r0, r3
 800111e:	f005 fa83 	bl	8006628 <osSemaphoreCreate>
 8001122:	4603      	mov	r3, r0
 8001124:	4a8b      	ldr	r2, [pc, #556]	; (8001354 <MX_FREERTOS_Init+0x288>)
 8001126:	6013      	str	r3, [r2, #0]

  /* definition and creation of SEM_BIN_UART_COMPLETE */
  osSemaphoreDef(SEM_BIN_UART_COMPLETE);
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800112e:	2300      	movs	r3, #0
 8001130:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  SEM_BIN_UART_COMPLETEHandle = osSemaphoreCreate(osSemaphore(SEM_BIN_UART_COMPLETE), 1);
 8001134:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001138:	2101      	movs	r1, #1
 800113a:	4618      	mov	r0, r3
 800113c:	f005 fa74 	bl	8006628 <osSemaphoreCreate>
 8001140:	4603      	mov	r3, r0
 8001142:	4a85      	ldr	r2, [pc, #532]	; (8001358 <MX_FREERTOS_Init+0x28c>)
 8001144:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of RTOS_TIMER_1 */
  osTimerDef(RTOS_TIMER_1, TIMER_CALLBACK);
 8001146:	4b85      	ldr	r3, [pc, #532]	; (800135c <MX_FREERTOS_Init+0x290>)
 8001148:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800114c:	2300      	movs	r3, #0
 800114e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  RTOS_TIMER_1Handle = osTimerCreate(osTimer(RTOS_TIMER_1), osTimerPeriodic, NULL);
 8001152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001156:	2200      	movs	r2, #0
 8001158:	2101      	movs	r1, #1
 800115a:	4618      	mov	r0, r3
 800115c:	f005 fa18 	bl	8006590 <osTimerCreate>
 8001160:	4603      	mov	r3, r0
 8001162:	4a7f      	ldr	r2, [pc, #508]	; (8001360 <MX_FREERTOS_Init+0x294>)
 8001164:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of ADC_QUEUE_UART_TX */
  osMessageQDef(ADC_QUEUE_UART_TX, 1, uint16_t);
 8001166:	4b7f      	ldr	r3, [pc, #508]	; (8001364 <MX_FREERTOS_Init+0x298>)
 8001168:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800116c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800116e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ADC_QUEUE_UART_TXHandle = osMessageCreate(osMessageQ(ADC_QUEUE_UART_TX), NULL);
 8001172:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f005 fa87 	bl	800668c <osMessageCreate>
 800117e:	4603      	mov	r3, r0
 8001180:	4a79      	ldr	r2, [pc, #484]	; (8001368 <MX_FREERTOS_Init+0x29c>)
 8001182:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_RX_QUEUE_ADC_TAK */
  osMessageQDef(UART_RX_QUEUE_ADC_TAK, 16, uint16_t);
 8001184:	4b79      	ldr	r3, [pc, #484]	; (800136c <MX_FREERTOS_Init+0x2a0>)
 8001186:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800118a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800118c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UART_RX_QUEUE_ADC_TAKHandle = osMessageCreate(osMessageQ(UART_RX_QUEUE_ADC_TAK), NULL);
 8001190:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f005 fa78 	bl	800668c <osMessageCreate>
 800119c:	4603      	mov	r3, r0
 800119e:	4a74      	ldr	r2, [pc, #464]	; (8001370 <MX_FREERTOS_Init+0x2a4>)
 80011a0:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_RX_QUEUE_UART_TX */
  osMessageQDef(UART_RX_QUEUE_UART_TX, 1, uint8_t);
 80011a2:	4b74      	ldr	r3, [pc, #464]	; (8001374 <MX_FREERTOS_Init+0x2a8>)
 80011a4:	f507 7480 	add.w	r4, r7, #256	; 0x100
 80011a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UART_RX_QUEUE_UART_TXHandle = osMessageCreate(osMessageQ(UART_RX_QUEUE_UART_TX), NULL);
 80011ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f005 fa69 	bl	800668c <osMessageCreate>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a6e      	ldr	r2, [pc, #440]	; (8001378 <MX_FREERTOS_Init+0x2ac>)
 80011be:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_RX_QUEUE_ADC_CONFIG */
  osMessageQDef(UART_RX_QUEUE_ADC_CONFIG, 1, uint8_t);
 80011c0:	4b6c      	ldr	r3, [pc, #432]	; (8001374 <MX_FREERTOS_Init+0x2a8>)
 80011c2:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 80011c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UART_RX_QUEUE_ADC_CONFIGHandle = osMessageCreate(osMessageQ(UART_RX_QUEUE_ADC_CONFIG), NULL);
 80011cc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f005 fa5a 	bl	800668c <osMessageCreate>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a68      	ldr	r2, [pc, #416]	; (800137c <MX_FREERTOS_Init+0x2b0>)
 80011dc:	6013      	str	r3, [r2, #0]

  /* definition and creation of INT_UART_QUEUE_UART_RX */
  osMessageQDef(INT_UART_QUEUE_UART_RX, 1, uint8_t);
 80011de:	4b65      	ldr	r3, [pc, #404]	; (8001374 <MX_FREERTOS_Init+0x2a8>)
 80011e0:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 80011e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  INT_UART_QUEUE_UART_RXHandle = osMessageCreate(osMessageQ(INT_UART_QUEUE_UART_RX), NULL);
 80011ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f005 fa4b 	bl	800668c <osMessageCreate>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a61      	ldr	r2, [pc, #388]	; (8001380 <MX_FREERTOS_Init+0x2b4>)
 80011fa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80011fc:	4b61      	ldr	r3, [pc, #388]	; (8001384 <MX_FREERTOS_Init+0x2b8>)
 80011fe:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8001202:	461d      	mov	r5, r3
 8001204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001208:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800120c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001210:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f005 f959 	bl	80064ce <osThreadCreate>
 800121c:	4603      	mov	r3, r0
 800121e:	4a5a      	ldr	r2, [pc, #360]	; (8001388 <MX_FREERTOS_Init+0x2bc>)
 8001220:	6013      	str	r3, [r2, #0]

  /* definition and creation of IDLE_TASK_1 */
  osThreadDef(IDLE_TASK_1, START_IDLE_TASK_1, osPriorityIdle, 0, 128);
 8001222:	4b5a      	ldr	r3, [pc, #360]	; (800138c <MX_FREERTOS_Init+0x2c0>)
 8001224:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001228:	461d      	mov	r5, r3
 800122a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001232:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IDLE_TASK_1Handle = osThreadCreate(osThread(IDLE_TASK_1), NULL);
 8001236:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f005 f946 	bl	80064ce <osThreadCreate>
 8001242:	4603      	mov	r3, r0
 8001244:	4a52      	ldr	r2, [pc, #328]	; (8001390 <MX_FREERTOS_Init+0x2c4>)
 8001246:	6013      	str	r3, [r2, #0]

  /* definition and creation of ADC_TAKE_TASK */
  osThreadDef(ADC_TAKE_TASK, ADC_TAKE_TASK_INIT, osPriorityNormal, 0, 128);
 8001248:	4b52      	ldr	r3, [pc, #328]	; (8001394 <MX_FREERTOS_Init+0x2c8>)
 800124a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800124e:	461d      	mov	r5, r3
 8001250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001254:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001258:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_TAKE_TASKHandle = osThreadCreate(osThread(ADC_TAKE_TASK), NULL);
 800125c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f005 f933 	bl	80064ce <osThreadCreate>
 8001268:	4603      	mov	r3, r0
 800126a:	4a4b      	ldr	r2, [pc, #300]	; (8001398 <MX_FREERTOS_Init+0x2cc>)
 800126c:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_TX_TASK */
  osThreadDef(UART_TX_TASK, UART_TX_TASK_INIT, osPriorityNormal, 0, 2048);
 800126e:	4b4b      	ldr	r3, [pc, #300]	; (800139c <MX_FREERTOS_Init+0x2d0>)
 8001270:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001274:	461d      	mov	r5, r3
 8001276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800127a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800127e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_TX_TASKHandle = osThreadCreate(osThread(UART_TX_TASK), NULL);
 8001282:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f005 f920 	bl	80064ce <osThreadCreate>
 800128e:	4603      	mov	r3, r0
 8001290:	4a43      	ldr	r2, [pc, #268]	; (80013a0 <MX_FREERTOS_Init+0x2d4>)
 8001292:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_RX_TASK */
  osThreadDef(UART_RX_TASK, UART_RX_TASK_INIT, osPriorityNormal, 0, 128);
 8001294:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001298:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800129c:	4a41      	ldr	r2, [pc, #260]	; (80013a4 <MX_FREERTOS_Init+0x2d8>)
 800129e:	461c      	mov	r4, r3
 80012a0:	4615      	mov	r5, r2
 80012a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_RX_TASKHandle = osThreadCreate(osThread(UART_RX_TASK), NULL);
 80012ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f005 f90a 	bl	80064ce <osThreadCreate>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a3a      	ldr	r2, [pc, #232]	; (80013a8 <MX_FREERTOS_Init+0x2dc>)
 80012be:	6013      	str	r3, [r2, #0]

  /* definition and creation of ADC_CONFIG_TASK */
  osThreadDef(ADC_CONFIG_TASK, ADC_CONFIG_TASK_INIT, osPriorityBelowNormal, 0, 128);
 80012c0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80012c8:	4a38      	ldr	r2, [pc, #224]	; (80013ac <MX_FREERTOS_Init+0x2e0>)
 80012ca:	461c      	mov	r4, r3
 80012cc:	4615      	mov	r5, r2
 80012ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_CONFIG_TASKHandle = osThreadCreate(osThread(ADC_CONFIG_TASK), NULL);
 80012da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f005 f8f4 	bl	80064ce <osThreadCreate>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a31      	ldr	r2, [pc, #196]	; (80013b0 <MX_FREERTOS_Init+0x2e4>)
 80012ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of INT_TIMER_TASK */
  osThreadDef(INT_TIMER_TASK, INT_TIMER_TASK_INIT, osPriorityAboveNormal, 0, 128);
 80012ec:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80012f4:	4a2f      	ldr	r2, [pc, #188]	; (80013b4 <MX_FREERTOS_Init+0x2e8>)
 80012f6:	461c      	mov	r4, r3
 80012f8:	4615      	mov	r5, r2
 80012fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001302:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  INT_TIMER_TASKHandle = osThreadCreate(osThread(INT_TIMER_TASK), NULL);
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f005 f8de 	bl	80064ce <osThreadCreate>
 8001312:	4603      	mov	r3, r0
 8001314:	4a28      	ldr	r2, [pc, #160]	; (80013b8 <MX_FREERTOS_Init+0x2ec>)
 8001316:	6013      	str	r3, [r2, #0]

  /* definition and creation of INT_UART_TASK */
  osThreadDef(INT_UART_TASK, INT_UART_TASK_INIT, osPriorityAboveNormal, 0, 128);
 8001318:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800131c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001320:	4a26      	ldr	r2, [pc, #152]	; (80013bc <MX_FREERTOS_Init+0x2f0>)
 8001322:	461c      	mov	r4, r3
 8001324:	4615      	mov	r5, r2
 8001326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800132a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800132e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  INT_UART_TASKHandle = osThreadCreate(osThread(INT_UART_TASK), NULL);
 8001332:	463b      	mov	r3, r7
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f005 f8c9 	bl	80064ce <osThreadCreate>
 800133c:	4603      	mov	r3, r0
 800133e:	4a20      	ldr	r2, [pc, #128]	; (80013c0 <MX_FREERTOS_Init+0x2f4>)
 8001340:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001342:	bf00      	nop
 8001344:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8001348:	46bd      	mov	sp, r7
 800134a:	bdb0      	pop	{r4, r5, r7, pc}
 800134c:	2000047c 	.word	0x2000047c
 8001350:	20000480 	.word	0x20000480
 8001354:	20000484 	.word	0x20000484
 8001358:	20000488 	.word	0x20000488
 800135c:	08001da5 	.word	0x08001da5
 8001360:	20000478 	.word	0x20000478
 8001364:	0800c448 	.word	0x0800c448
 8001368:	20000464 	.word	0x20000464
 800136c:	0800c458 	.word	0x0800c458
 8001370:	20000468 	.word	0x20000468
 8001374:	0800c468 	.word	0x0800c468
 8001378:	2000046c 	.word	0x2000046c
 800137c:	20000470 	.word	0x20000470
 8001380:	20000474 	.word	0x20000474
 8001384:	0800c478 	.word	0x0800c478
 8001388:	20000444 	.word	0x20000444
 800138c:	0800c494 	.word	0x0800c494
 8001390:	20000448 	.word	0x20000448
 8001394:	0800c4b0 	.word	0x0800c4b0
 8001398:	2000044c 	.word	0x2000044c
 800139c:	0800c4cc 	.word	0x0800c4cc
 80013a0:	20000450 	.word	0x20000450
 80013a4:	0800c4e8 	.word	0x0800c4e8
 80013a8:	20000454 	.word	0x20000454
 80013ac:	0800c504 	.word	0x0800c504
 80013b0:	20000458 	.word	0x20000458
 80013b4:	0800c520 	.word	0x0800c520
 80013b8:	2000045c 	.word	0x2000045c
 80013bc:	0800c53c 	.word	0x0800c53c
 80013c0:	20000460 	.word	0x20000460

080013c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  vTaskSuspend(NULL); // SUSPEND ITSELF
 80013cc:	2000      	movs	r0, #0
 80013ce:	f006 fa51 	bl	8007874 <vTaskSuspend>

  int i = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	  osDelay(1);
 80013d6:	2001      	movs	r0, #1
 80013d8:	f005 f8c5 	bl	8006566 <osDelay>
	  i = i+1;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	3301      	adds	r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]

	  if(i==1000)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013e8:	d1f5      	bne.n	80013d6 <StartDefaultTask+0x12>
	  {
		 i = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); //RED FIRST
 80013ee:	2101      	movs	r1, #1
 80013f0:	4801      	ldr	r0, [pc, #4]	; (80013f8 <StartDefaultTask+0x34>)
 80013f2:	f002 fd2e 	bl	8003e52 <HAL_GPIO_TogglePin>
	  osDelay(1);
 80013f6:	e7ee      	b.n	80013d6 <StartDefaultTask+0x12>
 80013f8:	40020400 	.word	0x40020400

080013fc <START_IDLE_TASK_1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_START_IDLE_TASK_1 */
void START_IDLE_TASK_1(void const * argument)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN START_IDLE_TASK_1 */
  /* Infinite loop */

	vTaskSuspend(NULL); // SUSPEND ITSELF
 8001404:	2000      	movs	r0, #0
 8001406:	f006 fa35 	bl	8007874 <vTaskSuspend>

  for(;;)
  {
    osDelay(1);
 800140a:	2001      	movs	r0, #1
 800140c:	f005 f8ab 	bl	8006566 <osDelay>
 8001410:	e7fb      	b.n	800140a <START_IDLE_TASK_1+0xe>
	...

08001414 <ADC_TAKE_TASK_INIT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADC_TAKE_TASK_INIT */
void ADC_TAKE_TASK_INIT(void const * argument)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
		char MSG[10]; //10 CHARACTER BUFFER (80bits) TO TRANSMIT OVER UART

	  /* Infinite loop */
	  for(;;)
	  {
		  osDelay(1);
 800141c:	2001      	movs	r0, #1
 800141e:	f005 f8a2 	bl	8006566 <osDelay>

		//---------------------------------------------------------------
			  // GET ADC VALUE:

			  //START CONVERSION:
			  HAL_ADC_Start(&hadc1); // PASSING ADC HANDLING ADDRES
 8001422:	480c      	ldr	r0, [pc, #48]	; (8001454 <ADC_TAKE_TASK_INIT+0x40>)
 8001424:	f001 f9f2 	bl	800280c <HAL_ADC_Start>

			  // WAIT TO ADC CONVERSION TO COMPLETE:
			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001428:	f04f 31ff 	mov.w	r1, #4294967295
 800142c:	4809      	ldr	r0, [pc, #36]	; (8001454 <ADC_TAKE_TASK_INIT+0x40>)
 800142e:	f001 faa1 	bl	8002974 <HAL_ADC_PollForConversion>

			  //WHEN CONVERSION IS DONE GET 12bit VALUE: (0-4095)
			  RAW_ADC_VALUE = HAL_ADC_GetValue(&hadc1);
 8001432:	4808      	ldr	r0, [pc, #32]	; (8001454 <ADC_TAKE_TASK_INIT+0x40>)
 8001434:	f001 fc39 	bl	8002caa <HAL_ADC_GetValue>
 8001438:	4603      	mov	r3, r0
 800143a:	b29b      	uxth	r3, r3
 800143c:	82fb      	strh	r3, [r7, #22]

			  //MSG[10] = "POBRANO DANE Z ADC";
			 // sprintf(MSG,"POBRANO DANE Z ADC,  %hu\r\n", RAW_ADC_VALUE);
			 // HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);

			  xQueueSend(ADC_QUEUE_UART_TXHandle, &RAW_ADC_VALUE, portMAX_DELAY);
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <ADC_TAKE_TASK_INIT+0x44>)
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	f107 0116 	add.w	r1, r7, #22
 8001446:	2300      	movs	r3, #0
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	f005 fb80 	bl	8006b50 <xQueueGenericSend>
		  osDelay(1);
 8001450:	e7e4      	b.n	800141c <ADC_TAKE_TASK_INIT+0x8>
 8001452:	bf00      	nop
 8001454:	200001fc 	.word	0x200001fc
 8001458:	20000464 	.word	0x20000464

0800145c <UART_TX_TASK_INIT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_TASK_INIT */
void UART_TX_TASK_INIT(void const * argument)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08c      	sub	sp, #48	; 0x30
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	//---------------------------------------------------------------------------------------


		//osTimerStart(RTOS_TIMER_1Handle, 500);

	     uint8_t MODE = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	76fb      	strb	r3, [r7, #27]

		 uint16_t RAW_ADC_VALUE; // 12bit ADC READING
		 //uint16_t VOLTAGE_INT;
		 float VOLTAGE;
		 float DZIELNIK = 1/819;
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28

		 uint16_t RAW_ADC_VALUE_S; // 12bit ADC READING
		 float VOLTAGE_S;
		 int START_STOP = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
		 int CONTINOUS = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c

		 char MSG[10]; //10 CHARACTER BUFFER (80bits) TO TRANSMIT OVER UART
		 int i = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]

		 xQueueReceive(ADC_QUEUE_UART_TXHandle, &RAW_ADC_VALUE, portMAX_DELAY);
 800147a:	4bd2      	ldr	r3, [pc, #840]	; (80017c4 <UART_TX_TASK_INIT+0x368>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f107 0118 	add.w	r1, r7, #24
 8001482:	f04f 32ff 	mov.w	r2, #4294967295
 8001486:	4618      	mov	r0, r3
 8001488:	f005 fcfc 	bl	8006e84 <xQueueReceive>
		 xQueueReceive( UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 800148c:	4bce      	ldr	r3, [pc, #824]	; (80017c8 <UART_TX_TASK_INIT+0x36c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f107 011b 	add.w	r1, r7, #27
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	4618      	mov	r0, r3
 800149a:	f005 fcf3 	bl	8006e84 <xQueueReceive>
	  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 800149e:	2001      	movs	r0, #1
 80014a0:	f005 f861 	bl	8006566 <osDelay>
			  sprintf(MSG,"MODE: %hu\r\n",MODE);
			  HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
*/


	    if(MODE == 0) // START PAGE
 80014a4:	7efb      	ldrb	r3, [r7, #27]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d16f      	bne.n	800158a <UART_TX_TASK_INIT+0x12e>
	    {
	    	//osDelay(100);
	    	CONTINOUS = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c

	        sprintf(MSG,"\033c"); // WYSYLANIE KOMENDY CZYSZCZACEJ OKNO TERMINALA
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	49c6      	ldr	r1, [pc, #792]	; (80017cc <UART_TX_TASK_INIT+0x370>)
 80014b4:	4618      	mov	r0, r3
 80014b6:	f008 fd13 	bl	8009ee0 <siprintf>
	        HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe fe8e 	bl	80001e0 <strlen>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	f107 010c 	add.w	r1, r7, #12
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295
 80014d0:	48bf      	ldr	r0, [pc, #764]	; (80017d0 <UART_TX_TASK_INIT+0x374>)
 80014d2:	f003 fdf6 	bl	80050c2 <HAL_UART_Transmit>

			sprintf(MSG,"SELECT MODE:  %\r\n");
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	49be      	ldr	r1, [pc, #760]	; (80017d4 <UART_TX_TASK_INIT+0x378>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f008 fcff 	bl	8009ee0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80014e2:	f107 030c 	add.w	r3, r7, #12
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe fe7a 	bl	80001e0 <strlen>
 80014ec:	4603      	mov	r3, r0
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	f107 010c 	add.w	r1, r7, #12
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295
 80014f8:	48b5      	ldr	r0, [pc, #724]	; (80017d0 <UART_TX_TASK_INIT+0x374>)
 80014fa:	f003 fde2 	bl	80050c2 <HAL_UART_Transmit>

			sprintf(MSG,"CLICK S TO SINGLE MEASUREMENT  %\r\n");
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	49b5      	ldr	r1, [pc, #724]	; (80017d8 <UART_TX_TASK_INIT+0x37c>)
 8001504:	4618      	mov	r0, r3
 8001506:	f008 fceb 	bl	8009ee0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe fe66 	bl	80001e0 <strlen>
 8001514:	4603      	mov	r3, r0
 8001516:	b29a      	uxth	r2, r3
 8001518:	f107 010c 	add.w	r1, r7, #12
 800151c:	f04f 33ff 	mov.w	r3, #4294967295
 8001520:	48ab      	ldr	r0, [pc, #684]	; (80017d0 <UART_TX_TASK_INIT+0x374>)
 8001522:	f003 fdce 	bl	80050c2 <HAL_UART_Transmit>

			sprintf(MSG,"CLICK C TO CONTINOUS MEASUREMENT %\r\n");
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	49ac      	ldr	r1, [pc, #688]	; (80017dc <UART_TX_TASK_INIT+0x380>)
 800152c:	4618      	mov	r0, r3
 800152e:	f008 fcd7 	bl	8009ee0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe fe52 	bl	80001e0 <strlen>
 800153c:	4603      	mov	r3, r0
 800153e:	b29a      	uxth	r2, r3
 8001540:	f107 010c 	add.w	r1, r7, #12
 8001544:	f04f 33ff 	mov.w	r3, #4294967295
 8001548:	48a1      	ldr	r0, [pc, #644]	; (80017d0 <UART_TX_TASK_INIT+0x374>)
 800154a:	f003 fdba 	bl	80050c2 <HAL_UART_Transmit>

			sprintf(MSG,"CLICK I TO SELECT ADC INPUT %\r\n");
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	49a3      	ldr	r1, [pc, #652]	; (80017e0 <UART_TX_TASK_INIT+0x384>)
 8001554:	4618      	mov	r0, r3
 8001556:	f008 fcc3 	bl	8009ee0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe fe3e 	bl	80001e0 <strlen>
 8001564:	4603      	mov	r3, r0
 8001566:	b29a      	uxth	r2, r3
 8001568:	f107 010c 	add.w	r1, r7, #12
 800156c:	f04f 33ff 	mov.w	r3, #4294967295
 8001570:	4897      	ldr	r0, [pc, #604]	; (80017d0 <UART_TX_TASK_INIT+0x374>)
 8001572:	f003 fda6 	bl	80050c2 <HAL_UART_Transmit>

			 xQueueReceive( UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 8001576:	4b94      	ldr	r3, [pc, #592]	; (80017c8 <UART_TX_TASK_INIT+0x36c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f107 011b 	add.w	r1, r7, #27
 800157e:	f04f 32ff 	mov.w	r2, #4294967295
 8001582:	4618      	mov	r0, r3
 8001584:	f005 fc7e 	bl	8006e84 <xQueueReceive>
 8001588:	e1da      	b.n	8001940 <UART_TX_TASK_INIT+0x4e4>
	    }
	    else if(MODE==1) //POJEDYNCZY POMIAR PAGE
 800158a:	7efb      	ldrb	r3, [r7, #27]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d147      	bne.n	8001620 <UART_TX_TASK_INIT+0x1c4>
	    {
	    	//osDelay(100);
	    	CONTINOUS = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c

	    	sprintf(MSG,"\033c"); // WYSYLANIE KOMENDY CZYSZCZACEJ OKNO TERMINALA
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	498c      	ldr	r1, [pc, #560]	; (80017cc <UART_TX_TASK_INIT+0x370>)
 800159a:	4618      	mov	r0, r3
 800159c:	f008 fca0 	bl	8009ee0 <siprintf>
	        HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe fe1b 	bl	80001e0 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	f107 010c 	add.w	r1, r7, #12
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	4886      	ldr	r0, [pc, #536]	; (80017d0 <UART_TX_TASK_INIT+0x374>)
 80015b8:	f003 fd83 	bl	80050c2 <HAL_UART_Transmit>

	    	sprintf(MSG," CLICK S TO START %\r\n");
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	4988      	ldr	r1, [pc, #544]	; (80017e4 <UART_TX_TASK_INIT+0x388>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f008 fc8c 	bl	8009ee0 <siprintf>
	    	HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe fe07 	bl	80001e0 <strlen>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	f107 010c 	add.w	r1, r7, #12
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	487c      	ldr	r0, [pc, #496]	; (80017d0 <UART_TX_TASK_INIT+0x374>)
 80015e0:	f003 fd6f 	bl	80050c2 <HAL_UART_Transmit>

	    	sprintf(MSG,"CLICK Q TO QUIT %\r\n");
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	497f      	ldr	r1, [pc, #508]	; (80017e8 <UART_TX_TASK_INIT+0x38c>)
 80015ea:	4618      	mov	r0, r3
 80015ec:	f008 fc78 	bl	8009ee0 <siprintf>
	    	HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe fdf3 	bl	80001e0 <strlen>
 80015fa:	4603      	mov	r3, r0
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	f107 010c 	add.w	r1, r7, #12
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	4872      	ldr	r0, [pc, #456]	; (80017d0 <UART_TX_TASK_INIT+0x374>)
 8001608:	f003 fd5b 	bl	80050c2 <HAL_UART_Transmit>

	    	 xQueueReceive( UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 800160c:	4b6e      	ldr	r3, [pc, #440]	; (80017c8 <UART_TX_TASK_INIT+0x36c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f107 011b 	add.w	r1, r7, #27
 8001614:	f04f 32ff 	mov.w	r2, #4294967295
 8001618:	4618      	mov	r0, r3
 800161a:	f005 fc33 	bl	8006e84 <xQueueReceive>
 800161e:	e18f      	b.n	8001940 <UART_TX_TASK_INIT+0x4e4>
	    }
	    else if(MODE==2) //POJEDYNCZY POMIAR START
 8001620:	7efb      	ldrb	r3, [r7, #27]
 8001622:	2b02      	cmp	r3, #2
 8001624:	f040 80be 	bne.w	80017a4 <UART_TX_TASK_INIT+0x348>
	    {
	    	//osDelay(100);
	    	CONTINOUS = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
			   sprintf(MSG,"CLICK Q TO QUIT %hu\r\n");
			   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
	    	//}
			   */
	    	//WAIT TO NEXT CLICK:
	    	xQueueReceive( UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 800162c:	4b66      	ldr	r3, [pc, #408]	; (80017c8 <UART_TX_TASK_INIT+0x36c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f107 011b 	add.w	r1, r7, #27
 8001634:	f04f 32ff 	mov.w	r2, #4294967295
 8001638:	4618      	mov	r0, r3
 800163a:	f005 fc23 	bl	8006e84 <xQueueReceive>

	    	xQueueReceive(ADC_QUEUE_UART_TXHandle, &RAW_ADC_VALUE, portMAX_DELAY);
 800163e:	4b61      	ldr	r3, [pc, #388]	; (80017c4 <UART_TX_TASK_INIT+0x368>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f107 0118 	add.w	r1, r7, #24
 8001646:	f04f 32ff 	mov.w	r2, #4294967295
 800164a:	4618      	mov	r0, r3
 800164c:	f005 fc1a 	bl	8006e84 <xQueueReceive>
			           RAW_ADC_VALUE = (float)RAW_ADC_VALUE;
 8001650:	8b3b      	ldrh	r3, [r7, #24]
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800165a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800165e:	ee17 3a90 	vmov	r3, s15
 8001662:	b29b      	uxth	r3, r3
 8001664:	833b      	strh	r3, [r7, #24]
					  // VOLTAGE = RAW_ADC_VALUE * DZIELNIK;
					   VOLTAGE = RAW_ADC_VALUE/820;
 8001666:	8b3b      	ldrh	r3, [r7, #24]
 8001668:	4a60      	ldr	r2, [pc, #384]	; (80017ec <UART_TX_TASK_INIT+0x390>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	0a1b      	lsrs	r3, r3, #8
 8001670:	b29b      	uxth	r3, r3
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167a:	edc7 7a07 	vstr	s15, [r7, #28]

					   sprintf(MSG,"\033c"); // WYSYLANIE KOMENDY CZYSZCZACEJ OKNO TERMINALA
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	4952      	ldr	r1, [pc, #328]	; (80017cc <UART_TX_TASK_INIT+0x370>)
 8001684:	4618      	mov	r0, r3
 8001686:	f008 fc2b 	bl	8009ee0 <siprintf>
					   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe fda6 	bl	80001e0 <strlen>
 8001694:	4603      	mov	r3, r0
 8001696:	b29a      	uxth	r2, r3
 8001698:	f107 010c 	add.w	r1, r7, #12
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
 80016a0:	484b      	ldr	r0, [pc, #300]	; (80017d0 <UART_TX_TASK_INIT+0x374>)
 80016a2:	f003 fd0e 	bl	80050c2 <HAL_UART_Transmit>

					   sprintf(MSG,"ADC VALUE: %hu\r\n", RAW_ADC_VALUE);
 80016a6:	8b3b      	ldrh	r3, [r7, #24]
 80016a8:	461a      	mov	r2, r3
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	4950      	ldr	r1, [pc, #320]	; (80017f0 <UART_TX_TASK_INIT+0x394>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f008 fc15 	bl	8009ee0 <siprintf>
					   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe fd90 	bl	80001e0 <strlen>
 80016c0:	4603      	mov	r3, r0
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	f107 010c 	add.w	r1, r7, #12
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
 80016cc:	4840      	ldr	r0, [pc, #256]	; (80017d0 <UART_TX_TASK_INIT+0x374>)
 80016ce:	f003 fcf8 	bl	80050c2 <HAL_UART_Transmit>

					   sprintf(MSG,"VOLTAGE:  ");
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	4947      	ldr	r1, [pc, #284]	; (80017f4 <UART_TX_TASK_INIT+0x398>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f008 fc01 	bl	8009ee0 <siprintf>
					   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe fd7c 	bl	80001e0 <strlen>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	f107 010c 	add.w	r1, r7, #12
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295
 80016f4:	4836      	ldr	r0, [pc, #216]	; (80017d0 <UART_TX_TASK_INIT+0x374>)
 80016f6:	f003 fce4 	bl	80050c2 <HAL_UART_Transmit>

					   sprintf(MSG,"%.2f\n:  ", VOLTAGE);
 80016fa:	69f8      	ldr	r0, [r7, #28]
 80016fc:	f7fe ff2c 	bl	8000558 <__aeabi_f2d>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	f107 000c 	add.w	r0, r7, #12
 8001708:	493b      	ldr	r1, [pc, #236]	; (80017f8 <UART_TX_TASK_INIT+0x39c>)
 800170a:	f008 fbe9 	bl	8009ee0 <siprintf>
					  // sprintf(MSG,"%\n:  ", VOLTAGE);
					   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fd64 	bl	80001e0 <strlen>
 8001718:	4603      	mov	r3, r0
 800171a:	b29a      	uxth	r2, r3
 800171c:	f107 010c 	add.w	r1, r7, #12
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
 8001724:	482a      	ldr	r0, [pc, #168]	; (80017d0 <UART_TX_TASK_INIT+0x374>)
 8001726:	f003 fccc 	bl	80050c2 <HAL_UART_Transmit>

					   sprintf(MSG,"V  %\r ");
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	4933      	ldr	r1, [pc, #204]	; (80017fc <UART_TX_TASK_INIT+0x3a0>)
 8001730:	4618      	mov	r0, r3
 8001732:	f008 fbd5 	bl	8009ee0 <siprintf>
					   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8001736:	f107 030c 	add.w	r3, r7, #12
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe fd50 	bl	80001e0 <strlen>
 8001740:	4603      	mov	r3, r0
 8001742:	b29a      	uxth	r2, r3
 8001744:	f107 010c 	add.w	r1, r7, #12
 8001748:	f04f 33ff 	mov.w	r3, #4294967295
 800174c:	4820      	ldr	r0, [pc, #128]	; (80017d0 <UART_TX_TASK_INIT+0x374>)
 800174e:	f003 fcb8 	bl	80050c2 <HAL_UART_Transmit>

					   sprintf(MSG,"CLICK S TO NEXT MEASUREMENT %\r\n");
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	492a      	ldr	r1, [pc, #168]	; (8001800 <UART_TX_TASK_INIT+0x3a4>)
 8001758:	4618      	mov	r0, r3
 800175a:	f008 fbc1 	bl	8009ee0 <siprintf>
					   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fd3c 	bl	80001e0 <strlen>
 8001768:	4603      	mov	r3, r0
 800176a:	b29a      	uxth	r2, r3
 800176c:	f107 010c 	add.w	r1, r7, #12
 8001770:	f04f 33ff 	mov.w	r3, #4294967295
 8001774:	4816      	ldr	r0, [pc, #88]	; (80017d0 <UART_TX_TASK_INIT+0x374>)
 8001776:	f003 fca4 	bl	80050c2 <HAL_UART_Transmit>

					  //---------------------------------------------------------------
					sprintf(MSG,"CLICK Q TO QUIT %\r\n");
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	491a      	ldr	r1, [pc, #104]	; (80017e8 <UART_TX_TASK_INIT+0x38c>)
 8001780:	4618      	mov	r0, r3
 8001782:	f008 fbad 	bl	8009ee0 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fd28 	bl	80001e0 <strlen>
 8001790:	4603      	mov	r3, r0
 8001792:	b29a      	uxth	r2, r3
 8001794:	f107 010c 	add.w	r1, r7, #12
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
 800179c:	480c      	ldr	r0, [pc, #48]	; (80017d0 <UART_TX_TASK_INIT+0x374>)
 800179e:	f003 fc90 	bl	80050c2 <HAL_UART_Transmit>
 80017a2:	e0cd      	b.n	8001940 <UART_TX_TASK_INIT+0x4e4>
	    	MODE = 2;
	    	xQueueReceive(ADC_QUEUE_UART_TXHandle, &RAW_ADC_VALUE, portMAX_DELAY);
	    	 xQueueReceive( UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
	    }
	    */
	    else if(MODE == 4) // CIAGLY POMIAR NAPIECIA CO 0.5 SEK
 80017a4:	7efb      	ldrb	r3, [r7, #27]
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d12c      	bne.n	8001804 <UART_TX_TASK_INIT+0x3a8>
	    {
	    	CONTINOUS = 1;
 80017aa:	2301      	movs	r3, #1
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	    	 xQueueReceive( UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <UART_TX_TASK_INIT+0x36c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f107 011b 	add.w	r1, r7, #27
 80017b6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ba:	4618      	mov	r0, r3
 80017bc:	f005 fb62 	bl	8006e84 <xQueueReceive>
 80017c0:	e0be      	b.n	8001940 <UART_TX_TASK_INIT+0x4e4>
 80017c2:	bf00      	nop
 80017c4:	20000464 	.word	0x20000464
 80017c8:	2000046c 	.word	0x2000046c
 80017cc:	0800c558 	.word	0x0800c558
 80017d0:	20000c10 	.word	0x20000c10
 80017d4:	0800c55c 	.word	0x0800c55c
 80017d8:	0800c570 	.word	0x0800c570
 80017dc:	0800c594 	.word	0x0800c594
 80017e0:	0800c5bc 	.word	0x0800c5bc
 80017e4:	0800c5dc 	.word	0x0800c5dc
 80017e8:	0800c5f4 	.word	0x0800c5f4
 80017ec:	4fec04ff 	.word	0x4fec04ff
 80017f0:	0800c608 	.word	0x0800c608
 80017f4:	0800c61c 	.word	0x0800c61c
 80017f8:	0800c628 	.word	0x0800c628
 80017fc:	0800c634 	.word	0x0800c634
 8001800:	0800c63c 	.word	0x0800c63c
	    }
	    else if(MODE == 5) // WYBOR WEJSCIA ADC
 8001804:	7efb      	ldrb	r3, [r7, #27]
 8001806:	2b05      	cmp	r3, #5
 8001808:	f040 809a 	bne.w	8001940 <UART_TX_TASK_INIT+0x4e4>
	    {
	    	//osDelay(100);
	    	CONTINOUS = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c

	    	MSG[10]="";
 8001810:	4ba1      	ldr	r3, [pc, #644]	; (8001a98 <UART_TX_TASK_INIT+0x63c>)
 8001812:	b2db      	uxtb	r3, r3
 8001814:	75bb      	strb	r3, [r7, #22]
	    	sprintf(MSG,"\033c"); // WYSYLANIE KOMENDY CZYSZCZACEJ OKNO TERMINALA
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	49a0      	ldr	r1, [pc, #640]	; (8001a9c <UART_TX_TASK_INIT+0x640>)
 800181c:	4618      	mov	r0, r3
 800181e:	f008 fb5f 	bl	8009ee0 <siprintf>
	    	HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8001822:	f107 030c 	add.w	r3, r7, #12
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fcda 	bl	80001e0 <strlen>
 800182c:	4603      	mov	r3, r0
 800182e:	b29a      	uxth	r2, r3
 8001830:	f107 010c 	add.w	r1, r7, #12
 8001834:	f04f 33ff 	mov.w	r3, #4294967295
 8001838:	4899      	ldr	r0, [pc, #612]	; (8001aa0 <UART_TX_TASK_INIT+0x644>)
 800183a:	f003 fc42 	bl	80050c2 <HAL_UART_Transmit>

			sprintf(MSG,"SELECT PIN: %\r\n");
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	4998      	ldr	r1, [pc, #608]	; (8001aa4 <UART_TX_TASK_INIT+0x648>)
 8001844:	4618      	mov	r0, r3
 8001846:	f008 fb4b 	bl	8009ee0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fcc6 	bl	80001e0 <strlen>
 8001854:	4603      	mov	r3, r0
 8001856:	b29a      	uxth	r2, r3
 8001858:	f107 010c 	add.w	r1, r7, #12
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
 8001860:	488f      	ldr	r0, [pc, #572]	; (8001aa0 <UART_TX_TASK_INIT+0x644>)
 8001862:	f003 fc2e 	bl	80050c2 <HAL_UART_Transmit>

			sprintf(MSG,"CLICK 1 TO SELECT PIN 1 %\r\n");
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	498f      	ldr	r1, [pc, #572]	; (8001aa8 <UART_TX_TASK_INIT+0x64c>)
 800186c:	4618      	mov	r0, r3
 800186e:	f008 fb37 	bl	8009ee0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fcb2 	bl	80001e0 <strlen>
 800187c:	4603      	mov	r3, r0
 800187e:	b29a      	uxth	r2, r3
 8001880:	f107 010c 	add.w	r1, r7, #12
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
 8001888:	4885      	ldr	r0, [pc, #532]	; (8001aa0 <UART_TX_TASK_INIT+0x644>)
 800188a:	f003 fc1a 	bl	80050c2 <HAL_UART_Transmit>

			sprintf(MSG,"CLICK 2 TO SELECT PIN 2 %\r\n");
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	4986      	ldr	r1, [pc, #536]	; (8001aac <UART_TX_TASK_INIT+0x650>)
 8001894:	4618      	mov	r0, r3
 8001896:	f008 fb23 	bl	8009ee0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fc9e 	bl	80001e0 <strlen>
 80018a4:	4603      	mov	r3, r0
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	f107 010c 	add.w	r1, r7, #12
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
 80018b0:	487b      	ldr	r0, [pc, #492]	; (8001aa0 <UART_TX_TASK_INIT+0x644>)
 80018b2:	f003 fc06 	bl	80050c2 <HAL_UART_Transmit>

			sprintf(MSG,"CLICK 3 TO SELECT PIN 3 %\r\n");
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	497d      	ldr	r1, [pc, #500]	; (8001ab0 <UART_TX_TASK_INIT+0x654>)
 80018bc:	4618      	mov	r0, r3
 80018be:	f008 fb0f 	bl	8009ee0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fc8a 	bl	80001e0 <strlen>
 80018cc:	4603      	mov	r3, r0
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	f107 010c 	add.w	r1, r7, #12
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
 80018d8:	4871      	ldr	r0, [pc, #452]	; (8001aa0 <UART_TX_TASK_INIT+0x644>)
 80018da:	f003 fbf2 	bl	80050c2 <HAL_UART_Transmit>

			sprintf(MSG,"CLICK 4 TO SELECT PIN 4 %\r\n");
 80018de:	f107 030c 	add.w	r3, r7, #12
 80018e2:	4974      	ldr	r1, [pc, #464]	; (8001ab4 <UART_TX_TASK_INIT+0x658>)
 80018e4:	4618      	mov	r0, r3
 80018e6:	f008 fafb 	bl	8009ee0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fc76 	bl	80001e0 <strlen>
 80018f4:	4603      	mov	r3, r0
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	f107 010c 	add.w	r1, r7, #12
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001900:	4867      	ldr	r0, [pc, #412]	; (8001aa0 <UART_TX_TASK_INIT+0x644>)
 8001902:	f003 fbde 	bl	80050c2 <HAL_UART_Transmit>

			sprintf(MSG,"CLICK Q TO QUIT %\r\n");
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	496b      	ldr	r1, [pc, #428]	; (8001ab8 <UART_TX_TASK_INIT+0x65c>)
 800190c:	4618      	mov	r0, r3
 800190e:	f008 fae7 	bl	8009ee0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fc62 	bl	80001e0 <strlen>
 800191c:	4603      	mov	r3, r0
 800191e:	b29a      	uxth	r2, r3
 8001920:	f107 010c 	add.w	r1, r7, #12
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
 8001928:	485d      	ldr	r0, [pc, #372]	; (8001aa0 <UART_TX_TASK_INIT+0x644>)
 800192a:	f003 fbca 	bl	80050c2 <HAL_UART_Transmit>
			 xQueueReceive( UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 800192e:	4b63      	ldr	r3, [pc, #396]	; (8001abc <UART_TX_TASK_INIT+0x660>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f107 011b 	add.w	r1, r7, #27
 8001936:	f04f 32ff 	mov.w	r2, #4294967295
 800193a:	4618      	mov	r0, r3
 800193c:	f005 faa2 	bl	8006e84 <xQueueReceive>
	    }

	    if (CONTINOUS == 1)
 8001940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001942:	2b01      	cmp	r3, #1
 8001944:	f47f adab 	bne.w	800149e <UART_TX_TASK_INIT+0x42>
	    {
	    	osDelay(300);
 8001948:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800194c:	f004 fe0b 	bl	8006566 <osDelay>
	    	xQueueReceive(ADC_QUEUE_UART_TXHandle, &RAW_ADC_VALUE, portMAX_DELAY);
 8001950:	4b5b      	ldr	r3, [pc, #364]	; (8001ac0 <UART_TX_TASK_INIT+0x664>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f107 0118 	add.w	r1, r7, #24
 8001958:	f04f 32ff 	mov.w	r2, #4294967295
 800195c:	4618      	mov	r0, r3
 800195e:	f005 fa91 	bl	8006e84 <xQueueReceive>
						//    if(i==500)
						  //  {
							//	i = 0;
							//---------------------------------------------------------------

							   RAW_ADC_VALUE = (float)RAW_ADC_VALUE;
 8001962:	8b3b      	ldrh	r3, [r7, #24]
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800196c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001970:	ee17 3a90 	vmov	r3, s15
 8001974:	b29b      	uxth	r3, r3
 8001976:	833b      	strh	r3, [r7, #24]
							   VOLTAGE = RAW_ADC_VALUE * DZIELNIK;
 8001978:	8b3b      	ldrh	r3, [r7, #24]
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001982:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800198a:	edc7 7a07 	vstr	s15, [r7, #28]
							   VOLTAGE = RAW_ADC_VALUE/820;
 800198e:	8b3b      	ldrh	r3, [r7, #24]
 8001990:	4a4c      	ldr	r2, [pc, #304]	; (8001ac4 <UART_TX_TASK_INIT+0x668>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	b29b      	uxth	r3, r3
 800199a:	ee07 3a90 	vmov	s15, r3
 800199e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a2:	edc7 7a07 	vstr	s15, [r7, #28]

							   sprintf(MSG,"\033c"); // WYSYLANIE KOMENDY CZYSZCZACEJ OKNO TERMINALA
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	493c      	ldr	r1, [pc, #240]	; (8001a9c <UART_TX_TASK_INIT+0x640>)
 80019ac:	4618      	mov	r0, r3
 80019ae:	f008 fa97 	bl	8009ee0 <siprintf>
							   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fc12 	bl	80001e0 <strlen>
 80019bc:	4603      	mov	r3, r0
 80019be:	b29a      	uxth	r2, r3
 80019c0:	f107 010c 	add.w	r1, r7, #12
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
 80019c8:	4835      	ldr	r0, [pc, #212]	; (8001aa0 <UART_TX_TASK_INIT+0x644>)
 80019ca:	f003 fb7a 	bl	80050c2 <HAL_UART_Transmit>

							   // CONVERT TO STRING: (HAVE TO INCLUDE LIB <string.h> <stdio.h>
							   sprintf(MSG,"ADC VALUE: %hu\r\n", RAW_ADC_VALUE);
 80019ce:	8b3b      	ldrh	r3, [r7, #24]
 80019d0:	461a      	mov	r2, r3
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	493c      	ldr	r1, [pc, #240]	; (8001ac8 <UART_TX_TASK_INIT+0x66c>)
 80019d8:	4618      	mov	r0, r3
 80019da:	f008 fa81 	bl	8009ee0 <siprintf>
							   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80019de:	f107 030c 	add.w	r3, r7, #12
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fbfc 	bl	80001e0 <strlen>
 80019e8:	4603      	mov	r3, r0
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	f107 010c 	add.w	r1, r7, #12
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295
 80019f4:	482a      	ldr	r0, [pc, #168]	; (8001aa0 <UART_TX_TASK_INIT+0x644>)
 80019f6:	f003 fb64 	bl	80050c2 <HAL_UART_Transmit>

							   MSG[10]="";
 80019fa:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <UART_TX_TASK_INIT+0x63c>)
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	75bb      	strb	r3, [r7, #22]
							   //sprintf(MSG,"VOLTAGE:  %hu\r\n ", VOLTAGE);
							   //-------------------------------------------------------------
							   //IMPORTANT
							   // FOR THIS FUNCTION SPRINTF WITH FLOAT - BIGER STACK SIZE IS NEEDED!!!
							   // HAVE TO CHANGE STACK SIZE OF THE TASK TO WORK
							   sprintf(MSG,"VOLTAGE: %f ", VOLTAGE);
 8001a00:	69f8      	ldr	r0, [r7, #28]
 8001a02:	f7fe fda9 	bl	8000558 <__aeabi_f2d>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	f107 000c 	add.w	r0, r7, #12
 8001a0e:	492f      	ldr	r1, [pc, #188]	; (8001acc <UART_TX_TASK_INIT+0x670>)
 8001a10:	f008 fa66 	bl	8009ee0 <siprintf>

							   //-------------------------------------------------------------
							 //  sprintf(MSG,"VOLTAGE: %hu ", VOLTAGE);
							   //sprintf(MSG,"VOLTAGE:  %hu\r\n ", RAW_ADC_VALUE/2, "%.2f V");
							   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fbe1 	bl	80001e0 <strlen>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	f107 010c 	add.w	r1, r7, #12
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2a:	481d      	ldr	r0, [pc, #116]	; (8001aa0 <UART_TX_TASK_INIT+0x644>)
 8001a2c:	f003 fb49 	bl	80050c2 <HAL_UART_Transmit>

							   MSG[10]="";
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <UART_TX_TASK_INIT+0x63c>)
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	75bb      	strb	r3, [r7, #22]
							   sprintf(MSG,"V  %\r\n ");
 8001a36:	f107 030c 	add.w	r3, r7, #12
 8001a3a:	4925      	ldr	r1, [pc, #148]	; (8001ad0 <UART_TX_TASK_INIT+0x674>)
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f008 fa4f 	bl	8009ee0 <siprintf>
							   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fbca 	bl	80001e0 <strlen>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	f107 010c 	add.w	r1, r7, #12
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295
 8001a58:	4811      	ldr	r0, [pc, #68]	; (8001aa0 <UART_TX_TASK_INIT+0x644>)
 8001a5a:	f003 fb32 	bl	80050c2 <HAL_UART_Transmit>

							  //---------------------------------------------------------------
							sprintf(MSG,"CLICK Q TO QUIT %\r\n");
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	4915      	ldr	r1, [pc, #84]	; (8001ab8 <UART_TX_TASK_INIT+0x65c>)
 8001a64:	4618      	mov	r0, r3
 8001a66:	f008 fa3b 	bl	8009ee0 <siprintf>
							HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fbb6 	bl	80001e0 <strlen>
 8001a74:	4603      	mov	r3, r0
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	f107 010c 	add.w	r1, r7, #12
 8001a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a80:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <UART_TX_TASK_INIT+0x644>)
 8001a82:	f003 fb1e 	bl	80050c2 <HAL_UART_Transmit>
							//}
							//xQueueReceive( UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
							 xQueuePeek( UART_RX_QUEUE_UART_TXHandle, &MODE,10);
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <UART_TX_TASK_INIT+0x660>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f107 011b 	add.w	r1, r7, #27
 8001a8e:	220a      	movs	r2, #10
 8001a90:	4618      	mov	r0, r3
 8001a92:	f005 fad7 	bl	8007044 <xQueuePeek>
	    osDelay(1);
 8001a96:	e502      	b.n	800149e <UART_TX_TASK_INIT+0x42>
 8001a98:	0800c65c 	.word	0x0800c65c
 8001a9c:	0800c558 	.word	0x0800c558
 8001aa0:	20000c10 	.word	0x20000c10
 8001aa4:	0800c660 	.word	0x0800c660
 8001aa8:	0800c670 	.word	0x0800c670
 8001aac:	0800c68c 	.word	0x0800c68c
 8001ab0:	0800c6a8 	.word	0x0800c6a8
 8001ab4:	0800c6c4 	.word	0x0800c6c4
 8001ab8:	0800c5f4 	.word	0x0800c5f4
 8001abc:	2000046c 	.word	0x2000046c
 8001ac0:	20000464 	.word	0x20000464
 8001ac4:	4fec04ff 	.word	0x4fec04ff
 8001ac8:	0800c608 	.word	0x0800c608
 8001acc:	0800c6e0 	.word	0x0800c6e0
 8001ad0:	0800c6f0 	.word	0x0800c6f0

08001ad4 <UART_RX_TASK_INIT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_TASK_INIT */
void UART_RX_TASK_INIT(void const * argument)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

		//char MSG_READ[10]; //10 CHARACTER BUFFER (80bits) TO TRANSMIT OVER UART
	    //uint8_t MSG_RX[10]; //10 CHARACTER BUFFER (80bits) TO TRANSMIT OVER UART
	    //uint8_t MSG_RX;
	    uint8_t RX_DATA; //10 CHARACTER BUFFER (80bits) TO TRANSMIT OVER UART
		uint8_t MODE = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	72bb      	strb	r3, [r7, #10]
		uint16_t QUEUE_MSG;

	  /* Infinite loop */
	  for(;;)
	  {
		  osDelay(10);
 8001ae0:	200a      	movs	r0, #10
 8001ae2:	f004 fd40 	bl	8006566 <osDelay>
		  // HAL_UART_Receive(&huart1, (uint8_t*)MSG_RX, strlen(MSG_RX), HAL_MAX_DELAY);
		  // HAL_UART_Receive(&huart1, MSG_RX, strlen(MSG_RX), 1000);
		  // HAL_UART_Receive_DMA(&huart1, (uint8_t*)MSG_RX, strlen(MSG_RX));

		 // xQueueSend(INT_UART_QUEUE_UART_RXHandle, &RX_DATA, portMAX_DELAY);
		  xQueueReceive(INT_UART_QUEUE_UART_RXHandle, &RX_DATA, portMAX_DELAY);
 8001ae6:	4b4e      	ldr	r3, [pc, #312]	; (8001c20 <UART_RX_TASK_INIT+0x14c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f107 010b 	add.w	r1, r7, #11
 8001aee:	f04f 32ff 	mov.w	r2, #4294967295
 8001af2:	4618      	mov	r0, r3
 8001af4:	f005 f9c6 	bl	8006e84 <xQueueReceive>


		  if(MODE == 0)
 8001af8:	7abb      	ldrb	r3, [r7, #10]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d136      	bne.n	8001b6c <UART_RX_TASK_INIT+0x98>
		  {
			  if(RX_DATA == 115 || RX_DATA == 83) // ASCI: s / S
 8001afe:	7afb      	ldrb	r3, [r7, #11]
 8001b00:	2b73      	cmp	r3, #115	; 0x73
 8001b02:	d002      	beq.n	8001b0a <UART_RX_TASK_INIT+0x36>
 8001b04:	7afb      	ldrb	r3, [r7, #11]
 8001b06:	2b53      	cmp	r3, #83	; 0x53
 8001b08:	d10d      	bne.n	8001b26 <UART_RX_TASK_INIT+0x52>
			  {
				MODE = 1; //START PAGE == QUIT
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	72bb      	strb	r3, [r7, #10]
				xQueueSend(UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 8001b0e:	4b45      	ldr	r3, [pc, #276]	; (8001c24 <UART_RX_TASK_INIT+0x150>)
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	f107 010a 	add.w	r1, r7, #10
 8001b16:	2300      	movs	r3, #0
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1c:	f005 f818 	bl	8006b50 <xQueueGenericSend>
				RX_DATA = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	72fb      	strb	r3, [r7, #11]
 8001b24:	e022      	b.n	8001b6c <UART_RX_TASK_INIT+0x98>
			  }
			  else if(RX_DATA == 99 || RX_DATA == 67) // ASCI: c / C
 8001b26:	7afb      	ldrb	r3, [r7, #11]
 8001b28:	2b63      	cmp	r3, #99	; 0x63
 8001b2a:	d002      	beq.n	8001b32 <UART_RX_TASK_INIT+0x5e>
 8001b2c:	7afb      	ldrb	r3, [r7, #11]
 8001b2e:	2b43      	cmp	r3, #67	; 0x43
 8001b30:	d10b      	bne.n	8001b4a <UART_RX_TASK_INIT+0x76>
			  {
				MODE = 4; //
 8001b32:	2304      	movs	r3, #4
 8001b34:	72bb      	strb	r3, [r7, #10]
				xQueueSend(UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 8001b36:	4b3b      	ldr	r3, [pc, #236]	; (8001c24 <UART_RX_TASK_INIT+0x150>)
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	f107 010a 	add.w	r1, r7, #10
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f04f 32ff 	mov.w	r2, #4294967295
 8001b44:	f005 f804 	bl	8006b50 <xQueueGenericSend>
 8001b48:	e010      	b.n	8001b6c <UART_RX_TASK_INIT+0x98>
			  }
			  else if(RX_DATA == 105 || RX_DATA == 73) // ASCI: i / I
 8001b4a:	7afb      	ldrb	r3, [r7, #11]
 8001b4c:	2b69      	cmp	r3, #105	; 0x69
 8001b4e:	d002      	beq.n	8001b56 <UART_RX_TASK_INIT+0x82>
 8001b50:	7afb      	ldrb	r3, [r7, #11]
 8001b52:	2b49      	cmp	r3, #73	; 0x49
 8001b54:	d10a      	bne.n	8001b6c <UART_RX_TASK_INIT+0x98>
			  {
				MODE = 5; //
 8001b56:	2305      	movs	r3, #5
 8001b58:	72bb      	strb	r3, [r7, #10]
				xQueueSend(UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 8001b5a:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <UART_RX_TASK_INIT+0x150>)
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	f107 010a 	add.w	r1, r7, #10
 8001b62:	2300      	movs	r3, #0
 8001b64:	f04f 32ff 	mov.w	r2, #4294967295
 8001b68:	f004 fff2 	bl	8006b50 <xQueueGenericSend>
			  }
		  }
		   if(MODE == 1)
 8001b6c:	7abb      	ldrb	r3, [r7, #10]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d110      	bne.n	8001b94 <UART_RX_TASK_INIT+0xc0>
		  {
			  if(RX_DATA == 115 || RX_DATA == 83) // ASCI: s / S
 8001b72:	7afb      	ldrb	r3, [r7, #11]
 8001b74:	2b73      	cmp	r3, #115	; 0x73
 8001b76:	d002      	beq.n	8001b7e <UART_RX_TASK_INIT+0xaa>
 8001b78:	7afb      	ldrb	r3, [r7, #11]
 8001b7a:	2b53      	cmp	r3, #83	; 0x53
 8001b7c:	d10a      	bne.n	8001b94 <UART_RX_TASK_INIT+0xc0>
			  {
				MODE = 2;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	72bb      	strb	r3, [r7, #10]
				xQueueSend(UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 8001b82:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <UART_RX_TASK_INIT+0x150>)
 8001b84:	6818      	ldr	r0, [r3, #0]
 8001b86:	f107 010a 	add.w	r1, r7, #10
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b90:	f004 ffde 	bl	8006b50 <xQueueGenericSend>
			  }
		  }
		   if(MODE == 2)
 8001b94:	7abb      	ldrb	r3, [r7, #10]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d10f      	bne.n	8001bba <UART_RX_TASK_INIT+0xe6>
		  {
			  if(RX_DATA == 115 || RX_DATA == 83) // ASCI: s / S
 8001b9a:	7afb      	ldrb	r3, [r7, #11]
 8001b9c:	2b73      	cmp	r3, #115	; 0x73
 8001b9e:	d002      	beq.n	8001ba6 <UART_RX_TASK_INIT+0xd2>
 8001ba0:	7afb      	ldrb	r3, [r7, #11]
 8001ba2:	2b53      	cmp	r3, #83	; 0x53
 8001ba4:	d11f      	bne.n	8001be6 <UART_RX_TASK_INIT+0x112>
			  {
				xQueueSend(UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <UART_RX_TASK_INIT+0x150>)
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	f107 010a 	add.w	r1, r7, #10
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb4:	f004 ffcc 	bl	8006b50 <xQueueGenericSend>
 8001bb8:	e015      	b.n	8001be6 <UART_RX_TASK_INIT+0x112>
			  {
				 MODE = 3; //
				 xQueueSend(UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
			  }
		  }*/
		  else if(MODE == 5)
 8001bba:	7abb      	ldrb	r3, [r7, #10]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d112      	bne.n	8001be6 <UART_RX_TASK_INIT+0x112>
		  {

			  if(RX_DATA > 47 && RX_DATA < 53) // ASCI: 0,1,2,3
 8001bc0:	7afb      	ldrb	r3, [r7, #11]
 8001bc2:	2b2f      	cmp	r3, #47	; 0x2f
 8001bc4:	d90f      	bls.n	8001be6 <UART_RX_TASK_INIT+0x112>
 8001bc6:	7afb      	ldrb	r3, [r7, #11]
 8001bc8:	2b34      	cmp	r3, #52	; 0x34
 8001bca:	d80c      	bhi.n	8001be6 <UART_RX_TASK_INIT+0x112>
			  {
				 ADC_PIN = RX_DATA - 48;
 8001bcc:	7afb      	ldrb	r3, [r7, #11]
 8001bce:	3b30      	subs	r3, #48	; 0x30
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	727b      	strb	r3, [r7, #9]
				 xQueueSend(UART_RX_QUEUE_ADC_CONFIGHandle, &ADC_PIN, portMAX_DELAY);
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <UART_RX_TASK_INIT+0x154>)
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	f107 0109 	add.w	r1, r7, #9
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f04f 32ff 	mov.w	r2, #4294967295
 8001be2:	f004 ffb5 	bl	8006b50 <xQueueGenericSend>

			  }
		  }

		  if(RX_DATA == 113 || RX_DATA == 81) // ASCI: q / Q
 8001be6:	7afb      	ldrb	r3, [r7, #11]
 8001be8:	2b71      	cmp	r3, #113	; 0x71
 8001bea:	d002      	beq.n	8001bf2 <UART_RX_TASK_INIT+0x11e>
 8001bec:	7afb      	ldrb	r3, [r7, #11]
 8001bee:	2b51      	cmp	r3, #81	; 0x51
 8001bf0:	d10a      	bne.n	8001c08 <UART_RX_TASK_INIT+0x134>
		  {
			  MODE = 0; //START PAGE == QUIT
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	72bb      	strb	r3, [r7, #10]
			  xQueueSend(UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <UART_RX_TASK_INIT+0x150>)
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	f107 010a 	add.w	r1, r7, #10
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f04f 32ff 	mov.w	r2, #4294967295
 8001c04:	f004 ffa4 	bl	8006b50 <xQueueGenericSend>
		  }

		  RX_DATA = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	72fb      	strb	r3, [r7, #11]


		  //xQueueReceive( UART_RX_QUEUE_ADC_CONFIGHandle, &ADC_PIN, portMAX_DELAY);
		  //xQueueReceive( UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);

		  xQueueSend(UART_RX_QUEUE_UART_TXHandle, &MODE, portMAX_DELAY);
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <UART_RX_TASK_INIT+0x150>)
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	f107 010a 	add.w	r1, r7, #10
 8001c14:	2300      	movs	r3, #0
 8001c16:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1a:	f004 ff99 	bl	8006b50 <xQueueGenericSend>
		  osDelay(10);
 8001c1e:	e75f      	b.n	8001ae0 <UART_RX_TASK_INIT+0xc>
 8001c20:	20000474 	.word	0x20000474
 8001c24:	2000046c 	.word	0x2000046c
 8001c28:	20000470 	.word	0x20000470

08001c2c <ADC_CONFIG_TASK_INIT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADC_CONFIG_TASK_INIT */
void ADC_CONFIG_TASK_INIT(void const * argument)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_CONFIG_TASK_INIT */
  /* Infinite loop */

	uint8_t ADC_PIN = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]

  for(;;)
  {
    osDelay(1);
 8001c38:	2001      	movs	r0, #1
 8001c3a:	f004 fc94 	bl	8006566 <osDelay>

    // UART_RX_QUEUE_ADC_CONFIG
    xQueueReceive( UART_RX_QUEUE_ADC_CONFIGHandle, &ADC_PIN, portMAX_DELAY);
 8001c3e:	4b39      	ldr	r3, [pc, #228]	; (8001d24 <ADC_CONFIG_TASK_INIT+0xf8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f107 010f 	add.w	r1, r7, #15
 8001c46:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f005 f91a 	bl	8006e84 <xQueueReceive>

    if(ADC_PIN == 1)
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d116      	bne.n	8001c84 <ADC_CONFIG_TASK_INIT+0x58>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET); //GREEN
 8001c56:	2200      	movs	r2, #0
 8001c58:	2102      	movs	r1, #2
 8001c5a:	4833      	ldr	r0, [pc, #204]	; (8001d28 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001c5c:	f002 f8e0 	bl	8003e20 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,GPIO_PIN_SET); //RED
 8001c60:	2201      	movs	r2, #1
 8001c62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c66:	4830      	ldr	r0, [pc, #192]	; (8001d28 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001c68:	f002 f8da 	bl	8003e20 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET); //BLUE
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c72:	482d      	ldr	r0, [pc, #180]	; (8001d28 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001c74:	f002 f8d4 	bl	8003e20 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET); //YELLOW
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c7e:	482a      	ldr	r0, [pc, #168]	; (8001d28 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001c80:	f002 f8ce 	bl	8003e20 <HAL_GPIO_WritePin>
    }
    if(ADC_PIN == 2)
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d116      	bne.n	8001cb8 <ADC_CONFIG_TASK_INIT+0x8c>
   {
     	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET); //GREEN
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	2102      	movs	r1, #2
 8001c8e:	4826      	ldr	r0, [pc, #152]	; (8001d28 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001c90:	f002 f8c6 	bl	8003e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,GPIO_PIN_RESET); //RED
 8001c94:	2200      	movs	r2, #0
 8001c96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c9a:	4823      	ldr	r0, [pc, #140]	; (8001d28 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001c9c:	f002 f8c0 	bl	8003e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET); //BLUE
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ca6:	4820      	ldr	r0, [pc, #128]	; (8001d28 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001ca8:	f002 f8ba 	bl	8003e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET); //YELLOW
 8001cac:	2201      	movs	r2, #1
 8001cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb2:	481d      	ldr	r0, [pc, #116]	; (8001d28 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001cb4:	f002 f8b4 	bl	8003e20 <HAL_GPIO_WritePin>

   }
    if(ADC_PIN == 3)
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d116      	bne.n	8001cec <ADC_CONFIG_TASK_INIT+0xc0>
   {
     	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET); //GREEN
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	4819      	ldr	r0, [pc, #100]	; (8001d28 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001cc4:	f002 f8ac 	bl	8003e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,GPIO_PIN_SET); //RED
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cce:	4816      	ldr	r0, [pc, #88]	; (8001d28 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001cd0:	f002 f8a6 	bl	8003e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET); //BLUE
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cda:	4813      	ldr	r0, [pc, #76]	; (8001d28 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001cdc:	f002 f8a0 	bl	8003e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET); //YELLOW
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ce6:	4810      	ldr	r0, [pc, #64]	; (8001d28 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001ce8:	f002 f89a 	bl	8003e20 <HAL_GPIO_WritePin>

   }
    if(ADC_PIN == 4)
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d1a2      	bne.n	8001c38 <ADC_CONFIG_TASK_INIT+0xc>
   {
     	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET); //GREEN
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	480c      	ldr	r0, [pc, #48]	; (8001d28 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001cf8:	f002 f892 	bl	8003e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,GPIO_PIN_SET); //RED
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d02:	4809      	ldr	r0, [pc, #36]	; (8001d28 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001d04:	f002 f88c 	bl	8003e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET); //BLUE
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d0e:	4806      	ldr	r0, [pc, #24]	; (8001d28 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001d10:	f002 f886 	bl	8003e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET); //YELLOW
 8001d14:	2200      	movs	r2, #0
 8001d16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d1a:	4803      	ldr	r0, [pc, #12]	; (8001d28 <ADC_CONFIG_TASK_INIT+0xfc>)
 8001d1c:	f002 f880 	bl	8003e20 <HAL_GPIO_WritePin>
    osDelay(1);
 8001d20:	e78a      	b.n	8001c38 <ADC_CONFIG_TASK_INIT+0xc>
 8001d22:	bf00      	nop
 8001d24:	20000470 	.word	0x20000470
 8001d28:	40020400 	.word	0x40020400

08001d2c <INT_TIMER_TASK_INIT>:



/* USER CODE END Header_INT_TIMER_TASK_INIT */
void INT_TIMER_TASK_INIT(void const * argument)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN INT_TIMER_TASK_INIT */
  /* Infinite loop */
  for(;;)
  {
    vTaskSuspend(NULL); // SUSPEND ITSELF
 8001d34:	2000      	movs	r0, #0
 8001d36:	f005 fd9d 	bl	8007874 <vTaskSuspend>
    // TASK WILL RUN WHEN ISR OCCOUR

    //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);

    HAL_TIM_Base_Start_IT(&htim11); // WZNOWIENIE TIMERA
 8001d3a:	4802      	ldr	r0, [pc, #8]	; (8001d44 <INT_TIMER_TASK_INIT+0x18>)
 8001d3c:	f002 fd7e 	bl	800483c <HAL_TIM_Base_Start_IT>
    vTaskSuspend(NULL); // SUSPEND ITSELF
 8001d40:	e7f8      	b.n	8001d34 <INT_TIMER_TASK_INIT+0x8>
 8001d42:	bf00      	nop
 8001d44:	20000bc8 	.word	0x20000bc8

08001d48 <INT_UART_TASK_INIT>:



/* USER CODE END Header_INT_UART_TASK_INIT */
void INT_UART_TASK_INIT(void const * argument)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart1, MSG_RX, 2);

	//-----------------------------------------------------------------
	uint8_t RX_DATA;
	// START THE DMA:
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) RxBuf, RxBuf_SIZE);
 8001d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d54:	490f      	ldr	r1, [pc, #60]	; (8001d94 <INT_UART_TASK_INIT+0x4c>)
 8001d56:	4810      	ldr	r0, [pc, #64]	; (8001d98 <INT_UART_TASK_INIT+0x50>)
 8001d58:	f003 fa45 	bl	80051e6 <HAL_UARTEx_ReceiveToIdle_DMA>
	//__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);

  for(;;)
  {
	  vTaskSuspend(NULL); // SUSPEND ITSELF
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f005 fd89 	bl	8007874 <vTaskSuspend>
	  // TASK WILL RUN WHEN ISR OCCOUR

	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //BLUE DIODE
 8001d62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d66:	480d      	ldr	r0, [pc, #52]	; (8001d9c <INT_UART_TASK_INIT+0x54>)
 8001d68:	f002 f873 	bl	8003e52 <HAL_GPIO_TogglePin>
	  // HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);

	  //sprintf(MSG,"CLICKED: %hu\r\n",RxBuf[0]);
	  //HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);

	  RX_DATA = RxBuf[0];
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <INT_UART_TASK_INIT+0x4c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	73fb      	strb	r3, [r7, #15]
	  xQueueSend(INT_UART_QUEUE_UART_RXHandle, &RX_DATA, portMAX_DELAY);
 8001d74:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <INT_UART_TASK_INIT+0x58>)
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	f107 010f 	add.w	r1, r7, #15
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d82:	f004 fee5 	bl	8006b50 <xQueueGenericSend>

	  // START THE DMA AGAIN:
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) RxBuf, RxBuf_SIZE);
 8001d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d8a:	4902      	ldr	r1, [pc, #8]	; (8001d94 <INT_UART_TASK_INIT+0x4c>)
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <INT_UART_TASK_INIT+0x50>)
 8001d8e:	f003 fa2a 	bl	80051e6 <HAL_UARTEx_ReceiveToIdle_DMA>
	  vTaskSuspend(NULL); // SUSPEND ITSELF
 8001d92:	e7e3      	b.n	8001d5c <INT_UART_TASK_INIT+0x14>
 8001d94:	20000244 	.word	0x20000244
 8001d98:	20000c10 	.word	0x20000c10
 8001d9c:	40020400 	.word	0x40020400
 8001da0:	20000474 	.word	0x20000474

08001da4 <TIMER_CALLBACK>:
  /* USER CODE END INT_UART_TASK_INIT */
}

/* TIMER_CALLBACK function */
void TIMER_CALLBACK(void const * argument)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_CALLBACK */

  /* USER CODE END TIMER_CALLBACK */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_UARTEx_RxEventCallback>:
	   portYIELD_FROM_ISR(checkIfYieldRequired);
}
*/

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]

 //-------------------------------------------------------
 // WZNAWIANIE ZADANIA DO OBS�?UGI TEGO PRZERWANIA:
    BaseType_t checkIfYieldRequired;
 // xTaskResumeFromISR( TASK_HANDLER)
	checkIfYieldRequired = xTaskResumeFromISR(INT_UART_TASKHandle);
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_UARTEx_RxEventCallback+0x38>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f005 fe17 	bl	80079fc <xTaskResumeFromISR>
 8001dce:	60f8      	str	r0, [r7, #12]
	portYIELD_FROM_ISR(checkIfYieldRequired);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <HAL_UARTEx_RxEventCallback+0x2e>
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	f3bf 8f4f 	dsb	sy
 8001de2:	f3bf 8f6f 	isb	sy
				isOK = 1;
			}
		}
*/

}
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000460 	.word	0x20000460
 8001df4:	e000ed04 	.word	0xe000ed04

08001df8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfe:	f107 030c 	add.w	r3, r7, #12
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]
 8001e0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <MX_GPIO_Init+0x80>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a18      	ldr	r2, [pc, #96]	; (8001e78 <MX_GPIO_Init+0x80>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <MX_GPIO_Init+0x80>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <MX_GPIO_Init+0x80>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <MX_GPIO_Init+0x80>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <MX_GPIO_Init+0x80>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14
 8001e46:	2200      	movs	r2, #0
 8001e48:	f24e 0103 	movw	r1, #57347	; 0xe003
 8001e4c:	480b      	ldr	r0, [pc, #44]	; (8001e7c <MX_GPIO_Init+0x84>)
 8001e4e:	f001 ffe7 	bl	8003e20 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14
 8001e52:	f24e 0303 	movw	r3, #57347	; 0xe003
 8001e56:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001e58:	2311      	movs	r3, #17
 8001e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e64:	f107 030c 	add.w	r3, r7, #12
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4804      	ldr	r0, [pc, #16]	; (8001e7c <MX_GPIO_Init+0x84>)
 8001e6c:	f001 fe54 	bl	8003b18 <HAL_GPIO_Init>

}
 8001e70:	bf00      	nop
 8001e72:	3720      	adds	r7, #32
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020400 	.word	0x40020400

08001e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e84:	f000 fc3c 	bl	8002700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e88:	f000 f812 	bl	8001eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e8c:	f7ff ffb4 	bl	8001df8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e90:	f7ff f8b2 	bl	8000ff8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001e94:	f7ff f812 	bl	8000ebc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001e98:	f000 fb26 	bl	80024e8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001e9c:	f000 fa62 	bl	8002364 <MX_TIM1_Init>
  MX_TIM11_Init();
 8001ea0:	f000 fab0 	bl	8002404 <MX_TIM11_Init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001ea4:	f7ff f912 	bl	80010cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001ea8:	f004 fb0a 	bl	80064c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <main+0x2c>
	...

08001eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b094      	sub	sp, #80	; 0x50
 8001eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eb6:	f107 0320 	add.w	r3, r7, #32
 8001eba:	2230      	movs	r2, #48	; 0x30
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f007 fb9c 	bl	80095fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	4b28      	ldr	r3, [pc, #160]	; (8001f7c <SystemClock_Config+0xcc>)
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	4a27      	ldr	r2, [pc, #156]	; (8001f7c <SystemClock_Config+0xcc>)
 8001ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee4:	4b25      	ldr	r3, [pc, #148]	; (8001f7c <SystemClock_Config+0xcc>)
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <SystemClock_Config+0xd0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001efc:	4a20      	ldr	r2, [pc, #128]	; (8001f80 <SystemClock_Config+0xd0>)
 8001efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <SystemClock_Config+0xd0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f10:	2302      	movs	r3, #2
 8001f12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f14:	2301      	movs	r3, #1
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f18:	2310      	movs	r3, #16
 8001f1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f20:	2300      	movs	r3, #0
 8001f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001f24:	2310      	movs	r3, #16
 8001f26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f28:	23a8      	movs	r3, #168	; 0xa8
 8001f2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f30:	2304      	movs	r3, #4
 8001f32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f34:	f107 0320 	add.w	r3, r7, #32
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f001 ffa5 	bl	8003e88 <HAL_RCC_OscConfig>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f44:	f000 f830 	bl	8001fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f48:	230f      	movs	r3, #15
 8001f4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f5e:	f107 030c 	add.w	r3, r7, #12
 8001f62:	2102      	movs	r1, #2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f002 fa07 	bl	8004378 <HAL_RCC_ClockConfig>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f70:	f000 f81a 	bl	8001fa8 <Error_Handler>
  }
}
 8001f74:	bf00      	nop
 8001f76:	3750      	adds	r7, #80	; 0x50
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40007000 	.word	0x40007000

08001f84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d101      	bne.n	8001f9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f96:	f000 fbd5 	bl	8002744 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40014400 	.word	0x40014400

08001fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fac:	b672      	cpsid	i
}
 8001fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <Error_Handler+0x8>
	...

08001fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_MspInit+0x54>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a11      	ldr	r2, [pc, #68]	; (8002008 <HAL_MspInit+0x54>)
 8001fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_MspInit+0x54>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_MspInit+0x54>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_MspInit+0x54>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_MspInit+0x54>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	210f      	movs	r1, #15
 8001ff6:	f06f 0001 	mvn.w	r0, #1
 8001ffa:	f001 f961 	bl	80032c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800

0800200c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08c      	sub	sp, #48	; 0x30
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <HAL_InitTick+0xd0>)
 8002022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002024:	4a2d      	ldr	r2, [pc, #180]	; (80020dc <HAL_InitTick+0xd0>)
 8002026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202a:	6453      	str	r3, [r2, #68]	; 0x44
 800202c:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <HAL_InitTick+0xd0>)
 800202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002038:	f107 020c 	add.w	r2, r7, #12
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f002 fb78 	bl	8004738 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002048:	f002 fb62 	bl	8004710 <HAL_RCC_GetPCLK2Freq>
 800204c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800204e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002050:	4a23      	ldr	r2, [pc, #140]	; (80020e0 <HAL_InitTick+0xd4>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	0c9b      	lsrs	r3, r3, #18
 8002058:	3b01      	subs	r3, #1
 800205a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <HAL_InitTick+0xd8>)
 800205e:	4a22      	ldr	r2, [pc, #136]	; (80020e8 <HAL_InitTick+0xdc>)
 8002060:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_InitTick+0xd8>)
 8002064:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002068:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800206a:	4a1e      	ldr	r2, [pc, #120]	; (80020e4 <HAL_InitTick+0xd8>)
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8002070:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <HAL_InitTick+0xd8>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002076:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_InitTick+0xd8>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207c:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_InitTick+0xd8>)
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8002082:	4818      	ldr	r0, [pc, #96]	; (80020e4 <HAL_InitTick+0xd8>)
 8002084:	f002 fb8a 	bl	800479c <HAL_TIM_Base_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800208e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002092:	2b00      	cmp	r3, #0
 8002094:	d11b      	bne.n	80020ce <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8002096:	4813      	ldr	r0, [pc, #76]	; (80020e4 <HAL_InitTick+0xd8>)
 8002098:	f002 fbd0 	bl	800483c <HAL_TIM_Base_Start_IT>
 800209c:	4603      	mov	r3, r0
 800209e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80020a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d111      	bne.n	80020ce <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020aa:	2019      	movs	r0, #25
 80020ac:	f001 f924 	bl	80032f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b0f      	cmp	r3, #15
 80020b4:	d808      	bhi.n	80020c8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80020b6:	2200      	movs	r2, #0
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	2019      	movs	r0, #25
 80020bc:	f001 f900 	bl	80032c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020c0:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <HAL_InitTick+0xe0>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e002      	b.n	80020ce <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80020ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3730      	adds	r7, #48	; 0x30
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	431bde83 	.word	0x431bde83
 80020e4:	20000b34 	.word	0x20000b34
 80020e8:	40014400 	.word	0x40014400
 80020ec:	20000004 	.word	0x20000004

080020f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <NMI_Handler+0x4>

080020f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <HardFault_Handler+0x4>

080020fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <MemManage_Handler+0x4>

08002102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002106:	e7fe      	b.n	8002106 <BusFault_Handler+0x4>

08002108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800210c:	e7fe      	b.n	800210c <UsageFault_Handler+0x4>

0800210e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <ADC_IRQHandler+0x10>)
 8002122:	f000 fcb2 	bl	8002a8a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200001fc 	.word	0x200001fc

08002130 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002134:	4803      	ldr	r0, [pc, #12]	; (8002144 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002136:	f002 fbe3 	bl	8004900 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800213a:	4803      	ldr	r0, [pc, #12]	; (8002148 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800213c:	f002 fbe0 	bl	8004900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000b80 	.word	0x20000b80
 8002148:	20000b34 	.word	0x20000b34

0800214c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002150:	4806      	ldr	r0, [pc, #24]	; (800216c <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8002152:	f002 fbd5 	bl	8004900 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002156:	4806      	ldr	r0, [pc, #24]	; (8002170 <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 8002158:	f002 fbd2 	bl	8004900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */


  	  // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 	 // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800215c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002160:	4804      	ldr	r0, [pc, #16]	; (8002174 <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 8002162:	f001 fe76 	bl	8003e52 <HAL_GPIO_TogglePin>
 	 // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000b80 	.word	0x20000b80
 8002170:	20000bc8 	.word	0x20000bc8
 8002174:	40020400 	.word	0x40020400

08002178 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <USART1_IRQHandler+0x10>)
 800217e:	f003 f897 	bl	80052b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000c10 	.word	0x20000c10

0800218c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <DMA2_Stream2_IRQHandler+0x10>)
 8002192:	f001 fa57 	bl	8003644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000c54 	.word	0x20000c54

080021a0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <DMA2_Stream7_IRQHandler+0x10>)
 80021a6:	f001 fa4d 	bl	8003644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000cb4 	.word	0x20000cb4

080021b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return 1;
 80021b8:	2301      	movs	r3, #1
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <_kill>:

int _kill(int pid, int sig)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021ce:	f007 f9dd 	bl	800958c <__errno>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2216      	movs	r2, #22
 80021d6:	601a      	str	r2, [r3, #0]
  return -1;
 80021d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <_exit>:

void _exit (int status)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ffe7 	bl	80021c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021f6:	e7fe      	b.n	80021f6 <_exit+0x12>

080021f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	e00a      	b.n	8002220 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800220a:	f3af 8000 	nop.w
 800220e:	4601      	mov	r1, r0
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	60ba      	str	r2, [r7, #8]
 8002216:	b2ca      	uxtb	r2, r1
 8002218:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	3301      	adds	r3, #1
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	429a      	cmp	r2, r3
 8002226:	dbf0      	blt.n	800220a <_read+0x12>
  }

  return len;
 8002228:	687b      	ldr	r3, [r7, #4]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	e009      	b.n	8002258 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	60ba      	str	r2, [r7, #8]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3301      	adds	r3, #1
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	429a      	cmp	r2, r3
 800225e:	dbf1      	blt.n	8002244 <_write+0x12>
  }
  return len;
 8002260:	687b      	ldr	r3, [r7, #4]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <_close>:

int _close(int file)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002292:	605a      	str	r2, [r3, #4]
  return 0;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <_isatty>:

int _isatty(int file)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022aa:	2301      	movs	r3, #1
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022dc:	4a14      	ldr	r2, [pc, #80]	; (8002330 <_sbrk+0x5c>)
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <_sbrk+0x60>)
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <_sbrk+0x64>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d102      	bne.n	80022f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <_sbrk+0x64>)
 80022f2:	4a12      	ldr	r2, [pc, #72]	; (800233c <_sbrk+0x68>)
 80022f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <_sbrk+0x64>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	429a      	cmp	r2, r3
 8002302:	d207      	bcs.n	8002314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002304:	f007 f942 	bl	800958c <__errno>
 8002308:	4603      	mov	r3, r0
 800230a:	220c      	movs	r2, #12
 800230c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
 8002312:	e009      	b.n	8002328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <_sbrk+0x64>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	4a05      	ldr	r2, [pc, #20]	; (8002338 <_sbrk+0x64>)
 8002324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002326:	68fb      	ldr	r3, [r7, #12]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20018000 	.word	0x20018000
 8002334:	00000400 	.word	0x00000400
 8002338:	20000b7c 	.word	0x20000b7c
 800233c:	20004bb8 	.word	0x20004bb8

08002340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <SystemInit+0x20>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	4a05      	ldr	r2, [pc, #20]	; (8002360 <SystemInit+0x20>)
 800234c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800236a:	f107 0308 	add.w	r3, r7, #8
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002378:	463b      	mov	r3, r7
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002380:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <MX_TIM1_Init+0x98>)
 8002382:	4a1f      	ldr	r2, [pc, #124]	; (8002400 <MX_TIM1_Init+0x9c>)
 8002384:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002386:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <MX_TIM1_Init+0x98>)
 8002388:	2200      	movs	r2, #0
 800238a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238c:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <MX_TIM1_Init+0x98>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002392:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <MX_TIM1_Init+0x98>)
 8002394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002398:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800239a:	4b18      	ldr	r3, [pc, #96]	; (80023fc <MX_TIM1_Init+0x98>)
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023a0:	4b16      	ldr	r3, [pc, #88]	; (80023fc <MX_TIM1_Init+0x98>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <MX_TIM1_Init+0x98>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023ac:	4813      	ldr	r0, [pc, #76]	; (80023fc <MX_TIM1_Init+0x98>)
 80023ae:	f002 f9f5 	bl	800479c <HAL_TIM_Base_Init>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80023b8:	f7ff fdf6 	bl	8001fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023c2:	f107 0308 	add.w	r3, r7, #8
 80023c6:	4619      	mov	r1, r3
 80023c8:	480c      	ldr	r0, [pc, #48]	; (80023fc <MX_TIM1_Init+0x98>)
 80023ca:	f002 fba1 	bl	8004b10 <HAL_TIM_ConfigClockSource>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80023d4:	f7ff fde8 	bl	8001fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d8:	2300      	movs	r3, #0
 80023da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023e0:	463b      	mov	r3, r7
 80023e2:	4619      	mov	r1, r3
 80023e4:	4805      	ldr	r0, [pc, #20]	; (80023fc <MX_TIM1_Init+0x98>)
 80023e6:	f002 fd9d 	bl	8004f24 <HAL_TIMEx_MasterConfigSynchronization>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80023f0:	f7ff fdda 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023f4:	bf00      	nop
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000b80 	.word	0x20000b80
 8002400:	40010000 	.word	0x40010000

08002404 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002408:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <MX_TIM11_Init+0x40>)
 800240a:	4a0f      	ldr	r2, [pc, #60]	; (8002448 <MX_TIM11_Init+0x44>)
 800240c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8399;
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <MX_TIM11_Init+0x40>)
 8002410:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002414:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <MX_TIM11_Init+0x40>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <MX_TIM11_Init+0x40>)
 800241e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002422:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002424:	4b07      	ldr	r3, [pc, #28]	; (8002444 <MX_TIM11_Init+0x40>)
 8002426:	2200      	movs	r2, #0
 8002428:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800242a:	4b06      	ldr	r3, [pc, #24]	; (8002444 <MX_TIM11_Init+0x40>)
 800242c:	2280      	movs	r2, #128	; 0x80
 800242e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002430:	4804      	ldr	r0, [pc, #16]	; (8002444 <MX_TIM11_Init+0x40>)
 8002432:	f002 f9b3 	bl	800479c <HAL_TIM_Base_Init>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 800243c:	f7ff fdb4 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000bc8 	.word	0x20000bc8
 8002448:	40014800 	.word	0x40014800

0800244c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a20      	ldr	r2, [pc, #128]	; (80024dc <HAL_TIM_Base_MspInit+0x90>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d11e      	bne.n	800249c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <HAL_TIM_Base_MspInit+0x94>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	4a1e      	ldr	r2, [pc, #120]	; (80024e0 <HAL_TIM_Base_MspInit+0x94>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6453      	str	r3, [r2, #68]	; 0x44
 800246e:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <HAL_TIM_Base_MspInit+0x94>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	2105      	movs	r1, #5
 800247e:	2019      	movs	r0, #25
 8002480:	f000 ff1e 	bl	80032c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002484:	2019      	movs	r0, #25
 8002486:	f000 ff37 	bl	80032f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800248a:	2200      	movs	r2, #0
 800248c:	2105      	movs	r1, #5
 800248e:	201a      	movs	r0, #26
 8002490:	f000 ff16 	bl	80032c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002494:	201a      	movs	r0, #26
 8002496:	f000 ff2f 	bl	80032f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800249a:	e01a      	b.n	80024d2 <HAL_TIM_Base_MspInit+0x86>
  else if(tim_baseHandle->Instance==TIM11)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a10      	ldr	r2, [pc, #64]	; (80024e4 <HAL_TIM_Base_MspInit+0x98>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d115      	bne.n	80024d2 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <HAL_TIM_Base_MspInit+0x94>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	4a0c      	ldr	r2, [pc, #48]	; (80024e0 <HAL_TIM_Base_MspInit+0x94>)
 80024b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b4:	6453      	str	r3, [r2, #68]	; 0x44
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_TIM_Base_MspInit+0x94>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80024c2:	2200      	movs	r2, #0
 80024c4:	2105      	movs	r1, #5
 80024c6:	201a      	movs	r0, #26
 80024c8:	f000 fefa 	bl	80032c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80024cc:	201a      	movs	r0, #26
 80024ce:	f000 ff13 	bl	80032f8 <HAL_NVIC_EnableIRQ>
}
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40010000 	.word	0x40010000
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40014800 	.word	0x40014800

080024e8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <MX_USART1_UART_Init+0x4c>)
 80024ee:	4a12      	ldr	r2, [pc, #72]	; (8002538 <MX_USART1_UART_Init+0x50>)
 80024f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <MX_USART1_UART_Init+0x4c>)
 80024f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <MX_USART1_UART_Init+0x4c>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <MX_USART1_UART_Init+0x4c>)
 8002502:	2200      	movs	r2, #0
 8002504:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <MX_USART1_UART_Init+0x4c>)
 8002508:	2200      	movs	r2, #0
 800250a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <MX_USART1_UART_Init+0x4c>)
 800250e:	220c      	movs	r2, #12
 8002510:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002512:	4b08      	ldr	r3, [pc, #32]	; (8002534 <MX_USART1_UART_Init+0x4c>)
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <MX_USART1_UART_Init+0x4c>)
 800251a:	2200      	movs	r2, #0
 800251c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800251e:	4805      	ldr	r0, [pc, #20]	; (8002534 <MX_USART1_UART_Init+0x4c>)
 8002520:	f002 fd82 	bl	8005028 <HAL_UART_Init>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800252a:	f7ff fd3d 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000c10 	.word	0x20000c10
 8002538:	40011000 	.word	0x40011000

0800253c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08a      	sub	sp, #40	; 0x28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a4d      	ldr	r2, [pc, #308]	; (8002690 <HAL_UART_MspInit+0x154>)
 800255a:	4293      	cmp	r3, r2
 800255c:	f040 8093 	bne.w	8002686 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002560:	2300      	movs	r3, #0
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	4b4b      	ldr	r3, [pc, #300]	; (8002694 <HAL_UART_MspInit+0x158>)
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	4a4a      	ldr	r2, [pc, #296]	; (8002694 <HAL_UART_MspInit+0x158>)
 800256a:	f043 0310 	orr.w	r3, r3, #16
 800256e:	6453      	str	r3, [r2, #68]	; 0x44
 8002570:	4b48      	ldr	r3, [pc, #288]	; (8002694 <HAL_UART_MspInit+0x158>)
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	4b44      	ldr	r3, [pc, #272]	; (8002694 <HAL_UART_MspInit+0x158>)
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002584:	4a43      	ldr	r2, [pc, #268]	; (8002694 <HAL_UART_MspInit+0x158>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6313      	str	r3, [r2, #48]	; 0x30
 800258c:	4b41      	ldr	r3, [pc, #260]	; (8002694 <HAL_UART_MspInit+0x158>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002598:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800259c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a6:	2303      	movs	r3, #3
 80025a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025aa:	2307      	movs	r3, #7
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ae:	f107 0314 	add.w	r3, r7, #20
 80025b2:	4619      	mov	r1, r3
 80025b4:	4838      	ldr	r0, [pc, #224]	; (8002698 <HAL_UART_MspInit+0x15c>)
 80025b6:	f001 faaf 	bl	8003b18 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80025ba:	4b38      	ldr	r3, [pc, #224]	; (800269c <HAL_UART_MspInit+0x160>)
 80025bc:	4a38      	ldr	r2, [pc, #224]	; (80026a0 <HAL_UART_MspInit+0x164>)
 80025be:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80025c0:	4b36      	ldr	r3, [pc, #216]	; (800269c <HAL_UART_MspInit+0x160>)
 80025c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025c8:	4b34      	ldr	r3, [pc, #208]	; (800269c <HAL_UART_MspInit+0x160>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ce:	4b33      	ldr	r3, [pc, #204]	; (800269c <HAL_UART_MspInit+0x160>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025d4:	4b31      	ldr	r3, [pc, #196]	; (800269c <HAL_UART_MspInit+0x160>)
 80025d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025da:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025dc:	4b2f      	ldr	r3, [pc, #188]	; (800269c <HAL_UART_MspInit+0x160>)
 80025de:	2200      	movs	r2, #0
 80025e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025e2:	4b2e      	ldr	r3, [pc, #184]	; (800269c <HAL_UART_MspInit+0x160>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80025e8:	4b2c      	ldr	r3, [pc, #176]	; (800269c <HAL_UART_MspInit+0x160>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025ee:	4b2b      	ldr	r3, [pc, #172]	; (800269c <HAL_UART_MspInit+0x160>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025f4:	4b29      	ldr	r3, [pc, #164]	; (800269c <HAL_UART_MspInit+0x160>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025fa:	4828      	ldr	r0, [pc, #160]	; (800269c <HAL_UART_MspInit+0x160>)
 80025fc:	f000 fe8a 	bl	8003314 <HAL_DMA_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002606:	f7ff fccf 	bl	8001fa8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a23      	ldr	r2, [pc, #140]	; (800269c <HAL_UART_MspInit+0x160>)
 800260e:	639a      	str	r2, [r3, #56]	; 0x38
 8002610:	4a22      	ldr	r2, [pc, #136]	; (800269c <HAL_UART_MspInit+0x160>)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002616:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <HAL_UART_MspInit+0x168>)
 8002618:	4a23      	ldr	r2, [pc, #140]	; (80026a8 <HAL_UART_MspInit+0x16c>)
 800261a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800261c:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <HAL_UART_MspInit+0x168>)
 800261e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002622:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002624:	4b1f      	ldr	r3, [pc, #124]	; (80026a4 <HAL_UART_MspInit+0x168>)
 8002626:	2240      	movs	r2, #64	; 0x40
 8002628:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800262a:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <HAL_UART_MspInit+0x168>)
 800262c:	2200      	movs	r2, #0
 800262e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002630:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <HAL_UART_MspInit+0x168>)
 8002632:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002636:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002638:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <HAL_UART_MspInit+0x168>)
 800263a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800263e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002640:	4b18      	ldr	r3, [pc, #96]	; (80026a4 <HAL_UART_MspInit+0x168>)
 8002642:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002646:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002648:	4b16      	ldr	r3, [pc, #88]	; (80026a4 <HAL_UART_MspInit+0x168>)
 800264a:	2200      	movs	r2, #0
 800264c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800264e:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <HAL_UART_MspInit+0x168>)
 8002650:	2200      	movs	r2, #0
 8002652:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002654:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <HAL_UART_MspInit+0x168>)
 8002656:	2200      	movs	r2, #0
 8002658:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800265a:	4812      	ldr	r0, [pc, #72]	; (80026a4 <HAL_UART_MspInit+0x168>)
 800265c:	f000 fe5a 	bl	8003314 <HAL_DMA_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002666:	f7ff fc9f 	bl	8001fa8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a0d      	ldr	r2, [pc, #52]	; (80026a4 <HAL_UART_MspInit+0x168>)
 800266e:	635a      	str	r2, [r3, #52]	; 0x34
 8002670:	4a0c      	ldr	r2, [pc, #48]	; (80026a4 <HAL_UART_MspInit+0x168>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	2105      	movs	r1, #5
 800267a:	2025      	movs	r0, #37	; 0x25
 800267c:	f000 fe20 	bl	80032c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002680:	2025      	movs	r0, #37	; 0x25
 8002682:	f000 fe39 	bl	80032f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002686:	bf00      	nop
 8002688:	3728      	adds	r7, #40	; 0x28
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40011000 	.word	0x40011000
 8002694:	40023800 	.word	0x40023800
 8002698:	40020000 	.word	0x40020000
 800269c:	20000c54 	.word	0x20000c54
 80026a0:	40026440 	.word	0x40026440
 80026a4:	20000cb4 	.word	0x20000cb4
 80026a8:	400264b8 	.word	0x400264b8

080026ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026b0:	480d      	ldr	r0, [pc, #52]	; (80026e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026b2:	490e      	ldr	r1, [pc, #56]	; (80026ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026b4:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b8:	e002      	b.n	80026c0 <LoopCopyDataInit>

080026ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026be:	3304      	adds	r3, #4

080026c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c4:	d3f9      	bcc.n	80026ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026c6:	4a0b      	ldr	r2, [pc, #44]	; (80026f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026c8:	4c0b      	ldr	r4, [pc, #44]	; (80026f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026cc:	e001      	b.n	80026d2 <LoopFillZerobss>

080026ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d0:	3204      	adds	r2, #4

080026d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d4:	d3fb      	bcc.n	80026ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026d6:	f7ff fe33 	bl	8002340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026da:	f006 ff5d 	bl	8009598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026de:	f7ff fbcf 	bl	8001e80 <main>
  bx  lr    
 80026e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80026e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ec:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80026f0:	0800cb1c 	.word	0x0800cb1c
  ldr r2, =_sbss
 80026f4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80026f8:	20004bb8 	.word	0x20004bb8

080026fc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026fc:	e7fe      	b.n	80026fc <DMA1_Stream0_IRQHandler>
	...

08002700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002704:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <HAL_Init+0x40>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a0d      	ldr	r2, [pc, #52]	; (8002740 <HAL_Init+0x40>)
 800270a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800270e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_Init+0x40>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <HAL_Init+0x40>)
 8002716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800271a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800271c:	4b08      	ldr	r3, [pc, #32]	; (8002740 <HAL_Init+0x40>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a07      	ldr	r2, [pc, #28]	; (8002740 <HAL_Init+0x40>)
 8002722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002728:	2003      	movs	r0, #3
 800272a:	f000 fdbe 	bl	80032aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800272e:	2005      	movs	r0, #5
 8002730:	f7ff fc6c 	bl	800200c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002734:	f7ff fc3e 	bl	8001fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40023c00 	.word	0x40023c00

08002744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_IncTick+0x20>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_IncTick+0x24>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4413      	add	r3, r2
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <HAL_IncTick+0x24>)
 8002756:	6013      	str	r3, [r2, #0]
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000008 	.word	0x20000008
 8002768:	20000d14 	.word	0x20000d14

0800276c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return uwTick;
 8002770:	4b03      	ldr	r3, [pc, #12]	; (8002780 <HAL_GetTick+0x14>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20000d14 	.word	0x20000d14

08002784 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e033      	b.n	8002802 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fe fbdc 	bl	8000f60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d118      	bne.n	80027f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027ca:	f023 0302 	bic.w	r3, r3, #2
 80027ce:	f043 0202 	orr.w	r2, r3, #2
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fbb4 	bl	8002f44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f023 0303 	bic.w	r3, r3, #3
 80027ea:	f043 0201 	orr.w	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40
 80027f2:	e001      	b.n	80027f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002800:	7bfb      	ldrb	r3, [r7, #15]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_ADC_Start+0x1a>
 8002822:	2302      	movs	r3, #2
 8002824:	e097      	b.n	8002956 <HAL_ADC_Start+0x14a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b01      	cmp	r3, #1
 800283a:	d018      	beq.n	800286e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800284c:	4b45      	ldr	r3, [pc, #276]	; (8002964 <HAL_ADC_Start+0x158>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a45      	ldr	r2, [pc, #276]	; (8002968 <HAL_ADC_Start+0x15c>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	0c9a      	lsrs	r2, r3, #18
 8002858:	4613      	mov	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002860:	e002      	b.n	8002868 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	3b01      	subs	r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f9      	bne.n	8002862 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	d15f      	bne.n	800293c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002884:	f023 0301 	bic.w	r3, r3, #1
 8002888:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289a:	2b00      	cmp	r3, #0
 800289c:	d007      	beq.n	80028ae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ba:	d106      	bne.n	80028ca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c0:	f023 0206 	bic.w	r2, r3, #6
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	645a      	str	r2, [r3, #68]	; 0x44
 80028c8:	e002      	b.n	80028d0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028d8:	4b24      	ldr	r3, [pc, #144]	; (800296c <HAL_ADC_Start+0x160>)
 80028da:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028e4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10f      	bne.n	8002912 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d129      	bne.n	8002954 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	e020      	b.n	8002954 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a16      	ldr	r2, [pc, #88]	; (8002970 <HAL_ADC_Start+0x164>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d11b      	bne.n	8002954 <HAL_ADC_Start+0x148>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d114      	bne.n	8002954 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002938:	609a      	str	r2, [r3, #8]
 800293a:	e00b      	b.n	8002954 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	f043 0210 	orr.w	r2, r3, #16
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	f043 0201 	orr.w	r2, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20000000 	.word	0x20000000
 8002968:	431bde83 	.word	0x431bde83
 800296c:	40012300 	.word	0x40012300
 8002970:	40012000 	.word	0x40012000

08002974 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002990:	d113      	bne.n	80029ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800299c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a0:	d10b      	bne.n	80029ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f043 0220 	orr.w	r2, r3, #32
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e063      	b.n	8002a82 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80029ba:	f7ff fed7 	bl	800276c <HAL_GetTick>
 80029be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029c0:	e021      	b.n	8002a06 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d01d      	beq.n	8002a06 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d007      	beq.n	80029e0 <HAL_ADC_PollForConversion+0x6c>
 80029d0:	f7ff fecc 	bl	800276c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d212      	bcs.n	8002a06 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d00b      	beq.n	8002a06 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f043 0204 	orr.w	r2, r3, #4
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e03d      	b.n	8002a82 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d1d6      	bne.n	80029c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0212 	mvn.w	r2, #18
 8002a1c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d123      	bne.n	8002a80 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d11f      	bne.n	8002a80 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d006      	beq.n	8002a5c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d111      	bne.n	8002a80 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d105      	bne.n	8002a80 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f043 0201 	orr.w	r2, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d049      	beq.n	8002b54 <HAL_ADC_IRQHandler+0xca>
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d046      	beq.n	8002b54 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d105      	bne.n	8002ade <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d12b      	bne.n	8002b44 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d127      	bne.n	8002b44 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d006      	beq.n	8002b10 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d119      	bne.n	8002b44 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0220 	bic.w	r2, r2, #32
 8002b1e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d105      	bne.n	8002b44 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f8bd 	bl	8002cc4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f06f 0212 	mvn.w	r2, #18
 8002b52:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d057      	beq.n	8002c1a <HAL_ADC_IRQHandler+0x190>
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d054      	beq.n	8002c1a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d105      	bne.n	8002b88 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d139      	bne.n	8002c0a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d006      	beq.n	8002bb2 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d12b      	bne.n	8002c0a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d124      	bne.n	8002c0a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d11d      	bne.n	8002c0a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d119      	bne.n	8002c0a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002be4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d105      	bne.n	8002c0a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f043 0201 	orr.w	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fa96 	bl	800313c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 020c 	mvn.w	r2, #12
 8002c18:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c28:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d017      	beq.n	8002c60 <HAL_ADC_IRQHandler+0x1d6>
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d014      	beq.n	8002c60 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d10d      	bne.n	8002c60 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f841 	bl	8002cd8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f06f 0201 	mvn.w	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c6e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d015      	beq.n	8002ca2 <HAL_ADC_IRQHandler+0x218>
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d012      	beq.n	8002ca2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c80:	f043 0202 	orr.w	r2, r3, #2
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0220 	mvn.w	r2, #32
 8002c90:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f82a 	bl	8002cec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0220 	mvn.w	r2, #32
 8002ca0:	601a      	str	r2, [r3, #0]
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x1c>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e105      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x228>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b09      	cmp	r3, #9
 8002d2a:	d925      	bls.n	8002d78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68d9      	ldr	r1, [r3, #12]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4413      	add	r3, r2
 8002d40:	3b1e      	subs	r3, #30
 8002d42:	2207      	movs	r2, #7
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43da      	mvns	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	400a      	ands	r2, r1
 8002d50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68d9      	ldr	r1, [r3, #12]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	4618      	mov	r0, r3
 8002d64:	4603      	mov	r3, r0
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4403      	add	r3, r0
 8002d6a:	3b1e      	subs	r3, #30
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	e022      	b.n	8002dbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6919      	ldr	r1, [r3, #16]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43da      	mvns	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	400a      	ands	r2, r1
 8002d9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6919      	ldr	r1, [r3, #16]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	4618      	mov	r0, r3
 8002dae:	4603      	mov	r3, r0
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4403      	add	r3, r0
 8002db4:	409a      	lsls	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d824      	bhi.n	8002e10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3b05      	subs	r3, #5
 8002dd8:	221f      	movs	r2, #31
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	400a      	ands	r2, r1
 8002de6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	4618      	mov	r0, r3
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	3b05      	subs	r3, #5
 8002e02:	fa00 f203 	lsl.w	r2, r0, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e0e:	e04c      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b0c      	cmp	r3, #12
 8002e16:	d824      	bhi.n	8002e62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	3b23      	subs	r3, #35	; 0x23
 8002e2a:	221f      	movs	r2, #31
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43da      	mvns	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	400a      	ands	r2, r1
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	4618      	mov	r0, r3
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	3b23      	subs	r3, #35	; 0x23
 8002e54:	fa00 f203 	lsl.w	r2, r0, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e60:	e023      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	3b41      	subs	r3, #65	; 0x41
 8002e74:	221f      	movs	r2, #31
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43da      	mvns	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	400a      	ands	r2, r1
 8002e82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	4618      	mov	r0, r3
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3b41      	subs	r3, #65	; 0x41
 8002e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eaa:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <HAL_ADC_ConfigChannel+0x234>)
 8002eac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a21      	ldr	r2, [pc, #132]	; (8002f38 <HAL_ADC_ConfigChannel+0x238>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d109      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x1cc>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b12      	cmp	r3, #18
 8002ebe:	d105      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <HAL_ADC_ConfigChannel+0x238>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d123      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x21e>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b10      	cmp	r3, #16
 8002edc:	d003      	beq.n	8002ee6 <HAL_ADC_ConfigChannel+0x1e6>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b11      	cmp	r3, #17
 8002ee4:	d11b      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b10      	cmp	r3, #16
 8002ef8:	d111      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <HAL_ADC_ConfigChannel+0x23c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a10      	ldr	r2, [pc, #64]	; (8002f40 <HAL_ADC_ConfigChannel+0x240>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	0c9a      	lsrs	r2, r3, #18
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f10:	e002      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f9      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	40012300 	.word	0x40012300
 8002f38:	40012000 	.word	0x40012000
 8002f3c:	20000000 	.word	0x20000000
 8002f40:	431bde83 	.word	0x431bde83

08002f44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f4c:	4b79      	ldr	r3, [pc, #484]	; (8003134 <ADC_Init+0x1f0>)
 8002f4e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	021a      	lsls	r2, r3, #8
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6859      	ldr	r1, [r3, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6899      	ldr	r1, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	4a58      	ldr	r2, [pc, #352]	; (8003138 <ADC_Init+0x1f4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d022      	beq.n	8003022 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6899      	ldr	r1, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800300c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6899      	ldr	r1, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	e00f      	b.n	8003042 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003030:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003040:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0202 	bic.w	r2, r2, #2
 8003050:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6899      	ldr	r1, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	7e1b      	ldrb	r3, [r3, #24]
 800305c:	005a      	lsls	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01b      	beq.n	80030a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800307e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800308e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6859      	ldr	r1, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	3b01      	subs	r3, #1
 800309c:	035a      	lsls	r2, r3, #13
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	e007      	b.n	80030b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	051a      	lsls	r2, r3, #20
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6899      	ldr	r1, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030fa:	025a      	lsls	r2, r3, #9
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003112:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6899      	ldr	r1, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	029a      	lsls	r2, r3, #10
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	609a      	str	r2, [r3, #8]
}
 8003128:	bf00      	nop
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	40012300 	.word	0x40012300
 8003138:	0f000001 	.word	0x0f000001

0800313c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003160:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <__NVIC_SetPriorityGrouping+0x44>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800316c:	4013      	ands	r3, r2
 800316e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800317c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003182:	4a04      	ldr	r2, [pc, #16]	; (8003194 <__NVIC_SetPriorityGrouping+0x44>)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	60d3      	str	r3, [r2, #12]
}
 8003188:	bf00      	nop
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800319c:	4b04      	ldr	r3, [pc, #16]	; (80031b0 <__NVIC_GetPriorityGrouping+0x18>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	0a1b      	lsrs	r3, r3, #8
 80031a2:	f003 0307 	and.w	r3, r3, #7
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	db0b      	blt.n	80031de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	f003 021f 	and.w	r2, r3, #31
 80031cc:	4907      	ldr	r1, [pc, #28]	; (80031ec <__NVIC_EnableIRQ+0x38>)
 80031ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	2001      	movs	r0, #1
 80031d6:	fa00 f202 	lsl.w	r2, r0, r2
 80031da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	e000e100 	.word	0xe000e100

080031f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	6039      	str	r1, [r7, #0]
 80031fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003200:	2b00      	cmp	r3, #0
 8003202:	db0a      	blt.n	800321a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	b2da      	uxtb	r2, r3
 8003208:	490c      	ldr	r1, [pc, #48]	; (800323c <__NVIC_SetPriority+0x4c>)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	0112      	lsls	r2, r2, #4
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	440b      	add	r3, r1
 8003214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003218:	e00a      	b.n	8003230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	b2da      	uxtb	r2, r3
 800321e:	4908      	ldr	r1, [pc, #32]	; (8003240 <__NVIC_SetPriority+0x50>)
 8003220:	79fb      	ldrb	r3, [r7, #7]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	3b04      	subs	r3, #4
 8003228:	0112      	lsls	r2, r2, #4
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	440b      	add	r3, r1
 800322e:	761a      	strb	r2, [r3, #24]
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000e100 	.word	0xe000e100
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003244:	b480      	push	{r7}
 8003246:	b089      	sub	sp, #36	; 0x24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f1c3 0307 	rsb	r3, r3, #7
 800325e:	2b04      	cmp	r3, #4
 8003260:	bf28      	it	cs
 8003262:	2304      	movcs	r3, #4
 8003264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	3304      	adds	r3, #4
 800326a:	2b06      	cmp	r3, #6
 800326c:	d902      	bls.n	8003274 <NVIC_EncodePriority+0x30>
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	3b03      	subs	r3, #3
 8003272:	e000      	b.n	8003276 <NVIC_EncodePriority+0x32>
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003278:	f04f 32ff 	mov.w	r2, #4294967295
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43da      	mvns	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	401a      	ands	r2, r3
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800328c:	f04f 31ff 	mov.w	r1, #4294967295
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	43d9      	mvns	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800329c:	4313      	orrs	r3, r2
         );
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3724      	adds	r7, #36	; 0x24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ff4c 	bl	8003150 <__NVIC_SetPriorityGrouping>
}
 80032b8:	bf00      	nop
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032d2:	f7ff ff61 	bl	8003198 <__NVIC_GetPriorityGrouping>
 80032d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	6978      	ldr	r0, [r7, #20]
 80032de:	f7ff ffb1 	bl	8003244 <NVIC_EncodePriority>
 80032e2:	4602      	mov	r2, r0
 80032e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e8:	4611      	mov	r1, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff ff80 	bl	80031f0 <__NVIC_SetPriority>
}
 80032f0:	bf00      	nop
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff ff54 	bl	80031b4 <__NVIC_EnableIRQ>
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003320:	f7ff fa24 	bl	800276c <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e099      	b.n	8003464 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003350:	e00f      	b.n	8003372 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003352:	f7ff fa0b 	bl	800276c <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b05      	cmp	r3, #5
 800335e:	d908      	bls.n	8003372 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2203      	movs	r2, #3
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e078      	b.n	8003464 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1e8      	bne.n	8003352 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	4b38      	ldr	r3, [pc, #224]	; (800346c <HAL_DMA_Init+0x158>)
 800338c:	4013      	ands	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800339e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d107      	bne.n	80033dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d4:	4313      	orrs	r3, r2
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f023 0307 	bic.w	r3, r3, #7
 80033f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	2b04      	cmp	r3, #4
 8003404:	d117      	bne.n	8003436 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00e      	beq.n	8003436 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 fb01 	bl	8003a20 <DMA_CheckFifoParam>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2240      	movs	r2, #64	; 0x40
 8003428:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003432:	2301      	movs	r3, #1
 8003434:	e016      	b.n	8003464 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fab8 	bl	80039b4 <DMA_CalcBaseAndBitshift>
 8003444:	4603      	mov	r3, r0
 8003446:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344c:	223f      	movs	r2, #63	; 0x3f
 800344e:	409a      	lsls	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	f010803f 	.word	0xf010803f

08003470 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003486:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_DMA_Start_IT+0x26>
 8003492:	2302      	movs	r3, #2
 8003494:	e040      	b.n	8003518 <HAL_DMA_Start_IT+0xa8>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d12f      	bne.n	800350a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2202      	movs	r2, #2
 80034ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68b9      	ldr	r1, [r7, #8]
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 fa4a 	bl	8003958 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c8:	223f      	movs	r2, #63	; 0x3f
 80034ca:	409a      	lsls	r2, r3
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0216 	orr.w	r2, r2, #22
 80034de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d007      	beq.n	80034f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0208 	orr.w	r2, r2, #8
 80034f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	e005      	b.n	8003516 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003512:	2302      	movs	r3, #2
 8003514:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003516:	7dfb      	ldrb	r3, [r7, #23]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800352e:	f7ff f91d 	bl	800276c <HAL_GetTick>
 8003532:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d008      	beq.n	8003552 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2280      	movs	r2, #128	; 0x80
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e052      	b.n	80035f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0216 	bic.w	r2, r2, #22
 8003560:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695a      	ldr	r2, [r3, #20]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003570:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d103      	bne.n	8003582 <HAL_DMA_Abort+0x62>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0208 	bic.w	r2, r2, #8
 8003590:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0201 	bic.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035a2:	e013      	b.n	80035cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035a4:	f7ff f8e2 	bl	800276c <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b05      	cmp	r3, #5
 80035b0:	d90c      	bls.n	80035cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2220      	movs	r2, #32
 80035b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2203      	movs	r2, #3
 80035bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e015      	b.n	80035f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e4      	bne.n	80035a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035de:	223f      	movs	r2, #63	; 0x3f
 80035e0:	409a      	lsls	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d004      	beq.n	800361e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2280      	movs	r2, #128	; 0x80
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e00c      	b.n	8003638 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2205      	movs	r2, #5
 8003622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0201 	bic.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003650:	4b8e      	ldr	r3, [pc, #568]	; (800388c <HAL_DMA_IRQHandler+0x248>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a8e      	ldr	r2, [pc, #568]	; (8003890 <HAL_DMA_IRQHandler+0x24c>)
 8003656:	fba2 2303 	umull	r2, r3, r2, r3
 800365a:	0a9b      	lsrs	r3, r3, #10
 800365c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003662:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366e:	2208      	movs	r2, #8
 8003670:	409a      	lsls	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4013      	ands	r3, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d01a      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d013      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0204 	bic.w	r2, r2, #4
 8003696:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369c:	2208      	movs	r2, #8
 800369e:	409a      	lsls	r2, r3
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a8:	f043 0201 	orr.w	r2, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b4:	2201      	movs	r2, #1
 80036b6:	409a      	lsls	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d012      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d2:	2201      	movs	r2, #1
 80036d4:	409a      	lsls	r2, r3
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036de:	f043 0202 	orr.w	r2, r3, #2
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ea:	2204      	movs	r2, #4
 80036ec:	409a      	lsls	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d012      	beq.n	800371c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00b      	beq.n	800371c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003708:	2204      	movs	r2, #4
 800370a:	409a      	lsls	r2, r3
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003714:	f043 0204 	orr.w	r2, r3, #4
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003720:	2210      	movs	r2, #16
 8003722:	409a      	lsls	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d043      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d03c      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373e:	2210      	movs	r2, #16
 8003740:	409a      	lsls	r2, r3
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d018      	beq.n	8003786 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d108      	bne.n	8003774 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d024      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
 8003772:	e01f      	b.n	80037b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01b      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	4798      	blx	r3
 8003784:	e016      	b.n	80037b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d107      	bne.n	80037a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0208 	bic.w	r2, r2, #8
 80037a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b8:	2220      	movs	r2, #32
 80037ba:	409a      	lsls	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 808f 	beq.w	80038e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8087 	beq.w	80038e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037da:	2220      	movs	r2, #32
 80037dc:	409a      	lsls	r2, r3
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b05      	cmp	r3, #5
 80037ec:	d136      	bne.n	800385c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0216 	bic.w	r2, r2, #22
 80037fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800380c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d103      	bne.n	800381e <HAL_DMA_IRQHandler+0x1da>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0208 	bic.w	r2, r2, #8
 800382c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003832:	223f      	movs	r2, #63	; 0x3f
 8003834:	409a      	lsls	r2, r3
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384e:	2b00      	cmp	r3, #0
 8003850:	d07e      	beq.n	8003950 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
        }
        return;
 800385a:	e079      	b.n	8003950 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01d      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10d      	bne.n	8003894 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387c:	2b00      	cmp	r3, #0
 800387e:	d031      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
 8003888:	e02c      	b.n	80038e4 <HAL_DMA_IRQHandler+0x2a0>
 800388a:	bf00      	nop
 800388c:	20000000 	.word	0x20000000
 8003890:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d023      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	4798      	blx	r3
 80038a4:	e01e      	b.n	80038e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10f      	bne.n	80038d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0210 	bic.w	r2, r2, #16
 80038c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d032      	beq.n	8003952 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d022      	beq.n	800393e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2205      	movs	r2, #5
 80038fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	3301      	adds	r3, #1
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	429a      	cmp	r2, r3
 800391a:	d307      	bcc.n	800392c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f2      	bne.n	8003910 <HAL_DMA_IRQHandler+0x2cc>
 800392a:	e000      	b.n	800392e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800392c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4798      	blx	r3
 800394e:	e000      	b.n	8003952 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003950:	bf00      	nop
    }
  }
}
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003974:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b40      	cmp	r3, #64	; 0x40
 8003984:	d108      	bne.n	8003998 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003996:	e007      	b.n	80039a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	60da      	str	r2, [r3, #12]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	3b10      	subs	r3, #16
 80039c4:	4a14      	ldr	r2, [pc, #80]	; (8003a18 <DMA_CalcBaseAndBitshift+0x64>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	091b      	lsrs	r3, r3, #4
 80039cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039ce:	4a13      	ldr	r2, [pc, #76]	; (8003a1c <DMA_CalcBaseAndBitshift+0x68>)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b03      	cmp	r3, #3
 80039e0:	d909      	bls.n	80039f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039ea:	f023 0303 	bic.w	r3, r3, #3
 80039ee:	1d1a      	adds	r2, r3, #4
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	659a      	str	r2, [r3, #88]	; 0x58
 80039f4:	e007      	b.n	8003a06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039fe:	f023 0303 	bic.w	r3, r3, #3
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	aaaaaaab 	.word	0xaaaaaaab
 8003a1c:	0800c72c 	.word	0x0800c72c

08003a20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d11f      	bne.n	8003a7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d856      	bhi.n	8003aee <DMA_CheckFifoParam+0xce>
 8003a40:	a201      	add	r2, pc, #4	; (adr r2, 8003a48 <DMA_CheckFifoParam+0x28>)
 8003a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a46:	bf00      	nop
 8003a48:	08003a59 	.word	0x08003a59
 8003a4c:	08003a6b 	.word	0x08003a6b
 8003a50:	08003a59 	.word	0x08003a59
 8003a54:	08003aef 	.word	0x08003aef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d046      	beq.n	8003af2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a68:	e043      	b.n	8003af2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a72:	d140      	bne.n	8003af6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a78:	e03d      	b.n	8003af6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a82:	d121      	bne.n	8003ac8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d837      	bhi.n	8003afa <DMA_CheckFifoParam+0xda>
 8003a8a:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <DMA_CheckFifoParam+0x70>)
 8003a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a90:	08003aa1 	.word	0x08003aa1
 8003a94:	08003aa7 	.word	0x08003aa7
 8003a98:	08003aa1 	.word	0x08003aa1
 8003a9c:	08003ab9 	.word	0x08003ab9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa4:	e030      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d025      	beq.n	8003afe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab6:	e022      	b.n	8003afe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ac0:	d11f      	bne.n	8003b02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ac6:	e01c      	b.n	8003b02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d903      	bls.n	8003ad6 <DMA_CheckFifoParam+0xb6>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d003      	beq.n	8003adc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ad4:	e018      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8003ada:	e015      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00e      	beq.n	8003b06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
      break;
 8003aec:	e00b      	b.n	8003b06 <DMA_CheckFifoParam+0xe6>
      break;
 8003aee:	bf00      	nop
 8003af0:	e00a      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      break;
 8003af2:	bf00      	nop
 8003af4:	e008      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      break;
 8003af6:	bf00      	nop
 8003af8:	e006      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      break;
 8003afa:	bf00      	nop
 8003afc:	e004      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      break;
 8003afe:	bf00      	nop
 8003b00:	e002      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b02:	bf00      	nop
 8003b04:	e000      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      break;
 8003b06:	bf00      	nop
    }
  } 
  
  return status; 
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop

08003b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b089      	sub	sp, #36	; 0x24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	e159      	b.n	8003de8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b34:	2201      	movs	r2, #1
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4013      	ands	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	f040 8148 	bne.w	8003de2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d005      	beq.n	8003b6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d130      	bne.n	8003bcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	2203      	movs	r2, #3
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4013      	ands	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	091b      	lsrs	r3, r3, #4
 8003bb6:	f003 0201 	and.w	r2, r3, #1
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d017      	beq.n	8003c08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	2203      	movs	r2, #3
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 0303 	and.w	r3, r3, #3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d123      	bne.n	8003c5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	08da      	lsrs	r2, r3, #3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3208      	adds	r2, #8
 8003c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	220f      	movs	r2, #15
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4013      	ands	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	08da      	lsrs	r2, r3, #3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3208      	adds	r2, #8
 8003c56:	69b9      	ldr	r1, [r7, #24]
 8003c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	2203      	movs	r2, #3
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4013      	ands	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 0203 	and.w	r2, r3, #3
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80a2 	beq.w	8003de2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	4b57      	ldr	r3, [pc, #348]	; (8003e00 <HAL_GPIO_Init+0x2e8>)
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	4a56      	ldr	r2, [pc, #344]	; (8003e00 <HAL_GPIO_Init+0x2e8>)
 8003ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cac:	6453      	str	r3, [r2, #68]	; 0x44
 8003cae:	4b54      	ldr	r3, [pc, #336]	; (8003e00 <HAL_GPIO_Init+0x2e8>)
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cba:	4a52      	ldr	r2, [pc, #328]	; (8003e04 <HAL_GPIO_Init+0x2ec>)
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	089b      	lsrs	r3, r3, #2
 8003cc0:	3302      	adds	r3, #2
 8003cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	220f      	movs	r2, #15
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a49      	ldr	r2, [pc, #292]	; (8003e08 <HAL_GPIO_Init+0x2f0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d019      	beq.n	8003d1a <HAL_GPIO_Init+0x202>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a48      	ldr	r2, [pc, #288]	; (8003e0c <HAL_GPIO_Init+0x2f4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d013      	beq.n	8003d16 <HAL_GPIO_Init+0x1fe>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a47      	ldr	r2, [pc, #284]	; (8003e10 <HAL_GPIO_Init+0x2f8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d00d      	beq.n	8003d12 <HAL_GPIO_Init+0x1fa>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a46      	ldr	r2, [pc, #280]	; (8003e14 <HAL_GPIO_Init+0x2fc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d007      	beq.n	8003d0e <HAL_GPIO_Init+0x1f6>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a45      	ldr	r2, [pc, #276]	; (8003e18 <HAL_GPIO_Init+0x300>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d101      	bne.n	8003d0a <HAL_GPIO_Init+0x1f2>
 8003d06:	2304      	movs	r3, #4
 8003d08:	e008      	b.n	8003d1c <HAL_GPIO_Init+0x204>
 8003d0a:	2307      	movs	r3, #7
 8003d0c:	e006      	b.n	8003d1c <HAL_GPIO_Init+0x204>
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e004      	b.n	8003d1c <HAL_GPIO_Init+0x204>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e002      	b.n	8003d1c <HAL_GPIO_Init+0x204>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_GPIO_Init+0x204>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	69fa      	ldr	r2, [r7, #28]
 8003d1e:	f002 0203 	and.w	r2, r2, #3
 8003d22:	0092      	lsls	r2, r2, #2
 8003d24:	4093      	lsls	r3, r2
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d2c:	4935      	ldr	r1, [pc, #212]	; (8003e04 <HAL_GPIO_Init+0x2ec>)
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	089b      	lsrs	r3, r3, #2
 8003d32:	3302      	adds	r3, #2
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d3a:	4b38      	ldr	r3, [pc, #224]	; (8003e1c <HAL_GPIO_Init+0x304>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	43db      	mvns	r3, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4013      	ands	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d5e:	4a2f      	ldr	r2, [pc, #188]	; (8003e1c <HAL_GPIO_Init+0x304>)
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d64:	4b2d      	ldr	r3, [pc, #180]	; (8003e1c <HAL_GPIO_Init+0x304>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d88:	4a24      	ldr	r2, [pc, #144]	; (8003e1c <HAL_GPIO_Init+0x304>)
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d8e:	4b23      	ldr	r3, [pc, #140]	; (8003e1c <HAL_GPIO_Init+0x304>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	43db      	mvns	r3, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003db2:	4a1a      	ldr	r2, [pc, #104]	; (8003e1c <HAL_GPIO_Init+0x304>)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003db8:	4b18      	ldr	r3, [pc, #96]	; (8003e1c <HAL_GPIO_Init+0x304>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ddc:	4a0f      	ldr	r2, [pc, #60]	; (8003e1c <HAL_GPIO_Init+0x304>)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3301      	adds	r3, #1
 8003de6:	61fb      	str	r3, [r7, #28]
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	2b0f      	cmp	r3, #15
 8003dec:	f67f aea2 	bls.w	8003b34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003df0:	bf00      	nop
 8003df2:	bf00      	nop
 8003df4:	3724      	adds	r7, #36	; 0x24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40013800 	.word	0x40013800
 8003e08:	40020000 	.word	0x40020000
 8003e0c:	40020400 	.word	0x40020400
 8003e10:	40020800 	.word	0x40020800
 8003e14:	40020c00 	.word	0x40020c00
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	40013c00 	.word	0x40013c00

08003e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	807b      	strh	r3, [r7, #2]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e30:	787b      	ldrb	r3, [r7, #1]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e36:	887a      	ldrh	r2, [r7, #2]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e3c:	e003      	b.n	8003e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e3e:	887b      	ldrh	r3, [r7, #2]
 8003e40:	041a      	lsls	r2, r3, #16
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	619a      	str	r2, [r3, #24]
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b085      	sub	sp, #20
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e64:	887a      	ldrh	r2, [r7, #2]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	041a      	lsls	r2, r3, #16
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	43d9      	mvns	r1, r3
 8003e70:	887b      	ldrh	r3, [r7, #2]
 8003e72:	400b      	ands	r3, r1
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	619a      	str	r2, [r3, #24]
}
 8003e7a:	bf00      	nop
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e267      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d075      	beq.n	8003f92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ea6:	4b88      	ldr	r3, [pc, #544]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 030c 	and.w	r3, r3, #12
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d00c      	beq.n	8003ecc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eb2:	4b85      	ldr	r3, [pc, #532]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d112      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ebe:	4b82      	ldr	r3, [pc, #520]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eca:	d10b      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	4b7e      	ldr	r3, [pc, #504]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d05b      	beq.n	8003f90 <HAL_RCC_OscConfig+0x108>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d157      	bne.n	8003f90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e242      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eec:	d106      	bne.n	8003efc <HAL_RCC_OscConfig+0x74>
 8003eee:	4b76      	ldr	r3, [pc, #472]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a75      	ldr	r2, [pc, #468]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	e01d      	b.n	8003f38 <HAL_RCC_OscConfig+0xb0>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCC_OscConfig+0x98>
 8003f06:	4b70      	ldr	r3, [pc, #448]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a6f      	ldr	r2, [pc, #444]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	4b6d      	ldr	r3, [pc, #436]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a6c      	ldr	r2, [pc, #432]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e00b      	b.n	8003f38 <HAL_RCC_OscConfig+0xb0>
 8003f20:	4b69      	ldr	r3, [pc, #420]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a68      	ldr	r2, [pc, #416]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	4b66      	ldr	r3, [pc, #408]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a65      	ldr	r2, [pc, #404]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d013      	beq.n	8003f68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f40:	f7fe fc14 	bl	800276c <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f48:	f7fe fc10 	bl	800276c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b64      	cmp	r3, #100	; 0x64
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e207      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	4b5b      	ldr	r3, [pc, #364]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0xc0>
 8003f66:	e014      	b.n	8003f92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fe fc00 	bl	800276c <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f70:	f7fe fbfc 	bl	800276c <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b64      	cmp	r3, #100	; 0x64
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e1f3      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f82:	4b51      	ldr	r3, [pc, #324]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0xe8>
 8003f8e:	e000      	b.n	8003f92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d063      	beq.n	8004066 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f9e:	4b4a      	ldr	r3, [pc, #296]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003faa:	4b47      	ldr	r3, [pc, #284]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d11c      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fb6:	4b44      	ldr	r3, [pc, #272]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d116      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc2:	4b41      	ldr	r3, [pc, #260]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_RCC_OscConfig+0x152>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d001      	beq.n	8003fda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e1c7      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fda:	4b3b      	ldr	r3, [pc, #236]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4937      	ldr	r1, [pc, #220]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fee:	e03a      	b.n	8004066 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d020      	beq.n	800403a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff8:	4b34      	ldr	r3, [pc, #208]	; (80040cc <HAL_RCC_OscConfig+0x244>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffe:	f7fe fbb5 	bl	800276c <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004006:	f7fe fbb1 	bl	800276c <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e1a8      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004018:	4b2b      	ldr	r3, [pc, #172]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f0      	beq.n	8004006 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004024:	4b28      	ldr	r3, [pc, #160]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4925      	ldr	r1, [pc, #148]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8004034:	4313      	orrs	r3, r2
 8004036:	600b      	str	r3, [r1, #0]
 8004038:	e015      	b.n	8004066 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800403a:	4b24      	ldr	r3, [pc, #144]	; (80040cc <HAL_RCC_OscConfig+0x244>)
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fe fb94 	bl	800276c <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004048:	f7fe fb90 	bl	800276c <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e187      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405a:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d036      	beq.n	80040e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d016      	beq.n	80040a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800407a:	4b15      	ldr	r3, [pc, #84]	; (80040d0 <HAL_RCC_OscConfig+0x248>)
 800407c:	2201      	movs	r2, #1
 800407e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004080:	f7fe fb74 	bl	800276c <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004088:	f7fe fb70 	bl	800276c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e167      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800409a:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 800409c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCC_OscConfig+0x200>
 80040a6:	e01b      	b.n	80040e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a8:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <HAL_RCC_OscConfig+0x248>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ae:	f7fe fb5d 	bl	800276c <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b4:	e00e      	b.n	80040d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040b6:	f7fe fb59 	bl	800276c <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d907      	bls.n	80040d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e150      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
 80040c8:	40023800 	.word	0x40023800
 80040cc:	42470000 	.word	0x42470000
 80040d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d4:	4b88      	ldr	r3, [pc, #544]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 80040d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1ea      	bne.n	80040b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8097 	beq.w	800421c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ee:	2300      	movs	r3, #0
 80040f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f2:	4b81      	ldr	r3, [pc, #516]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10f      	bne.n	800411e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	4b7d      	ldr	r3, [pc, #500]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	4a7c      	ldr	r2, [pc, #496]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800410c:	6413      	str	r3, [r2, #64]	; 0x40
 800410e:	4b7a      	ldr	r3, [pc, #488]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004116:	60bb      	str	r3, [r7, #8]
 8004118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411e:	4b77      	ldr	r3, [pc, #476]	; (80042fc <HAL_RCC_OscConfig+0x474>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d118      	bne.n	800415c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800412a:	4b74      	ldr	r3, [pc, #464]	; (80042fc <HAL_RCC_OscConfig+0x474>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a73      	ldr	r2, [pc, #460]	; (80042fc <HAL_RCC_OscConfig+0x474>)
 8004130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004136:	f7fe fb19 	bl	800276c <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413e:	f7fe fb15 	bl	800276c <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e10c      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004150:	4b6a      	ldr	r3, [pc, #424]	; (80042fc <HAL_RCC_OscConfig+0x474>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d106      	bne.n	8004172 <HAL_RCC_OscConfig+0x2ea>
 8004164:	4b64      	ldr	r3, [pc, #400]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004168:	4a63      	ldr	r2, [pc, #396]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6713      	str	r3, [r2, #112]	; 0x70
 8004170:	e01c      	b.n	80041ac <HAL_RCC_OscConfig+0x324>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	2b05      	cmp	r3, #5
 8004178:	d10c      	bne.n	8004194 <HAL_RCC_OscConfig+0x30c>
 800417a:	4b5f      	ldr	r3, [pc, #380]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	4a5e      	ldr	r2, [pc, #376]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004180:	f043 0304 	orr.w	r3, r3, #4
 8004184:	6713      	str	r3, [r2, #112]	; 0x70
 8004186:	4b5c      	ldr	r3, [pc, #368]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418a:	4a5b      	ldr	r2, [pc, #364]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	6713      	str	r3, [r2, #112]	; 0x70
 8004192:	e00b      	b.n	80041ac <HAL_RCC_OscConfig+0x324>
 8004194:	4b58      	ldr	r3, [pc, #352]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004198:	4a57      	ldr	r2, [pc, #348]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 800419a:	f023 0301 	bic.w	r3, r3, #1
 800419e:	6713      	str	r3, [r2, #112]	; 0x70
 80041a0:	4b55      	ldr	r3, [pc, #340]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 80041a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a4:	4a54      	ldr	r2, [pc, #336]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 80041a6:	f023 0304 	bic.w	r3, r3, #4
 80041aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d015      	beq.n	80041e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fe fada 	bl	800276c <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041bc:	f7fe fad6 	bl	800276c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e0cb      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d2:	4b49      	ldr	r3, [pc, #292]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0ee      	beq.n	80041bc <HAL_RCC_OscConfig+0x334>
 80041de:	e014      	b.n	800420a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e0:	f7fe fac4 	bl	800276c <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e6:	e00a      	b.n	80041fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e8:	f7fe fac0 	bl	800276c <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e0b5      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041fe:	4b3e      	ldr	r3, [pc, #248]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1ee      	bne.n	80041e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800420a:	7dfb      	ldrb	r3, [r7, #23]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d105      	bne.n	800421c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004210:	4b39      	ldr	r3, [pc, #228]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	4a38      	ldr	r2, [pc, #224]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800421a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80a1 	beq.w	8004368 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004226:	4b34      	ldr	r3, [pc, #208]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	2b08      	cmp	r3, #8
 8004230:	d05c      	beq.n	80042ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	2b02      	cmp	r3, #2
 8004238:	d141      	bne.n	80042be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423a:	4b31      	ldr	r3, [pc, #196]	; (8004300 <HAL_RCC_OscConfig+0x478>)
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004240:	f7fe fa94 	bl	800276c <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004248:	f7fe fa90 	bl	800276c <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e087      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425a:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f0      	bne.n	8004248 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69da      	ldr	r2, [r3, #28]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	019b      	lsls	r3, r3, #6
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	085b      	lsrs	r3, r3, #1
 800427e:	3b01      	subs	r3, #1
 8004280:	041b      	lsls	r3, r3, #16
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	061b      	lsls	r3, r3, #24
 800428a:	491b      	ldr	r1, [pc, #108]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 800428c:	4313      	orrs	r3, r2
 800428e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004290:	4b1b      	ldr	r3, [pc, #108]	; (8004300 <HAL_RCC_OscConfig+0x478>)
 8004292:	2201      	movs	r2, #1
 8004294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004296:	f7fe fa69 	bl	800276c <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800429e:	f7fe fa65 	bl	800276c <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e05c      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b0:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f0      	beq.n	800429e <HAL_RCC_OscConfig+0x416>
 80042bc:	e054      	b.n	8004368 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042be:	4b10      	ldr	r3, [pc, #64]	; (8004300 <HAL_RCC_OscConfig+0x478>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c4:	f7fe fa52 	bl	800276c <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042cc:	f7fe fa4e 	bl	800276c <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e045      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042de:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0x444>
 80042ea:	e03d      	b.n	8004368 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d107      	bne.n	8004304 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e038      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40007000 	.word	0x40007000
 8004300:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004304:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <HAL_RCC_OscConfig+0x4ec>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d028      	beq.n	8004364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800431c:	429a      	cmp	r2, r3
 800431e:	d121      	bne.n	8004364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432a:	429a      	cmp	r2, r3
 800432c:	d11a      	bne.n	8004364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004334:	4013      	ands	r3, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800433a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800433c:	4293      	cmp	r3, r2
 800433e:	d111      	bne.n	8004364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	085b      	lsrs	r3, r3, #1
 800434c:	3b01      	subs	r3, #1
 800434e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004350:	429a      	cmp	r2, r3
 8004352:	d107      	bne.n	8004364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004360:	429a      	cmp	r2, r3
 8004362:	d001      	beq.n	8004368 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40023800 	.word	0x40023800

08004378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0cc      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800438c:	4b68      	ldr	r3, [pc, #416]	; (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d90c      	bls.n	80043b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439a:	4b65      	ldr	r3, [pc, #404]	; (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a2:	4b63      	ldr	r3, [pc, #396]	; (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0b8      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d020      	beq.n	8004402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043cc:	4b59      	ldr	r3, [pc, #356]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	4a58      	ldr	r2, [pc, #352]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043e4:	4b53      	ldr	r3, [pc, #332]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	4a52      	ldr	r2, [pc, #328]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043f0:	4b50      	ldr	r3, [pc, #320]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	494d      	ldr	r1, [pc, #308]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d044      	beq.n	8004498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d107      	bne.n	8004426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004416:	4b47      	ldr	r3, [pc, #284]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d119      	bne.n	8004456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e07f      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d003      	beq.n	8004436 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004432:	2b03      	cmp	r3, #3
 8004434:	d107      	bne.n	8004446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004436:	4b3f      	ldr	r3, [pc, #252]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d109      	bne.n	8004456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e06f      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004446:	4b3b      	ldr	r3, [pc, #236]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e067      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004456:	4b37      	ldr	r3, [pc, #220]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f023 0203 	bic.w	r2, r3, #3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	4934      	ldr	r1, [pc, #208]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	4313      	orrs	r3, r2
 8004466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004468:	f7fe f980 	bl	800276c <HAL_GetTick>
 800446c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446e:	e00a      	b.n	8004486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004470:	f7fe f97c 	bl	800276c <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f241 3288 	movw	r2, #5000	; 0x1388
 800447e:	4293      	cmp	r3, r2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e04f      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004486:	4b2b      	ldr	r3, [pc, #172]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 020c 	and.w	r2, r3, #12
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	429a      	cmp	r2, r3
 8004496:	d1eb      	bne.n	8004470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004498:	4b25      	ldr	r3, [pc, #148]	; (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d20c      	bcs.n	80044c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a6:	4b22      	ldr	r3, [pc, #136]	; (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ae:	4b20      	ldr	r3, [pc, #128]	; (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d001      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e032      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d008      	beq.n	80044de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044cc:	4b19      	ldr	r3, [pc, #100]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	4916      	ldr	r1, [pc, #88]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ea:	4b12      	ldr	r3, [pc, #72]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	490e      	ldr	r1, [pc, #56]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044fe:	f000 f821 	bl	8004544 <HAL_RCC_GetSysClockFreq>
 8004502:	4602      	mov	r2, r0
 8004504:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	091b      	lsrs	r3, r3, #4
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	490a      	ldr	r1, [pc, #40]	; (8004538 <HAL_RCC_ClockConfig+0x1c0>)
 8004510:	5ccb      	ldrb	r3, [r1, r3]
 8004512:	fa22 f303 	lsr.w	r3, r2, r3
 8004516:	4a09      	ldr	r2, [pc, #36]	; (800453c <HAL_RCC_ClockConfig+0x1c4>)
 8004518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800451a:	4b09      	ldr	r3, [pc, #36]	; (8004540 <HAL_RCC_ClockConfig+0x1c8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fd fd74 	bl	800200c <HAL_InitTick>

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40023c00 	.word	0x40023c00
 8004534:	40023800 	.word	0x40023800
 8004538:	0800c714 	.word	0x0800c714
 800453c:	20000000 	.word	0x20000000
 8004540:	20000004 	.word	0x20000004

08004544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004548:	b090      	sub	sp, #64	; 0x40
 800454a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	637b      	str	r3, [r7, #52]	; 0x34
 8004550:	2300      	movs	r3, #0
 8004552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004554:	2300      	movs	r3, #0
 8004556:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800455c:	4b59      	ldr	r3, [pc, #356]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 030c 	and.w	r3, r3, #12
 8004564:	2b08      	cmp	r3, #8
 8004566:	d00d      	beq.n	8004584 <HAL_RCC_GetSysClockFreq+0x40>
 8004568:	2b08      	cmp	r3, #8
 800456a:	f200 80a1 	bhi.w	80046b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_RCC_GetSysClockFreq+0x34>
 8004572:	2b04      	cmp	r3, #4
 8004574:	d003      	beq.n	800457e <HAL_RCC_GetSysClockFreq+0x3a>
 8004576:	e09b      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004578:	4b53      	ldr	r3, [pc, #332]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800457a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800457c:	e09b      	b.n	80046b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800457e:	4b53      	ldr	r3, [pc, #332]	; (80046cc <HAL_RCC_GetSysClockFreq+0x188>)
 8004580:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004582:	e098      	b.n	80046b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004584:	4b4f      	ldr	r3, [pc, #316]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800458c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800458e:	4b4d      	ldr	r3, [pc, #308]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d028      	beq.n	80045ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800459a:	4b4a      	ldr	r3, [pc, #296]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	099b      	lsrs	r3, r3, #6
 80045a0:	2200      	movs	r2, #0
 80045a2:	623b      	str	r3, [r7, #32]
 80045a4:	627a      	str	r2, [r7, #36]	; 0x24
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80045ac:	2100      	movs	r1, #0
 80045ae:	4b47      	ldr	r3, [pc, #284]	; (80046cc <HAL_RCC_GetSysClockFreq+0x188>)
 80045b0:	fb03 f201 	mul.w	r2, r3, r1
 80045b4:	2300      	movs	r3, #0
 80045b6:	fb00 f303 	mul.w	r3, r0, r3
 80045ba:	4413      	add	r3, r2
 80045bc:	4a43      	ldr	r2, [pc, #268]	; (80046cc <HAL_RCC_GetSysClockFreq+0x188>)
 80045be:	fba0 1202 	umull	r1, r2, r0, r2
 80045c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045c4:	460a      	mov	r2, r1
 80045c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80045c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045ca:	4413      	add	r3, r2
 80045cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d0:	2200      	movs	r2, #0
 80045d2:	61bb      	str	r3, [r7, #24]
 80045d4:	61fa      	str	r2, [r7, #28]
 80045d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80045de:	f7fc faeb 	bl	8000bb8 <__aeabi_uldivmod>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4613      	mov	r3, r2
 80045e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ea:	e053      	b.n	8004694 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ec:	4b35      	ldr	r3, [pc, #212]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	099b      	lsrs	r3, r3, #6
 80045f2:	2200      	movs	r2, #0
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	617a      	str	r2, [r7, #20]
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80045fe:	f04f 0b00 	mov.w	fp, #0
 8004602:	4652      	mov	r2, sl
 8004604:	465b      	mov	r3, fp
 8004606:	f04f 0000 	mov.w	r0, #0
 800460a:	f04f 0100 	mov.w	r1, #0
 800460e:	0159      	lsls	r1, r3, #5
 8004610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004614:	0150      	lsls	r0, r2, #5
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	ebb2 080a 	subs.w	r8, r2, sl
 800461e:	eb63 090b 	sbc.w	r9, r3, fp
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	f04f 0300 	mov.w	r3, #0
 800462a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800462e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004632:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004636:	ebb2 0408 	subs.w	r4, r2, r8
 800463a:	eb63 0509 	sbc.w	r5, r3, r9
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	00eb      	lsls	r3, r5, #3
 8004648:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800464c:	00e2      	lsls	r2, r4, #3
 800464e:	4614      	mov	r4, r2
 8004650:	461d      	mov	r5, r3
 8004652:	eb14 030a 	adds.w	r3, r4, sl
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	eb45 030b 	adc.w	r3, r5, fp
 800465c:	607b      	str	r3, [r7, #4]
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800466a:	4629      	mov	r1, r5
 800466c:	028b      	lsls	r3, r1, #10
 800466e:	4621      	mov	r1, r4
 8004670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004674:	4621      	mov	r1, r4
 8004676:	028a      	lsls	r2, r1, #10
 8004678:	4610      	mov	r0, r2
 800467a:	4619      	mov	r1, r3
 800467c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467e:	2200      	movs	r2, #0
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	60fa      	str	r2, [r7, #12]
 8004684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004688:	f7fc fa96 	bl	8000bb8 <__aeabi_uldivmod>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4613      	mov	r3, r2
 8004692:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004694:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	0c1b      	lsrs	r3, r3, #16
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	3301      	adds	r3, #1
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80046a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046ae:	e002      	b.n	80046b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046b0:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80046b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3740      	adds	r7, #64	; 0x40
 80046bc:	46bd      	mov	sp, r7
 80046be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800
 80046c8:	00f42400 	.word	0x00f42400
 80046cc:	017d7840 	.word	0x017d7840

080046d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d4:	4b03      	ldr	r3, [pc, #12]	; (80046e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046d6:	681b      	ldr	r3, [r3, #0]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20000000 	.word	0x20000000

080046e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046ec:	f7ff fff0 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4b05      	ldr	r3, [pc, #20]	; (8004708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	0a9b      	lsrs	r3, r3, #10
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4903      	ldr	r1, [pc, #12]	; (800470c <HAL_RCC_GetPCLK1Freq+0x24>)
 80046fe:	5ccb      	ldrb	r3, [r1, r3]
 8004700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004704:	4618      	mov	r0, r3
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40023800 	.word	0x40023800
 800470c:	0800c724 	.word	0x0800c724

08004710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004714:	f7ff ffdc 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 8004718:	4602      	mov	r2, r0
 800471a:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	0b5b      	lsrs	r3, r3, #13
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	4903      	ldr	r1, [pc, #12]	; (8004734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004726:	5ccb      	ldrb	r3, [r1, r3]
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40023800 	.word	0x40023800
 8004734:	0800c724 	.word	0x0800c724

08004738 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	220f      	movs	r2, #15
 8004746:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004748:	4b12      	ldr	r3, [pc, #72]	; (8004794 <HAL_RCC_GetClockConfig+0x5c>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 0203 	and.w	r2, r3, #3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004754:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <HAL_RCC_GetClockConfig+0x5c>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004760:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <HAL_RCC_GetClockConfig+0x5c>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800476c:	4b09      	ldr	r3, [pc, #36]	; (8004794 <HAL_RCC_GetClockConfig+0x5c>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	08db      	lsrs	r3, r3, #3
 8004772:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800477a:	4b07      	ldr	r3, [pc, #28]	; (8004798 <HAL_RCC_GetClockConfig+0x60>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0207 	and.w	r2, r3, #7
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	601a      	str	r2, [r3, #0]
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800
 8004798:	40023c00 	.word	0x40023c00

0800479c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e041      	b.n	8004832 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fd fe42 	bl	800244c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3304      	adds	r3, #4
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f000 fa88 	bl	8004cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d001      	beq.n	8004854 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e044      	b.n	80048de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a1e      	ldr	r2, [pc, #120]	; (80048ec <HAL_TIM_Base_Start_IT+0xb0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d018      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487e:	d013      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a1a      	ldr	r2, [pc, #104]	; (80048f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00e      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x6c>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a19      	ldr	r2, [pc, #100]	; (80048f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d009      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a17      	ldr	r2, [pc, #92]	; (80048f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d004      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x6c>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a16      	ldr	r2, [pc, #88]	; (80048fc <HAL_TIM_Base_Start_IT+0xc0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d111      	bne.n	80048cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b06      	cmp	r3, #6
 80048b8:	d010      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f042 0201 	orr.w	r2, r2, #1
 80048c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ca:	e007      	b.n	80048dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0201 	orr.w	r2, r2, #1
 80048da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40010000 	.word	0x40010000
 80048f0:	40000400 	.word	0x40000400
 80048f4:	40000800 	.word	0x40000800
 80048f8:	40000c00 	.word	0x40000c00
 80048fc:	40014000 	.word	0x40014000

08004900 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b02      	cmp	r3, #2
 8004914:	d122      	bne.n	800495c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b02      	cmp	r3, #2
 8004922:	d11b      	bne.n	800495c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0202 	mvn.w	r2, #2
 800492c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f9b5 	bl	8004cb2 <HAL_TIM_IC_CaptureCallback>
 8004948:	e005      	b.n	8004956 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f9a7 	bl	8004c9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f9b8 	bl	8004cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b04      	cmp	r3, #4
 8004968:	d122      	bne.n	80049b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b04      	cmp	r3, #4
 8004976:	d11b      	bne.n	80049b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0204 	mvn.w	r2, #4
 8004980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2202      	movs	r2, #2
 8004986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f98b 	bl	8004cb2 <HAL_TIM_IC_CaptureCallback>
 800499c:	e005      	b.n	80049aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f97d 	bl	8004c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f98e 	bl	8004cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d122      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d11b      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0208 	mvn.w	r2, #8
 80049d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2204      	movs	r2, #4
 80049da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f961 	bl	8004cb2 <HAL_TIM_IC_CaptureCallback>
 80049f0:	e005      	b.n	80049fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f953 	bl	8004c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f964 	bl	8004cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	2b10      	cmp	r3, #16
 8004a10:	d122      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b10      	cmp	r3, #16
 8004a1e:	d11b      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0210 	mvn.w	r2, #16
 8004a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2208      	movs	r2, #8
 8004a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f937 	bl	8004cb2 <HAL_TIM_IC_CaptureCallback>
 8004a44:	e005      	b.n	8004a52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f929 	bl	8004c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f93a 	bl	8004cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d10e      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d107      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0201 	mvn.w	r2, #1
 8004a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fd fa80 	bl	8001f84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8e:	2b80      	cmp	r3, #128	; 0x80
 8004a90:	d10e      	bne.n	8004ab0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9c:	2b80      	cmp	r3, #128	; 0x80
 8004a9e:	d107      	bne.n	8004ab0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fab2 	bl	8005014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aba:	2b40      	cmp	r3, #64	; 0x40
 8004abc:	d10e      	bne.n	8004adc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b40      	cmp	r3, #64	; 0x40
 8004aca:	d107      	bne.n	8004adc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f8ff 	bl	8004cda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	d10e      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d107      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0220 	mvn.w	r2, #32
 8004b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fa7c 	bl	8005000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b08:	bf00      	nop
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_TIM_ConfigClockSource+0x1c>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e0b4      	b.n	8004c96 <HAL_TIM_ConfigClockSource+0x186>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b64:	d03e      	beq.n	8004be4 <HAL_TIM_ConfigClockSource+0xd4>
 8004b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b6a:	f200 8087 	bhi.w	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b72:	f000 8086 	beq.w	8004c82 <HAL_TIM_ConfigClockSource+0x172>
 8004b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7a:	d87f      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b7c:	2b70      	cmp	r3, #112	; 0x70
 8004b7e:	d01a      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0xa6>
 8004b80:	2b70      	cmp	r3, #112	; 0x70
 8004b82:	d87b      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b84:	2b60      	cmp	r3, #96	; 0x60
 8004b86:	d050      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x11a>
 8004b88:	2b60      	cmp	r3, #96	; 0x60
 8004b8a:	d877      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b8c:	2b50      	cmp	r3, #80	; 0x50
 8004b8e:	d03c      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0xfa>
 8004b90:	2b50      	cmp	r3, #80	; 0x50
 8004b92:	d873      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b94:	2b40      	cmp	r3, #64	; 0x40
 8004b96:	d058      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0x13a>
 8004b98:	2b40      	cmp	r3, #64	; 0x40
 8004b9a:	d86f      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b9c:	2b30      	cmp	r3, #48	; 0x30
 8004b9e:	d064      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ba0:	2b30      	cmp	r3, #48	; 0x30
 8004ba2:	d86b      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d060      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d867      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d05c      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004bb0:	2b10      	cmp	r3, #16
 8004bb2:	d05a      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004bb4:	e062      	b.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	6899      	ldr	r1, [r3, #8]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f000 f98d 	bl	8004ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	609a      	str	r2, [r3, #8]
      break;
 8004be2:	e04f      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	6899      	ldr	r1, [r3, #8]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f000 f976 	bl	8004ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c06:	609a      	str	r2, [r3, #8]
      break;
 8004c08:	e03c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6859      	ldr	r1, [r3, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	461a      	mov	r2, r3
 8004c18:	f000 f8ea 	bl	8004df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2150      	movs	r1, #80	; 0x50
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 f943 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004c28:	e02c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6859      	ldr	r1, [r3, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f000 f909 	bl	8004e4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2160      	movs	r1, #96	; 0x60
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 f933 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004c48:	e01c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6859      	ldr	r1, [r3, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	461a      	mov	r2, r3
 8004c58:	f000 f8ca 	bl	8004df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2140      	movs	r1, #64	; 0x40
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 f923 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004c68:	e00c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f000 f91a 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004c7a:	e003      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c80:	e000      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
	...

08004cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a34      	ldr	r2, [pc, #208]	; (8004dd4 <TIM_Base_SetConfig+0xe4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00f      	beq.n	8004d28 <TIM_Base_SetConfig+0x38>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0e:	d00b      	beq.n	8004d28 <TIM_Base_SetConfig+0x38>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a31      	ldr	r2, [pc, #196]	; (8004dd8 <TIM_Base_SetConfig+0xe8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d007      	beq.n	8004d28 <TIM_Base_SetConfig+0x38>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a30      	ldr	r2, [pc, #192]	; (8004ddc <TIM_Base_SetConfig+0xec>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d003      	beq.n	8004d28 <TIM_Base_SetConfig+0x38>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a2f      	ldr	r2, [pc, #188]	; (8004de0 <TIM_Base_SetConfig+0xf0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d108      	bne.n	8004d3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a25      	ldr	r2, [pc, #148]	; (8004dd4 <TIM_Base_SetConfig+0xe4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01b      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d48:	d017      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a22      	ldr	r2, [pc, #136]	; (8004dd8 <TIM_Base_SetConfig+0xe8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a21      	ldr	r2, [pc, #132]	; (8004ddc <TIM_Base_SetConfig+0xec>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00f      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a20      	ldr	r2, [pc, #128]	; (8004de0 <TIM_Base_SetConfig+0xf0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00b      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a1f      	ldr	r2, [pc, #124]	; (8004de4 <TIM_Base_SetConfig+0xf4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d007      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a1e      	ldr	r2, [pc, #120]	; (8004de8 <TIM_Base_SetConfig+0xf8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d003      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a1d      	ldr	r2, [pc, #116]	; (8004dec <TIM_Base_SetConfig+0xfc>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d108      	bne.n	8004d8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a08      	ldr	r2, [pc, #32]	; (8004dd4 <TIM_Base_SetConfig+0xe4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d103      	bne.n	8004dc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	615a      	str	r2, [r3, #20]
}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40010000 	.word	0x40010000
 8004dd8:	40000400 	.word	0x40000400
 8004ddc:	40000800 	.word	0x40000800
 8004de0:	40000c00 	.word	0x40000c00
 8004de4:	40014000 	.word	0x40014000
 8004de8:	40014400 	.word	0x40014400
 8004dec:	40014800 	.word	0x40014800

08004df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	f023 0201 	bic.w	r2, r3, #1
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f023 030a 	bic.w	r3, r3, #10
 8004e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	621a      	str	r2, [r3, #32]
}
 8004e42:	bf00      	nop
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b087      	sub	sp, #28
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f023 0210 	bic.w	r2, r3, #16
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	031b      	lsls	r3, r3, #12
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	621a      	str	r2, [r3, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f043 0307 	orr.w	r3, r3, #7
 8004ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	609a      	str	r2, [r3, #8]
}
 8004ed8:	bf00      	nop
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004efe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	021a      	lsls	r2, r3, #8
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	431a      	orrs	r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	609a      	str	r2, [r3, #8]
}
 8004f18:	bf00      	nop
 8004f1a:	371c      	adds	r7, #28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e050      	b.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1c      	ldr	r2, [pc, #112]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d018      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f88:	d013      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a18      	ldr	r2, [pc, #96]	; (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d00e      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a16      	ldr	r2, [pc, #88]	; (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d009      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a15      	ldr	r2, [pc, #84]	; (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d004      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a13      	ldr	r2, [pc, #76]	; (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d10c      	bne.n	8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40010000 	.word	0x40010000
 8004ff0:	40000400 	.word	0x40000400
 8004ff4:	40000800 	.word	0x40000800
 8004ff8:	40000c00 	.word	0x40000c00
 8004ffc:	40014000 	.word	0x40014000

08005000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e03f      	b.n	80050ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fd fa74 	bl	800253c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2224      	movs	r2, #36	; 0x24
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800506a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 ff9b 	bl	8005fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005080:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	695a      	ldr	r2, [r3, #20]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005090:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b08a      	sub	sp, #40	; 0x28
 80050c6:	af02      	add	r7, sp, #8
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	603b      	str	r3, [r7, #0]
 80050ce:	4613      	mov	r3, r2
 80050d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d17c      	bne.n	80051dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d002      	beq.n	80050ee <HAL_UART_Transmit+0x2c>
 80050e8:	88fb      	ldrh	r3, [r7, #6]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e075      	b.n	80051de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_UART_Transmit+0x3e>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e06e      	b.n	80051de <HAL_UART_Transmit+0x11c>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2221      	movs	r2, #33	; 0x21
 8005112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005116:	f7fd fb29 	bl	800276c <HAL_GetTick>
 800511a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	88fa      	ldrh	r2, [r7, #6]
 8005120:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	88fa      	ldrh	r2, [r7, #6]
 8005126:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005130:	d108      	bne.n	8005144 <HAL_UART_Transmit+0x82>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d104      	bne.n	8005144 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800513a:	2300      	movs	r3, #0
 800513c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	e003      	b.n	800514c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005148:	2300      	movs	r3, #0
 800514a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005154:	e02a      	b.n	80051ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2200      	movs	r2, #0
 800515e:	2180      	movs	r1, #128	; 0x80
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 fc53 	bl	8005a0c <UART_WaitOnFlagUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e036      	b.n	80051de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10b      	bne.n	800518e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005184:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	3302      	adds	r3, #2
 800518a:	61bb      	str	r3, [r7, #24]
 800518c:	e007      	b.n	800519e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	781a      	ldrb	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	3301      	adds	r3, #1
 800519c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1cf      	bne.n	8005156 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2200      	movs	r2, #0
 80051be:	2140      	movs	r1, #64	; 0x40
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 fc23 	bl	8005a0c <UART_WaitOnFlagUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e006      	b.n	80051de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	e000      	b.n	80051de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80051dc:	2302      	movs	r3, #2
  }
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3720      	adds	r7, #32
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b08c      	sub	sp, #48	; 0x30
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	4613      	mov	r3, r2
 80051f2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	d152      	bne.n	80052a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005206:	88fb      	ldrh	r3, [r7, #6]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e04b      	b.n	80052a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005216:	2b01      	cmp	r3, #1
 8005218:	d101      	bne.n	800521e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800521a:	2302      	movs	r3, #2
 800521c:	e044      	b.n	80052a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800522c:	88fb      	ldrh	r3, [r7, #6]
 800522e:	461a      	mov	r2, r3
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 fc58 	bl	8005ae8 <UART_Start_Receive_DMA>
 8005238:	4603      	mov	r3, r0
 800523a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800523e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005242:	2b00      	cmp	r3, #0
 8005244:	d12c      	bne.n	80052a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524a:	2b01      	cmp	r3, #1
 800524c:	d125      	bne.n	800529a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800524e:	2300      	movs	r3, #0
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	613b      	str	r3, [r7, #16]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	330c      	adds	r3, #12
 800526a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	e853 3f00 	ldrex	r3, [r3]
 8005272:	617b      	str	r3, [r7, #20]
   return(result);
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f043 0310 	orr.w	r3, r3, #16
 800527a:	62bb      	str	r3, [r7, #40]	; 0x28
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	330c      	adds	r3, #12
 8005282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005284:	627a      	str	r2, [r7, #36]	; 0x24
 8005286:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005288:	6a39      	ldr	r1, [r7, #32]
 800528a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528c:	e841 2300 	strex	r3, r2, [r1]
 8005290:	61fb      	str	r3, [r7, #28]
   return(result);
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1e5      	bne.n	8005264 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005298:	e002      	b.n	80052a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80052a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052a4:	e000      	b.n	80052a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80052a6:	2302      	movs	r3, #2
  }
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3730      	adds	r7, #48	; 0x30
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b0ba      	sub	sp, #232	; 0xe8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80052dc:	2300      	movs	r3, #0
 80052de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80052ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10f      	bne.n	8005316 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d009      	beq.n	8005316 <HAL_UART_IRQHandler+0x66>
 8005302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fd8f 	bl	8005e32 <UART_Receive_IT>
      return;
 8005314:	e256      	b.n	80057c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005316:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 80de 	beq.w	80054dc <HAL_UART_IRQHandler+0x22c>
 8005320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d106      	bne.n	800533a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800532c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005330:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 80d1 	beq.w	80054dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800533a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00b      	beq.n	800535e <HAL_UART_IRQHandler+0xae>
 8005346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800534a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534e:	2b00      	cmp	r3, #0
 8005350:	d005      	beq.n	800535e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	f043 0201 	orr.w	r2, r3, #1
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800535e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005362:	f003 0304 	and.w	r3, r3, #4
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00b      	beq.n	8005382 <HAL_UART_IRQHandler+0xd2>
 800536a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d005      	beq.n	8005382 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	f043 0202 	orr.w	r2, r3, #2
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00b      	beq.n	80053a6 <HAL_UART_IRQHandler+0xf6>
 800538e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d005      	beq.n	80053a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f043 0204 	orr.w	r2, r3, #4
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d011      	beq.n	80053d6 <HAL_UART_IRQHandler+0x126>
 80053b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d105      	bne.n	80053ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	f043 0208 	orr.w	r2, r3, #8
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 81ed 	beq.w	80057ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d008      	beq.n	80053fe <HAL_UART_IRQHandler+0x14e>
 80053ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fd1a 	bl	8005e32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	bf0c      	ite	eq
 800540c:	2301      	moveq	r3, #1
 800540e:	2300      	movne	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b00      	cmp	r3, #0
 8005420:	d103      	bne.n	800542a <HAL_UART_IRQHandler+0x17a>
 8005422:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d04f      	beq.n	80054ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fc22 	bl	8005c74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543a:	2b40      	cmp	r3, #64	; 0x40
 800543c:	d141      	bne.n	80054c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3314      	adds	r3, #20
 8005444:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005454:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800545c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3314      	adds	r3, #20
 8005466:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800546a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800546e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005472:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005476:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005482:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1d9      	bne.n	800543e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548e:	2b00      	cmp	r3, #0
 8005490:	d013      	beq.n	80054ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005496:	4a7d      	ldr	r2, [pc, #500]	; (800568c <HAL_UART_IRQHandler+0x3dc>)
 8005498:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fe f8ae 	bl	8003600 <HAL_DMA_Abort_IT>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d016      	beq.n	80054d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054b4:	4610      	mov	r0, r2
 80054b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b8:	e00e      	b.n	80054d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f9a4 	bl	8005808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c0:	e00a      	b.n	80054d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f9a0 	bl	8005808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c8:	e006      	b.n	80054d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f99c 	bl	8005808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80054d6:	e170      	b.n	80057ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d8:	bf00      	nop
    return;
 80054da:	e16e      	b.n	80057ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	f040 814a 	bne.w	800577a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ea:	f003 0310 	and.w	r3, r3, #16
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 8143 	beq.w	800577a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054f8:	f003 0310 	and.w	r3, r3, #16
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 813c 	beq.w	800577a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005502:	2300      	movs	r3, #0
 8005504:	60bb      	str	r3, [r7, #8]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	60bb      	str	r3, [r7, #8]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	60bb      	str	r3, [r7, #8]
 8005516:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005522:	2b40      	cmp	r3, #64	; 0x40
 8005524:	f040 80b4 	bne.w	8005690 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005534:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 8140 	beq.w	80057be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005542:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005546:	429a      	cmp	r2, r3
 8005548:	f080 8139 	bcs.w	80057be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005552:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800555e:	f000 8088 	beq.w	8005672 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	330c      	adds	r3, #12
 8005568:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005578:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800557c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005580:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	330c      	adds	r3, #12
 800558a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800558e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005592:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800559a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1d9      	bne.n	8005562 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3314      	adds	r3, #20
 80055b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055c0:	f023 0301 	bic.w	r3, r3, #1
 80055c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3314      	adds	r3, #20
 80055ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055de:	e841 2300 	strex	r3, r2, [r1]
 80055e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1e1      	bne.n	80055ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3314      	adds	r3, #20
 80055f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005600:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3314      	adds	r3, #20
 800560a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800560e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005610:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005612:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005614:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005616:	e841 2300 	strex	r3, r2, [r1]
 800561a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800561c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1e3      	bne.n	80055ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2220      	movs	r2, #32
 8005626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	330c      	adds	r3, #12
 8005636:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563a:	e853 3f00 	ldrex	r3, [r3]
 800563e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005642:	f023 0310 	bic.w	r3, r3, #16
 8005646:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	330c      	adds	r3, #12
 8005650:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005654:	65ba      	str	r2, [r7, #88]	; 0x58
 8005656:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005658:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800565a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800565c:	e841 2300 	strex	r3, r2, [r1]
 8005660:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1e3      	bne.n	8005630 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	4618      	mov	r0, r3
 800566e:	f7fd ff57 	bl	8003520 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800567a:	b29b      	uxth	r3, r3
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	b29b      	uxth	r3, r3
 8005680:	4619      	mov	r1, r3
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fc fb98 	bl	8001db8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005688:	e099      	b.n	80057be <HAL_UART_IRQHandler+0x50e>
 800568a:	bf00      	nop
 800568c:	08005d3b 	.word	0x08005d3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005698:	b29b      	uxth	r3, r3
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 808b 	beq.w	80057c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80056ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 8086 	beq.w	80057c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	330c      	adds	r3, #12
 80056bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	330c      	adds	r3, #12
 80056d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80056da:	647a      	str	r2, [r7, #68]	; 0x44
 80056dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e3      	bne.n	80056b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3314      	adds	r3, #20
 80056f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	623b      	str	r3, [r7, #32]
   return(result);
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	f023 0301 	bic.w	r3, r3, #1
 8005704:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3314      	adds	r3, #20
 800570e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005712:	633a      	str	r2, [r7, #48]	; 0x30
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571a:	e841 2300 	strex	r3, r2, [r1]
 800571e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1e3      	bne.n	80056ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	330c      	adds	r3, #12
 800573a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	e853 3f00 	ldrex	r3, [r3]
 8005742:	60fb      	str	r3, [r7, #12]
   return(result);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0310 	bic.w	r3, r3, #16
 800574a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	330c      	adds	r3, #12
 8005754:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005758:	61fa      	str	r2, [r7, #28]
 800575a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	69b9      	ldr	r1, [r7, #24]
 800575e:	69fa      	ldr	r2, [r7, #28]
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	617b      	str	r3, [r7, #20]
   return(result);
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e3      	bne.n	8005734 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800576c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7fc fb20 	bl	8001db8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005778:	e023      	b.n	80057c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800577a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005782:	2b00      	cmp	r3, #0
 8005784:	d009      	beq.n	800579a <HAL_UART_IRQHandler+0x4ea>
 8005786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800578a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fae5 	bl	8005d62 <UART_Transmit_IT>
    return;
 8005798:	e014      	b.n	80057c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800579a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800579e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00e      	beq.n	80057c4 <HAL_UART_IRQHandler+0x514>
 80057a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d008      	beq.n	80057c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fb25 	bl	8005e02 <UART_EndTransmit_IT>
    return;
 80057b8:	e004      	b.n	80057c4 <HAL_UART_IRQHandler+0x514>
    return;
 80057ba:	bf00      	nop
 80057bc:	e002      	b.n	80057c4 <HAL_UART_IRQHandler+0x514>
      return;
 80057be:	bf00      	nop
 80057c0:	e000      	b.n	80057c4 <HAL_UART_IRQHandler+0x514>
      return;
 80057c2:	bf00      	nop
  }
}
 80057c4:	37e8      	adds	r7, #232	; 0xe8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop

080057cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b09c      	sub	sp, #112	; 0x70
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005834:	2b00      	cmp	r3, #0
 8005836:	d172      	bne.n	800591e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800583a:	2200      	movs	r2, #0
 800583c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800583e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	330c      	adds	r3, #12
 8005844:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800584e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005854:	66bb      	str	r3, [r7, #104]	; 0x68
 8005856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	330c      	adds	r3, #12
 800585c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800585e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005860:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005864:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800586c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e5      	bne.n	800583e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3314      	adds	r3, #20
 8005878:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005884:	f023 0301 	bic.w	r3, r3, #1
 8005888:	667b      	str	r3, [r7, #100]	; 0x64
 800588a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3314      	adds	r3, #20
 8005890:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005892:	647a      	str	r2, [r7, #68]	; 0x44
 8005894:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005898:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e5      	bne.n	8005872 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3314      	adds	r3, #20
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	e853 3f00 	ldrex	r3, [r3]
 80058b4:	623b      	str	r3, [r7, #32]
   return(result);
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058bc:	663b      	str	r3, [r7, #96]	; 0x60
 80058be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3314      	adds	r3, #20
 80058c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058c6:	633a      	str	r2, [r7, #48]	; 0x30
 80058c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ce:	e841 2300 	strex	r3, r2, [r1]
 80058d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1e5      	bne.n	80058a6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d119      	bne.n	800591e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	330c      	adds	r3, #12
 80058f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f023 0310 	bic.w	r3, r3, #16
 8005900:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	330c      	adds	r3, #12
 8005908:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800590a:	61fa      	str	r2, [r7, #28]
 800590c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	69b9      	ldr	r1, [r7, #24]
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	617b      	str	r3, [r7, #20]
   return(result);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e5      	bne.n	80058ea <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800591e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005922:	2b01      	cmp	r3, #1
 8005924:	d106      	bne.n	8005934 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005928:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800592a:	4619      	mov	r1, r3
 800592c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800592e:	f7fc fa43 	bl	8001db8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005932:	e002      	b.n	800593a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005934:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005936:	f7ff ff53 	bl	80057e0 <HAL_UART_RxCpltCallback>
}
 800593a:	bf00      	nop
 800593c:	3770      	adds	r7, #112	; 0x70
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b084      	sub	sp, #16
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	2b01      	cmp	r3, #1
 8005956:	d108      	bne.n	800596a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800595c:	085b      	lsrs	r3, r3, #1
 800595e:	b29b      	uxth	r3, r3
 8005960:	4619      	mov	r1, r3
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f7fc fa28 	bl	8001db8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005968:	e002      	b.n	8005970 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f7ff ff42 	bl	80057f4 <HAL_UART_RxHalfCpltCallback>
}
 8005970:	bf00      	nop
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005988:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005994:	2b80      	cmp	r3, #128	; 0x80
 8005996:	bf0c      	ite	eq
 8005998:	2301      	moveq	r3, #1
 800599a:	2300      	movne	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b21      	cmp	r3, #33	; 0x21
 80059aa:	d108      	bne.n	80059be <UART_DMAError+0x46>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2200      	movs	r2, #0
 80059b6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80059b8:	68b8      	ldr	r0, [r7, #8]
 80059ba:	f000 f933 	bl	8005c24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c8:	2b40      	cmp	r3, #64	; 0x40
 80059ca:	bf0c      	ite	eq
 80059cc:	2301      	moveq	r3, #1
 80059ce:	2300      	movne	r3, #0
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b22      	cmp	r3, #34	; 0x22
 80059de:	d108      	bne.n	80059f2 <UART_DMAError+0x7a>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d005      	beq.n	80059f2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2200      	movs	r2, #0
 80059ea:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80059ec:	68b8      	ldr	r0, [r7, #8]
 80059ee:	f000 f941 	bl	8005c74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f043 0210 	orr.w	r2, r3, #16
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059fe:	68b8      	ldr	r0, [r7, #8]
 8005a00:	f7ff ff02 	bl	8005808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a04:	bf00      	nop
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b090      	sub	sp, #64	; 0x40
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a1c:	e050      	b.n	8005ac0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a24:	d04c      	beq.n	8005ac0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d007      	beq.n	8005a3c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a2c:	f7fc fe9e 	bl	800276c <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d241      	bcs.n	8005ac0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	330c      	adds	r3, #12
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	e853 3f00 	ldrex	r3, [r3]
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	330c      	adds	r3, #12
 8005a5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a5c:	637a      	str	r2, [r7, #52]	; 0x34
 8005a5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e5      	bne.n	8005a3c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3314      	adds	r3, #20
 8005a76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f023 0301 	bic.w	r3, r3, #1
 8005a86:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3314      	adds	r3, #20
 8005a8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a90:	623a      	str	r2, [r7, #32]
 8005a92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	69f9      	ldr	r1, [r7, #28]
 8005a96:	6a3a      	ldr	r2, [r7, #32]
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e5      	bne.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e00f      	b.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	bf0c      	ite	eq
 8005ad0:	2301      	moveq	r3, #1
 8005ad2:	2300      	movne	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d09f      	beq.n	8005a1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3740      	adds	r7, #64	; 0x40
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b098      	sub	sp, #96	; 0x60
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	4613      	mov	r3, r2
 8005af4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	88fa      	ldrh	r2, [r7, #6]
 8005b00:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2222      	movs	r2, #34	; 0x22
 8005b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	4a40      	ldr	r2, [pc, #256]	; (8005c18 <UART_Start_Receive_DMA+0x130>)
 8005b16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	4a3f      	ldr	r2, [pc, #252]	; (8005c1c <UART_Start_Receive_DMA+0x134>)
 8005b1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b24:	4a3e      	ldr	r2, [pc, #248]	; (8005c20 <UART_Start_Receive_DMA+0x138>)
 8005b26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005b30:	f107 0308 	add.w	r3, r7, #8
 8005b34:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3304      	adds	r3, #4
 8005b40:	4619      	mov	r1, r3
 8005b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	88fb      	ldrh	r3, [r7, #6]
 8005b48:	f7fd fc92 	bl	8003470 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	613b      	str	r3, [r7, #16]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	613b      	str	r3, [r7, #16]
 8005b60:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d019      	beq.n	8005ba6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	330c      	adds	r3, #12
 8005b78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b88:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	330c      	adds	r3, #12
 8005b90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b92:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005b94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b96:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005b98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b9a:	e841 2300 	strex	r3, r2, [r1]
 8005b9e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1e5      	bne.n	8005b72 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3314      	adds	r3, #20
 8005bac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb8:	f043 0301 	orr.w	r3, r3, #1
 8005bbc:	657b      	str	r3, [r7, #84]	; 0x54
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3314      	adds	r3, #20
 8005bc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bc6:	63ba      	str	r2, [r7, #56]	; 0x38
 8005bc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005bcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e5      	bne.n	8005ba6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3314      	adds	r3, #20
 8005be0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	e853 3f00 	ldrex	r3, [r3]
 8005be8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bf0:	653b      	str	r3, [r7, #80]	; 0x50
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3314      	adds	r3, #20
 8005bf8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005bfa:	627a      	str	r2, [r7, #36]	; 0x24
 8005bfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfe:	6a39      	ldr	r1, [r7, #32]
 8005c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c02:	e841 2300 	strex	r3, r2, [r1]
 8005c06:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1e5      	bne.n	8005bda <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3760      	adds	r7, #96	; 0x60
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	0800581d 	.word	0x0800581d
 8005c1c:	08005943 	.word	0x08005943
 8005c20:	08005979 	.word	0x08005979

08005c24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b089      	sub	sp, #36	; 0x24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	330c      	adds	r3, #12
 8005c32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	e853 3f00 	ldrex	r3, [r3]
 8005c3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c42:	61fb      	str	r3, [r7, #28]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	61ba      	str	r2, [r7, #24]
 8005c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	6979      	ldr	r1, [r7, #20]
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	e841 2300 	strex	r3, r2, [r1]
 8005c58:	613b      	str	r3, [r7, #16]
   return(result);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e5      	bne.n	8005c2c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2220      	movs	r2, #32
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005c68:	bf00      	nop
 8005c6a:	3724      	adds	r7, #36	; 0x24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b095      	sub	sp, #84	; 0x54
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	330c      	adds	r3, #12
 8005c82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	330c      	adds	r3, #12
 8005c9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c9c:	643a      	str	r2, [r7, #64]	; 0x40
 8005c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ca2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e5      	bne.n	8005c7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3314      	adds	r3, #20
 8005cb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	e853 3f00 	ldrex	r3, [r3]
 8005cbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	f023 0301 	bic.w	r3, r3, #1
 8005cc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3314      	adds	r3, #20
 8005cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e5      	bne.n	8005cb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d119      	bne.n	8005d20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f023 0310 	bic.w	r3, r3, #16
 8005d02:	647b      	str	r3, [r7, #68]	; 0x44
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	330c      	adds	r3, #12
 8005d0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d0c:	61ba      	str	r2, [r7, #24]
 8005d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	6979      	ldr	r1, [r7, #20]
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	613b      	str	r3, [r7, #16]
   return(result);
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e5      	bne.n	8005cec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d2e:	bf00      	nop
 8005d30:	3754      	adds	r7, #84	; 0x54
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b084      	sub	sp, #16
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f7ff fd57 	bl	8005808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d5a:	bf00      	nop
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b21      	cmp	r3, #33	; 0x21
 8005d74:	d13e      	bne.n	8005df4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7e:	d114      	bne.n	8005daa <UART_Transmit_IT+0x48>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d110      	bne.n	8005daa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	1c9a      	adds	r2, r3, #2
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	621a      	str	r2, [r3, #32]
 8005da8:	e008      	b.n	8005dbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	1c59      	adds	r1, r3, #1
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6211      	str	r1, [r2, #32]
 8005db4:	781a      	ldrb	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10f      	bne.n	8005df0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	e000      	b.n	8005df6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005df4:	2302      	movs	r3, #2
  }
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b082      	sub	sp, #8
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68da      	ldr	r2, [r3, #12]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff fcd2 	bl	80057cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b08c      	sub	sp, #48	; 0x30
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b22      	cmp	r3, #34	; 0x22
 8005e44:	f040 80ab 	bne.w	8005f9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e50:	d117      	bne.n	8005e82 <UART_Receive_IT+0x50>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d113      	bne.n	8005e82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	1c9a      	adds	r2, r3, #2
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	629a      	str	r2, [r3, #40]	; 0x28
 8005e80:	e026      	b.n	8005ed0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e94:	d007      	beq.n	8005ea6 <UART_Receive_IT+0x74>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10a      	bne.n	8005eb4 <UART_Receive_IT+0x82>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb0:	701a      	strb	r2, [r3, #0]
 8005eb2:	e008      	b.n	8005ec6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	4619      	mov	r1, r3
 8005ede:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d15a      	bne.n	8005f9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0220 	bic.w	r2, r2, #32
 8005ef2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695a      	ldr	r2, [r3, #20]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0201 	bic.w	r2, r2, #1
 8005f12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d135      	bne.n	8005f90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	330c      	adds	r3, #12
 8005f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	613b      	str	r3, [r7, #16]
   return(result);
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f023 0310 	bic.w	r3, r3, #16
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	330c      	adds	r3, #12
 8005f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4a:	623a      	str	r2, [r7, #32]
 8005f4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4e:	69f9      	ldr	r1, [r7, #28]
 8005f50:	6a3a      	ldr	r2, [r7, #32]
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1e5      	bne.n	8005f2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0310 	and.w	r3, r3, #16
 8005f68:	2b10      	cmp	r3, #16
 8005f6a:	d10a      	bne.n	8005f82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7fb ff15 	bl	8001db8 <HAL_UARTEx_RxEventCallback>
 8005f8e:	e002      	b.n	8005f96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff fc25 	bl	80057e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	e002      	b.n	8005fa0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e000      	b.n	8005fa0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005f9e:	2302      	movs	r3, #2
  }
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3730      	adds	r7, #48	; 0x30
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fac:	b0c0      	sub	sp, #256	; 0x100
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc4:	68d9      	ldr	r1, [r3, #12]
 8005fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	ea40 0301 	orr.w	r3, r0, r1
 8005fd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006000:	f021 010c 	bic.w	r1, r1, #12
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800600e:	430b      	orrs	r3, r1
 8006010:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800601e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006022:	6999      	ldr	r1, [r3, #24]
 8006024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	ea40 0301 	orr.w	r3, r0, r1
 800602e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	4b8f      	ldr	r3, [pc, #572]	; (8006274 <UART_SetConfig+0x2cc>)
 8006038:	429a      	cmp	r2, r3
 800603a:	d005      	beq.n	8006048 <UART_SetConfig+0xa0>
 800603c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	4b8d      	ldr	r3, [pc, #564]	; (8006278 <UART_SetConfig+0x2d0>)
 8006044:	429a      	cmp	r2, r3
 8006046:	d104      	bne.n	8006052 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006048:	f7fe fb62 	bl	8004710 <HAL_RCC_GetPCLK2Freq>
 800604c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006050:	e003      	b.n	800605a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006052:	f7fe fb49 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 8006056:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800605a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605e:	69db      	ldr	r3, [r3, #28]
 8006060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006064:	f040 810c 	bne.w	8006280 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800606c:	2200      	movs	r2, #0
 800606e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006072:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006076:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800607a:	4622      	mov	r2, r4
 800607c:	462b      	mov	r3, r5
 800607e:	1891      	adds	r1, r2, r2
 8006080:	65b9      	str	r1, [r7, #88]	; 0x58
 8006082:	415b      	adcs	r3, r3
 8006084:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006086:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800608a:	4621      	mov	r1, r4
 800608c:	eb12 0801 	adds.w	r8, r2, r1
 8006090:	4629      	mov	r1, r5
 8006092:	eb43 0901 	adc.w	r9, r3, r1
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	f04f 0300 	mov.w	r3, #0
 800609e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060aa:	4690      	mov	r8, r2
 80060ac:	4699      	mov	r9, r3
 80060ae:	4623      	mov	r3, r4
 80060b0:	eb18 0303 	adds.w	r3, r8, r3
 80060b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060b8:	462b      	mov	r3, r5
 80060ba:	eb49 0303 	adc.w	r3, r9, r3
 80060be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060d6:	460b      	mov	r3, r1
 80060d8:	18db      	adds	r3, r3, r3
 80060da:	653b      	str	r3, [r7, #80]	; 0x50
 80060dc:	4613      	mov	r3, r2
 80060de:	eb42 0303 	adc.w	r3, r2, r3
 80060e2:	657b      	str	r3, [r7, #84]	; 0x54
 80060e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060ec:	f7fa fd64 	bl	8000bb8 <__aeabi_uldivmod>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4b61      	ldr	r3, [pc, #388]	; (800627c <UART_SetConfig+0x2d4>)
 80060f6:	fba3 2302 	umull	r2, r3, r3, r2
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	011c      	lsls	r4, r3, #4
 80060fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006102:	2200      	movs	r2, #0
 8006104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006108:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800610c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006110:	4642      	mov	r2, r8
 8006112:	464b      	mov	r3, r9
 8006114:	1891      	adds	r1, r2, r2
 8006116:	64b9      	str	r1, [r7, #72]	; 0x48
 8006118:	415b      	adcs	r3, r3
 800611a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800611c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006120:	4641      	mov	r1, r8
 8006122:	eb12 0a01 	adds.w	sl, r2, r1
 8006126:	4649      	mov	r1, r9
 8006128:	eb43 0b01 	adc.w	fp, r3, r1
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006138:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800613c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006140:	4692      	mov	sl, r2
 8006142:	469b      	mov	fp, r3
 8006144:	4643      	mov	r3, r8
 8006146:	eb1a 0303 	adds.w	r3, sl, r3
 800614a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800614e:	464b      	mov	r3, r9
 8006150:	eb4b 0303 	adc.w	r3, fp, r3
 8006154:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006164:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006168:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800616c:	460b      	mov	r3, r1
 800616e:	18db      	adds	r3, r3, r3
 8006170:	643b      	str	r3, [r7, #64]	; 0x40
 8006172:	4613      	mov	r3, r2
 8006174:	eb42 0303 	adc.w	r3, r2, r3
 8006178:	647b      	str	r3, [r7, #68]	; 0x44
 800617a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800617e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006182:	f7fa fd19 	bl	8000bb8 <__aeabi_uldivmod>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	4611      	mov	r1, r2
 800618c:	4b3b      	ldr	r3, [pc, #236]	; (800627c <UART_SetConfig+0x2d4>)
 800618e:	fba3 2301 	umull	r2, r3, r3, r1
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	2264      	movs	r2, #100	; 0x64
 8006196:	fb02 f303 	mul.w	r3, r2, r3
 800619a:	1acb      	subs	r3, r1, r3
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061a2:	4b36      	ldr	r3, [pc, #216]	; (800627c <UART_SetConfig+0x2d4>)
 80061a4:	fba3 2302 	umull	r2, r3, r3, r2
 80061a8:	095b      	lsrs	r3, r3, #5
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061b0:	441c      	add	r4, r3
 80061b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061c4:	4642      	mov	r2, r8
 80061c6:	464b      	mov	r3, r9
 80061c8:	1891      	adds	r1, r2, r2
 80061ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80061cc:	415b      	adcs	r3, r3
 80061ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061d4:	4641      	mov	r1, r8
 80061d6:	1851      	adds	r1, r2, r1
 80061d8:	6339      	str	r1, [r7, #48]	; 0x30
 80061da:	4649      	mov	r1, r9
 80061dc:	414b      	adcs	r3, r1
 80061de:	637b      	str	r3, [r7, #52]	; 0x34
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061ec:	4659      	mov	r1, fp
 80061ee:	00cb      	lsls	r3, r1, #3
 80061f0:	4651      	mov	r1, sl
 80061f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061f6:	4651      	mov	r1, sl
 80061f8:	00ca      	lsls	r2, r1, #3
 80061fa:	4610      	mov	r0, r2
 80061fc:	4619      	mov	r1, r3
 80061fe:	4603      	mov	r3, r0
 8006200:	4642      	mov	r2, r8
 8006202:	189b      	adds	r3, r3, r2
 8006204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006208:	464b      	mov	r3, r9
 800620a:	460a      	mov	r2, r1
 800620c:	eb42 0303 	adc.w	r3, r2, r3
 8006210:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006220:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006224:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006228:	460b      	mov	r3, r1
 800622a:	18db      	adds	r3, r3, r3
 800622c:	62bb      	str	r3, [r7, #40]	; 0x28
 800622e:	4613      	mov	r3, r2
 8006230:	eb42 0303 	adc.w	r3, r2, r3
 8006234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800623a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800623e:	f7fa fcbb 	bl	8000bb8 <__aeabi_uldivmod>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4b0d      	ldr	r3, [pc, #52]	; (800627c <UART_SetConfig+0x2d4>)
 8006248:	fba3 1302 	umull	r1, r3, r3, r2
 800624c:	095b      	lsrs	r3, r3, #5
 800624e:	2164      	movs	r1, #100	; 0x64
 8006250:	fb01 f303 	mul.w	r3, r1, r3
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	3332      	adds	r3, #50	; 0x32
 800625a:	4a08      	ldr	r2, [pc, #32]	; (800627c <UART_SetConfig+0x2d4>)
 800625c:	fba2 2303 	umull	r2, r3, r2, r3
 8006260:	095b      	lsrs	r3, r3, #5
 8006262:	f003 0207 	and.w	r2, r3, #7
 8006266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4422      	add	r2, r4
 800626e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006270:	e105      	b.n	800647e <UART_SetConfig+0x4d6>
 8006272:	bf00      	nop
 8006274:	40011000 	.word	0x40011000
 8006278:	40011400 	.word	0x40011400
 800627c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006284:	2200      	movs	r2, #0
 8006286:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800628a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800628e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006292:	4642      	mov	r2, r8
 8006294:	464b      	mov	r3, r9
 8006296:	1891      	adds	r1, r2, r2
 8006298:	6239      	str	r1, [r7, #32]
 800629a:	415b      	adcs	r3, r3
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
 800629e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062a2:	4641      	mov	r1, r8
 80062a4:	1854      	adds	r4, r2, r1
 80062a6:	4649      	mov	r1, r9
 80062a8:	eb43 0501 	adc.w	r5, r3, r1
 80062ac:	f04f 0200 	mov.w	r2, #0
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	00eb      	lsls	r3, r5, #3
 80062b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062ba:	00e2      	lsls	r2, r4, #3
 80062bc:	4614      	mov	r4, r2
 80062be:	461d      	mov	r5, r3
 80062c0:	4643      	mov	r3, r8
 80062c2:	18e3      	adds	r3, r4, r3
 80062c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062c8:	464b      	mov	r3, r9
 80062ca:	eb45 0303 	adc.w	r3, r5, r3
 80062ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062e2:	f04f 0200 	mov.w	r2, #0
 80062e6:	f04f 0300 	mov.w	r3, #0
 80062ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062ee:	4629      	mov	r1, r5
 80062f0:	008b      	lsls	r3, r1, #2
 80062f2:	4621      	mov	r1, r4
 80062f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062f8:	4621      	mov	r1, r4
 80062fa:	008a      	lsls	r2, r1, #2
 80062fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006300:	f7fa fc5a 	bl	8000bb8 <__aeabi_uldivmod>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	4b60      	ldr	r3, [pc, #384]	; (800648c <UART_SetConfig+0x4e4>)
 800630a:	fba3 2302 	umull	r2, r3, r3, r2
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	011c      	lsls	r4, r3, #4
 8006312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006316:	2200      	movs	r2, #0
 8006318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800631c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006320:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006324:	4642      	mov	r2, r8
 8006326:	464b      	mov	r3, r9
 8006328:	1891      	adds	r1, r2, r2
 800632a:	61b9      	str	r1, [r7, #24]
 800632c:	415b      	adcs	r3, r3
 800632e:	61fb      	str	r3, [r7, #28]
 8006330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006334:	4641      	mov	r1, r8
 8006336:	1851      	adds	r1, r2, r1
 8006338:	6139      	str	r1, [r7, #16]
 800633a:	4649      	mov	r1, r9
 800633c:	414b      	adcs	r3, r1
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800634c:	4659      	mov	r1, fp
 800634e:	00cb      	lsls	r3, r1, #3
 8006350:	4651      	mov	r1, sl
 8006352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006356:	4651      	mov	r1, sl
 8006358:	00ca      	lsls	r2, r1, #3
 800635a:	4610      	mov	r0, r2
 800635c:	4619      	mov	r1, r3
 800635e:	4603      	mov	r3, r0
 8006360:	4642      	mov	r2, r8
 8006362:	189b      	adds	r3, r3, r2
 8006364:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006368:	464b      	mov	r3, r9
 800636a:	460a      	mov	r2, r1
 800636c:	eb42 0303 	adc.w	r3, r2, r3
 8006370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	67bb      	str	r3, [r7, #120]	; 0x78
 800637e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006380:	f04f 0200 	mov.w	r2, #0
 8006384:	f04f 0300 	mov.w	r3, #0
 8006388:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800638c:	4649      	mov	r1, r9
 800638e:	008b      	lsls	r3, r1, #2
 8006390:	4641      	mov	r1, r8
 8006392:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006396:	4641      	mov	r1, r8
 8006398:	008a      	lsls	r2, r1, #2
 800639a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800639e:	f7fa fc0b 	bl	8000bb8 <__aeabi_uldivmod>
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	4b39      	ldr	r3, [pc, #228]	; (800648c <UART_SetConfig+0x4e4>)
 80063a8:	fba3 1302 	umull	r1, r3, r3, r2
 80063ac:	095b      	lsrs	r3, r3, #5
 80063ae:	2164      	movs	r1, #100	; 0x64
 80063b0:	fb01 f303 	mul.w	r3, r1, r3
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	011b      	lsls	r3, r3, #4
 80063b8:	3332      	adds	r3, #50	; 0x32
 80063ba:	4a34      	ldr	r2, [pc, #208]	; (800648c <UART_SetConfig+0x4e4>)
 80063bc:	fba2 2303 	umull	r2, r3, r2, r3
 80063c0:	095b      	lsrs	r3, r3, #5
 80063c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063c6:	441c      	add	r4, r3
 80063c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063cc:	2200      	movs	r2, #0
 80063ce:	673b      	str	r3, [r7, #112]	; 0x70
 80063d0:	677a      	str	r2, [r7, #116]	; 0x74
 80063d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063d6:	4642      	mov	r2, r8
 80063d8:	464b      	mov	r3, r9
 80063da:	1891      	adds	r1, r2, r2
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	415b      	adcs	r3, r3
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063e6:	4641      	mov	r1, r8
 80063e8:	1851      	adds	r1, r2, r1
 80063ea:	6039      	str	r1, [r7, #0]
 80063ec:	4649      	mov	r1, r9
 80063ee:	414b      	adcs	r3, r1
 80063f0:	607b      	str	r3, [r7, #4]
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	f04f 0300 	mov.w	r3, #0
 80063fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063fe:	4659      	mov	r1, fp
 8006400:	00cb      	lsls	r3, r1, #3
 8006402:	4651      	mov	r1, sl
 8006404:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006408:	4651      	mov	r1, sl
 800640a:	00ca      	lsls	r2, r1, #3
 800640c:	4610      	mov	r0, r2
 800640e:	4619      	mov	r1, r3
 8006410:	4603      	mov	r3, r0
 8006412:	4642      	mov	r2, r8
 8006414:	189b      	adds	r3, r3, r2
 8006416:	66bb      	str	r3, [r7, #104]	; 0x68
 8006418:	464b      	mov	r3, r9
 800641a:	460a      	mov	r2, r1
 800641c:	eb42 0303 	adc.w	r3, r2, r3
 8006420:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	663b      	str	r3, [r7, #96]	; 0x60
 800642c:	667a      	str	r2, [r7, #100]	; 0x64
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800643a:	4649      	mov	r1, r9
 800643c:	008b      	lsls	r3, r1, #2
 800643e:	4641      	mov	r1, r8
 8006440:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006444:	4641      	mov	r1, r8
 8006446:	008a      	lsls	r2, r1, #2
 8006448:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800644c:	f7fa fbb4 	bl	8000bb8 <__aeabi_uldivmod>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	4b0d      	ldr	r3, [pc, #52]	; (800648c <UART_SetConfig+0x4e4>)
 8006456:	fba3 1302 	umull	r1, r3, r3, r2
 800645a:	095b      	lsrs	r3, r3, #5
 800645c:	2164      	movs	r1, #100	; 0x64
 800645e:	fb01 f303 	mul.w	r3, r1, r3
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	011b      	lsls	r3, r3, #4
 8006466:	3332      	adds	r3, #50	; 0x32
 8006468:	4a08      	ldr	r2, [pc, #32]	; (800648c <UART_SetConfig+0x4e4>)
 800646a:	fba2 2303 	umull	r2, r3, r2, r3
 800646e:	095b      	lsrs	r3, r3, #5
 8006470:	f003 020f 	and.w	r2, r3, #15
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4422      	add	r2, r4
 800647c:	609a      	str	r2, [r3, #8]
}
 800647e:	bf00      	nop
 8006480:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006484:	46bd      	mov	sp, r7
 8006486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800648a:	bf00      	nop
 800648c:	51eb851f 	.word	0x51eb851f

08006490 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	4603      	mov	r3, r0
 8006498:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800649e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064a2:	2b84      	cmp	r3, #132	; 0x84
 80064a4:	d005      	beq.n	80064b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80064a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	4413      	add	r3, r2
 80064ae:	3303      	adds	r3, #3
 80064b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80064b2:	68fb      	ldr	r3, [r7, #12]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80064c4:	f001 fb0c 	bl	8007ae0 <vTaskStartScheduler>
  
  return osOK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	bd80      	pop	{r7, pc}

080064ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80064ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064d0:	b089      	sub	sp, #36	; 0x24
 80064d2:	af04      	add	r7, sp, #16
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d020      	beq.n	8006522 <osThreadCreate+0x54>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01c      	beq.n	8006522 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685c      	ldr	r4, [r3, #4]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681d      	ldr	r5, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691e      	ldr	r6, [r3, #16]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff ffc8 	bl	8006490 <makeFreeRtosPriority>
 8006500:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800650a:	9202      	str	r2, [sp, #8]
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	9100      	str	r1, [sp, #0]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	4632      	mov	r2, r6
 8006514:	4629      	mov	r1, r5
 8006516:	4620      	mov	r0, r4
 8006518:	f000 ffe4 	bl	80074e4 <xTaskCreateStatic>
 800651c:	4603      	mov	r3, r0
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	e01c      	b.n	800655c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685c      	ldr	r4, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800652e:	b29e      	uxth	r6, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff ffaa 	bl	8006490 <makeFreeRtosPriority>
 800653c:	4602      	mov	r2, r0
 800653e:	f107 030c 	add.w	r3, r7, #12
 8006542:	9301      	str	r3, [sp, #4]
 8006544:	9200      	str	r2, [sp, #0]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	4632      	mov	r2, r6
 800654a:	4629      	mov	r1, r5
 800654c:	4620      	mov	r0, r4
 800654e:	f001 f826 	bl	800759e <xTaskCreate>
 8006552:	4603      	mov	r3, r0
 8006554:	2b01      	cmp	r3, #1
 8006556:	d001      	beq.n	800655c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006558:	2300      	movs	r3, #0
 800655a:	e000      	b.n	800655e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800655c:	68fb      	ldr	r3, [r7, #12]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006566 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <osDelay+0x16>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	e000      	b.n	800657e <osDelay+0x18>
 800657c:	2301      	movs	r3, #1
 800657e:	4618      	mov	r0, r3
 8006580:	f001 f944 	bl	800780c <vTaskDelay>
  
  return osOK;
 8006584:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af02      	add	r7, sp, #8
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	460b      	mov	r3, r1
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d013      	beq.n	80065ce <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80065a6:	7afb      	ldrb	r3, [r7, #11]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d101      	bne.n	80065b0 <osTimerCreate+0x20>
 80065ac:	2101      	movs	r1, #1
 80065ae:	e000      	b.n	80065b2 <osTimerCreate+0x22>
 80065b0:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80065ba:	9201      	str	r2, [sp, #4]
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	460a      	mov	r2, r1
 80065c2:	2101      	movs	r1, #1
 80065c4:	480b      	ldr	r0, [pc, #44]	; (80065f4 <osTimerCreate+0x64>)
 80065c6:	f002 f848 	bl	800865a <xTimerCreateStatic>
 80065ca:	4603      	mov	r3, r0
 80065cc:	e00e      	b.n	80065ec <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80065ce:	7afb      	ldrb	r3, [r7, #11]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d101      	bne.n	80065d8 <osTimerCreate+0x48>
 80065d4:	2201      	movs	r2, #1
 80065d6:	e000      	b.n	80065da <osTimerCreate+0x4a>
 80065d8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2101      	movs	r1, #1
 80065e4:	4803      	ldr	r0, [pc, #12]	; (80065f4 <osTimerCreate+0x64>)
 80065e6:	f002 f817 	bl	8008618 <xTimerCreate>
 80065ea:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	0800c6f8 	.word	0x0800c6f8

080065f8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d007      	beq.n	8006618 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	4619      	mov	r1, r3
 800660e:	2001      	movs	r0, #1
 8006610:	f000 fa83 	bl	8006b1a <xQueueCreateMutexStatic>
 8006614:	4603      	mov	r3, r0
 8006616:	e003      	b.n	8006620 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006618:	2001      	movs	r0, #1
 800661a:	f000 fa66 	bl	8006aea <xQueueCreateMutex>
 800661e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006620:	4618      	mov	r0, r3
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af02      	add	r7, sp, #8
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00f      	beq.n	800665a <osSemaphoreCreate+0x32>
    if (count == 1) {
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d10a      	bne.n	8006656 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2203      	movs	r2, #3
 8006646:	9200      	str	r2, [sp, #0]
 8006648:	2200      	movs	r2, #0
 800664a:	2100      	movs	r1, #0
 800664c:	2001      	movs	r0, #1
 800664e:	f000 f961 	bl	8006914 <xQueueGenericCreateStatic>
 8006652:	4603      	mov	r3, r0
 8006654:	e016      	b.n	8006684 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006656:	2300      	movs	r3, #0
 8006658:	e014      	b.n	8006684 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d110      	bne.n	8006682 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006660:	2203      	movs	r2, #3
 8006662:	2100      	movs	r1, #0
 8006664:	2001      	movs	r0, #1
 8006666:	f000 f9cd 	bl	8006a04 <xQueueGenericCreate>
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d005      	beq.n	800667e <osSemaphoreCreate+0x56>
 8006672:	2300      	movs	r3, #0
 8006674:	2200      	movs	r2, #0
 8006676:	2100      	movs	r1, #0
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 fa69 	bl	8006b50 <xQueueGenericSend>
      return sema;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	e000      	b.n	8006684 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006682:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800668c:	b590      	push	{r4, r7, lr}
 800668e:	b085      	sub	sp, #20
 8006690:	af02      	add	r7, sp, #8
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d011      	beq.n	80066c2 <osMessageCreate+0x36>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00d      	beq.n	80066c2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6818      	ldr	r0, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6859      	ldr	r1, [r3, #4]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689a      	ldr	r2, [r3, #8]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	2400      	movs	r4, #0
 80066b8:	9400      	str	r4, [sp, #0]
 80066ba:	f000 f92b 	bl	8006914 <xQueueGenericCreateStatic>
 80066be:	4603      	mov	r3, r0
 80066c0:	e008      	b.n	80066d4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6818      	ldr	r0, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	4619      	mov	r1, r3
 80066ce:	f000 f999 	bl	8006a04 <xQueueGenericCreate>
 80066d2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd90      	pop	{r4, r7, pc}

080066dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f103 0208 	add.w	r2, r3, #8
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f04f 32ff 	mov.w	r2, #4294967295
 80066f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f103 0208 	add.w	r2, r3, #8
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f103 0208 	add.w	r2, r3, #8
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006736:	b480      	push	{r7}
 8006738:	b085      	sub	sp, #20
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	689a      	ldr	r2, [r3, #8]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	601a      	str	r2, [r3, #0]
}
 8006772:	bf00      	nop
 8006774:	3714      	adds	r7, #20
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800677e:	b480      	push	{r7}
 8006780:	b085      	sub	sp, #20
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006794:	d103      	bne.n	800679e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	e00c      	b.n	80067b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	3308      	adds	r3, #8
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	e002      	b.n	80067ac <vListInsert+0x2e>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d2f6      	bcs.n	80067a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	601a      	str	r2, [r3, #0]
}
 80067e4:	bf00      	nop
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	6892      	ldr	r2, [r2, #8]
 8006806:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6852      	ldr	r2, [r2, #4]
 8006810:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	429a      	cmp	r2, r3
 800681a:	d103      	bne.n	8006824 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	1e5a      	subs	r2, r3, #1
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10a      	bne.n	800686e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800686a:	bf00      	nop
 800686c:	e7fe      	b.n	800686c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800686e:	f002 fb81 	bl	8008f74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687a:	68f9      	ldr	r1, [r7, #12]
 800687c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800687e:	fb01 f303 	mul.w	r3, r1, r3
 8006882:	441a      	add	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800689e:	3b01      	subs	r3, #1
 80068a0:	68f9      	ldr	r1, [r7, #12]
 80068a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068a4:	fb01 f303 	mul.w	r3, r1, r3
 80068a8:	441a      	add	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	22ff      	movs	r2, #255	; 0xff
 80068b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	22ff      	movs	r2, #255	; 0xff
 80068ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d114      	bne.n	80068ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01a      	beq.n	8006902 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	3310      	adds	r3, #16
 80068d0:	4618      	mov	r0, r3
 80068d2:	f001 fb91 	bl	8007ff8 <xTaskRemoveFromEventList>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d012      	beq.n	8006902 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80068dc:	4b0c      	ldr	r3, [pc, #48]	; (8006910 <xQueueGenericReset+0xcc>)
 80068de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	e009      	b.n	8006902 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3310      	adds	r3, #16
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7ff fef2 	bl	80066dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3324      	adds	r3, #36	; 0x24
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff feed 	bl	80066dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006902:	f002 fb67 	bl	8008fd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006906:	2301      	movs	r3, #1
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	e000ed04 	.word	0xe000ed04

08006914 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006914:	b580      	push	{r7, lr}
 8006916:	b08e      	sub	sp, #56	; 0x38
 8006918:	af02      	add	r7, sp, #8
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
 8006920:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10a      	bne.n	800693e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800693a:	bf00      	nop
 800693c:	e7fe      	b.n	800693c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10a      	bne.n	800695a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006956:	bf00      	nop
 8006958:	e7fe      	b.n	8006958 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <xQueueGenericCreateStatic+0x52>
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <xQueueGenericCreateStatic+0x56>
 8006966:	2301      	movs	r3, #1
 8006968:	e000      	b.n	800696c <xQueueGenericCreateStatic+0x58>
 800696a:	2300      	movs	r3, #0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10a      	bne.n	8006986 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	623b      	str	r3, [r7, #32]
}
 8006982:	bf00      	nop
 8006984:	e7fe      	b.n	8006984 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d102      	bne.n	8006992 <xQueueGenericCreateStatic+0x7e>
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <xQueueGenericCreateStatic+0x82>
 8006992:	2301      	movs	r3, #1
 8006994:	e000      	b.n	8006998 <xQueueGenericCreateStatic+0x84>
 8006996:	2300      	movs	r3, #0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10a      	bne.n	80069b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	61fb      	str	r3, [r7, #28]
}
 80069ae:	bf00      	nop
 80069b0:	e7fe      	b.n	80069b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80069b2:	2348      	movs	r3, #72	; 0x48
 80069b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2b48      	cmp	r3, #72	; 0x48
 80069ba:	d00a      	beq.n	80069d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	61bb      	str	r3, [r7, #24]
}
 80069ce:	bf00      	nop
 80069d0:	e7fe      	b.n	80069d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80069d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00d      	beq.n	80069fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80069de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80069ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	4613      	mov	r3, r2
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	68b9      	ldr	r1, [r7, #8]
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 f83f 	bl	8006a78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3730      	adds	r7, #48	; 0x30
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b08a      	sub	sp, #40	; 0x28
 8006a08:	af02      	add	r7, sp, #8
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10a      	bne.n	8006a2e <xQueueGenericCreate+0x2a>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	613b      	str	r3, [r7, #16]
}
 8006a2a:	bf00      	nop
 8006a2c:	e7fe      	b.n	8006a2c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	fb02 f303 	mul.w	r3, r2, r3
 8006a36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	3348      	adds	r3, #72	; 0x48
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f002 fbbb 	bl	80091b8 <pvPortMalloc>
 8006a42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d011      	beq.n	8006a6e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	3348      	adds	r3, #72	; 0x48
 8006a52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a5c:	79fa      	ldrb	r2, [r7, #7]
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	4613      	mov	r3, r2
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	68b9      	ldr	r1, [r7, #8]
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 f805 	bl	8006a78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
	}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3720      	adds	r7, #32
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
 8006a84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d103      	bne.n	8006a94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	601a      	str	r2, [r3, #0]
 8006a92:	e002      	b.n	8006a9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	69b8      	ldr	r0, [r7, #24]
 8006aaa:	f7ff fecb 	bl	8006844 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006aae:	bf00      	nop
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b082      	sub	sp, #8
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00e      	beq.n	8006ae2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2100      	movs	r1, #0
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f837 	bl	8006b50 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006ae2:	bf00      	nop
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b086      	sub	sp, #24
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	4603      	mov	r3, r0
 8006af2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006af4:	2301      	movs	r3, #1
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	2300      	movs	r3, #0
 8006afa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006afc:	79fb      	ldrb	r3, [r7, #7]
 8006afe:	461a      	mov	r2, r3
 8006b00:	6939      	ldr	r1, [r7, #16]
 8006b02:	6978      	ldr	r0, [r7, #20]
 8006b04:	f7ff ff7e 	bl	8006a04 <xQueueGenericCreate>
 8006b08:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7ff ffd3 	bl	8006ab6 <prvInitialiseMutex>

		return xNewQueue;
 8006b10:	68fb      	ldr	r3, [r7, #12]
	}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b088      	sub	sp, #32
 8006b1e:	af02      	add	r7, sp, #8
 8006b20:	4603      	mov	r3, r0
 8006b22:	6039      	str	r1, [r7, #0]
 8006b24:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006b26:	2301      	movs	r3, #1
 8006b28:	617b      	str	r3, [r7, #20]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006b2e:	79fb      	ldrb	r3, [r7, #7]
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2200      	movs	r2, #0
 8006b36:	6939      	ldr	r1, [r7, #16]
 8006b38:	6978      	ldr	r0, [r7, #20]
 8006b3a:	f7ff feeb 	bl	8006914 <xQueueGenericCreateStatic>
 8006b3e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f7ff ffb8 	bl	8006ab6 <prvInitialiseMutex>

		return xNewQueue;
 8006b46:	68fb      	ldr	r3, [r7, #12]
	}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3718      	adds	r7, #24
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08e      	sub	sp, #56	; 0x38
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10a      	bne.n	8006b82 <xQueueGenericSend+0x32>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b7e:	bf00      	nop
 8006b80:	e7fe      	b.n	8006b80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d103      	bne.n	8006b90 <xQueueGenericSend+0x40>
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <xQueueGenericSend+0x44>
 8006b90:	2301      	movs	r3, #1
 8006b92:	e000      	b.n	8006b96 <xQueueGenericSend+0x46>
 8006b94:	2300      	movs	r3, #0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10a      	bne.n	8006bb0 <xQueueGenericSend+0x60>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bac:	bf00      	nop
 8006bae:	e7fe      	b.n	8006bae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d103      	bne.n	8006bbe <xQueueGenericSend+0x6e>
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <xQueueGenericSend+0x72>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <xQueueGenericSend+0x74>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10a      	bne.n	8006bde <xQueueGenericSend+0x8e>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	623b      	str	r3, [r7, #32]
}
 8006bda:	bf00      	nop
 8006bdc:	e7fe      	b.n	8006bdc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bde:	f001 fbc9 	bl	8008374 <xTaskGetSchedulerState>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d102      	bne.n	8006bee <xQueueGenericSend+0x9e>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <xQueueGenericSend+0xa2>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e000      	b.n	8006bf4 <xQueueGenericSend+0xa4>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <xQueueGenericSend+0xbe>
	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	61fb      	str	r3, [r7, #28]
}
 8006c0a:	bf00      	nop
 8006c0c:	e7fe      	b.n	8006c0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c0e:	f002 f9b1 	bl	8008f74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d302      	bcc.n	8006c24 <xQueueGenericSend+0xd4>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d129      	bne.n	8006c78 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	68b9      	ldr	r1, [r7, #8]
 8006c28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c2a:	f000 faed 	bl	8007208 <prvCopyDataToQueue>
 8006c2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d010      	beq.n	8006c5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	3324      	adds	r3, #36	; 0x24
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f001 f9db 	bl	8007ff8 <xTaskRemoveFromEventList>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d013      	beq.n	8006c70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c48:	4b3f      	ldr	r3, [pc, #252]	; (8006d48 <xQueueGenericSend+0x1f8>)
 8006c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	e00a      	b.n	8006c70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d007      	beq.n	8006c70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c60:	4b39      	ldr	r3, [pc, #228]	; (8006d48 <xQueueGenericSend+0x1f8>)
 8006c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c70:	f002 f9b0 	bl	8008fd4 <vPortExitCritical>
				return pdPASS;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e063      	b.n	8006d40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d103      	bne.n	8006c86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c7e:	f002 f9a9 	bl	8008fd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c82:	2300      	movs	r3, #0
 8006c84:	e05c      	b.n	8006d40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d106      	bne.n	8006c9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c8c:	f107 0314 	add.w	r3, r7, #20
 8006c90:	4618      	mov	r0, r3
 8006c92:	f001 fa13 	bl	80080bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c96:	2301      	movs	r3, #1
 8006c98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c9a:	f002 f99b 	bl	8008fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c9e:	f000 ff85 	bl	8007bac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ca2:	f002 f967 	bl	8008f74 <vPortEnterCritical>
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cac:	b25b      	sxtb	r3, r3
 8006cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb2:	d103      	bne.n	8006cbc <xQueueGenericSend+0x16c>
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cc2:	b25b      	sxtb	r3, r3
 8006cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc8:	d103      	bne.n	8006cd2 <xQueueGenericSend+0x182>
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cd2:	f002 f97f 	bl	8008fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cd6:	1d3a      	adds	r2, r7, #4
 8006cd8:	f107 0314 	add.w	r3, r7, #20
 8006cdc:	4611      	mov	r1, r2
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f001 fa02 	bl	80080e8 <xTaskCheckForTimeOut>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d124      	bne.n	8006d34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006cea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cec:	f000 fb84 	bl	80073f8 <prvIsQueueFull>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d018      	beq.n	8006d28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf8:	3310      	adds	r3, #16
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f001 f92a 	bl	8007f58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d06:	f000 fb0f 	bl	8007328 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d0a:	f000 ff5d 	bl	8007bc8 <xTaskResumeAll>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f47f af7c 	bne.w	8006c0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006d16:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <xQueueGenericSend+0x1f8>)
 8006d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	e772      	b.n	8006c0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d2a:	f000 fafd 	bl	8007328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d2e:	f000 ff4b 	bl	8007bc8 <xTaskResumeAll>
 8006d32:	e76c      	b.n	8006c0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d36:	f000 faf7 	bl	8007328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d3a:	f000 ff45 	bl	8007bc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3738      	adds	r7, #56	; 0x38
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	e000ed04 	.word	0xe000ed04

08006d4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b090      	sub	sp, #64	; 0x40
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
 8006d58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10a      	bne.n	8006d7a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d76:	bf00      	nop
 8006d78:	e7fe      	b.n	8006d78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d103      	bne.n	8006d88 <xQueueGenericSendFromISR+0x3c>
 8006d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <xQueueGenericSendFromISR+0x40>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e000      	b.n	8006d8e <xQueueGenericSendFromISR+0x42>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10a      	bne.n	8006da8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006da4:	bf00      	nop
 8006da6:	e7fe      	b.n	8006da6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d103      	bne.n	8006db6 <xQueueGenericSendFromISR+0x6a>
 8006dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d101      	bne.n	8006dba <xQueueGenericSendFromISR+0x6e>
 8006db6:	2301      	movs	r3, #1
 8006db8:	e000      	b.n	8006dbc <xQueueGenericSendFromISR+0x70>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10a      	bne.n	8006dd6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	623b      	str	r3, [r7, #32]
}
 8006dd2:	bf00      	nop
 8006dd4:	e7fe      	b.n	8006dd4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dd6:	f002 f9af 	bl	8009138 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006dda:	f3ef 8211 	mrs	r2, BASEPRI
 8006dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	61fa      	str	r2, [r7, #28]
 8006df0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006df2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006df4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d302      	bcc.n	8006e08 <xQueueGenericSendFromISR+0xbc>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d12f      	bne.n	8006e68 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e16:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e1e:	f000 f9f3 	bl	8007208 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e22:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2a:	d112      	bne.n	8006e52 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d016      	beq.n	8006e62 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e36:	3324      	adds	r3, #36	; 0x24
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f001 f8dd 	bl	8007ff8 <xTaskRemoveFromEventList>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00e      	beq.n	8006e62 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00b      	beq.n	8006e62 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	e007      	b.n	8006e62 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e56:	3301      	adds	r3, #1
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	b25a      	sxtb	r2, r3
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e62:	2301      	movs	r3, #1
 8006e64:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006e66:	e001      	b.n	8006e6c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e76:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3740      	adds	r7, #64	; 0x40
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
	...

08006e84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08c      	sub	sp, #48	; 0x30
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e90:	2300      	movs	r3, #0
 8006e92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10a      	bne.n	8006eb4 <xQueueReceive+0x30>
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	623b      	str	r3, [r7, #32]
}
 8006eb0:	bf00      	nop
 8006eb2:	e7fe      	b.n	8006eb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d103      	bne.n	8006ec2 <xQueueReceive+0x3e>
 8006eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <xQueueReceive+0x42>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e000      	b.n	8006ec8 <xQueueReceive+0x44>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <xQueueReceive+0x5e>
	__asm volatile
 8006ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	61fb      	str	r3, [r7, #28]
}
 8006ede:	bf00      	nop
 8006ee0:	e7fe      	b.n	8006ee0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ee2:	f001 fa47 	bl	8008374 <xTaskGetSchedulerState>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d102      	bne.n	8006ef2 <xQueueReceive+0x6e>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <xQueueReceive+0x72>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e000      	b.n	8006ef8 <xQueueReceive+0x74>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10a      	bne.n	8006f12 <xQueueReceive+0x8e>
	__asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	61bb      	str	r3, [r7, #24]
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f12:	f002 f82f 	bl	8008f74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d01f      	beq.n	8006f62 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f22:	68b9      	ldr	r1, [r7, #8]
 8006f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f26:	f000 f9d9 	bl	80072dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	1e5a      	subs	r2, r3, #1
 8006f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00f      	beq.n	8006f5a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3c:	3310      	adds	r3, #16
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f001 f85a 	bl	8007ff8 <xTaskRemoveFromEventList>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d007      	beq.n	8006f5a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f4a:	4b3d      	ldr	r3, [pc, #244]	; (8007040 <xQueueReceive+0x1bc>)
 8006f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f50:	601a      	str	r2, [r3, #0]
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f5a:	f002 f83b 	bl	8008fd4 <vPortExitCritical>
				return pdPASS;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e069      	b.n	8007036 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d103      	bne.n	8006f70 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f68:	f002 f834 	bl	8008fd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	e062      	b.n	8007036 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d106      	bne.n	8006f84 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f76:	f107 0310 	add.w	r3, r7, #16
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f001 f89e 	bl	80080bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f80:	2301      	movs	r3, #1
 8006f82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f84:	f002 f826 	bl	8008fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f88:	f000 fe10 	bl	8007bac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f8c:	f001 fff2 	bl	8008f74 <vPortEnterCritical>
 8006f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f96:	b25b      	sxtb	r3, r3
 8006f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9c:	d103      	bne.n	8006fa6 <xQueueReceive+0x122>
 8006f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fac:	b25b      	sxtb	r3, r3
 8006fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb2:	d103      	bne.n	8006fbc <xQueueReceive+0x138>
 8006fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fbc:	f002 f80a 	bl	8008fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fc0:	1d3a      	adds	r2, r7, #4
 8006fc2:	f107 0310 	add.w	r3, r7, #16
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f001 f88d 	bl	80080e8 <xTaskCheckForTimeOut>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d123      	bne.n	800701c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fd6:	f000 f9f9 	bl	80073cc <prvIsQueueEmpty>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d017      	beq.n	8007010 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe2:	3324      	adds	r3, #36	; 0x24
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 ffb5 	bl	8007f58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ff0:	f000 f99a 	bl	8007328 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ff4:	f000 fde8 	bl	8007bc8 <xTaskResumeAll>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d189      	bne.n	8006f12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006ffe:	4b10      	ldr	r3, [pc, #64]	; (8007040 <xQueueReceive+0x1bc>)
 8007000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007004:	601a      	str	r2, [r3, #0]
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	e780      	b.n	8006f12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007012:	f000 f989 	bl	8007328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007016:	f000 fdd7 	bl	8007bc8 <xTaskResumeAll>
 800701a:	e77a      	b.n	8006f12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800701c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800701e:	f000 f983 	bl	8007328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007022:	f000 fdd1 	bl	8007bc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007028:	f000 f9d0 	bl	80073cc <prvIsQueueEmpty>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	f43f af6f 	beq.w	8006f12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007034:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007036:	4618      	mov	r0, r3
 8007038:	3730      	adds	r7, #48	; 0x30
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	e000ed04 	.word	0xe000ed04

08007044 <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b08e      	sub	sp, #56	; 0x38
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007050:	2300      	movs	r3, #0
 8007052:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10a      	bne.n	8007074 <xQueuePeek+0x30>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007070:	bf00      	nop
 8007072:	e7fe      	b.n	8007072 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d103      	bne.n	8007082 <xQueuePeek+0x3e>
 800707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <xQueuePeek+0x42>
 8007082:	2301      	movs	r3, #1
 8007084:	e000      	b.n	8007088 <xQueuePeek+0x44>
 8007086:	2300      	movs	r3, #0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10a      	bne.n	80070a2 <xQueuePeek+0x5e>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	623b      	str	r3, [r7, #32]
}
 800709e:	bf00      	nop
 80070a0:	e7fe      	b.n	80070a0 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070a2:	f001 f967 	bl	8008374 <xTaskGetSchedulerState>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d102      	bne.n	80070b2 <xQueuePeek+0x6e>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <xQueuePeek+0x72>
 80070b2:	2301      	movs	r3, #1
 80070b4:	e000      	b.n	80070b8 <xQueuePeek+0x74>
 80070b6:	2300      	movs	r3, #0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10a      	bne.n	80070d2 <xQueuePeek+0x8e>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	61fb      	str	r3, [r7, #28]
}
 80070ce:	bf00      	nop
 80070d0:	e7fe      	b.n	80070d0 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070d2:	f001 ff4f 	bl	8008f74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d021      	beq.n	8007126 <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070e8:	68b9      	ldr	r1, [r7, #8]
 80070ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070ec:	f000 f8f6 	bl	80072dc <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070f4:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00f      	beq.n	800711e <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007100:	3324      	adds	r3, #36	; 0x24
 8007102:	4618      	mov	r0, r3
 8007104:	f000 ff78 	bl	8007ff8 <xTaskRemoveFromEventList>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d007      	beq.n	800711e <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 800710e:	4b3d      	ldr	r3, [pc, #244]	; (8007204 <xQueuePeek+0x1c0>)
 8007110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800711e:	f001 ff59 	bl	8008fd4 <vPortExitCritical>
				return pdPASS;
 8007122:	2301      	movs	r3, #1
 8007124:	e069      	b.n	80071fa <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d103      	bne.n	8007134 <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800712c:	f001 ff52 	bl	8008fd4 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007130:	2300      	movs	r3, #0
 8007132:	e062      	b.n	80071fa <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007136:	2b00      	cmp	r3, #0
 8007138:	d106      	bne.n	8007148 <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800713a:	f107 0314 	add.w	r3, r7, #20
 800713e:	4618      	mov	r0, r3
 8007140:	f000 ffbc 	bl	80080bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007144:	2301      	movs	r3, #1
 8007146:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007148:	f001 ff44 	bl	8008fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800714c:	f000 fd2e 	bl	8007bac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007150:	f001 ff10 	bl	8008f74 <vPortEnterCritical>
 8007154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007156:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800715a:	b25b      	sxtb	r3, r3
 800715c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007160:	d103      	bne.n	800716a <xQueuePeek+0x126>
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	2200      	movs	r2, #0
 8007166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007170:	b25b      	sxtb	r3, r3
 8007172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007176:	d103      	bne.n	8007180 <xQueuePeek+0x13c>
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	2200      	movs	r2, #0
 800717c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007180:	f001 ff28 	bl	8008fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007184:	1d3a      	adds	r2, r7, #4
 8007186:	f107 0314 	add.w	r3, r7, #20
 800718a:	4611      	mov	r1, r2
 800718c:	4618      	mov	r0, r3
 800718e:	f000 ffab 	bl	80080e8 <xTaskCheckForTimeOut>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d123      	bne.n	80071e0 <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800719a:	f000 f917 	bl	80073cc <prvIsQueueEmpty>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d017      	beq.n	80071d4 <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80071a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a6:	3324      	adds	r3, #36	; 0x24
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	4611      	mov	r1, r2
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fed3 	bl	8007f58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071b4:	f000 f8b8 	bl	8007328 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071b8:	f000 fd06 	bl	8007bc8 <xTaskResumeAll>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d187      	bne.n	80070d2 <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 80071c2:	4b10      	ldr	r3, [pc, #64]	; (8007204 <xQueuePeek+0x1c0>)
 80071c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	e77e      	b.n	80070d2 <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 80071d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071d6:	f000 f8a7 	bl	8007328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071da:	f000 fcf5 	bl	8007bc8 <xTaskResumeAll>
 80071de:	e778      	b.n	80070d2 <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 80071e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071e2:	f000 f8a1 	bl	8007328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071e6:	f000 fcef 	bl	8007bc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071ec:	f000 f8ee 	bl	80073cc <prvIsQueueEmpty>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f43f af6d 	beq.w	80070d2 <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3738      	adds	r7, #56	; 0x38
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	e000ed04 	.word	0xe000ed04

08007208 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007214:	2300      	movs	r3, #0
 8007216:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10d      	bne.n	8007242 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d14d      	bne.n	80072ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	4618      	mov	r0, r3
 8007234:	f001 f8bc 	bl	80083b0 <xTaskPriorityDisinherit>
 8007238:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	609a      	str	r2, [r3, #8]
 8007240:	e043      	b.n	80072ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d119      	bne.n	800727c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6858      	ldr	r0, [r3, #4]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007250:	461a      	mov	r2, r3
 8007252:	68b9      	ldr	r1, [r7, #8]
 8007254:	f002 f9c4 	bl	80095e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007260:	441a      	add	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	429a      	cmp	r2, r3
 8007270:	d32b      	bcc.n	80072ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	605a      	str	r2, [r3, #4]
 800727a:	e026      	b.n	80072ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	68d8      	ldr	r0, [r3, #12]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007284:	461a      	mov	r2, r3
 8007286:	68b9      	ldr	r1, [r7, #8]
 8007288:	f002 f9aa 	bl	80095e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	68da      	ldr	r2, [r3, #12]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007294:	425b      	negs	r3, r3
 8007296:	441a      	add	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	68da      	ldr	r2, [r3, #12]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d207      	bcs.n	80072b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b0:	425b      	negs	r3, r3
 80072b2:	441a      	add	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d105      	bne.n	80072ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	3b01      	subs	r3, #1
 80072c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	1c5a      	adds	r2, r3, #1
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80072d2:	697b      	ldr	r3, [r7, #20]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d018      	beq.n	8007320 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f6:	441a      	add	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68da      	ldr	r2, [r3, #12]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	429a      	cmp	r2, r3
 8007306:	d303      	bcc.n	8007310 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	68d9      	ldr	r1, [r3, #12]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007318:	461a      	mov	r2, r3
 800731a:	6838      	ldr	r0, [r7, #0]
 800731c:	f002 f960 	bl	80095e0 <memcpy>
	}
}
 8007320:	bf00      	nop
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007330:	f001 fe20 	bl	8008f74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800733a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800733c:	e011      	b.n	8007362 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	2b00      	cmp	r3, #0
 8007344:	d012      	beq.n	800736c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	3324      	adds	r3, #36	; 0x24
 800734a:	4618      	mov	r0, r3
 800734c:	f000 fe54 	bl	8007ff8 <xTaskRemoveFromEventList>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007356:	f000 ff29 	bl	80081ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800735a:	7bfb      	ldrb	r3, [r7, #15]
 800735c:	3b01      	subs	r3, #1
 800735e:	b2db      	uxtb	r3, r3
 8007360:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007366:	2b00      	cmp	r3, #0
 8007368:	dce9      	bgt.n	800733e <prvUnlockQueue+0x16>
 800736a:	e000      	b.n	800736e <prvUnlockQueue+0x46>
					break;
 800736c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	22ff      	movs	r2, #255	; 0xff
 8007372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007376:	f001 fe2d 	bl	8008fd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800737a:	f001 fdfb 	bl	8008f74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007384:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007386:	e011      	b.n	80073ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d012      	beq.n	80073b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	3310      	adds	r3, #16
 8007394:	4618      	mov	r0, r3
 8007396:	f000 fe2f 	bl	8007ff8 <xTaskRemoveFromEventList>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80073a0:	f000 ff04 	bl	80081ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80073a4:	7bbb      	ldrb	r3, [r7, #14]
 80073a6:	3b01      	subs	r3, #1
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	dce9      	bgt.n	8007388 <prvUnlockQueue+0x60>
 80073b4:	e000      	b.n	80073b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80073b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	22ff      	movs	r2, #255	; 0xff
 80073bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80073c0:	f001 fe08 	bl	8008fd4 <vPortExitCritical>
}
 80073c4:	bf00      	nop
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073d4:	f001 fdce 	bl	8008f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073e0:	2301      	movs	r3, #1
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	e001      	b.n	80073ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073e6:	2300      	movs	r3, #0
 80073e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073ea:	f001 fdf3 	bl	8008fd4 <vPortExitCritical>

	return xReturn;
 80073ee:	68fb      	ldr	r3, [r7, #12]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007400:	f001 fdb8 	bl	8008f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740c:	429a      	cmp	r2, r3
 800740e:	d102      	bne.n	8007416 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007410:	2301      	movs	r3, #1
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	e001      	b.n	800741a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007416:	2300      	movs	r3, #0
 8007418:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800741a:	f001 fddb 	bl	8008fd4 <vPortExitCritical>

	return xReturn;
 800741e:	68fb      	ldr	r3, [r7, #12]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007432:	2300      	movs	r3, #0
 8007434:	60fb      	str	r3, [r7, #12]
 8007436:	e014      	b.n	8007462 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007438:	4a0f      	ldr	r2, [pc, #60]	; (8007478 <vQueueAddToRegistry+0x50>)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10b      	bne.n	800745c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007444:	490c      	ldr	r1, [pc, #48]	; (8007478 <vQueueAddToRegistry+0x50>)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800744e:	4a0a      	ldr	r2, [pc, #40]	; (8007478 <vQueueAddToRegistry+0x50>)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	4413      	add	r3, r2
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800745a:	e006      	b.n	800746a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	3301      	adds	r3, #1
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2b07      	cmp	r3, #7
 8007466:	d9e7      	bls.n	8007438 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007468:	bf00      	nop
 800746a:	bf00      	nop
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	20000d18 	.word	0x20000d18

0800747c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800748c:	f001 fd72 	bl	8008f74 <vPortEnterCritical>
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007496:	b25b      	sxtb	r3, r3
 8007498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749c:	d103      	bne.n	80074a6 <vQueueWaitForMessageRestricted+0x2a>
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074ac:	b25b      	sxtb	r3, r3
 80074ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b2:	d103      	bne.n	80074bc <vQueueWaitForMessageRestricted+0x40>
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074bc:	f001 fd8a 	bl	8008fd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d106      	bne.n	80074d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	3324      	adds	r3, #36	; 0x24
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	68b9      	ldr	r1, [r7, #8]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 fd65 	bl	8007fa0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80074d6:	6978      	ldr	r0, [r7, #20]
 80074d8:	f7ff ff26 	bl	8007328 <prvUnlockQueue>
	}
 80074dc:	bf00      	nop
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08e      	sub	sp, #56	; 0x38
 80074e8:	af04      	add	r7, sp, #16
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10a      	bne.n	800750e <xTaskCreateStatic+0x2a>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	623b      	str	r3, [r7, #32]
}
 800750a:	bf00      	nop
 800750c:	e7fe      	b.n	800750c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800750e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10a      	bne.n	800752a <xTaskCreateStatic+0x46>
	__asm volatile
 8007514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	61fb      	str	r3, [r7, #28]
}
 8007526:	bf00      	nop
 8007528:	e7fe      	b.n	8007528 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800752a:	2354      	movs	r3, #84	; 0x54
 800752c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	2b54      	cmp	r3, #84	; 0x54
 8007532:	d00a      	beq.n	800754a <xTaskCreateStatic+0x66>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	61bb      	str	r3, [r7, #24]
}
 8007546:	bf00      	nop
 8007548:	e7fe      	b.n	8007548 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800754a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800754c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754e:	2b00      	cmp	r3, #0
 8007550:	d01e      	beq.n	8007590 <xTaskCreateStatic+0xac>
 8007552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007554:	2b00      	cmp	r3, #0
 8007556:	d01b      	beq.n	8007590 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007560:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	2202      	movs	r2, #2
 8007566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800756a:	2300      	movs	r3, #0
 800756c:	9303      	str	r3, [sp, #12]
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	9302      	str	r3, [sp, #8]
 8007572:	f107 0314 	add.w	r3, r7, #20
 8007576:	9301      	str	r3, [sp, #4]
 8007578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	68b9      	ldr	r1, [r7, #8]
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 f850 	bl	8007628 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007588:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800758a:	f000 f8d5 	bl	8007738 <prvAddNewTaskToReadyList>
 800758e:	e001      	b.n	8007594 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007590:	2300      	movs	r3, #0
 8007592:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007594:	697b      	ldr	r3, [r7, #20]
	}
 8007596:	4618      	mov	r0, r3
 8007598:	3728      	adds	r7, #40	; 0x28
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b08c      	sub	sp, #48	; 0x30
 80075a2:	af04      	add	r7, sp, #16
 80075a4:	60f8      	str	r0, [r7, #12]
 80075a6:	60b9      	str	r1, [r7, #8]
 80075a8:	603b      	str	r3, [r7, #0]
 80075aa:	4613      	mov	r3, r2
 80075ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80075ae:	88fb      	ldrh	r3, [r7, #6]
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4618      	mov	r0, r3
 80075b4:	f001 fe00 	bl	80091b8 <pvPortMalloc>
 80075b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00e      	beq.n	80075de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80075c0:	2054      	movs	r0, #84	; 0x54
 80075c2:	f001 fdf9 	bl	80091b8 <pvPortMalloc>
 80075c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	631a      	str	r2, [r3, #48]	; 0x30
 80075d4:	e005      	b.n	80075e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075d6:	6978      	ldr	r0, [r7, #20]
 80075d8:	f001 feba 	bl	8009350 <vPortFree>
 80075dc:	e001      	b.n	80075e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075de:	2300      	movs	r3, #0
 80075e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d017      	beq.n	8007618 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075f0:	88fa      	ldrh	r2, [r7, #6]
 80075f2:	2300      	movs	r3, #0
 80075f4:	9303      	str	r3, [sp, #12]
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	9302      	str	r3, [sp, #8]
 80075fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fc:	9301      	str	r3, [sp, #4]
 80075fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	68b9      	ldr	r1, [r7, #8]
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 f80e 	bl	8007628 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800760c:	69f8      	ldr	r0, [r7, #28]
 800760e:	f000 f893 	bl	8007738 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007612:	2301      	movs	r3, #1
 8007614:	61bb      	str	r3, [r7, #24]
 8007616:	e002      	b.n	800761e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007618:	f04f 33ff 	mov.w	r3, #4294967295
 800761c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800761e:	69bb      	ldr	r3, [r7, #24]
	}
 8007620:	4618      	mov	r0, r3
 8007622:	3720      	adds	r7, #32
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
 8007634:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007640:	3b01      	subs	r3, #1
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	4413      	add	r3, r2
 8007646:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	f023 0307 	bic.w	r3, r3, #7
 800764e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00a      	beq.n	8007670 <prvInitialiseNewTask+0x48>
	__asm volatile
 800765a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	617b      	str	r3, [r7, #20]
}
 800766c:	bf00      	nop
 800766e:	e7fe      	b.n	800766e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d01f      	beq.n	80076b6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007676:	2300      	movs	r3, #0
 8007678:	61fb      	str	r3, [r7, #28]
 800767a:	e012      	b.n	80076a2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	4413      	add	r3, r2
 8007682:	7819      	ldrb	r1, [r3, #0]
 8007684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	4413      	add	r3, r2
 800768a:	3334      	adds	r3, #52	; 0x34
 800768c:	460a      	mov	r2, r1
 800768e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	4413      	add	r3, r2
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d006      	beq.n	80076aa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	3301      	adds	r3, #1
 80076a0:	61fb      	str	r3, [r7, #28]
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	2b0f      	cmp	r3, #15
 80076a6:	d9e9      	bls.n	800767c <prvInitialiseNewTask+0x54>
 80076a8:	e000      	b.n	80076ac <prvInitialiseNewTask+0x84>
			{
				break;
 80076aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076b4:	e003      	b.n	80076be <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80076b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c0:	2b06      	cmp	r3, #6
 80076c2:	d901      	bls.n	80076c8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076c4:	2306      	movs	r3, #6
 80076c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	2200      	movs	r2, #0
 80076d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	3304      	adds	r3, #4
 80076de:	4618      	mov	r0, r3
 80076e0:	f7ff f81c 	bl	800671c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e6:	3318      	adds	r3, #24
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7ff f817 	bl	800671c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	f1c3 0207 	rsb	r2, r3, #7
 80076fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007702:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	2200      	movs	r2, #0
 8007708:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	68f9      	ldr	r1, [r7, #12]
 8007716:	69b8      	ldr	r0, [r7, #24]
 8007718:	f001 fb02 	bl	8008d20 <pxPortInitialiseStack>
 800771c:	4602      	mov	r2, r0
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800772c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800772e:	bf00      	nop
 8007730:	3720      	adds	r7, #32
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007740:	f001 fc18 	bl	8008f74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007744:	4b2a      	ldr	r3, [pc, #168]	; (80077f0 <prvAddNewTaskToReadyList+0xb8>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3301      	adds	r3, #1
 800774a:	4a29      	ldr	r2, [pc, #164]	; (80077f0 <prvAddNewTaskToReadyList+0xb8>)
 800774c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800774e:	4b29      	ldr	r3, [pc, #164]	; (80077f4 <prvAddNewTaskToReadyList+0xbc>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d109      	bne.n	800776a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007756:	4a27      	ldr	r2, [pc, #156]	; (80077f4 <prvAddNewTaskToReadyList+0xbc>)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800775c:	4b24      	ldr	r3, [pc, #144]	; (80077f0 <prvAddNewTaskToReadyList+0xb8>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d110      	bne.n	8007786 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007764:	f000 fd48 	bl	80081f8 <prvInitialiseTaskLists>
 8007768:	e00d      	b.n	8007786 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800776a:	4b23      	ldr	r3, [pc, #140]	; (80077f8 <prvAddNewTaskToReadyList+0xc0>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d109      	bne.n	8007786 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007772:	4b20      	ldr	r3, [pc, #128]	; (80077f4 <prvAddNewTaskToReadyList+0xbc>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	429a      	cmp	r2, r3
 800777e:	d802      	bhi.n	8007786 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007780:	4a1c      	ldr	r2, [pc, #112]	; (80077f4 <prvAddNewTaskToReadyList+0xbc>)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007786:	4b1d      	ldr	r3, [pc, #116]	; (80077fc <prvAddNewTaskToReadyList+0xc4>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3301      	adds	r3, #1
 800778c:	4a1b      	ldr	r2, [pc, #108]	; (80077fc <prvAddNewTaskToReadyList+0xc4>)
 800778e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	2201      	movs	r2, #1
 8007796:	409a      	lsls	r2, r3
 8007798:	4b19      	ldr	r3, [pc, #100]	; (8007800 <prvAddNewTaskToReadyList+0xc8>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4313      	orrs	r3, r2
 800779e:	4a18      	ldr	r2, [pc, #96]	; (8007800 <prvAddNewTaskToReadyList+0xc8>)
 80077a0:	6013      	str	r3, [r2, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a6:	4613      	mov	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4a15      	ldr	r2, [pc, #84]	; (8007804 <prvAddNewTaskToReadyList+0xcc>)
 80077b0:	441a      	add	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	3304      	adds	r3, #4
 80077b6:	4619      	mov	r1, r3
 80077b8:	4610      	mov	r0, r2
 80077ba:	f7fe ffbc 	bl	8006736 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077be:	f001 fc09 	bl	8008fd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077c2:	4b0d      	ldr	r3, [pc, #52]	; (80077f8 <prvAddNewTaskToReadyList+0xc0>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00e      	beq.n	80077e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80077ca:	4b0a      	ldr	r3, [pc, #40]	; (80077f4 <prvAddNewTaskToReadyList+0xbc>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d207      	bcs.n	80077e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077d8:	4b0b      	ldr	r3, [pc, #44]	; (8007808 <prvAddNewTaskToReadyList+0xd0>)
 80077da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077e8:	bf00      	nop
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	20000e58 	.word	0x20000e58
 80077f4:	20000d58 	.word	0x20000d58
 80077f8:	20000e64 	.word	0x20000e64
 80077fc:	20000e74 	.word	0x20000e74
 8007800:	20000e60 	.word	0x20000e60
 8007804:	20000d5c 	.word	0x20000d5c
 8007808:	e000ed04 	.word	0xe000ed04

0800780c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007814:	2300      	movs	r3, #0
 8007816:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d017      	beq.n	800784e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800781e:	4b13      	ldr	r3, [pc, #76]	; (800786c <vTaskDelay+0x60>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00a      	beq.n	800783c <vTaskDelay+0x30>
	__asm volatile
 8007826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	60bb      	str	r3, [r7, #8]
}
 8007838:	bf00      	nop
 800783a:	e7fe      	b.n	800783a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800783c:	f000 f9b6 	bl	8007bac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007840:	2100      	movs	r1, #0
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fe3a 	bl	80084bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007848:	f000 f9be 	bl	8007bc8 <xTaskResumeAll>
 800784c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d107      	bne.n	8007864 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007854:	4b06      	ldr	r3, [pc, #24]	; (8007870 <vTaskDelay+0x64>)
 8007856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007864:	bf00      	nop
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	20000e80 	.word	0x20000e80
 8007870:	e000ed04 	.word	0xe000ed04

08007874 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800787c:	f001 fb7a 	bl	8008f74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d102      	bne.n	800788c <vTaskSuspend+0x18>
 8007886:	4b3c      	ldr	r3, [pc, #240]	; (8007978 <vTaskSuspend+0x104>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	e000      	b.n	800788e <vTaskSuspend+0x1a>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3304      	adds	r3, #4
 8007894:	4618      	mov	r0, r3
 8007896:	f7fe ffab 	bl	80067f0 <uxListRemove>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d115      	bne.n	80078cc <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a4:	4935      	ldr	r1, [pc, #212]	; (800797c <vTaskSuspend+0x108>)
 80078a6:	4613      	mov	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	440b      	add	r3, r1
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10a      	bne.n	80078cc <vTaskSuspend+0x58>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ba:	2201      	movs	r2, #1
 80078bc:	fa02 f303 	lsl.w	r3, r2, r3
 80078c0:	43da      	mvns	r2, r3
 80078c2:	4b2f      	ldr	r3, [pc, #188]	; (8007980 <vTaskSuspend+0x10c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4013      	ands	r3, r2
 80078c8:	4a2d      	ldr	r2, [pc, #180]	; (8007980 <vTaskSuspend+0x10c>)
 80078ca:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d004      	beq.n	80078de <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3318      	adds	r3, #24
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fe ff89 	bl	80067f0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	3304      	adds	r3, #4
 80078e2:	4619      	mov	r1, r3
 80078e4:	4827      	ldr	r0, [pc, #156]	; (8007984 <vTaskSuspend+0x110>)
 80078e6:	f7fe ff26 	bl	8006736 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d103      	bne.n	80078fe <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80078fe:	f001 fb69 	bl	8008fd4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007902:	4b21      	ldr	r3, [pc, #132]	; (8007988 <vTaskSuspend+0x114>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d005      	beq.n	8007916 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800790a:	f001 fb33 	bl	8008f74 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800790e:	f000 fd11 	bl	8008334 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007912:	f001 fb5f 	bl	8008fd4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007916:	4b18      	ldr	r3, [pc, #96]	; (8007978 <vTaskSuspend+0x104>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	429a      	cmp	r2, r3
 800791e:	d127      	bne.n	8007970 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8007920:	4b19      	ldr	r3, [pc, #100]	; (8007988 <vTaskSuspend+0x114>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d017      	beq.n	8007958 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007928:	4b18      	ldr	r3, [pc, #96]	; (800798c <vTaskSuspend+0x118>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00a      	beq.n	8007946 <vTaskSuspend+0xd2>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	60bb      	str	r3, [r7, #8]
}
 8007942:	bf00      	nop
 8007944:	e7fe      	b.n	8007944 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8007946:	4b12      	ldr	r3, [pc, #72]	; (8007990 <vTaskSuspend+0x11c>)
 8007948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007956:	e00b      	b.n	8007970 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007958:	4b0a      	ldr	r3, [pc, #40]	; (8007984 <vTaskSuspend+0x110>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	4b0d      	ldr	r3, [pc, #52]	; (8007994 <vTaskSuspend+0x120>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	429a      	cmp	r2, r3
 8007962:	d103      	bne.n	800796c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8007964:	4b04      	ldr	r3, [pc, #16]	; (8007978 <vTaskSuspend+0x104>)
 8007966:	2200      	movs	r2, #0
 8007968:	601a      	str	r2, [r3, #0]
	}
 800796a:	e001      	b.n	8007970 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800796c:	f000 fa98 	bl	8007ea0 <vTaskSwitchContext>
	}
 8007970:	bf00      	nop
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	20000d58 	.word	0x20000d58
 800797c:	20000d5c 	.word	0x20000d5c
 8007980:	20000e60 	.word	0x20000e60
 8007984:	20000e44 	.word	0x20000e44
 8007988:	20000e64 	.word	0x20000e64
 800798c:	20000e80 	.word	0x20000e80
 8007990:	e000ed04 	.word	0xe000ed04
 8007994:	20000e58 	.word	0x20000e58

08007998 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007998:	b480      	push	{r7}
 800799a:	b087      	sub	sp, #28
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80079a0:	2300      	movs	r3, #0
 80079a2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10a      	bne.n	80079c4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80079ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	60fb      	str	r3, [r7, #12]
}
 80079c0:	bf00      	nop
 80079c2:	e7fe      	b.n	80079c2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	4a0a      	ldr	r2, [pc, #40]	; (80079f4 <prvTaskIsTaskSuspended+0x5c>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d10a      	bne.n	80079e4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d2:	4a09      	ldr	r2, [pc, #36]	; (80079f8 <prvTaskIsTaskSuspended+0x60>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d005      	beq.n	80079e4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80079e0:	2301      	movs	r3, #1
 80079e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079e4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80079e6:	4618      	mov	r0, r3
 80079e8:	371c      	adds	r7, #28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	20000e44 	.word	0x20000e44
 80079f8:	20000e18 	.word	0x20000e18

080079fc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b08a      	sub	sp, #40	; 0x28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8007a04:	2300      	movs	r3, #0
 8007a06:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	61bb      	str	r3, [r7, #24]
}
 8007a24:	bf00      	nop
 8007a26:	e7fe      	b.n	8007a26 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a28:	f001 fb86 	bl	8009138 <vPortValidateInterruptPriority>
	__asm volatile
 8007a2c:	f3ef 8211 	mrs	r2, BASEPRI
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	617a      	str	r2, [r7, #20]
 8007a42:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007a44:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a46:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007a48:	6a38      	ldr	r0, [r7, #32]
 8007a4a:	f7ff ffa5 	bl	8007998 <prvTaskIsTaskSuspended>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d02f      	beq.n	8007ab4 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a54:	4b1d      	ldr	r3, [pc, #116]	; (8007acc <xTaskResumeFromISR+0xd0>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d125      	bne.n	8007aa8 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a60:	4b1b      	ldr	r3, [pc, #108]	; (8007ad0 <xTaskResumeFromISR+0xd4>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d301      	bcc.n	8007a6e <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	3304      	adds	r3, #4
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fe febc 	bl	80067f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	409a      	lsls	r2, r3
 8007a80:	4b14      	ldr	r3, [pc, #80]	; (8007ad4 <xTaskResumeFromISR+0xd8>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	4a13      	ldr	r2, [pc, #76]	; (8007ad4 <xTaskResumeFromISR+0xd8>)
 8007a88:	6013      	str	r3, [r2, #0]
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a8e:	4613      	mov	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4a10      	ldr	r2, [pc, #64]	; (8007ad8 <xTaskResumeFromISR+0xdc>)
 8007a98:	441a      	add	r2, r3
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	f7fe fe48 	bl	8006736 <vListInsertEnd>
 8007aa6:	e005      	b.n	8007ab4 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	3318      	adds	r3, #24
 8007aac:	4619      	mov	r1, r3
 8007aae:	480b      	ldr	r0, [pc, #44]	; (8007adc <xTaskResumeFromISR+0xe0>)
 8007ab0:	f7fe fe41 	bl	8006736 <vListInsertEnd>
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f383 8811 	msr	BASEPRI, r3
}
 8007abe:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3728      	adds	r7, #40	; 0x28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20000e80 	.word	0x20000e80
 8007ad0:	20000d58 	.word	0x20000d58
 8007ad4:	20000e60 	.word	0x20000e60
 8007ad8:	20000d5c 	.word	0x20000d5c
 8007adc:	20000e18 	.word	0x20000e18

08007ae0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b08a      	sub	sp, #40	; 0x28
 8007ae4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007aea:	2300      	movs	r3, #0
 8007aec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007aee:	463a      	mov	r2, r7
 8007af0:	1d39      	adds	r1, r7, #4
 8007af2:	f107 0308 	add.w	r3, r7, #8
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7f9 fab4 	bl	8001064 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	9202      	str	r2, [sp, #8]
 8007b04:	9301      	str	r3, [sp, #4]
 8007b06:	2300      	movs	r3, #0
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	460a      	mov	r2, r1
 8007b0e:	4921      	ldr	r1, [pc, #132]	; (8007b94 <vTaskStartScheduler+0xb4>)
 8007b10:	4821      	ldr	r0, [pc, #132]	; (8007b98 <vTaskStartScheduler+0xb8>)
 8007b12:	f7ff fce7 	bl	80074e4 <xTaskCreateStatic>
 8007b16:	4603      	mov	r3, r0
 8007b18:	4a20      	ldr	r2, [pc, #128]	; (8007b9c <vTaskStartScheduler+0xbc>)
 8007b1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b1c:	4b1f      	ldr	r3, [pc, #124]	; (8007b9c <vTaskStartScheduler+0xbc>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d002      	beq.n	8007b2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b24:	2301      	movs	r3, #1
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	e001      	b.n	8007b2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d102      	bne.n	8007b3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007b34:	f000 fd28 	bl	8008588 <xTimerCreateTimerTask>
 8007b38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d116      	bne.n	8007b6e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	613b      	str	r3, [r7, #16]
}
 8007b52:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b54:	4b12      	ldr	r3, [pc, #72]	; (8007ba0 <vTaskStartScheduler+0xc0>)
 8007b56:	f04f 32ff 	mov.w	r2, #4294967295
 8007b5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b5c:	4b11      	ldr	r3, [pc, #68]	; (8007ba4 <vTaskStartScheduler+0xc4>)
 8007b5e:	2201      	movs	r2, #1
 8007b60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b62:	4b11      	ldr	r3, [pc, #68]	; (8007ba8 <vTaskStartScheduler+0xc8>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b68:	f001 f962 	bl	8008e30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b6c:	e00e      	b.n	8007b8c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b74:	d10a      	bne.n	8007b8c <vTaskStartScheduler+0xac>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	60fb      	str	r3, [r7, #12]
}
 8007b88:	bf00      	nop
 8007b8a:	e7fe      	b.n	8007b8a <vTaskStartScheduler+0xaa>
}
 8007b8c:	bf00      	nop
 8007b8e:	3718      	adds	r7, #24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	0800c6fc 	.word	0x0800c6fc
 8007b98:	080081c5 	.word	0x080081c5
 8007b9c:	20000e7c 	.word	0x20000e7c
 8007ba0:	20000e78 	.word	0x20000e78
 8007ba4:	20000e64 	.word	0x20000e64
 8007ba8:	20000e5c 	.word	0x20000e5c

08007bac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007bac:	b480      	push	{r7}
 8007bae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007bb0:	4b04      	ldr	r3, [pc, #16]	; (8007bc4 <vTaskSuspendAll+0x18>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	4a03      	ldr	r2, [pc, #12]	; (8007bc4 <vTaskSuspendAll+0x18>)
 8007bb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007bba:	bf00      	nop
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	20000e80 	.word	0x20000e80

08007bc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007bd6:	4b41      	ldr	r3, [pc, #260]	; (8007cdc <xTaskResumeAll+0x114>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10a      	bne.n	8007bf4 <xTaskResumeAll+0x2c>
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	603b      	str	r3, [r7, #0]
}
 8007bf0:	bf00      	nop
 8007bf2:	e7fe      	b.n	8007bf2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007bf4:	f001 f9be 	bl	8008f74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007bf8:	4b38      	ldr	r3, [pc, #224]	; (8007cdc <xTaskResumeAll+0x114>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	4a37      	ldr	r2, [pc, #220]	; (8007cdc <xTaskResumeAll+0x114>)
 8007c00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c02:	4b36      	ldr	r3, [pc, #216]	; (8007cdc <xTaskResumeAll+0x114>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d161      	bne.n	8007cce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c0a:	4b35      	ldr	r3, [pc, #212]	; (8007ce0 <xTaskResumeAll+0x118>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d05d      	beq.n	8007cce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c12:	e02e      	b.n	8007c72 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c14:	4b33      	ldr	r3, [pc, #204]	; (8007ce4 <xTaskResumeAll+0x11c>)
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3318      	adds	r3, #24
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7fe fde5 	bl	80067f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	3304      	adds	r3, #4
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fe fde0 	bl	80067f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c34:	2201      	movs	r2, #1
 8007c36:	409a      	lsls	r2, r3
 8007c38:	4b2b      	ldr	r3, [pc, #172]	; (8007ce8 <xTaskResumeAll+0x120>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	4a2a      	ldr	r2, [pc, #168]	; (8007ce8 <xTaskResumeAll+0x120>)
 8007c40:	6013      	str	r3, [r2, #0]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c46:	4613      	mov	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4a27      	ldr	r2, [pc, #156]	; (8007cec <xTaskResumeAll+0x124>)
 8007c50:	441a      	add	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	3304      	adds	r3, #4
 8007c56:	4619      	mov	r1, r3
 8007c58:	4610      	mov	r0, r2
 8007c5a:	f7fe fd6c 	bl	8006736 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c62:	4b23      	ldr	r3, [pc, #140]	; (8007cf0 <xTaskResumeAll+0x128>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d302      	bcc.n	8007c72 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007c6c:	4b21      	ldr	r3, [pc, #132]	; (8007cf4 <xTaskResumeAll+0x12c>)
 8007c6e:	2201      	movs	r2, #1
 8007c70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c72:	4b1c      	ldr	r3, [pc, #112]	; (8007ce4 <xTaskResumeAll+0x11c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1cc      	bne.n	8007c14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c80:	f000 fb58 	bl	8008334 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c84:	4b1c      	ldr	r3, [pc, #112]	; (8007cf8 <xTaskResumeAll+0x130>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d010      	beq.n	8007cb2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c90:	f000 f846 	bl	8007d20 <xTaskIncrementTick>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d002      	beq.n	8007ca0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007c9a:	4b16      	ldr	r3, [pc, #88]	; (8007cf4 <xTaskResumeAll+0x12c>)
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1f1      	bne.n	8007c90 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007cac:	4b12      	ldr	r3, [pc, #72]	; (8007cf8 <xTaskResumeAll+0x130>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007cb2:	4b10      	ldr	r3, [pc, #64]	; (8007cf4 <xTaskResumeAll+0x12c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d009      	beq.n	8007cce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007cbe:	4b0f      	ldr	r3, [pc, #60]	; (8007cfc <xTaskResumeAll+0x134>)
 8007cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	f3bf 8f4f 	dsb	sy
 8007cca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cce:	f001 f981 	bl	8008fd4 <vPortExitCritical>

	return xAlreadyYielded;
 8007cd2:	68bb      	ldr	r3, [r7, #8]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	20000e80 	.word	0x20000e80
 8007ce0:	20000e58 	.word	0x20000e58
 8007ce4:	20000e18 	.word	0x20000e18
 8007ce8:	20000e60 	.word	0x20000e60
 8007cec:	20000d5c 	.word	0x20000d5c
 8007cf0:	20000d58 	.word	0x20000d58
 8007cf4:	20000e6c 	.word	0x20000e6c
 8007cf8:	20000e68 	.word	0x20000e68
 8007cfc:	e000ed04 	.word	0xe000ed04

08007d00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d06:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <xTaskGetTickCount+0x1c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007d0c:	687b      	ldr	r3, [r7, #4]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	20000e5c 	.word	0x20000e5c

08007d20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d26:	2300      	movs	r3, #0
 8007d28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d2a:	4b52      	ldr	r3, [pc, #328]	; (8007e74 <xTaskIncrementTick+0x154>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f040 8094 	bne.w	8007e5c <xTaskIncrementTick+0x13c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d34:	4b50      	ldr	r3, [pc, #320]	; (8007e78 <xTaskIncrementTick+0x158>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d3c:	4a4e      	ldr	r2, [pc, #312]	; (8007e78 <xTaskIncrementTick+0x158>)
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d120      	bne.n	8007d8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d48:	4b4c      	ldr	r3, [pc, #304]	; (8007e7c <xTaskIncrementTick+0x15c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <xTaskIncrementTick+0x48>
	__asm volatile
 8007d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d56:	f383 8811 	msr	BASEPRI, r3
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	603b      	str	r3, [r7, #0]
}
 8007d64:	bf00      	nop
 8007d66:	e7fe      	b.n	8007d66 <xTaskIncrementTick+0x46>
 8007d68:	4b44      	ldr	r3, [pc, #272]	; (8007e7c <xTaskIncrementTick+0x15c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	4b44      	ldr	r3, [pc, #272]	; (8007e80 <xTaskIncrementTick+0x160>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a42      	ldr	r2, [pc, #264]	; (8007e7c <xTaskIncrementTick+0x15c>)
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	4a42      	ldr	r2, [pc, #264]	; (8007e80 <xTaskIncrementTick+0x160>)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6013      	str	r3, [r2, #0]
 8007d7c:	4b41      	ldr	r3, [pc, #260]	; (8007e84 <xTaskIncrementTick+0x164>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3301      	adds	r3, #1
 8007d82:	4a40      	ldr	r2, [pc, #256]	; (8007e84 <xTaskIncrementTick+0x164>)
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	f000 fad5 	bl	8008334 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d8a:	4b3f      	ldr	r3, [pc, #252]	; (8007e88 <xTaskIncrementTick+0x168>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d348      	bcc.n	8007e26 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d94:	4b39      	ldr	r3, [pc, #228]	; (8007e7c <xTaskIncrementTick+0x15c>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d104      	bne.n	8007da8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d9e:	4b3a      	ldr	r3, [pc, #232]	; (8007e88 <xTaskIncrementTick+0x168>)
 8007da0:	f04f 32ff 	mov.w	r2, #4294967295
 8007da4:	601a      	str	r2, [r3, #0]
					break;
 8007da6:	e03e      	b.n	8007e26 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007da8:	4b34      	ldr	r3, [pc, #208]	; (8007e7c <xTaskIncrementTick+0x15c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d203      	bcs.n	8007dc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007dc0:	4a31      	ldr	r2, [pc, #196]	; (8007e88 <xTaskIncrementTick+0x168>)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007dc6:	e02e      	b.n	8007e26 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	3304      	adds	r3, #4
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fe fd0f 	bl	80067f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d004      	beq.n	8007de4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	3318      	adds	r3, #24
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fe fd06 	bl	80067f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de8:	2201      	movs	r2, #1
 8007dea:	409a      	lsls	r2, r3
 8007dec:	4b27      	ldr	r3, [pc, #156]	; (8007e8c <xTaskIncrementTick+0x16c>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	4a26      	ldr	r2, [pc, #152]	; (8007e8c <xTaskIncrementTick+0x16c>)
 8007df4:	6013      	str	r3, [r2, #0]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4a23      	ldr	r2, [pc, #140]	; (8007e90 <xTaskIncrementTick+0x170>)
 8007e04:	441a      	add	r2, r3
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	f7fe fc92 	bl	8006736 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e16:	4b1f      	ldr	r3, [pc, #124]	; (8007e94 <xTaskIncrementTick+0x174>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d3b9      	bcc.n	8007d94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007e20:	2301      	movs	r3, #1
 8007e22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e24:	e7b6      	b.n	8007d94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e26:	4b1b      	ldr	r3, [pc, #108]	; (8007e94 <xTaskIncrementTick+0x174>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e2c:	4918      	ldr	r1, [pc, #96]	; (8007e90 <xTaskIncrementTick+0x170>)
 8007e2e:	4613      	mov	r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	440b      	add	r3, r1
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d901      	bls.n	8007e42 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8007e42:	4b15      	ldr	r3, [pc, #84]	; (8007e98 <xTaskIncrementTick+0x178>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <xTaskIncrementTick+0x12e>
			{
				vApplicationTickHook();
 8007e4a:	f7f9 f904 	bl	8001056 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007e4e:	4b13      	ldr	r3, [pc, #76]	; (8007e9c <xTaskIncrementTick+0x17c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d009      	beq.n	8007e6a <xTaskIncrementTick+0x14a>
			{
				xSwitchRequired = pdTRUE;
 8007e56:	2301      	movs	r3, #1
 8007e58:	617b      	str	r3, [r7, #20]
 8007e5a:	e006      	b.n	8007e6a <xTaskIncrementTick+0x14a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007e5c:	4b0e      	ldr	r3, [pc, #56]	; (8007e98 <xTaskIncrementTick+0x178>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3301      	adds	r3, #1
 8007e62:	4a0d      	ldr	r2, [pc, #52]	; (8007e98 <xTaskIncrementTick+0x178>)
 8007e64:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8007e66:	f7f9 f8f6 	bl	8001056 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8007e6a:	697b      	ldr	r3, [r7, #20]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3718      	adds	r7, #24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	20000e80 	.word	0x20000e80
 8007e78:	20000e5c 	.word	0x20000e5c
 8007e7c:	20000e10 	.word	0x20000e10
 8007e80:	20000e14 	.word	0x20000e14
 8007e84:	20000e70 	.word	0x20000e70
 8007e88:	20000e78 	.word	0x20000e78
 8007e8c:	20000e60 	.word	0x20000e60
 8007e90:	20000d5c 	.word	0x20000d5c
 8007e94:	20000d58 	.word	0x20000d58
 8007e98:	20000e68 	.word	0x20000e68
 8007e9c:	20000e6c 	.word	0x20000e6c

08007ea0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ea6:	4b27      	ldr	r3, [pc, #156]	; (8007f44 <vTaskSwitchContext+0xa4>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007eae:	4b26      	ldr	r3, [pc, #152]	; (8007f48 <vTaskSwitchContext+0xa8>)
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007eb4:	e03f      	b.n	8007f36 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007eb6:	4b24      	ldr	r3, [pc, #144]	; (8007f48 <vTaskSwitchContext+0xa8>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ebc:	4b23      	ldr	r3, [pc, #140]	; (8007f4c <vTaskSwitchContext+0xac>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	fab3 f383 	clz	r3, r3
 8007ec8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007eca:	7afb      	ldrb	r3, [r7, #11]
 8007ecc:	f1c3 031f 	rsb	r3, r3, #31
 8007ed0:	617b      	str	r3, [r7, #20]
 8007ed2:	491f      	ldr	r1, [pc, #124]	; (8007f50 <vTaskSwitchContext+0xb0>)
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	440b      	add	r3, r1
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10a      	bne.n	8007efc <vTaskSwitchContext+0x5c>
	__asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	607b      	str	r3, [r7, #4]
}
 8007ef8:	bf00      	nop
 8007efa:	e7fe      	b.n	8007efa <vTaskSwitchContext+0x5a>
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4a12      	ldr	r2, [pc, #72]	; (8007f50 <vTaskSwitchContext+0xb0>)
 8007f08:	4413      	add	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	605a      	str	r2, [r3, #4]
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	685a      	ldr	r2, [r3, #4]
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d104      	bne.n	8007f2c <vTaskSwitchContext+0x8c>
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	605a      	str	r2, [r3, #4]
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	4a08      	ldr	r2, [pc, #32]	; (8007f54 <vTaskSwitchContext+0xb4>)
 8007f34:	6013      	str	r3, [r2, #0]
}
 8007f36:	bf00      	nop
 8007f38:	371c      	adds	r7, #28
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	20000e80 	.word	0x20000e80
 8007f48:	20000e6c 	.word	0x20000e6c
 8007f4c:	20000e60 	.word	0x20000e60
 8007f50:	20000d5c 	.word	0x20000d5c
 8007f54:	20000d58 	.word	0x20000d58

08007f58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10a      	bne.n	8007f7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	60fb      	str	r3, [r7, #12]
}
 8007f7a:	bf00      	nop
 8007f7c:	e7fe      	b.n	8007f7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f7e:	4b07      	ldr	r3, [pc, #28]	; (8007f9c <vTaskPlaceOnEventList+0x44>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	3318      	adds	r3, #24
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7fe fbf9 	bl	800677e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	6838      	ldr	r0, [r7, #0]
 8007f90:	f000 fa94 	bl	80084bc <prvAddCurrentTaskToDelayedList>
}
 8007f94:	bf00      	nop
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	20000d58 	.word	0x20000d58

08007fa0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d10a      	bne.n	8007fc8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb6:	f383 8811 	msr	BASEPRI, r3
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	617b      	str	r3, [r7, #20]
}
 8007fc4:	bf00      	nop
 8007fc6:	e7fe      	b.n	8007fc6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fc8:	4b0a      	ldr	r3, [pc, #40]	; (8007ff4 <vTaskPlaceOnEventListRestricted+0x54>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3318      	adds	r3, #24
 8007fce:	4619      	mov	r1, r3
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f7fe fbb0 	bl	8006736 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d002      	beq.n	8007fe2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007fe2:	6879      	ldr	r1, [r7, #4]
 8007fe4:	68b8      	ldr	r0, [r7, #8]
 8007fe6:	f000 fa69 	bl	80084bc <prvAddCurrentTaskToDelayedList>
	}
 8007fea:	bf00      	nop
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20000d58 	.word	0x20000d58

08007ff8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10a      	bne.n	8008024 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	60fb      	str	r3, [r7, #12]
}
 8008020:	bf00      	nop
 8008022:	e7fe      	b.n	8008022 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	3318      	adds	r3, #24
 8008028:	4618      	mov	r0, r3
 800802a:	f7fe fbe1 	bl	80067f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800802e:	4b1d      	ldr	r3, [pc, #116]	; (80080a4 <xTaskRemoveFromEventList+0xac>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d11c      	bne.n	8008070 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	3304      	adds	r3, #4
 800803a:	4618      	mov	r0, r3
 800803c:	f7fe fbd8 	bl	80067f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008044:	2201      	movs	r2, #1
 8008046:	409a      	lsls	r2, r3
 8008048:	4b17      	ldr	r3, [pc, #92]	; (80080a8 <xTaskRemoveFromEventList+0xb0>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4313      	orrs	r3, r2
 800804e:	4a16      	ldr	r2, [pc, #88]	; (80080a8 <xTaskRemoveFromEventList+0xb0>)
 8008050:	6013      	str	r3, [r2, #0]
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008056:	4613      	mov	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4413      	add	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4a13      	ldr	r2, [pc, #76]	; (80080ac <xTaskRemoveFromEventList+0xb4>)
 8008060:	441a      	add	r2, r3
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	3304      	adds	r3, #4
 8008066:	4619      	mov	r1, r3
 8008068:	4610      	mov	r0, r2
 800806a:	f7fe fb64 	bl	8006736 <vListInsertEnd>
 800806e:	e005      	b.n	800807c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	3318      	adds	r3, #24
 8008074:	4619      	mov	r1, r3
 8008076:	480e      	ldr	r0, [pc, #56]	; (80080b0 <xTaskRemoveFromEventList+0xb8>)
 8008078:	f7fe fb5d 	bl	8006736 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008080:	4b0c      	ldr	r3, [pc, #48]	; (80080b4 <xTaskRemoveFromEventList+0xbc>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008086:	429a      	cmp	r2, r3
 8008088:	d905      	bls.n	8008096 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800808a:	2301      	movs	r3, #1
 800808c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800808e:	4b0a      	ldr	r3, [pc, #40]	; (80080b8 <xTaskRemoveFromEventList+0xc0>)
 8008090:	2201      	movs	r2, #1
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	e001      	b.n	800809a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008096:	2300      	movs	r3, #0
 8008098:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800809a:	697b      	ldr	r3, [r7, #20]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	20000e80 	.word	0x20000e80
 80080a8:	20000e60 	.word	0x20000e60
 80080ac:	20000d5c 	.word	0x20000d5c
 80080b0:	20000e18 	.word	0x20000e18
 80080b4:	20000d58 	.word	0x20000d58
 80080b8:	20000e6c 	.word	0x20000e6c

080080bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80080c4:	4b06      	ldr	r3, [pc, #24]	; (80080e0 <vTaskInternalSetTimeOutState+0x24>)
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80080cc:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <vTaskInternalSetTimeOutState+0x28>)
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	605a      	str	r2, [r3, #4]
}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr
 80080e0:	20000e70 	.word	0x20000e70
 80080e4:	20000e5c 	.word	0x20000e5c

080080e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b088      	sub	sp, #32
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10a      	bne.n	800810e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80080f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fc:	f383 8811 	msr	BASEPRI, r3
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	613b      	str	r3, [r7, #16]
}
 800810a:	bf00      	nop
 800810c:	e7fe      	b.n	800810c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10a      	bne.n	800812a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	60fb      	str	r3, [r7, #12]
}
 8008126:	bf00      	nop
 8008128:	e7fe      	b.n	8008128 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800812a:	f000 ff23 	bl	8008f74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800812e:	4b1d      	ldr	r3, [pc, #116]	; (80081a4 <xTaskCheckForTimeOut+0xbc>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008146:	d102      	bne.n	800814e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008148:	2300      	movs	r3, #0
 800814a:	61fb      	str	r3, [r7, #28]
 800814c:	e023      	b.n	8008196 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	4b15      	ldr	r3, [pc, #84]	; (80081a8 <xTaskCheckForTimeOut+0xc0>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	429a      	cmp	r2, r3
 8008158:	d007      	beq.n	800816a <xTaskCheckForTimeOut+0x82>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	69ba      	ldr	r2, [r7, #24]
 8008160:	429a      	cmp	r2, r3
 8008162:	d302      	bcc.n	800816a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008164:	2301      	movs	r3, #1
 8008166:	61fb      	str	r3, [r7, #28]
 8008168:	e015      	b.n	8008196 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	429a      	cmp	r2, r3
 8008172:	d20b      	bcs.n	800818c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	1ad2      	subs	r2, r2, r3
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f7ff ff9b 	bl	80080bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008186:	2300      	movs	r3, #0
 8008188:	61fb      	str	r3, [r7, #28]
 800818a:	e004      	b.n	8008196 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	2200      	movs	r2, #0
 8008190:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008192:	2301      	movs	r3, #1
 8008194:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008196:	f000 ff1d 	bl	8008fd4 <vPortExitCritical>

	return xReturn;
 800819a:	69fb      	ldr	r3, [r7, #28]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3720      	adds	r7, #32
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	20000e5c 	.word	0x20000e5c
 80081a8:	20000e70 	.word	0x20000e70

080081ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80081ac:	b480      	push	{r7}
 80081ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80081b0:	4b03      	ldr	r3, [pc, #12]	; (80081c0 <vTaskMissedYield+0x14>)
 80081b2:	2201      	movs	r2, #1
 80081b4:	601a      	str	r2, [r3, #0]
}
 80081b6:	bf00      	nop
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	20000e6c 	.word	0x20000e6c

080081c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80081cc:	f000 f854 	bl	8008278 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081d0:	4b07      	ldr	r3, [pc, #28]	; (80081f0 <prvIdleTask+0x2c>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d907      	bls.n	80081e8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80081d8:	4b06      	ldr	r3, [pc, #24]	; (80081f4 <prvIdleTask+0x30>)
 80081da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081de:	601a      	str	r2, [r3, #0]
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80081e8:	f7f8 ff2e 	bl	8001048 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80081ec:	e7ee      	b.n	80081cc <prvIdleTask+0x8>
 80081ee:	bf00      	nop
 80081f0:	20000d5c 	.word	0x20000d5c
 80081f4:	e000ed04 	.word	0xe000ed04

080081f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081fe:	2300      	movs	r3, #0
 8008200:	607b      	str	r3, [r7, #4]
 8008202:	e00c      	b.n	800821e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	4613      	mov	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4a12      	ldr	r2, [pc, #72]	; (8008258 <prvInitialiseTaskLists+0x60>)
 8008210:	4413      	add	r3, r2
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe fa62 	bl	80066dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3301      	adds	r3, #1
 800821c:	607b      	str	r3, [r7, #4]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b06      	cmp	r3, #6
 8008222:	d9ef      	bls.n	8008204 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008224:	480d      	ldr	r0, [pc, #52]	; (800825c <prvInitialiseTaskLists+0x64>)
 8008226:	f7fe fa59 	bl	80066dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800822a:	480d      	ldr	r0, [pc, #52]	; (8008260 <prvInitialiseTaskLists+0x68>)
 800822c:	f7fe fa56 	bl	80066dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008230:	480c      	ldr	r0, [pc, #48]	; (8008264 <prvInitialiseTaskLists+0x6c>)
 8008232:	f7fe fa53 	bl	80066dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008236:	480c      	ldr	r0, [pc, #48]	; (8008268 <prvInitialiseTaskLists+0x70>)
 8008238:	f7fe fa50 	bl	80066dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800823c:	480b      	ldr	r0, [pc, #44]	; (800826c <prvInitialiseTaskLists+0x74>)
 800823e:	f7fe fa4d 	bl	80066dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008242:	4b0b      	ldr	r3, [pc, #44]	; (8008270 <prvInitialiseTaskLists+0x78>)
 8008244:	4a05      	ldr	r2, [pc, #20]	; (800825c <prvInitialiseTaskLists+0x64>)
 8008246:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008248:	4b0a      	ldr	r3, [pc, #40]	; (8008274 <prvInitialiseTaskLists+0x7c>)
 800824a:	4a05      	ldr	r2, [pc, #20]	; (8008260 <prvInitialiseTaskLists+0x68>)
 800824c:	601a      	str	r2, [r3, #0]
}
 800824e:	bf00      	nop
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20000d5c 	.word	0x20000d5c
 800825c:	20000de8 	.word	0x20000de8
 8008260:	20000dfc 	.word	0x20000dfc
 8008264:	20000e18 	.word	0x20000e18
 8008268:	20000e2c 	.word	0x20000e2c
 800826c:	20000e44 	.word	0x20000e44
 8008270:	20000e10 	.word	0x20000e10
 8008274:	20000e14 	.word	0x20000e14

08008278 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800827e:	e019      	b.n	80082b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008280:	f000 fe78 	bl	8008f74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008284:	4b10      	ldr	r3, [pc, #64]	; (80082c8 <prvCheckTasksWaitingTermination+0x50>)
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	3304      	adds	r3, #4
 8008290:	4618      	mov	r0, r3
 8008292:	f7fe faad 	bl	80067f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008296:	4b0d      	ldr	r3, [pc, #52]	; (80082cc <prvCheckTasksWaitingTermination+0x54>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	3b01      	subs	r3, #1
 800829c:	4a0b      	ldr	r2, [pc, #44]	; (80082cc <prvCheckTasksWaitingTermination+0x54>)
 800829e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80082a0:	4b0b      	ldr	r3, [pc, #44]	; (80082d0 <prvCheckTasksWaitingTermination+0x58>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3b01      	subs	r3, #1
 80082a6:	4a0a      	ldr	r2, [pc, #40]	; (80082d0 <prvCheckTasksWaitingTermination+0x58>)
 80082a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80082aa:	f000 fe93 	bl	8008fd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f810 	bl	80082d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082b4:	4b06      	ldr	r3, [pc, #24]	; (80082d0 <prvCheckTasksWaitingTermination+0x58>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e1      	bne.n	8008280 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80082bc:	bf00      	nop
 80082be:	bf00      	nop
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	20000e2c 	.word	0x20000e2c
 80082cc:	20000e58 	.word	0x20000e58
 80082d0:	20000e40 	.word	0x20000e40

080082d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d108      	bne.n	80082f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ea:	4618      	mov	r0, r3
 80082ec:	f001 f830 	bl	8009350 <vPortFree>
				vPortFree( pxTCB );
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f001 f82d 	bl	8009350 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082f6:	e018      	b.n	800832a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d103      	bne.n	800830a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f001 f824 	bl	8009350 <vPortFree>
	}
 8008308:	e00f      	b.n	800832a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008310:	2b02      	cmp	r3, #2
 8008312:	d00a      	beq.n	800832a <prvDeleteTCB+0x56>
	__asm volatile
 8008314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	60fb      	str	r3, [r7, #12]
}
 8008326:	bf00      	nop
 8008328:	e7fe      	b.n	8008328 <prvDeleteTCB+0x54>
	}
 800832a:	bf00      	nop
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800833a:	4b0c      	ldr	r3, [pc, #48]	; (800836c <prvResetNextTaskUnblockTime+0x38>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d104      	bne.n	800834e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008344:	4b0a      	ldr	r3, [pc, #40]	; (8008370 <prvResetNextTaskUnblockTime+0x3c>)
 8008346:	f04f 32ff 	mov.w	r2, #4294967295
 800834a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800834c:	e008      	b.n	8008360 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800834e:	4b07      	ldr	r3, [pc, #28]	; (800836c <prvResetNextTaskUnblockTime+0x38>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	4a04      	ldr	r2, [pc, #16]	; (8008370 <prvResetNextTaskUnblockTime+0x3c>)
 800835e:	6013      	str	r3, [r2, #0]
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	20000e10 	.word	0x20000e10
 8008370:	20000e78 	.word	0x20000e78

08008374 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800837a:	4b0b      	ldr	r3, [pc, #44]	; (80083a8 <xTaskGetSchedulerState+0x34>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d102      	bne.n	8008388 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008382:	2301      	movs	r3, #1
 8008384:	607b      	str	r3, [r7, #4]
 8008386:	e008      	b.n	800839a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008388:	4b08      	ldr	r3, [pc, #32]	; (80083ac <xTaskGetSchedulerState+0x38>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d102      	bne.n	8008396 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008390:	2302      	movs	r3, #2
 8008392:	607b      	str	r3, [r7, #4]
 8008394:	e001      	b.n	800839a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008396:	2300      	movs	r3, #0
 8008398:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800839a:	687b      	ldr	r3, [r7, #4]
	}
 800839c:	4618      	mov	r0, r3
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	20000e64 	.word	0x20000e64
 80083ac:	20000e80 	.word	0x20000e80

080083b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80083bc:	2300      	movs	r3, #0
 80083be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d06e      	beq.n	80084a4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80083c6:	4b3a      	ldr	r3, [pc, #232]	; (80084b0 <xTaskPriorityDisinherit+0x100>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d00a      	beq.n	80083e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	60fb      	str	r3, [r7, #12]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10a      	bne.n	8008404 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80083ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	60bb      	str	r3, [r7, #8]
}
 8008400:	bf00      	nop
 8008402:	e7fe      	b.n	8008402 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008408:	1e5a      	subs	r2, r3, #1
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008416:	429a      	cmp	r2, r3
 8008418:	d044      	beq.n	80084a4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800841e:	2b00      	cmp	r3, #0
 8008420:	d140      	bne.n	80084a4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	3304      	adds	r3, #4
 8008426:	4618      	mov	r0, r3
 8008428:	f7fe f9e2 	bl	80067f0 <uxListRemove>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d115      	bne.n	800845e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008436:	491f      	ldr	r1, [pc, #124]	; (80084b4 <xTaskPriorityDisinherit+0x104>)
 8008438:	4613      	mov	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	440b      	add	r3, r1
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10a      	bne.n	800845e <xTaskPriorityDisinherit+0xae>
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	2201      	movs	r2, #1
 800844e:	fa02 f303 	lsl.w	r3, r2, r3
 8008452:	43da      	mvns	r2, r3
 8008454:	4b18      	ldr	r3, [pc, #96]	; (80084b8 <xTaskPriorityDisinherit+0x108>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4013      	ands	r3, r2
 800845a:	4a17      	ldr	r2, [pc, #92]	; (80084b8 <xTaskPriorityDisinherit+0x108>)
 800845c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846a:	f1c3 0207 	rsb	r2, r3, #7
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008476:	2201      	movs	r2, #1
 8008478:	409a      	lsls	r2, r3
 800847a:	4b0f      	ldr	r3, [pc, #60]	; (80084b8 <xTaskPriorityDisinherit+0x108>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4313      	orrs	r3, r2
 8008480:	4a0d      	ldr	r2, [pc, #52]	; (80084b8 <xTaskPriorityDisinherit+0x108>)
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008488:	4613      	mov	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4a08      	ldr	r2, [pc, #32]	; (80084b4 <xTaskPriorityDisinherit+0x104>)
 8008492:	441a      	add	r2, r3
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	3304      	adds	r3, #4
 8008498:	4619      	mov	r1, r3
 800849a:	4610      	mov	r0, r2
 800849c:	f7fe f94b 	bl	8006736 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80084a0:	2301      	movs	r3, #1
 80084a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80084a4:	697b      	ldr	r3, [r7, #20]
	}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3718      	adds	r7, #24
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20000d58 	.word	0x20000d58
 80084b4:	20000d5c 	.word	0x20000d5c
 80084b8:	20000e60 	.word	0x20000e60

080084bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80084c6:	4b29      	ldr	r3, [pc, #164]	; (800856c <prvAddCurrentTaskToDelayedList+0xb0>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084cc:	4b28      	ldr	r3, [pc, #160]	; (8008570 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	3304      	adds	r3, #4
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fe f98c 	bl	80067f0 <uxListRemove>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10b      	bne.n	80084f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80084de:	4b24      	ldr	r3, [pc, #144]	; (8008570 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e4:	2201      	movs	r2, #1
 80084e6:	fa02 f303 	lsl.w	r3, r2, r3
 80084ea:	43da      	mvns	r2, r3
 80084ec:	4b21      	ldr	r3, [pc, #132]	; (8008574 <prvAddCurrentTaskToDelayedList+0xb8>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4013      	ands	r3, r2
 80084f2:	4a20      	ldr	r2, [pc, #128]	; (8008574 <prvAddCurrentTaskToDelayedList+0xb8>)
 80084f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fc:	d10a      	bne.n	8008514 <prvAddCurrentTaskToDelayedList+0x58>
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d007      	beq.n	8008514 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008504:	4b1a      	ldr	r3, [pc, #104]	; (8008570 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	3304      	adds	r3, #4
 800850a:	4619      	mov	r1, r3
 800850c:	481a      	ldr	r0, [pc, #104]	; (8008578 <prvAddCurrentTaskToDelayedList+0xbc>)
 800850e:	f7fe f912 	bl	8006736 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008512:	e026      	b.n	8008562 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4413      	add	r3, r2
 800851a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800851c:	4b14      	ldr	r3, [pc, #80]	; (8008570 <prvAddCurrentTaskToDelayedList+0xb4>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	429a      	cmp	r2, r3
 800852a:	d209      	bcs.n	8008540 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800852c:	4b13      	ldr	r3, [pc, #76]	; (800857c <prvAddCurrentTaskToDelayedList+0xc0>)
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	4b0f      	ldr	r3, [pc, #60]	; (8008570 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3304      	adds	r3, #4
 8008536:	4619      	mov	r1, r3
 8008538:	4610      	mov	r0, r2
 800853a:	f7fe f920 	bl	800677e <vListInsert>
}
 800853e:	e010      	b.n	8008562 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008540:	4b0f      	ldr	r3, [pc, #60]	; (8008580 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	4b0a      	ldr	r3, [pc, #40]	; (8008570 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3304      	adds	r3, #4
 800854a:	4619      	mov	r1, r3
 800854c:	4610      	mov	r0, r2
 800854e:	f7fe f916 	bl	800677e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008552:	4b0c      	ldr	r3, [pc, #48]	; (8008584 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	429a      	cmp	r2, r3
 800855a:	d202      	bcs.n	8008562 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800855c:	4a09      	ldr	r2, [pc, #36]	; (8008584 <prvAddCurrentTaskToDelayedList+0xc8>)
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	6013      	str	r3, [r2, #0]
}
 8008562:	bf00      	nop
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20000e5c 	.word	0x20000e5c
 8008570:	20000d58 	.word	0x20000d58
 8008574:	20000e60 	.word	0x20000e60
 8008578:	20000e44 	.word	0x20000e44
 800857c:	20000e14 	.word	0x20000e14
 8008580:	20000e10 	.word	0x20000e10
 8008584:	20000e78 	.word	0x20000e78

08008588 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b08a      	sub	sp, #40	; 0x28
 800858c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800858e:	2300      	movs	r3, #0
 8008590:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008592:	f000 fb85 	bl	8008ca0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008596:	4b1c      	ldr	r3, [pc, #112]	; (8008608 <xTimerCreateTimerTask+0x80>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d021      	beq.n	80085e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800859e:	2300      	movs	r3, #0
 80085a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80085a2:	2300      	movs	r3, #0
 80085a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80085a6:	1d3a      	adds	r2, r7, #4
 80085a8:	f107 0108 	add.w	r1, r7, #8
 80085ac:	f107 030c 	add.w	r3, r7, #12
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7f8 fd71 	bl	8001098 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80085b6:	6879      	ldr	r1, [r7, #4]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	9202      	str	r2, [sp, #8]
 80085be:	9301      	str	r3, [sp, #4]
 80085c0:	2302      	movs	r3, #2
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	2300      	movs	r3, #0
 80085c6:	460a      	mov	r2, r1
 80085c8:	4910      	ldr	r1, [pc, #64]	; (800860c <xTimerCreateTimerTask+0x84>)
 80085ca:	4811      	ldr	r0, [pc, #68]	; (8008610 <xTimerCreateTimerTask+0x88>)
 80085cc:	f7fe ff8a 	bl	80074e4 <xTaskCreateStatic>
 80085d0:	4603      	mov	r3, r0
 80085d2:	4a10      	ldr	r2, [pc, #64]	; (8008614 <xTimerCreateTimerTask+0x8c>)
 80085d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80085d6:	4b0f      	ldr	r3, [pc, #60]	; (8008614 <xTimerCreateTimerTask+0x8c>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80085de:	2301      	movs	r3, #1
 80085e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10a      	bne.n	80085fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 80085e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ec:	f383 8811 	msr	BASEPRI, r3
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	613b      	str	r3, [r7, #16]
}
 80085fa:	bf00      	nop
 80085fc:	e7fe      	b.n	80085fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80085fe:	697b      	ldr	r3, [r7, #20]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	20000eb4 	.word	0x20000eb4
 800860c:	0800c704 	.word	0x0800c704
 8008610:	08008881 	.word	0x08008881
 8008614:	20000eb8 	.word	0x20000eb8

08008618 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008618:	b580      	push	{r7, lr}
 800861a:	b088      	sub	sp, #32
 800861c:	af02      	add	r7, sp, #8
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008626:	2028      	movs	r0, #40	; 0x28
 8008628:	f000 fdc6 	bl	80091b8 <pvPortMalloc>
 800862c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00d      	beq.n	8008650 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	68b9      	ldr	r1, [r7, #8]
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 f843 	bl	80086d6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008650:	697b      	ldr	r3, [r7, #20]
	}
 8008652:	4618      	mov	r0, r3
 8008654:	3718      	adds	r7, #24
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800865a:	b580      	push	{r7, lr}
 800865c:	b08a      	sub	sp, #40	; 0x28
 800865e:	af02      	add	r7, sp, #8
 8008660:	60f8      	str	r0, [r7, #12]
 8008662:	60b9      	str	r1, [r7, #8]
 8008664:	607a      	str	r2, [r7, #4]
 8008666:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008668:	2328      	movs	r3, #40	; 0x28
 800866a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	2b28      	cmp	r3, #40	; 0x28
 8008670:	d00a      	beq.n	8008688 <xTimerCreateStatic+0x2e>
	__asm volatile
 8008672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008676:	f383 8811 	msr	BASEPRI, r3
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	61bb      	str	r3, [r7, #24]
}
 8008684:	bf00      	nop
 8008686:	e7fe      	b.n	8008686 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008688:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800868a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10a      	bne.n	80086a6 <xTimerCreateStatic+0x4c>
	__asm volatile
 8008690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008694:	f383 8811 	msr	BASEPRI, r3
 8008698:	f3bf 8f6f 	isb	sy
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	617b      	str	r3, [r7, #20]
}
 80086a2:	bf00      	nop
 80086a4:	e7fe      	b.n	80086a4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80086a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00d      	beq.n	80086cc <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	2202      	movs	r2, #2
 80086b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	9301      	str	r3, [sp, #4]
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	68b9      	ldr	r1, [r7, #8]
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f000 f805 	bl	80086d6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80086cc:	69fb      	ldr	r3, [r7, #28]
	}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3720      	adds	r7, #32
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b086      	sub	sp, #24
 80086da:	af00      	add	r7, sp, #0
 80086dc:	60f8      	str	r0, [r7, #12]
 80086de:	60b9      	str	r1, [r7, #8]
 80086e0:	607a      	str	r2, [r7, #4]
 80086e2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10a      	bne.n	8008700 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	617b      	str	r3, [r7, #20]
}
 80086fc:	bf00      	nop
 80086fe:	e7fe      	b.n	80086fe <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008702:	2b00      	cmp	r3, #0
 8008704:	d01e      	beq.n	8008744 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008706:	f000 facb 	bl	8008ca0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	683a      	ldr	r2, [r7, #0]
 800871a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	6a3a      	ldr	r2, [r7, #32]
 8008720:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	3304      	adds	r3, #4
 8008726:	4618      	mov	r0, r3
 8008728:	f7fd fff8 	bl	800671c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d008      	beq.n	8008744 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008738:	f043 0304 	orr.w	r3, r3, #4
 800873c:	b2da      	uxtb	r2, r3
 800873e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008740:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008744:	bf00      	nop
 8008746:	3718      	adds	r7, #24
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08a      	sub	sp, #40	; 0x28
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
 8008758:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800875a:	2300      	movs	r3, #0
 800875c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10a      	bne.n	800877a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	623b      	str	r3, [r7, #32]
}
 8008776:	bf00      	nop
 8008778:	e7fe      	b.n	8008778 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800877a:	4b1a      	ldr	r3, [pc, #104]	; (80087e4 <xTimerGenericCommand+0x98>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d02a      	beq.n	80087d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2b05      	cmp	r3, #5
 8008792:	dc18      	bgt.n	80087c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008794:	f7ff fdee 	bl	8008374 <xTaskGetSchedulerState>
 8008798:	4603      	mov	r3, r0
 800879a:	2b02      	cmp	r3, #2
 800879c:	d109      	bne.n	80087b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800879e:	4b11      	ldr	r3, [pc, #68]	; (80087e4 <xTimerGenericCommand+0x98>)
 80087a0:	6818      	ldr	r0, [r3, #0]
 80087a2:	f107 0114 	add.w	r1, r7, #20
 80087a6:	2300      	movs	r3, #0
 80087a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087aa:	f7fe f9d1 	bl	8006b50 <xQueueGenericSend>
 80087ae:	6278      	str	r0, [r7, #36]	; 0x24
 80087b0:	e012      	b.n	80087d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80087b2:	4b0c      	ldr	r3, [pc, #48]	; (80087e4 <xTimerGenericCommand+0x98>)
 80087b4:	6818      	ldr	r0, [r3, #0]
 80087b6:	f107 0114 	add.w	r1, r7, #20
 80087ba:	2300      	movs	r3, #0
 80087bc:	2200      	movs	r2, #0
 80087be:	f7fe f9c7 	bl	8006b50 <xQueueGenericSend>
 80087c2:	6278      	str	r0, [r7, #36]	; 0x24
 80087c4:	e008      	b.n	80087d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80087c6:	4b07      	ldr	r3, [pc, #28]	; (80087e4 <xTimerGenericCommand+0x98>)
 80087c8:	6818      	ldr	r0, [r3, #0]
 80087ca:	f107 0114 	add.w	r1, r7, #20
 80087ce:	2300      	movs	r3, #0
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	f7fe fabb 	bl	8006d4c <xQueueGenericSendFromISR>
 80087d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3728      	adds	r7, #40	; 0x28
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20000eb4 	.word	0x20000eb4

080087e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b088      	sub	sp, #32
 80087ec:	af02      	add	r7, sp, #8
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087f2:	4b22      	ldr	r3, [pc, #136]	; (800887c <prvProcessExpiredTimer+0x94>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	3304      	adds	r3, #4
 8008800:	4618      	mov	r0, r3
 8008802:	f7fd fff5 	bl	80067f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800880c:	f003 0304 	and.w	r3, r3, #4
 8008810:	2b00      	cmp	r3, #0
 8008812:	d022      	beq.n	800885a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	699a      	ldr	r2, [r3, #24]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	18d1      	adds	r1, r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	6978      	ldr	r0, [r7, #20]
 8008822:	f000 f8d1 	bl	80089c8 <prvInsertTimerInActiveList>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d01f      	beq.n	800886c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800882c:	2300      	movs	r3, #0
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	2300      	movs	r3, #0
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	2100      	movs	r1, #0
 8008836:	6978      	ldr	r0, [r7, #20]
 8008838:	f7ff ff88 	bl	800874c <xTimerGenericCommand>
 800883c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d113      	bne.n	800886c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	60fb      	str	r3, [r7, #12]
}
 8008856:	bf00      	nop
 8008858:	e7fe      	b.n	8008858 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008860:	f023 0301 	bic.w	r3, r3, #1
 8008864:	b2da      	uxtb	r2, r3
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	6a1b      	ldr	r3, [r3, #32]
 8008870:	6978      	ldr	r0, [r7, #20]
 8008872:	4798      	blx	r3
}
 8008874:	bf00      	nop
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	20000eac 	.word	0x20000eac

08008880 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008888:	f107 0308 	add.w	r3, r7, #8
 800888c:	4618      	mov	r0, r3
 800888e:	f000 f857 	bl	8008940 <prvGetNextExpireTime>
 8008892:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	4619      	mov	r1, r3
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f000 f803 	bl	80088a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800889e:	f000 f8d5 	bl	8008a4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088a2:	e7f1      	b.n	8008888 <prvTimerTask+0x8>

080088a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80088ae:	f7ff f97d 	bl	8007bac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088b2:	f107 0308 	add.w	r3, r7, #8
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 f866 	bl	8008988 <prvSampleTimeNow>
 80088bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d130      	bne.n	8008926 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10a      	bne.n	80088e0 <prvProcessTimerOrBlockTask+0x3c>
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d806      	bhi.n	80088e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80088d2:	f7ff f979 	bl	8007bc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80088d6:	68f9      	ldr	r1, [r7, #12]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7ff ff85 	bl	80087e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80088de:	e024      	b.n	800892a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d008      	beq.n	80088f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80088e6:	4b13      	ldr	r3, [pc, #76]	; (8008934 <prvProcessTimerOrBlockTask+0x90>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d101      	bne.n	80088f4 <prvProcessTimerOrBlockTask+0x50>
 80088f0:	2301      	movs	r3, #1
 80088f2:	e000      	b.n	80088f6 <prvProcessTimerOrBlockTask+0x52>
 80088f4:	2300      	movs	r3, #0
 80088f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80088f8:	4b0f      	ldr	r3, [pc, #60]	; (8008938 <prvProcessTimerOrBlockTask+0x94>)
 80088fa:	6818      	ldr	r0, [r3, #0]
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	4619      	mov	r1, r3
 8008906:	f7fe fdb9 	bl	800747c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800890a:	f7ff f95d 	bl	8007bc8 <xTaskResumeAll>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10a      	bne.n	800892a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008914:	4b09      	ldr	r3, [pc, #36]	; (800893c <prvProcessTimerOrBlockTask+0x98>)
 8008916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	f3bf 8f6f 	isb	sy
}
 8008924:	e001      	b.n	800892a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008926:	f7ff f94f 	bl	8007bc8 <xTaskResumeAll>
}
 800892a:	bf00      	nop
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	20000eb0 	.word	0x20000eb0
 8008938:	20000eb4 	.word	0x20000eb4
 800893c:	e000ed04 	.word	0xe000ed04

08008940 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008948:	4b0e      	ldr	r3, [pc, #56]	; (8008984 <prvGetNextExpireTime+0x44>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <prvGetNextExpireTime+0x16>
 8008952:	2201      	movs	r2, #1
 8008954:	e000      	b.n	8008958 <prvGetNextExpireTime+0x18>
 8008956:	2200      	movs	r2, #0
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d105      	bne.n	8008970 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008964:	4b07      	ldr	r3, [pc, #28]	; (8008984 <prvGetNextExpireTime+0x44>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	60fb      	str	r3, [r7, #12]
 800896e:	e001      	b.n	8008974 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008970:	2300      	movs	r3, #0
 8008972:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008974:	68fb      	ldr	r3, [r7, #12]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	20000eac 	.word	0x20000eac

08008988 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008990:	f7ff f9b6 	bl	8007d00 <xTaskGetTickCount>
 8008994:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008996:	4b0b      	ldr	r3, [pc, #44]	; (80089c4 <prvSampleTimeNow+0x3c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	429a      	cmp	r2, r3
 800899e:	d205      	bcs.n	80089ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80089a0:	f000 f91a 	bl	8008bd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	e002      	b.n	80089b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80089b2:	4a04      	ldr	r2, [pc, #16]	; (80089c4 <prvSampleTimeNow+0x3c>)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80089b8:	68fb      	ldr	r3, [r7, #12]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	20000ebc 	.word	0x20000ebc

080089c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
 80089d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80089d6:	2300      	movs	r3, #0
 80089d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d812      	bhi.n	8008a14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	1ad2      	subs	r2, r2, r3
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d302      	bcc.n	8008a02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80089fc:	2301      	movs	r3, #1
 80089fe:	617b      	str	r3, [r7, #20]
 8008a00:	e01b      	b.n	8008a3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a02:	4b10      	ldr	r3, [pc, #64]	; (8008a44 <prvInsertTimerInActiveList+0x7c>)
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	3304      	adds	r3, #4
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	f7fd feb6 	bl	800677e <vListInsert>
 8008a12:	e012      	b.n	8008a3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d206      	bcs.n	8008a2a <prvInsertTimerInActiveList+0x62>
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d302      	bcc.n	8008a2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a24:	2301      	movs	r3, #1
 8008a26:	617b      	str	r3, [r7, #20]
 8008a28:	e007      	b.n	8008a3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a2a:	4b07      	ldr	r3, [pc, #28]	; (8008a48 <prvInsertTimerInActiveList+0x80>)
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	3304      	adds	r3, #4
 8008a32:	4619      	mov	r1, r3
 8008a34:	4610      	mov	r0, r2
 8008a36:	f7fd fea2 	bl	800677e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a3a:	697b      	ldr	r3, [r7, #20]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3718      	adds	r7, #24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	20000eb0 	.word	0x20000eb0
 8008a48:	20000eac 	.word	0x20000eac

08008a4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b08c      	sub	sp, #48	; 0x30
 8008a50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a52:	e0ae      	b.n	8008bb2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f2c0 80aa 	blt.w	8008bb0 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d004      	beq.n	8008a72 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fd febf 	bl	80067f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a72:	1d3b      	adds	r3, r7, #4
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7ff ff87 	bl	8008988 <prvSampleTimeNow>
 8008a7a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2b09      	cmp	r3, #9
 8008a80:	f200 8097 	bhi.w	8008bb2 <prvProcessReceivedCommands+0x166>
 8008a84:	a201      	add	r2, pc, #4	; (adr r2, 8008a8c <prvProcessReceivedCommands+0x40>)
 8008a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8a:	bf00      	nop
 8008a8c:	08008ab5 	.word	0x08008ab5
 8008a90:	08008ab5 	.word	0x08008ab5
 8008a94:	08008ab5 	.word	0x08008ab5
 8008a98:	08008b29 	.word	0x08008b29
 8008a9c:	08008b3d 	.word	0x08008b3d
 8008aa0:	08008b87 	.word	0x08008b87
 8008aa4:	08008ab5 	.word	0x08008ab5
 8008aa8:	08008ab5 	.word	0x08008ab5
 8008aac:	08008b29 	.word	0x08008b29
 8008ab0:	08008b3d 	.word	0x08008b3d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008aba:	f043 0301 	orr.w	r3, r3, #1
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	18d1      	adds	r1, r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6a3a      	ldr	r2, [r7, #32]
 8008ad2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ad4:	f7ff ff78 	bl	80089c8 <prvInsertTimerInActiveList>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d069      	beq.n	8008bb2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ae4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d05e      	beq.n	8008bb2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	441a      	add	r2, r3
 8008afc:	2300      	movs	r3, #0
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	2300      	movs	r3, #0
 8008b02:	2100      	movs	r1, #0
 8008b04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b06:	f7ff fe21 	bl	800874c <xTimerGenericCommand>
 8008b0a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d14f      	bne.n	8008bb2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	61bb      	str	r3, [r7, #24]
}
 8008b24:	bf00      	nop
 8008b26:	e7fe      	b.n	8008b26 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008b2e:	f023 0301 	bic.w	r3, r3, #1
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8008b3a:	e03a      	b.n	8008bb2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008b42:	f043 0301 	orr.w	r3, r3, #1
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b52:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10a      	bne.n	8008b72 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8008b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b60:	f383 8811 	msr	BASEPRI, r3
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	617b      	str	r3, [r7, #20]
}
 8008b6e:	bf00      	nop
 8008b70:	e7fe      	b.n	8008b70 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b74:	699a      	ldr	r2, [r3, #24]
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	18d1      	adds	r1, r2, r3
 8008b7a:	6a3b      	ldr	r3, [r7, #32]
 8008b7c:	6a3a      	ldr	r2, [r7, #32]
 8008b7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b80:	f7ff ff22 	bl	80089c8 <prvInsertTimerInActiveList>
					break;
 8008b84:	e015      	b.n	8008bb2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008b8c:	f003 0302 	and.w	r3, r3, #2
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d103      	bne.n	8008b9c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8008b94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b96:	f000 fbdb 	bl	8009350 <vPortFree>
 8008b9a:	e00a      	b.n	8008bb2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008ba2:	f023 0301 	bic.w	r3, r3, #1
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008bae:	e000      	b.n	8008bb2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008bb0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008bb2:	4b08      	ldr	r3, [pc, #32]	; (8008bd4 <prvProcessReceivedCommands+0x188>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f107 0108 	add.w	r1, r7, #8
 8008bba:	2200      	movs	r2, #0
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7fe f961 	bl	8006e84 <xQueueReceive>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f47f af45 	bne.w	8008a54 <prvProcessReceivedCommands+0x8>
	}
}
 8008bca:	bf00      	nop
 8008bcc:	bf00      	nop
 8008bce:	3728      	adds	r7, #40	; 0x28
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	20000eb4 	.word	0x20000eb4

08008bd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b088      	sub	sp, #32
 8008bdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008bde:	e048      	b.n	8008c72 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008be0:	4b2d      	ldr	r3, [pc, #180]	; (8008c98 <prvSwitchTimerLists+0xc0>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bea:	4b2b      	ldr	r3, [pc, #172]	; (8008c98 <prvSwitchTimerLists+0xc0>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fd fdf9 	bl	80067f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6a1b      	ldr	r3, [r3, #32]
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008c0c:	f003 0304 	and.w	r3, r3, #4
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d02e      	beq.n	8008c72 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d90e      	bls.n	8008c44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c32:	4b19      	ldr	r3, [pc, #100]	; (8008c98 <prvSwitchTimerLists+0xc0>)
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	3304      	adds	r3, #4
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	f7fd fd9e 	bl	800677e <vListInsert>
 8008c42:	e016      	b.n	8008c72 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c44:	2300      	movs	r3, #0
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	2300      	movs	r3, #0
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f7ff fd7c 	bl	800874c <xTimerGenericCommand>
 8008c54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10a      	bne.n	8008c72 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c60:	f383 8811 	msr	BASEPRI, r3
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	603b      	str	r3, [r7, #0]
}
 8008c6e:	bf00      	nop
 8008c70:	e7fe      	b.n	8008c70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c72:	4b09      	ldr	r3, [pc, #36]	; (8008c98 <prvSwitchTimerLists+0xc0>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1b1      	bne.n	8008be0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008c7c:	4b06      	ldr	r3, [pc, #24]	; (8008c98 <prvSwitchTimerLists+0xc0>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008c82:	4b06      	ldr	r3, [pc, #24]	; (8008c9c <prvSwitchTimerLists+0xc4>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a04      	ldr	r2, [pc, #16]	; (8008c98 <prvSwitchTimerLists+0xc0>)
 8008c88:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008c8a:	4a04      	ldr	r2, [pc, #16]	; (8008c9c <prvSwitchTimerLists+0xc4>)
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	6013      	str	r3, [r2, #0]
}
 8008c90:	bf00      	nop
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	20000eac 	.word	0x20000eac
 8008c9c:	20000eb0 	.word	0x20000eb0

08008ca0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008ca6:	f000 f965 	bl	8008f74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008caa:	4b15      	ldr	r3, [pc, #84]	; (8008d00 <prvCheckForValidListAndQueue+0x60>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d120      	bne.n	8008cf4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008cb2:	4814      	ldr	r0, [pc, #80]	; (8008d04 <prvCheckForValidListAndQueue+0x64>)
 8008cb4:	f7fd fd12 	bl	80066dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008cb8:	4813      	ldr	r0, [pc, #76]	; (8008d08 <prvCheckForValidListAndQueue+0x68>)
 8008cba:	f7fd fd0f 	bl	80066dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008cbe:	4b13      	ldr	r3, [pc, #76]	; (8008d0c <prvCheckForValidListAndQueue+0x6c>)
 8008cc0:	4a10      	ldr	r2, [pc, #64]	; (8008d04 <prvCheckForValidListAndQueue+0x64>)
 8008cc2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008cc4:	4b12      	ldr	r3, [pc, #72]	; (8008d10 <prvCheckForValidListAndQueue+0x70>)
 8008cc6:	4a10      	ldr	r2, [pc, #64]	; (8008d08 <prvCheckForValidListAndQueue+0x68>)
 8008cc8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008cca:	2300      	movs	r3, #0
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	4b11      	ldr	r3, [pc, #68]	; (8008d14 <prvCheckForValidListAndQueue+0x74>)
 8008cd0:	4a11      	ldr	r2, [pc, #68]	; (8008d18 <prvCheckForValidListAndQueue+0x78>)
 8008cd2:	210c      	movs	r1, #12
 8008cd4:	200a      	movs	r0, #10
 8008cd6:	f7fd fe1d 	bl	8006914 <xQueueGenericCreateStatic>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	4a08      	ldr	r2, [pc, #32]	; (8008d00 <prvCheckForValidListAndQueue+0x60>)
 8008cde:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008ce0:	4b07      	ldr	r3, [pc, #28]	; (8008d00 <prvCheckForValidListAndQueue+0x60>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d005      	beq.n	8008cf4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ce8:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <prvCheckForValidListAndQueue+0x60>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	490b      	ldr	r1, [pc, #44]	; (8008d1c <prvCheckForValidListAndQueue+0x7c>)
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fe fb9a 	bl	8007428 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008cf4:	f000 f96e 	bl	8008fd4 <vPortExitCritical>
}
 8008cf8:	bf00      	nop
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	20000eb4 	.word	0x20000eb4
 8008d04:	20000e84 	.word	0x20000e84
 8008d08:	20000e98 	.word	0x20000e98
 8008d0c:	20000eac 	.word	0x20000eac
 8008d10:	20000eb0 	.word	0x20000eb0
 8008d14:	20000f38 	.word	0x20000f38
 8008d18:	20000ec0 	.word	0x20000ec0
 8008d1c:	0800c70c 	.word	0x0800c70c

08008d20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	3b04      	subs	r3, #4
 8008d30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	3b04      	subs	r3, #4
 8008d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	f023 0201 	bic.w	r2, r3, #1
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	3b04      	subs	r3, #4
 8008d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d50:	4a0c      	ldr	r2, [pc, #48]	; (8008d84 <pxPortInitialiseStack+0x64>)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	3b14      	subs	r3, #20
 8008d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	3b04      	subs	r3, #4
 8008d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f06f 0202 	mvn.w	r2, #2
 8008d6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	3b20      	subs	r3, #32
 8008d74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d76:	68fb      	ldr	r3, [r7, #12]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3714      	adds	r7, #20
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr
 8008d84:	08008d89 	.word	0x08008d89

08008d88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d92:	4b12      	ldr	r3, [pc, #72]	; (8008ddc <prvTaskExitError+0x54>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d9a:	d00a      	beq.n	8008db2 <prvTaskExitError+0x2a>
	__asm volatile
 8008d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	60fb      	str	r3, [r7, #12]
}
 8008dae:	bf00      	nop
 8008db0:	e7fe      	b.n	8008db0 <prvTaskExitError+0x28>
	__asm volatile
 8008db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	60bb      	str	r3, [r7, #8]
}
 8008dc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008dc6:	bf00      	nop
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d0fc      	beq.n	8008dc8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008dce:	bf00      	nop
 8008dd0:	bf00      	nop
 8008dd2:	3714      	adds	r7, #20
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr
 8008ddc:	2000000c 	.word	0x2000000c

08008de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008de0:	4b07      	ldr	r3, [pc, #28]	; (8008e00 <pxCurrentTCBConst2>)
 8008de2:	6819      	ldr	r1, [r3, #0]
 8008de4:	6808      	ldr	r0, [r1, #0]
 8008de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dea:	f380 8809 	msr	PSP, r0
 8008dee:	f3bf 8f6f 	isb	sy
 8008df2:	f04f 0000 	mov.w	r0, #0
 8008df6:	f380 8811 	msr	BASEPRI, r0
 8008dfa:	4770      	bx	lr
 8008dfc:	f3af 8000 	nop.w

08008e00 <pxCurrentTCBConst2>:
 8008e00:	20000d58 	.word	0x20000d58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e04:	bf00      	nop
 8008e06:	bf00      	nop

08008e08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e08:	4808      	ldr	r0, [pc, #32]	; (8008e2c <prvPortStartFirstTask+0x24>)
 8008e0a:	6800      	ldr	r0, [r0, #0]
 8008e0c:	6800      	ldr	r0, [r0, #0]
 8008e0e:	f380 8808 	msr	MSP, r0
 8008e12:	f04f 0000 	mov.w	r0, #0
 8008e16:	f380 8814 	msr	CONTROL, r0
 8008e1a:	b662      	cpsie	i
 8008e1c:	b661      	cpsie	f
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	df00      	svc	0
 8008e28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e2a:	bf00      	nop
 8008e2c:	e000ed08 	.word	0xe000ed08

08008e30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b086      	sub	sp, #24
 8008e34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e36:	4b46      	ldr	r3, [pc, #280]	; (8008f50 <xPortStartScheduler+0x120>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a46      	ldr	r2, [pc, #280]	; (8008f54 <xPortStartScheduler+0x124>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d10a      	bne.n	8008e56 <xPortStartScheduler+0x26>
	__asm volatile
 8008e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e44:	f383 8811 	msr	BASEPRI, r3
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	613b      	str	r3, [r7, #16]
}
 8008e52:	bf00      	nop
 8008e54:	e7fe      	b.n	8008e54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e56:	4b3e      	ldr	r3, [pc, #248]	; (8008f50 <xPortStartScheduler+0x120>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a3f      	ldr	r2, [pc, #252]	; (8008f58 <xPortStartScheduler+0x128>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d10a      	bne.n	8008e76 <xPortStartScheduler+0x46>
	__asm volatile
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	60fb      	str	r3, [r7, #12]
}
 8008e72:	bf00      	nop
 8008e74:	e7fe      	b.n	8008e74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e76:	4b39      	ldr	r3, [pc, #228]	; (8008f5c <xPortStartScheduler+0x12c>)
 8008e78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	22ff      	movs	r2, #255	; 0xff
 8008e86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e90:	78fb      	ldrb	r3, [r7, #3]
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	4b31      	ldr	r3, [pc, #196]	; (8008f60 <xPortStartScheduler+0x130>)
 8008e9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e9e:	4b31      	ldr	r3, [pc, #196]	; (8008f64 <xPortStartScheduler+0x134>)
 8008ea0:	2207      	movs	r2, #7
 8008ea2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ea4:	e009      	b.n	8008eba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008ea6:	4b2f      	ldr	r3, [pc, #188]	; (8008f64 <xPortStartScheduler+0x134>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	4a2d      	ldr	r2, [pc, #180]	; (8008f64 <xPortStartScheduler+0x134>)
 8008eae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008eb0:	78fb      	ldrb	r3, [r7, #3]
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	005b      	lsls	r3, r3, #1
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec2:	2b80      	cmp	r3, #128	; 0x80
 8008ec4:	d0ef      	beq.n	8008ea6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ec6:	4b27      	ldr	r3, [pc, #156]	; (8008f64 <xPortStartScheduler+0x134>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f1c3 0307 	rsb	r3, r3, #7
 8008ece:	2b04      	cmp	r3, #4
 8008ed0:	d00a      	beq.n	8008ee8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	60bb      	str	r3, [r7, #8]
}
 8008ee4:	bf00      	nop
 8008ee6:	e7fe      	b.n	8008ee6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ee8:	4b1e      	ldr	r3, [pc, #120]	; (8008f64 <xPortStartScheduler+0x134>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	021b      	lsls	r3, r3, #8
 8008eee:	4a1d      	ldr	r2, [pc, #116]	; (8008f64 <xPortStartScheduler+0x134>)
 8008ef0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ef2:	4b1c      	ldr	r3, [pc, #112]	; (8008f64 <xPortStartScheduler+0x134>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008efa:	4a1a      	ldr	r2, [pc, #104]	; (8008f64 <xPortStartScheduler+0x134>)
 8008efc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	b2da      	uxtb	r2, r3
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f06:	4b18      	ldr	r3, [pc, #96]	; (8008f68 <xPortStartScheduler+0x138>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a17      	ldr	r2, [pc, #92]	; (8008f68 <xPortStartScheduler+0x138>)
 8008f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f12:	4b15      	ldr	r3, [pc, #84]	; (8008f68 <xPortStartScheduler+0x138>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a14      	ldr	r2, [pc, #80]	; (8008f68 <xPortStartScheduler+0x138>)
 8008f18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f1e:	f000 f8dd 	bl	80090dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f22:	4b12      	ldr	r3, [pc, #72]	; (8008f6c <xPortStartScheduler+0x13c>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f28:	f000 f8fc 	bl	8009124 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f2c:	4b10      	ldr	r3, [pc, #64]	; (8008f70 <xPortStartScheduler+0x140>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a0f      	ldr	r2, [pc, #60]	; (8008f70 <xPortStartScheduler+0x140>)
 8008f32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008f36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f38:	f7ff ff66 	bl	8008e08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f3c:	f7fe ffb0 	bl	8007ea0 <vTaskSwitchContext>
	prvTaskExitError();
 8008f40:	f7ff ff22 	bl	8008d88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3718      	adds	r7, #24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	e000ed00 	.word	0xe000ed00
 8008f54:	410fc271 	.word	0x410fc271
 8008f58:	410fc270 	.word	0x410fc270
 8008f5c:	e000e400 	.word	0xe000e400
 8008f60:	20000f80 	.word	0x20000f80
 8008f64:	20000f84 	.word	0x20000f84
 8008f68:	e000ed20 	.word	0xe000ed20
 8008f6c:	2000000c 	.word	0x2000000c
 8008f70:	e000ef34 	.word	0xe000ef34

08008f74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
	__asm volatile
 8008f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7e:	f383 8811 	msr	BASEPRI, r3
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	607b      	str	r3, [r7, #4]
}
 8008f8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f8e:	4b0f      	ldr	r3, [pc, #60]	; (8008fcc <vPortEnterCritical+0x58>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	3301      	adds	r3, #1
 8008f94:	4a0d      	ldr	r2, [pc, #52]	; (8008fcc <vPortEnterCritical+0x58>)
 8008f96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f98:	4b0c      	ldr	r3, [pc, #48]	; (8008fcc <vPortEnterCritical+0x58>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d10f      	bne.n	8008fc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008fa0:	4b0b      	ldr	r3, [pc, #44]	; (8008fd0 <vPortEnterCritical+0x5c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00a      	beq.n	8008fc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	603b      	str	r3, [r7, #0]
}
 8008fbc:	bf00      	nop
 8008fbe:	e7fe      	b.n	8008fbe <vPortEnterCritical+0x4a>
	}
}
 8008fc0:	bf00      	nop
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr
 8008fcc:	2000000c 	.word	0x2000000c
 8008fd0:	e000ed04 	.word	0xe000ed04

08008fd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008fda:	4b12      	ldr	r3, [pc, #72]	; (8009024 <vPortExitCritical+0x50>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d10a      	bne.n	8008ff8 <vPortExitCritical+0x24>
	__asm volatile
 8008fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe6:	f383 8811 	msr	BASEPRI, r3
 8008fea:	f3bf 8f6f 	isb	sy
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	607b      	str	r3, [r7, #4]
}
 8008ff4:	bf00      	nop
 8008ff6:	e7fe      	b.n	8008ff6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ff8:	4b0a      	ldr	r3, [pc, #40]	; (8009024 <vPortExitCritical+0x50>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	4a09      	ldr	r2, [pc, #36]	; (8009024 <vPortExitCritical+0x50>)
 8009000:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009002:	4b08      	ldr	r3, [pc, #32]	; (8009024 <vPortExitCritical+0x50>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d105      	bne.n	8009016 <vPortExitCritical+0x42>
 800900a:	2300      	movs	r3, #0
 800900c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	f383 8811 	msr	BASEPRI, r3
}
 8009014:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009016:	bf00      	nop
 8009018:	370c      	adds	r7, #12
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	2000000c 	.word	0x2000000c
	...

08009030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009030:	f3ef 8009 	mrs	r0, PSP
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	4b15      	ldr	r3, [pc, #84]	; (8009090 <pxCurrentTCBConst>)
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	f01e 0f10 	tst.w	lr, #16
 8009040:	bf08      	it	eq
 8009042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904a:	6010      	str	r0, [r2, #0]
 800904c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009050:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009054:	f380 8811 	msr	BASEPRI, r0
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f7fe ff1e 	bl	8007ea0 <vTaskSwitchContext>
 8009064:	f04f 0000 	mov.w	r0, #0
 8009068:	f380 8811 	msr	BASEPRI, r0
 800906c:	bc09      	pop	{r0, r3}
 800906e:	6819      	ldr	r1, [r3, #0]
 8009070:	6808      	ldr	r0, [r1, #0]
 8009072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009076:	f01e 0f10 	tst.w	lr, #16
 800907a:	bf08      	it	eq
 800907c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009080:	f380 8809 	msr	PSP, r0
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	f3af 8000 	nop.w

08009090 <pxCurrentTCBConst>:
 8009090:	20000d58 	.word	0x20000d58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009094:	bf00      	nop
 8009096:	bf00      	nop

08009098 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	607b      	str	r3, [r7, #4]
}
 80090b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80090b2:	f7fe fe35 	bl	8007d20 <xTaskIncrementTick>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d003      	beq.n	80090c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80090bc:	4b06      	ldr	r3, [pc, #24]	; (80090d8 <SysTick_Handler+0x40>)
 80090be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	2300      	movs	r3, #0
 80090c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	f383 8811 	msr	BASEPRI, r3
}
 80090ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80090d0:	bf00      	nop
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	e000ed04 	.word	0xe000ed04

080090dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80090dc:	b480      	push	{r7}
 80090de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80090e0:	4b0b      	ldr	r3, [pc, #44]	; (8009110 <vPortSetupTimerInterrupt+0x34>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80090e6:	4b0b      	ldr	r3, [pc, #44]	; (8009114 <vPortSetupTimerInterrupt+0x38>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80090ec:	4b0a      	ldr	r3, [pc, #40]	; (8009118 <vPortSetupTimerInterrupt+0x3c>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a0a      	ldr	r2, [pc, #40]	; (800911c <vPortSetupTimerInterrupt+0x40>)
 80090f2:	fba2 2303 	umull	r2, r3, r2, r3
 80090f6:	099b      	lsrs	r3, r3, #6
 80090f8:	4a09      	ldr	r2, [pc, #36]	; (8009120 <vPortSetupTimerInterrupt+0x44>)
 80090fa:	3b01      	subs	r3, #1
 80090fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80090fe:	4b04      	ldr	r3, [pc, #16]	; (8009110 <vPortSetupTimerInterrupt+0x34>)
 8009100:	2207      	movs	r2, #7
 8009102:	601a      	str	r2, [r3, #0]
}
 8009104:	bf00      	nop
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	e000e010 	.word	0xe000e010
 8009114:	e000e018 	.word	0xe000e018
 8009118:	20000000 	.word	0x20000000
 800911c:	10624dd3 	.word	0x10624dd3
 8009120:	e000e014 	.word	0xe000e014

08009124 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009124:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009134 <vPortEnableVFP+0x10>
 8009128:	6801      	ldr	r1, [r0, #0]
 800912a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800912e:	6001      	str	r1, [r0, #0]
 8009130:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009132:	bf00      	nop
 8009134:	e000ed88 	.word	0xe000ed88

08009138 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800913e:	f3ef 8305 	mrs	r3, IPSR
 8009142:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2b0f      	cmp	r3, #15
 8009148:	d914      	bls.n	8009174 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800914a:	4a17      	ldr	r2, [pc, #92]	; (80091a8 <vPortValidateInterruptPriority+0x70>)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4413      	add	r3, r2
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009154:	4b15      	ldr	r3, [pc, #84]	; (80091ac <vPortValidateInterruptPriority+0x74>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	7afa      	ldrb	r2, [r7, #11]
 800915a:	429a      	cmp	r2, r3
 800915c:	d20a      	bcs.n	8009174 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800915e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009162:	f383 8811 	msr	BASEPRI, r3
 8009166:	f3bf 8f6f 	isb	sy
 800916a:	f3bf 8f4f 	dsb	sy
 800916e:	607b      	str	r3, [r7, #4]
}
 8009170:	bf00      	nop
 8009172:	e7fe      	b.n	8009172 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009174:	4b0e      	ldr	r3, [pc, #56]	; (80091b0 <vPortValidateInterruptPriority+0x78>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800917c:	4b0d      	ldr	r3, [pc, #52]	; (80091b4 <vPortValidateInterruptPriority+0x7c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	429a      	cmp	r2, r3
 8009182:	d90a      	bls.n	800919a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	603b      	str	r3, [r7, #0]
}
 8009196:	bf00      	nop
 8009198:	e7fe      	b.n	8009198 <vPortValidateInterruptPriority+0x60>
	}
 800919a:	bf00      	nop
 800919c:	3714      	adds	r7, #20
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	e000e3f0 	.word	0xe000e3f0
 80091ac:	20000f80 	.word	0x20000f80
 80091b0:	e000ed0c 	.word	0xe000ed0c
 80091b4:	20000f84 	.word	0x20000f84

080091b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b08a      	sub	sp, #40	; 0x28
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80091c0:	2300      	movs	r3, #0
 80091c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80091c4:	f7fe fcf2 	bl	8007bac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80091c8:	4b5b      	ldr	r3, [pc, #364]	; (8009338 <pvPortMalloc+0x180>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d101      	bne.n	80091d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80091d0:	f000 f920 	bl	8009414 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80091d4:	4b59      	ldr	r3, [pc, #356]	; (800933c <pvPortMalloc+0x184>)
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4013      	ands	r3, r2
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f040 8093 	bne.w	8009308 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d01d      	beq.n	8009224 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80091e8:	2208      	movs	r2, #8
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4413      	add	r3, r2
 80091ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f003 0307 	and.w	r3, r3, #7
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d014      	beq.n	8009224 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f023 0307 	bic.w	r3, r3, #7
 8009200:	3308      	adds	r3, #8
 8009202:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f003 0307 	and.w	r3, r3, #7
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00a      	beq.n	8009224 <pvPortMalloc+0x6c>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	617b      	str	r3, [r7, #20]
}
 8009220:	bf00      	nop
 8009222:	e7fe      	b.n	8009222 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d06e      	beq.n	8009308 <pvPortMalloc+0x150>
 800922a:	4b45      	ldr	r3, [pc, #276]	; (8009340 <pvPortMalloc+0x188>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	429a      	cmp	r2, r3
 8009232:	d869      	bhi.n	8009308 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009234:	4b43      	ldr	r3, [pc, #268]	; (8009344 <pvPortMalloc+0x18c>)
 8009236:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009238:	4b42      	ldr	r3, [pc, #264]	; (8009344 <pvPortMalloc+0x18c>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800923e:	e004      	b.n	800924a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	429a      	cmp	r2, r3
 8009252:	d903      	bls.n	800925c <pvPortMalloc+0xa4>
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1f1      	bne.n	8009240 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800925c:	4b36      	ldr	r3, [pc, #216]	; (8009338 <pvPortMalloc+0x180>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009262:	429a      	cmp	r2, r3
 8009264:	d050      	beq.n	8009308 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009266:	6a3b      	ldr	r3, [r7, #32]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2208      	movs	r2, #8
 800926c:	4413      	add	r3, r2
 800926e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	6a3b      	ldr	r3, [r7, #32]
 8009276:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	1ad2      	subs	r2, r2, r3
 8009280:	2308      	movs	r3, #8
 8009282:	005b      	lsls	r3, r3, #1
 8009284:	429a      	cmp	r2, r3
 8009286:	d91f      	bls.n	80092c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4413      	add	r3, r2
 800928e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	f003 0307 	and.w	r3, r3, #7
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00a      	beq.n	80092b0 <pvPortMalloc+0xf8>
	__asm volatile
 800929a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	613b      	str	r3, [r7, #16]
}
 80092ac:	bf00      	nop
 80092ae:	e7fe      	b.n	80092ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	685a      	ldr	r2, [r3, #4]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	1ad2      	subs	r2, r2, r3
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80092c2:	69b8      	ldr	r0, [r7, #24]
 80092c4:	f000 f908 	bl	80094d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80092c8:	4b1d      	ldr	r3, [pc, #116]	; (8009340 <pvPortMalloc+0x188>)
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	4a1b      	ldr	r2, [pc, #108]	; (8009340 <pvPortMalloc+0x188>)
 80092d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80092d6:	4b1a      	ldr	r3, [pc, #104]	; (8009340 <pvPortMalloc+0x188>)
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	4b1b      	ldr	r3, [pc, #108]	; (8009348 <pvPortMalloc+0x190>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d203      	bcs.n	80092ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80092e2:	4b17      	ldr	r3, [pc, #92]	; (8009340 <pvPortMalloc+0x188>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a18      	ldr	r2, [pc, #96]	; (8009348 <pvPortMalloc+0x190>)
 80092e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80092ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ec:	685a      	ldr	r2, [r3, #4]
 80092ee:	4b13      	ldr	r3, [pc, #76]	; (800933c <pvPortMalloc+0x184>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	431a      	orrs	r2, r3
 80092f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	2200      	movs	r2, #0
 80092fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80092fe:	4b13      	ldr	r3, [pc, #76]	; (800934c <pvPortMalloc+0x194>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3301      	adds	r3, #1
 8009304:	4a11      	ldr	r2, [pc, #68]	; (800934c <pvPortMalloc+0x194>)
 8009306:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009308:	f7fe fc5e 	bl	8007bc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	f003 0307 	and.w	r3, r3, #7
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00a      	beq.n	800932c <pvPortMalloc+0x174>
	__asm volatile
 8009316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931a:	f383 8811 	msr	BASEPRI, r3
 800931e:	f3bf 8f6f 	isb	sy
 8009322:	f3bf 8f4f 	dsb	sy
 8009326:	60fb      	str	r3, [r7, #12]
}
 8009328:	bf00      	nop
 800932a:	e7fe      	b.n	800932a <pvPortMalloc+0x172>
	return pvReturn;
 800932c:	69fb      	ldr	r3, [r7, #28]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3728      	adds	r7, #40	; 0x28
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	20004b90 	.word	0x20004b90
 800933c:	20004ba4 	.word	0x20004ba4
 8009340:	20004b94 	.word	0x20004b94
 8009344:	20004b88 	.word	0x20004b88
 8009348:	20004b98 	.word	0x20004b98
 800934c:	20004b9c 	.word	0x20004b9c

08009350 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d04d      	beq.n	80093fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009362:	2308      	movs	r3, #8
 8009364:	425b      	negs	r3, r3
 8009366:	697a      	ldr	r2, [r7, #20]
 8009368:	4413      	add	r3, r2
 800936a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	685a      	ldr	r2, [r3, #4]
 8009374:	4b24      	ldr	r3, [pc, #144]	; (8009408 <vPortFree+0xb8>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4013      	ands	r3, r2
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10a      	bne.n	8009394 <vPortFree+0x44>
	__asm volatile
 800937e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	60fb      	str	r3, [r7, #12]
}
 8009390:	bf00      	nop
 8009392:	e7fe      	b.n	8009392 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00a      	beq.n	80093b2 <vPortFree+0x62>
	__asm volatile
 800939c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	60bb      	str	r3, [r7, #8]
}
 80093ae:	bf00      	nop
 80093b0:	e7fe      	b.n	80093b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	4b14      	ldr	r3, [pc, #80]	; (8009408 <vPortFree+0xb8>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4013      	ands	r3, r2
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d01e      	beq.n	80093fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d11a      	bne.n	80093fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	685a      	ldr	r2, [r3, #4]
 80093cc:	4b0e      	ldr	r3, [pc, #56]	; (8009408 <vPortFree+0xb8>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	43db      	mvns	r3, r3
 80093d2:	401a      	ands	r2, r3
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80093d8:	f7fe fbe8 	bl	8007bac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	685a      	ldr	r2, [r3, #4]
 80093e0:	4b0a      	ldr	r3, [pc, #40]	; (800940c <vPortFree+0xbc>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4413      	add	r3, r2
 80093e6:	4a09      	ldr	r2, [pc, #36]	; (800940c <vPortFree+0xbc>)
 80093e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80093ea:	6938      	ldr	r0, [r7, #16]
 80093ec:	f000 f874 	bl	80094d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80093f0:	4b07      	ldr	r3, [pc, #28]	; (8009410 <vPortFree+0xc0>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3301      	adds	r3, #1
 80093f6:	4a06      	ldr	r2, [pc, #24]	; (8009410 <vPortFree+0xc0>)
 80093f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80093fa:	f7fe fbe5 	bl	8007bc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80093fe:	bf00      	nop
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	20004ba4 	.word	0x20004ba4
 800940c:	20004b94 	.word	0x20004b94
 8009410:	20004ba0 	.word	0x20004ba0

08009414 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800941a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800941e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009420:	4b27      	ldr	r3, [pc, #156]	; (80094c0 <prvHeapInit+0xac>)
 8009422:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f003 0307 	and.w	r3, r3, #7
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00c      	beq.n	8009448 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	3307      	adds	r3, #7
 8009432:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f023 0307 	bic.w	r3, r3, #7
 800943a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	4a1f      	ldr	r2, [pc, #124]	; (80094c0 <prvHeapInit+0xac>)
 8009444:	4413      	add	r3, r2
 8009446:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800944c:	4a1d      	ldr	r2, [pc, #116]	; (80094c4 <prvHeapInit+0xb0>)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009452:	4b1c      	ldr	r3, [pc, #112]	; (80094c4 <prvHeapInit+0xb0>)
 8009454:	2200      	movs	r2, #0
 8009456:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	4413      	add	r3, r2
 800945e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009460:	2208      	movs	r2, #8
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	1a9b      	subs	r3, r3, r2
 8009466:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f023 0307 	bic.w	r3, r3, #7
 800946e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	4a15      	ldr	r2, [pc, #84]	; (80094c8 <prvHeapInit+0xb4>)
 8009474:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009476:	4b14      	ldr	r3, [pc, #80]	; (80094c8 <prvHeapInit+0xb4>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2200      	movs	r2, #0
 800947c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800947e:	4b12      	ldr	r3, [pc, #72]	; (80094c8 <prvHeapInit+0xb4>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2200      	movs	r2, #0
 8009484:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	1ad2      	subs	r2, r2, r3
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009494:	4b0c      	ldr	r3, [pc, #48]	; (80094c8 <prvHeapInit+0xb4>)
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	4a0a      	ldr	r2, [pc, #40]	; (80094cc <prvHeapInit+0xb8>)
 80094a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	4a09      	ldr	r2, [pc, #36]	; (80094d0 <prvHeapInit+0xbc>)
 80094aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094ac:	4b09      	ldr	r3, [pc, #36]	; (80094d4 <prvHeapInit+0xc0>)
 80094ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80094b2:	601a      	str	r2, [r3, #0]
}
 80094b4:	bf00      	nop
 80094b6:	3714      	adds	r7, #20
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr
 80094c0:	20000f88 	.word	0x20000f88
 80094c4:	20004b88 	.word	0x20004b88
 80094c8:	20004b90 	.word	0x20004b90
 80094cc:	20004b98 	.word	0x20004b98
 80094d0:	20004b94 	.word	0x20004b94
 80094d4:	20004ba4 	.word	0x20004ba4

080094d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80094e0:	4b28      	ldr	r3, [pc, #160]	; (8009584 <prvInsertBlockIntoFreeList+0xac>)
 80094e2:	60fb      	str	r3, [r7, #12]
 80094e4:	e002      	b.n	80094ec <prvInsertBlockIntoFreeList+0x14>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d8f7      	bhi.n	80094e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	4413      	add	r3, r2
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	429a      	cmp	r2, r3
 8009506:	d108      	bne.n	800951a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	441a      	add	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	441a      	add	r2, r3
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	429a      	cmp	r2, r3
 800952c:	d118      	bne.n	8009560 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	4b15      	ldr	r3, [pc, #84]	; (8009588 <prvInsertBlockIntoFreeList+0xb0>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	429a      	cmp	r2, r3
 8009538:	d00d      	beq.n	8009556 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685a      	ldr	r2, [r3, #4]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	441a      	add	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	e008      	b.n	8009568 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009556:	4b0c      	ldr	r3, [pc, #48]	; (8009588 <prvInsertBlockIntoFreeList+0xb0>)
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	e003      	b.n	8009568 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	429a      	cmp	r2, r3
 800956e:	d002      	beq.n	8009576 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009576:	bf00      	nop
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	20004b88 	.word	0x20004b88
 8009588:	20004b90 	.word	0x20004b90

0800958c <__errno>:
 800958c:	4b01      	ldr	r3, [pc, #4]	; (8009594 <__errno+0x8>)
 800958e:	6818      	ldr	r0, [r3, #0]
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	20000010 	.word	0x20000010

08009598 <__libc_init_array>:
 8009598:	b570      	push	{r4, r5, r6, lr}
 800959a:	4d0d      	ldr	r5, [pc, #52]	; (80095d0 <__libc_init_array+0x38>)
 800959c:	4c0d      	ldr	r4, [pc, #52]	; (80095d4 <__libc_init_array+0x3c>)
 800959e:	1b64      	subs	r4, r4, r5
 80095a0:	10a4      	asrs	r4, r4, #2
 80095a2:	2600      	movs	r6, #0
 80095a4:	42a6      	cmp	r6, r4
 80095a6:	d109      	bne.n	80095bc <__libc_init_array+0x24>
 80095a8:	4d0b      	ldr	r5, [pc, #44]	; (80095d8 <__libc_init_array+0x40>)
 80095aa:	4c0c      	ldr	r4, [pc, #48]	; (80095dc <__libc_init_array+0x44>)
 80095ac:	f002 ff02 	bl	800c3b4 <_init>
 80095b0:	1b64      	subs	r4, r4, r5
 80095b2:	10a4      	asrs	r4, r4, #2
 80095b4:	2600      	movs	r6, #0
 80095b6:	42a6      	cmp	r6, r4
 80095b8:	d105      	bne.n	80095c6 <__libc_init_array+0x2e>
 80095ba:	bd70      	pop	{r4, r5, r6, pc}
 80095bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80095c0:	4798      	blx	r3
 80095c2:	3601      	adds	r6, #1
 80095c4:	e7ee      	b.n	80095a4 <__libc_init_array+0xc>
 80095c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ca:	4798      	blx	r3
 80095cc:	3601      	adds	r6, #1
 80095ce:	e7f2      	b.n	80095b6 <__libc_init_array+0x1e>
 80095d0:	0800cb14 	.word	0x0800cb14
 80095d4:	0800cb14 	.word	0x0800cb14
 80095d8:	0800cb14 	.word	0x0800cb14
 80095dc:	0800cb18 	.word	0x0800cb18

080095e0 <memcpy>:
 80095e0:	440a      	add	r2, r1
 80095e2:	4291      	cmp	r1, r2
 80095e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80095e8:	d100      	bne.n	80095ec <memcpy+0xc>
 80095ea:	4770      	bx	lr
 80095ec:	b510      	push	{r4, lr}
 80095ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095f6:	4291      	cmp	r1, r2
 80095f8:	d1f9      	bne.n	80095ee <memcpy+0xe>
 80095fa:	bd10      	pop	{r4, pc}

080095fc <memset>:
 80095fc:	4402      	add	r2, r0
 80095fe:	4603      	mov	r3, r0
 8009600:	4293      	cmp	r3, r2
 8009602:	d100      	bne.n	8009606 <memset+0xa>
 8009604:	4770      	bx	lr
 8009606:	f803 1b01 	strb.w	r1, [r3], #1
 800960a:	e7f9      	b.n	8009600 <memset+0x4>

0800960c <__cvt>:
 800960c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009610:	ec55 4b10 	vmov	r4, r5, d0
 8009614:	2d00      	cmp	r5, #0
 8009616:	460e      	mov	r6, r1
 8009618:	4619      	mov	r1, r3
 800961a:	462b      	mov	r3, r5
 800961c:	bfbb      	ittet	lt
 800961e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009622:	461d      	movlt	r5, r3
 8009624:	2300      	movge	r3, #0
 8009626:	232d      	movlt	r3, #45	; 0x2d
 8009628:	700b      	strb	r3, [r1, #0]
 800962a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800962c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009630:	4691      	mov	r9, r2
 8009632:	f023 0820 	bic.w	r8, r3, #32
 8009636:	bfbc      	itt	lt
 8009638:	4622      	movlt	r2, r4
 800963a:	4614      	movlt	r4, r2
 800963c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009640:	d005      	beq.n	800964e <__cvt+0x42>
 8009642:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009646:	d100      	bne.n	800964a <__cvt+0x3e>
 8009648:	3601      	adds	r6, #1
 800964a:	2102      	movs	r1, #2
 800964c:	e000      	b.n	8009650 <__cvt+0x44>
 800964e:	2103      	movs	r1, #3
 8009650:	ab03      	add	r3, sp, #12
 8009652:	9301      	str	r3, [sp, #4]
 8009654:	ab02      	add	r3, sp, #8
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	ec45 4b10 	vmov	d0, r4, r5
 800965c:	4653      	mov	r3, sl
 800965e:	4632      	mov	r2, r6
 8009660:	f000 fcea 	bl	800a038 <_dtoa_r>
 8009664:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009668:	4607      	mov	r7, r0
 800966a:	d102      	bne.n	8009672 <__cvt+0x66>
 800966c:	f019 0f01 	tst.w	r9, #1
 8009670:	d022      	beq.n	80096b8 <__cvt+0xac>
 8009672:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009676:	eb07 0906 	add.w	r9, r7, r6
 800967a:	d110      	bne.n	800969e <__cvt+0x92>
 800967c:	783b      	ldrb	r3, [r7, #0]
 800967e:	2b30      	cmp	r3, #48	; 0x30
 8009680:	d10a      	bne.n	8009698 <__cvt+0x8c>
 8009682:	2200      	movs	r2, #0
 8009684:	2300      	movs	r3, #0
 8009686:	4620      	mov	r0, r4
 8009688:	4629      	mov	r1, r5
 800968a:	f7f7 fa25 	bl	8000ad8 <__aeabi_dcmpeq>
 800968e:	b918      	cbnz	r0, 8009698 <__cvt+0x8c>
 8009690:	f1c6 0601 	rsb	r6, r6, #1
 8009694:	f8ca 6000 	str.w	r6, [sl]
 8009698:	f8da 3000 	ldr.w	r3, [sl]
 800969c:	4499      	add	r9, r3
 800969e:	2200      	movs	r2, #0
 80096a0:	2300      	movs	r3, #0
 80096a2:	4620      	mov	r0, r4
 80096a4:	4629      	mov	r1, r5
 80096a6:	f7f7 fa17 	bl	8000ad8 <__aeabi_dcmpeq>
 80096aa:	b108      	cbz	r0, 80096b0 <__cvt+0xa4>
 80096ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80096b0:	2230      	movs	r2, #48	; 0x30
 80096b2:	9b03      	ldr	r3, [sp, #12]
 80096b4:	454b      	cmp	r3, r9
 80096b6:	d307      	bcc.n	80096c8 <__cvt+0xbc>
 80096b8:	9b03      	ldr	r3, [sp, #12]
 80096ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096bc:	1bdb      	subs	r3, r3, r7
 80096be:	4638      	mov	r0, r7
 80096c0:	6013      	str	r3, [r2, #0]
 80096c2:	b004      	add	sp, #16
 80096c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c8:	1c59      	adds	r1, r3, #1
 80096ca:	9103      	str	r1, [sp, #12]
 80096cc:	701a      	strb	r2, [r3, #0]
 80096ce:	e7f0      	b.n	80096b2 <__cvt+0xa6>

080096d0 <__exponent>:
 80096d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096d2:	4603      	mov	r3, r0
 80096d4:	2900      	cmp	r1, #0
 80096d6:	bfb8      	it	lt
 80096d8:	4249      	neglt	r1, r1
 80096da:	f803 2b02 	strb.w	r2, [r3], #2
 80096de:	bfb4      	ite	lt
 80096e0:	222d      	movlt	r2, #45	; 0x2d
 80096e2:	222b      	movge	r2, #43	; 0x2b
 80096e4:	2909      	cmp	r1, #9
 80096e6:	7042      	strb	r2, [r0, #1]
 80096e8:	dd2a      	ble.n	8009740 <__exponent+0x70>
 80096ea:	f10d 0407 	add.w	r4, sp, #7
 80096ee:	46a4      	mov	ip, r4
 80096f0:	270a      	movs	r7, #10
 80096f2:	46a6      	mov	lr, r4
 80096f4:	460a      	mov	r2, r1
 80096f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80096fa:	fb07 1516 	mls	r5, r7, r6, r1
 80096fe:	3530      	adds	r5, #48	; 0x30
 8009700:	2a63      	cmp	r2, #99	; 0x63
 8009702:	f104 34ff 	add.w	r4, r4, #4294967295
 8009706:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800970a:	4631      	mov	r1, r6
 800970c:	dcf1      	bgt.n	80096f2 <__exponent+0x22>
 800970e:	3130      	adds	r1, #48	; 0x30
 8009710:	f1ae 0502 	sub.w	r5, lr, #2
 8009714:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009718:	1c44      	adds	r4, r0, #1
 800971a:	4629      	mov	r1, r5
 800971c:	4561      	cmp	r1, ip
 800971e:	d30a      	bcc.n	8009736 <__exponent+0x66>
 8009720:	f10d 0209 	add.w	r2, sp, #9
 8009724:	eba2 020e 	sub.w	r2, r2, lr
 8009728:	4565      	cmp	r5, ip
 800972a:	bf88      	it	hi
 800972c:	2200      	movhi	r2, #0
 800972e:	4413      	add	r3, r2
 8009730:	1a18      	subs	r0, r3, r0
 8009732:	b003      	add	sp, #12
 8009734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009736:	f811 2b01 	ldrb.w	r2, [r1], #1
 800973a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800973e:	e7ed      	b.n	800971c <__exponent+0x4c>
 8009740:	2330      	movs	r3, #48	; 0x30
 8009742:	3130      	adds	r1, #48	; 0x30
 8009744:	7083      	strb	r3, [r0, #2]
 8009746:	70c1      	strb	r1, [r0, #3]
 8009748:	1d03      	adds	r3, r0, #4
 800974a:	e7f1      	b.n	8009730 <__exponent+0x60>

0800974c <_printf_float>:
 800974c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009750:	ed2d 8b02 	vpush	{d8}
 8009754:	b08d      	sub	sp, #52	; 0x34
 8009756:	460c      	mov	r4, r1
 8009758:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800975c:	4616      	mov	r6, r2
 800975e:	461f      	mov	r7, r3
 8009760:	4605      	mov	r5, r0
 8009762:	f001 fa57 	bl	800ac14 <_localeconv_r>
 8009766:	f8d0 a000 	ldr.w	sl, [r0]
 800976a:	4650      	mov	r0, sl
 800976c:	f7f6 fd38 	bl	80001e0 <strlen>
 8009770:	2300      	movs	r3, #0
 8009772:	930a      	str	r3, [sp, #40]	; 0x28
 8009774:	6823      	ldr	r3, [r4, #0]
 8009776:	9305      	str	r3, [sp, #20]
 8009778:	f8d8 3000 	ldr.w	r3, [r8]
 800977c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009780:	3307      	adds	r3, #7
 8009782:	f023 0307 	bic.w	r3, r3, #7
 8009786:	f103 0208 	add.w	r2, r3, #8
 800978a:	f8c8 2000 	str.w	r2, [r8]
 800978e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009792:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009796:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800979a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800979e:	9307      	str	r3, [sp, #28]
 80097a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80097a4:	ee08 0a10 	vmov	s16, r0
 80097a8:	4b9f      	ldr	r3, [pc, #636]	; (8009a28 <_printf_float+0x2dc>)
 80097aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097ae:	f04f 32ff 	mov.w	r2, #4294967295
 80097b2:	f7f7 f9c3 	bl	8000b3c <__aeabi_dcmpun>
 80097b6:	bb88      	cbnz	r0, 800981c <_printf_float+0xd0>
 80097b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097bc:	4b9a      	ldr	r3, [pc, #616]	; (8009a28 <_printf_float+0x2dc>)
 80097be:	f04f 32ff 	mov.w	r2, #4294967295
 80097c2:	f7f7 f99d 	bl	8000b00 <__aeabi_dcmple>
 80097c6:	bb48      	cbnz	r0, 800981c <_printf_float+0xd0>
 80097c8:	2200      	movs	r2, #0
 80097ca:	2300      	movs	r3, #0
 80097cc:	4640      	mov	r0, r8
 80097ce:	4649      	mov	r1, r9
 80097d0:	f7f7 f98c 	bl	8000aec <__aeabi_dcmplt>
 80097d4:	b110      	cbz	r0, 80097dc <_printf_float+0x90>
 80097d6:	232d      	movs	r3, #45	; 0x2d
 80097d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097dc:	4b93      	ldr	r3, [pc, #588]	; (8009a2c <_printf_float+0x2e0>)
 80097de:	4894      	ldr	r0, [pc, #592]	; (8009a30 <_printf_float+0x2e4>)
 80097e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80097e4:	bf94      	ite	ls
 80097e6:	4698      	movls	r8, r3
 80097e8:	4680      	movhi	r8, r0
 80097ea:	2303      	movs	r3, #3
 80097ec:	6123      	str	r3, [r4, #16]
 80097ee:	9b05      	ldr	r3, [sp, #20]
 80097f0:	f023 0204 	bic.w	r2, r3, #4
 80097f4:	6022      	str	r2, [r4, #0]
 80097f6:	f04f 0900 	mov.w	r9, #0
 80097fa:	9700      	str	r7, [sp, #0]
 80097fc:	4633      	mov	r3, r6
 80097fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8009800:	4621      	mov	r1, r4
 8009802:	4628      	mov	r0, r5
 8009804:	f000 f9d8 	bl	8009bb8 <_printf_common>
 8009808:	3001      	adds	r0, #1
 800980a:	f040 8090 	bne.w	800992e <_printf_float+0x1e2>
 800980e:	f04f 30ff 	mov.w	r0, #4294967295
 8009812:	b00d      	add	sp, #52	; 0x34
 8009814:	ecbd 8b02 	vpop	{d8}
 8009818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800981c:	4642      	mov	r2, r8
 800981e:	464b      	mov	r3, r9
 8009820:	4640      	mov	r0, r8
 8009822:	4649      	mov	r1, r9
 8009824:	f7f7 f98a 	bl	8000b3c <__aeabi_dcmpun>
 8009828:	b140      	cbz	r0, 800983c <_printf_float+0xf0>
 800982a:	464b      	mov	r3, r9
 800982c:	2b00      	cmp	r3, #0
 800982e:	bfbc      	itt	lt
 8009830:	232d      	movlt	r3, #45	; 0x2d
 8009832:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009836:	487f      	ldr	r0, [pc, #508]	; (8009a34 <_printf_float+0x2e8>)
 8009838:	4b7f      	ldr	r3, [pc, #508]	; (8009a38 <_printf_float+0x2ec>)
 800983a:	e7d1      	b.n	80097e0 <_printf_float+0x94>
 800983c:	6863      	ldr	r3, [r4, #4]
 800983e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009842:	9206      	str	r2, [sp, #24]
 8009844:	1c5a      	adds	r2, r3, #1
 8009846:	d13f      	bne.n	80098c8 <_printf_float+0x17c>
 8009848:	2306      	movs	r3, #6
 800984a:	6063      	str	r3, [r4, #4]
 800984c:	9b05      	ldr	r3, [sp, #20]
 800984e:	6861      	ldr	r1, [r4, #4]
 8009850:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009854:	2300      	movs	r3, #0
 8009856:	9303      	str	r3, [sp, #12]
 8009858:	ab0a      	add	r3, sp, #40	; 0x28
 800985a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800985e:	ab09      	add	r3, sp, #36	; 0x24
 8009860:	ec49 8b10 	vmov	d0, r8, r9
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	6022      	str	r2, [r4, #0]
 8009868:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800986c:	4628      	mov	r0, r5
 800986e:	f7ff fecd 	bl	800960c <__cvt>
 8009872:	9b06      	ldr	r3, [sp, #24]
 8009874:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009876:	2b47      	cmp	r3, #71	; 0x47
 8009878:	4680      	mov	r8, r0
 800987a:	d108      	bne.n	800988e <_printf_float+0x142>
 800987c:	1cc8      	adds	r0, r1, #3
 800987e:	db02      	blt.n	8009886 <_printf_float+0x13a>
 8009880:	6863      	ldr	r3, [r4, #4]
 8009882:	4299      	cmp	r1, r3
 8009884:	dd41      	ble.n	800990a <_printf_float+0x1be>
 8009886:	f1ab 0b02 	sub.w	fp, fp, #2
 800988a:	fa5f fb8b 	uxtb.w	fp, fp
 800988e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009892:	d820      	bhi.n	80098d6 <_printf_float+0x18a>
 8009894:	3901      	subs	r1, #1
 8009896:	465a      	mov	r2, fp
 8009898:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800989c:	9109      	str	r1, [sp, #36]	; 0x24
 800989e:	f7ff ff17 	bl	80096d0 <__exponent>
 80098a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098a4:	1813      	adds	r3, r2, r0
 80098a6:	2a01      	cmp	r2, #1
 80098a8:	4681      	mov	r9, r0
 80098aa:	6123      	str	r3, [r4, #16]
 80098ac:	dc02      	bgt.n	80098b4 <_printf_float+0x168>
 80098ae:	6822      	ldr	r2, [r4, #0]
 80098b0:	07d2      	lsls	r2, r2, #31
 80098b2:	d501      	bpl.n	80098b8 <_printf_float+0x16c>
 80098b4:	3301      	adds	r3, #1
 80098b6:	6123      	str	r3, [r4, #16]
 80098b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d09c      	beq.n	80097fa <_printf_float+0xae>
 80098c0:	232d      	movs	r3, #45	; 0x2d
 80098c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098c6:	e798      	b.n	80097fa <_printf_float+0xae>
 80098c8:	9a06      	ldr	r2, [sp, #24]
 80098ca:	2a47      	cmp	r2, #71	; 0x47
 80098cc:	d1be      	bne.n	800984c <_printf_float+0x100>
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d1bc      	bne.n	800984c <_printf_float+0x100>
 80098d2:	2301      	movs	r3, #1
 80098d4:	e7b9      	b.n	800984a <_printf_float+0xfe>
 80098d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80098da:	d118      	bne.n	800990e <_printf_float+0x1c2>
 80098dc:	2900      	cmp	r1, #0
 80098de:	6863      	ldr	r3, [r4, #4]
 80098e0:	dd0b      	ble.n	80098fa <_printf_float+0x1ae>
 80098e2:	6121      	str	r1, [r4, #16]
 80098e4:	b913      	cbnz	r3, 80098ec <_printf_float+0x1a0>
 80098e6:	6822      	ldr	r2, [r4, #0]
 80098e8:	07d0      	lsls	r0, r2, #31
 80098ea:	d502      	bpl.n	80098f2 <_printf_float+0x1a6>
 80098ec:	3301      	adds	r3, #1
 80098ee:	440b      	add	r3, r1
 80098f0:	6123      	str	r3, [r4, #16]
 80098f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80098f4:	f04f 0900 	mov.w	r9, #0
 80098f8:	e7de      	b.n	80098b8 <_printf_float+0x16c>
 80098fa:	b913      	cbnz	r3, 8009902 <_printf_float+0x1b6>
 80098fc:	6822      	ldr	r2, [r4, #0]
 80098fe:	07d2      	lsls	r2, r2, #31
 8009900:	d501      	bpl.n	8009906 <_printf_float+0x1ba>
 8009902:	3302      	adds	r3, #2
 8009904:	e7f4      	b.n	80098f0 <_printf_float+0x1a4>
 8009906:	2301      	movs	r3, #1
 8009908:	e7f2      	b.n	80098f0 <_printf_float+0x1a4>
 800990a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800990e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009910:	4299      	cmp	r1, r3
 8009912:	db05      	blt.n	8009920 <_printf_float+0x1d4>
 8009914:	6823      	ldr	r3, [r4, #0]
 8009916:	6121      	str	r1, [r4, #16]
 8009918:	07d8      	lsls	r0, r3, #31
 800991a:	d5ea      	bpl.n	80098f2 <_printf_float+0x1a6>
 800991c:	1c4b      	adds	r3, r1, #1
 800991e:	e7e7      	b.n	80098f0 <_printf_float+0x1a4>
 8009920:	2900      	cmp	r1, #0
 8009922:	bfd4      	ite	le
 8009924:	f1c1 0202 	rsble	r2, r1, #2
 8009928:	2201      	movgt	r2, #1
 800992a:	4413      	add	r3, r2
 800992c:	e7e0      	b.n	80098f0 <_printf_float+0x1a4>
 800992e:	6823      	ldr	r3, [r4, #0]
 8009930:	055a      	lsls	r2, r3, #21
 8009932:	d407      	bmi.n	8009944 <_printf_float+0x1f8>
 8009934:	6923      	ldr	r3, [r4, #16]
 8009936:	4642      	mov	r2, r8
 8009938:	4631      	mov	r1, r6
 800993a:	4628      	mov	r0, r5
 800993c:	47b8      	blx	r7
 800993e:	3001      	adds	r0, #1
 8009940:	d12c      	bne.n	800999c <_printf_float+0x250>
 8009942:	e764      	b.n	800980e <_printf_float+0xc2>
 8009944:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009948:	f240 80e0 	bls.w	8009b0c <_printf_float+0x3c0>
 800994c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009950:	2200      	movs	r2, #0
 8009952:	2300      	movs	r3, #0
 8009954:	f7f7 f8c0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009958:	2800      	cmp	r0, #0
 800995a:	d034      	beq.n	80099c6 <_printf_float+0x27a>
 800995c:	4a37      	ldr	r2, [pc, #220]	; (8009a3c <_printf_float+0x2f0>)
 800995e:	2301      	movs	r3, #1
 8009960:	4631      	mov	r1, r6
 8009962:	4628      	mov	r0, r5
 8009964:	47b8      	blx	r7
 8009966:	3001      	adds	r0, #1
 8009968:	f43f af51 	beq.w	800980e <_printf_float+0xc2>
 800996c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009970:	429a      	cmp	r2, r3
 8009972:	db02      	blt.n	800997a <_printf_float+0x22e>
 8009974:	6823      	ldr	r3, [r4, #0]
 8009976:	07d8      	lsls	r0, r3, #31
 8009978:	d510      	bpl.n	800999c <_printf_float+0x250>
 800997a:	ee18 3a10 	vmov	r3, s16
 800997e:	4652      	mov	r2, sl
 8009980:	4631      	mov	r1, r6
 8009982:	4628      	mov	r0, r5
 8009984:	47b8      	blx	r7
 8009986:	3001      	adds	r0, #1
 8009988:	f43f af41 	beq.w	800980e <_printf_float+0xc2>
 800998c:	f04f 0800 	mov.w	r8, #0
 8009990:	f104 091a 	add.w	r9, r4, #26
 8009994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009996:	3b01      	subs	r3, #1
 8009998:	4543      	cmp	r3, r8
 800999a:	dc09      	bgt.n	80099b0 <_printf_float+0x264>
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	079b      	lsls	r3, r3, #30
 80099a0:	f100 8105 	bmi.w	8009bae <_printf_float+0x462>
 80099a4:	68e0      	ldr	r0, [r4, #12]
 80099a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099a8:	4298      	cmp	r0, r3
 80099aa:	bfb8      	it	lt
 80099ac:	4618      	movlt	r0, r3
 80099ae:	e730      	b.n	8009812 <_printf_float+0xc6>
 80099b0:	2301      	movs	r3, #1
 80099b2:	464a      	mov	r2, r9
 80099b4:	4631      	mov	r1, r6
 80099b6:	4628      	mov	r0, r5
 80099b8:	47b8      	blx	r7
 80099ba:	3001      	adds	r0, #1
 80099bc:	f43f af27 	beq.w	800980e <_printf_float+0xc2>
 80099c0:	f108 0801 	add.w	r8, r8, #1
 80099c4:	e7e6      	b.n	8009994 <_printf_float+0x248>
 80099c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	dc39      	bgt.n	8009a40 <_printf_float+0x2f4>
 80099cc:	4a1b      	ldr	r2, [pc, #108]	; (8009a3c <_printf_float+0x2f0>)
 80099ce:	2301      	movs	r3, #1
 80099d0:	4631      	mov	r1, r6
 80099d2:	4628      	mov	r0, r5
 80099d4:	47b8      	blx	r7
 80099d6:	3001      	adds	r0, #1
 80099d8:	f43f af19 	beq.w	800980e <_printf_float+0xc2>
 80099dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099e0:	4313      	orrs	r3, r2
 80099e2:	d102      	bne.n	80099ea <_printf_float+0x29e>
 80099e4:	6823      	ldr	r3, [r4, #0]
 80099e6:	07d9      	lsls	r1, r3, #31
 80099e8:	d5d8      	bpl.n	800999c <_printf_float+0x250>
 80099ea:	ee18 3a10 	vmov	r3, s16
 80099ee:	4652      	mov	r2, sl
 80099f0:	4631      	mov	r1, r6
 80099f2:	4628      	mov	r0, r5
 80099f4:	47b8      	blx	r7
 80099f6:	3001      	adds	r0, #1
 80099f8:	f43f af09 	beq.w	800980e <_printf_float+0xc2>
 80099fc:	f04f 0900 	mov.w	r9, #0
 8009a00:	f104 0a1a 	add.w	sl, r4, #26
 8009a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a06:	425b      	negs	r3, r3
 8009a08:	454b      	cmp	r3, r9
 8009a0a:	dc01      	bgt.n	8009a10 <_printf_float+0x2c4>
 8009a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a0e:	e792      	b.n	8009936 <_printf_float+0x1ea>
 8009a10:	2301      	movs	r3, #1
 8009a12:	4652      	mov	r2, sl
 8009a14:	4631      	mov	r1, r6
 8009a16:	4628      	mov	r0, r5
 8009a18:	47b8      	blx	r7
 8009a1a:	3001      	adds	r0, #1
 8009a1c:	f43f aef7 	beq.w	800980e <_printf_float+0xc2>
 8009a20:	f109 0901 	add.w	r9, r9, #1
 8009a24:	e7ee      	b.n	8009a04 <_printf_float+0x2b8>
 8009a26:	bf00      	nop
 8009a28:	7fefffff 	.word	0x7fefffff
 8009a2c:	0800c738 	.word	0x0800c738
 8009a30:	0800c73c 	.word	0x0800c73c
 8009a34:	0800c744 	.word	0x0800c744
 8009a38:	0800c740 	.word	0x0800c740
 8009a3c:	0800c748 	.word	0x0800c748
 8009a40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a44:	429a      	cmp	r2, r3
 8009a46:	bfa8      	it	ge
 8009a48:	461a      	movge	r2, r3
 8009a4a:	2a00      	cmp	r2, #0
 8009a4c:	4691      	mov	r9, r2
 8009a4e:	dc37      	bgt.n	8009ac0 <_printf_float+0x374>
 8009a50:	f04f 0b00 	mov.w	fp, #0
 8009a54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a58:	f104 021a 	add.w	r2, r4, #26
 8009a5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a5e:	9305      	str	r3, [sp, #20]
 8009a60:	eba3 0309 	sub.w	r3, r3, r9
 8009a64:	455b      	cmp	r3, fp
 8009a66:	dc33      	bgt.n	8009ad0 <_printf_float+0x384>
 8009a68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	db3b      	blt.n	8009ae8 <_printf_float+0x39c>
 8009a70:	6823      	ldr	r3, [r4, #0]
 8009a72:	07da      	lsls	r2, r3, #31
 8009a74:	d438      	bmi.n	8009ae8 <_printf_float+0x39c>
 8009a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a78:	9a05      	ldr	r2, [sp, #20]
 8009a7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a7c:	1a9a      	subs	r2, r3, r2
 8009a7e:	eba3 0901 	sub.w	r9, r3, r1
 8009a82:	4591      	cmp	r9, r2
 8009a84:	bfa8      	it	ge
 8009a86:	4691      	movge	r9, r2
 8009a88:	f1b9 0f00 	cmp.w	r9, #0
 8009a8c:	dc35      	bgt.n	8009afa <_printf_float+0x3ae>
 8009a8e:	f04f 0800 	mov.w	r8, #0
 8009a92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a96:	f104 0a1a 	add.w	sl, r4, #26
 8009a9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a9e:	1a9b      	subs	r3, r3, r2
 8009aa0:	eba3 0309 	sub.w	r3, r3, r9
 8009aa4:	4543      	cmp	r3, r8
 8009aa6:	f77f af79 	ble.w	800999c <_printf_float+0x250>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	4652      	mov	r2, sl
 8009aae:	4631      	mov	r1, r6
 8009ab0:	4628      	mov	r0, r5
 8009ab2:	47b8      	blx	r7
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	f43f aeaa 	beq.w	800980e <_printf_float+0xc2>
 8009aba:	f108 0801 	add.w	r8, r8, #1
 8009abe:	e7ec      	b.n	8009a9a <_printf_float+0x34e>
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	4631      	mov	r1, r6
 8009ac4:	4642      	mov	r2, r8
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	47b8      	blx	r7
 8009aca:	3001      	adds	r0, #1
 8009acc:	d1c0      	bne.n	8009a50 <_printf_float+0x304>
 8009ace:	e69e      	b.n	800980e <_printf_float+0xc2>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	4631      	mov	r1, r6
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	9205      	str	r2, [sp, #20]
 8009ad8:	47b8      	blx	r7
 8009ada:	3001      	adds	r0, #1
 8009adc:	f43f ae97 	beq.w	800980e <_printf_float+0xc2>
 8009ae0:	9a05      	ldr	r2, [sp, #20]
 8009ae2:	f10b 0b01 	add.w	fp, fp, #1
 8009ae6:	e7b9      	b.n	8009a5c <_printf_float+0x310>
 8009ae8:	ee18 3a10 	vmov	r3, s16
 8009aec:	4652      	mov	r2, sl
 8009aee:	4631      	mov	r1, r6
 8009af0:	4628      	mov	r0, r5
 8009af2:	47b8      	blx	r7
 8009af4:	3001      	adds	r0, #1
 8009af6:	d1be      	bne.n	8009a76 <_printf_float+0x32a>
 8009af8:	e689      	b.n	800980e <_printf_float+0xc2>
 8009afa:	9a05      	ldr	r2, [sp, #20]
 8009afc:	464b      	mov	r3, r9
 8009afe:	4442      	add	r2, r8
 8009b00:	4631      	mov	r1, r6
 8009b02:	4628      	mov	r0, r5
 8009b04:	47b8      	blx	r7
 8009b06:	3001      	adds	r0, #1
 8009b08:	d1c1      	bne.n	8009a8e <_printf_float+0x342>
 8009b0a:	e680      	b.n	800980e <_printf_float+0xc2>
 8009b0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b0e:	2a01      	cmp	r2, #1
 8009b10:	dc01      	bgt.n	8009b16 <_printf_float+0x3ca>
 8009b12:	07db      	lsls	r3, r3, #31
 8009b14:	d538      	bpl.n	8009b88 <_printf_float+0x43c>
 8009b16:	2301      	movs	r3, #1
 8009b18:	4642      	mov	r2, r8
 8009b1a:	4631      	mov	r1, r6
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	47b8      	blx	r7
 8009b20:	3001      	adds	r0, #1
 8009b22:	f43f ae74 	beq.w	800980e <_printf_float+0xc2>
 8009b26:	ee18 3a10 	vmov	r3, s16
 8009b2a:	4652      	mov	r2, sl
 8009b2c:	4631      	mov	r1, r6
 8009b2e:	4628      	mov	r0, r5
 8009b30:	47b8      	blx	r7
 8009b32:	3001      	adds	r0, #1
 8009b34:	f43f ae6b 	beq.w	800980e <_printf_float+0xc2>
 8009b38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	2300      	movs	r3, #0
 8009b40:	f7f6 ffca 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b44:	b9d8      	cbnz	r0, 8009b7e <_printf_float+0x432>
 8009b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b48:	f108 0201 	add.w	r2, r8, #1
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	4631      	mov	r1, r6
 8009b50:	4628      	mov	r0, r5
 8009b52:	47b8      	blx	r7
 8009b54:	3001      	adds	r0, #1
 8009b56:	d10e      	bne.n	8009b76 <_printf_float+0x42a>
 8009b58:	e659      	b.n	800980e <_printf_float+0xc2>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	4652      	mov	r2, sl
 8009b5e:	4631      	mov	r1, r6
 8009b60:	4628      	mov	r0, r5
 8009b62:	47b8      	blx	r7
 8009b64:	3001      	adds	r0, #1
 8009b66:	f43f ae52 	beq.w	800980e <_printf_float+0xc2>
 8009b6a:	f108 0801 	add.w	r8, r8, #1
 8009b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b70:	3b01      	subs	r3, #1
 8009b72:	4543      	cmp	r3, r8
 8009b74:	dcf1      	bgt.n	8009b5a <_printf_float+0x40e>
 8009b76:	464b      	mov	r3, r9
 8009b78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b7c:	e6dc      	b.n	8009938 <_printf_float+0x1ec>
 8009b7e:	f04f 0800 	mov.w	r8, #0
 8009b82:	f104 0a1a 	add.w	sl, r4, #26
 8009b86:	e7f2      	b.n	8009b6e <_printf_float+0x422>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	4642      	mov	r2, r8
 8009b8c:	e7df      	b.n	8009b4e <_printf_float+0x402>
 8009b8e:	2301      	movs	r3, #1
 8009b90:	464a      	mov	r2, r9
 8009b92:	4631      	mov	r1, r6
 8009b94:	4628      	mov	r0, r5
 8009b96:	47b8      	blx	r7
 8009b98:	3001      	adds	r0, #1
 8009b9a:	f43f ae38 	beq.w	800980e <_printf_float+0xc2>
 8009b9e:	f108 0801 	add.w	r8, r8, #1
 8009ba2:	68e3      	ldr	r3, [r4, #12]
 8009ba4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ba6:	1a5b      	subs	r3, r3, r1
 8009ba8:	4543      	cmp	r3, r8
 8009baa:	dcf0      	bgt.n	8009b8e <_printf_float+0x442>
 8009bac:	e6fa      	b.n	80099a4 <_printf_float+0x258>
 8009bae:	f04f 0800 	mov.w	r8, #0
 8009bb2:	f104 0919 	add.w	r9, r4, #25
 8009bb6:	e7f4      	b.n	8009ba2 <_printf_float+0x456>

08009bb8 <_printf_common>:
 8009bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bbc:	4616      	mov	r6, r2
 8009bbe:	4699      	mov	r9, r3
 8009bc0:	688a      	ldr	r2, [r1, #8]
 8009bc2:	690b      	ldr	r3, [r1, #16]
 8009bc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	bfb8      	it	lt
 8009bcc:	4613      	movlt	r3, r2
 8009bce:	6033      	str	r3, [r6, #0]
 8009bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bd4:	4607      	mov	r7, r0
 8009bd6:	460c      	mov	r4, r1
 8009bd8:	b10a      	cbz	r2, 8009bde <_printf_common+0x26>
 8009bda:	3301      	adds	r3, #1
 8009bdc:	6033      	str	r3, [r6, #0]
 8009bde:	6823      	ldr	r3, [r4, #0]
 8009be0:	0699      	lsls	r1, r3, #26
 8009be2:	bf42      	ittt	mi
 8009be4:	6833      	ldrmi	r3, [r6, #0]
 8009be6:	3302      	addmi	r3, #2
 8009be8:	6033      	strmi	r3, [r6, #0]
 8009bea:	6825      	ldr	r5, [r4, #0]
 8009bec:	f015 0506 	ands.w	r5, r5, #6
 8009bf0:	d106      	bne.n	8009c00 <_printf_common+0x48>
 8009bf2:	f104 0a19 	add.w	sl, r4, #25
 8009bf6:	68e3      	ldr	r3, [r4, #12]
 8009bf8:	6832      	ldr	r2, [r6, #0]
 8009bfa:	1a9b      	subs	r3, r3, r2
 8009bfc:	42ab      	cmp	r3, r5
 8009bfe:	dc26      	bgt.n	8009c4e <_printf_common+0x96>
 8009c00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c04:	1e13      	subs	r3, r2, #0
 8009c06:	6822      	ldr	r2, [r4, #0]
 8009c08:	bf18      	it	ne
 8009c0a:	2301      	movne	r3, #1
 8009c0c:	0692      	lsls	r2, r2, #26
 8009c0e:	d42b      	bmi.n	8009c68 <_printf_common+0xb0>
 8009c10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c14:	4649      	mov	r1, r9
 8009c16:	4638      	mov	r0, r7
 8009c18:	47c0      	blx	r8
 8009c1a:	3001      	adds	r0, #1
 8009c1c:	d01e      	beq.n	8009c5c <_printf_common+0xa4>
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	68e5      	ldr	r5, [r4, #12]
 8009c22:	6832      	ldr	r2, [r6, #0]
 8009c24:	f003 0306 	and.w	r3, r3, #6
 8009c28:	2b04      	cmp	r3, #4
 8009c2a:	bf08      	it	eq
 8009c2c:	1aad      	subeq	r5, r5, r2
 8009c2e:	68a3      	ldr	r3, [r4, #8]
 8009c30:	6922      	ldr	r2, [r4, #16]
 8009c32:	bf0c      	ite	eq
 8009c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c38:	2500      	movne	r5, #0
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	bfc4      	itt	gt
 8009c3e:	1a9b      	subgt	r3, r3, r2
 8009c40:	18ed      	addgt	r5, r5, r3
 8009c42:	2600      	movs	r6, #0
 8009c44:	341a      	adds	r4, #26
 8009c46:	42b5      	cmp	r5, r6
 8009c48:	d11a      	bne.n	8009c80 <_printf_common+0xc8>
 8009c4a:	2000      	movs	r0, #0
 8009c4c:	e008      	b.n	8009c60 <_printf_common+0xa8>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	4652      	mov	r2, sl
 8009c52:	4649      	mov	r1, r9
 8009c54:	4638      	mov	r0, r7
 8009c56:	47c0      	blx	r8
 8009c58:	3001      	adds	r0, #1
 8009c5a:	d103      	bne.n	8009c64 <_printf_common+0xac>
 8009c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c64:	3501      	adds	r5, #1
 8009c66:	e7c6      	b.n	8009bf6 <_printf_common+0x3e>
 8009c68:	18e1      	adds	r1, r4, r3
 8009c6a:	1c5a      	adds	r2, r3, #1
 8009c6c:	2030      	movs	r0, #48	; 0x30
 8009c6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c72:	4422      	add	r2, r4
 8009c74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c7c:	3302      	adds	r3, #2
 8009c7e:	e7c7      	b.n	8009c10 <_printf_common+0x58>
 8009c80:	2301      	movs	r3, #1
 8009c82:	4622      	mov	r2, r4
 8009c84:	4649      	mov	r1, r9
 8009c86:	4638      	mov	r0, r7
 8009c88:	47c0      	blx	r8
 8009c8a:	3001      	adds	r0, #1
 8009c8c:	d0e6      	beq.n	8009c5c <_printf_common+0xa4>
 8009c8e:	3601      	adds	r6, #1
 8009c90:	e7d9      	b.n	8009c46 <_printf_common+0x8e>
	...

08009c94 <_printf_i>:
 8009c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c98:	7e0f      	ldrb	r7, [r1, #24]
 8009c9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c9c:	2f78      	cmp	r7, #120	; 0x78
 8009c9e:	4691      	mov	r9, r2
 8009ca0:	4680      	mov	r8, r0
 8009ca2:	460c      	mov	r4, r1
 8009ca4:	469a      	mov	sl, r3
 8009ca6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009caa:	d807      	bhi.n	8009cbc <_printf_i+0x28>
 8009cac:	2f62      	cmp	r7, #98	; 0x62
 8009cae:	d80a      	bhi.n	8009cc6 <_printf_i+0x32>
 8009cb0:	2f00      	cmp	r7, #0
 8009cb2:	f000 80d8 	beq.w	8009e66 <_printf_i+0x1d2>
 8009cb6:	2f58      	cmp	r7, #88	; 0x58
 8009cb8:	f000 80a3 	beq.w	8009e02 <_printf_i+0x16e>
 8009cbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009cc4:	e03a      	b.n	8009d3c <_printf_i+0xa8>
 8009cc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cca:	2b15      	cmp	r3, #21
 8009ccc:	d8f6      	bhi.n	8009cbc <_printf_i+0x28>
 8009cce:	a101      	add	r1, pc, #4	; (adr r1, 8009cd4 <_printf_i+0x40>)
 8009cd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cd4:	08009d2d 	.word	0x08009d2d
 8009cd8:	08009d41 	.word	0x08009d41
 8009cdc:	08009cbd 	.word	0x08009cbd
 8009ce0:	08009cbd 	.word	0x08009cbd
 8009ce4:	08009cbd 	.word	0x08009cbd
 8009ce8:	08009cbd 	.word	0x08009cbd
 8009cec:	08009d41 	.word	0x08009d41
 8009cf0:	08009cbd 	.word	0x08009cbd
 8009cf4:	08009cbd 	.word	0x08009cbd
 8009cf8:	08009cbd 	.word	0x08009cbd
 8009cfc:	08009cbd 	.word	0x08009cbd
 8009d00:	08009e4d 	.word	0x08009e4d
 8009d04:	08009d71 	.word	0x08009d71
 8009d08:	08009e2f 	.word	0x08009e2f
 8009d0c:	08009cbd 	.word	0x08009cbd
 8009d10:	08009cbd 	.word	0x08009cbd
 8009d14:	08009e6f 	.word	0x08009e6f
 8009d18:	08009cbd 	.word	0x08009cbd
 8009d1c:	08009d71 	.word	0x08009d71
 8009d20:	08009cbd 	.word	0x08009cbd
 8009d24:	08009cbd 	.word	0x08009cbd
 8009d28:	08009e37 	.word	0x08009e37
 8009d2c:	682b      	ldr	r3, [r5, #0]
 8009d2e:	1d1a      	adds	r2, r3, #4
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	602a      	str	r2, [r5, #0]
 8009d34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e0a3      	b.n	8009e88 <_printf_i+0x1f4>
 8009d40:	6820      	ldr	r0, [r4, #0]
 8009d42:	6829      	ldr	r1, [r5, #0]
 8009d44:	0606      	lsls	r6, r0, #24
 8009d46:	f101 0304 	add.w	r3, r1, #4
 8009d4a:	d50a      	bpl.n	8009d62 <_printf_i+0xce>
 8009d4c:	680e      	ldr	r6, [r1, #0]
 8009d4e:	602b      	str	r3, [r5, #0]
 8009d50:	2e00      	cmp	r6, #0
 8009d52:	da03      	bge.n	8009d5c <_printf_i+0xc8>
 8009d54:	232d      	movs	r3, #45	; 0x2d
 8009d56:	4276      	negs	r6, r6
 8009d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d5c:	485e      	ldr	r0, [pc, #376]	; (8009ed8 <_printf_i+0x244>)
 8009d5e:	230a      	movs	r3, #10
 8009d60:	e019      	b.n	8009d96 <_printf_i+0x102>
 8009d62:	680e      	ldr	r6, [r1, #0]
 8009d64:	602b      	str	r3, [r5, #0]
 8009d66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d6a:	bf18      	it	ne
 8009d6c:	b236      	sxthne	r6, r6
 8009d6e:	e7ef      	b.n	8009d50 <_printf_i+0xbc>
 8009d70:	682b      	ldr	r3, [r5, #0]
 8009d72:	6820      	ldr	r0, [r4, #0]
 8009d74:	1d19      	adds	r1, r3, #4
 8009d76:	6029      	str	r1, [r5, #0]
 8009d78:	0601      	lsls	r1, r0, #24
 8009d7a:	d501      	bpl.n	8009d80 <_printf_i+0xec>
 8009d7c:	681e      	ldr	r6, [r3, #0]
 8009d7e:	e002      	b.n	8009d86 <_printf_i+0xf2>
 8009d80:	0646      	lsls	r6, r0, #25
 8009d82:	d5fb      	bpl.n	8009d7c <_printf_i+0xe8>
 8009d84:	881e      	ldrh	r6, [r3, #0]
 8009d86:	4854      	ldr	r0, [pc, #336]	; (8009ed8 <_printf_i+0x244>)
 8009d88:	2f6f      	cmp	r7, #111	; 0x6f
 8009d8a:	bf0c      	ite	eq
 8009d8c:	2308      	moveq	r3, #8
 8009d8e:	230a      	movne	r3, #10
 8009d90:	2100      	movs	r1, #0
 8009d92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d96:	6865      	ldr	r5, [r4, #4]
 8009d98:	60a5      	str	r5, [r4, #8]
 8009d9a:	2d00      	cmp	r5, #0
 8009d9c:	bfa2      	ittt	ge
 8009d9e:	6821      	ldrge	r1, [r4, #0]
 8009da0:	f021 0104 	bicge.w	r1, r1, #4
 8009da4:	6021      	strge	r1, [r4, #0]
 8009da6:	b90e      	cbnz	r6, 8009dac <_printf_i+0x118>
 8009da8:	2d00      	cmp	r5, #0
 8009daa:	d04d      	beq.n	8009e48 <_printf_i+0x1b4>
 8009dac:	4615      	mov	r5, r2
 8009dae:	fbb6 f1f3 	udiv	r1, r6, r3
 8009db2:	fb03 6711 	mls	r7, r3, r1, r6
 8009db6:	5dc7      	ldrb	r7, [r0, r7]
 8009db8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009dbc:	4637      	mov	r7, r6
 8009dbe:	42bb      	cmp	r3, r7
 8009dc0:	460e      	mov	r6, r1
 8009dc2:	d9f4      	bls.n	8009dae <_printf_i+0x11a>
 8009dc4:	2b08      	cmp	r3, #8
 8009dc6:	d10b      	bne.n	8009de0 <_printf_i+0x14c>
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	07de      	lsls	r6, r3, #31
 8009dcc:	d508      	bpl.n	8009de0 <_printf_i+0x14c>
 8009dce:	6923      	ldr	r3, [r4, #16]
 8009dd0:	6861      	ldr	r1, [r4, #4]
 8009dd2:	4299      	cmp	r1, r3
 8009dd4:	bfde      	ittt	le
 8009dd6:	2330      	movle	r3, #48	; 0x30
 8009dd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ddc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009de0:	1b52      	subs	r2, r2, r5
 8009de2:	6122      	str	r2, [r4, #16]
 8009de4:	f8cd a000 	str.w	sl, [sp]
 8009de8:	464b      	mov	r3, r9
 8009dea:	aa03      	add	r2, sp, #12
 8009dec:	4621      	mov	r1, r4
 8009dee:	4640      	mov	r0, r8
 8009df0:	f7ff fee2 	bl	8009bb8 <_printf_common>
 8009df4:	3001      	adds	r0, #1
 8009df6:	d14c      	bne.n	8009e92 <_printf_i+0x1fe>
 8009df8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfc:	b004      	add	sp, #16
 8009dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e02:	4835      	ldr	r0, [pc, #212]	; (8009ed8 <_printf_i+0x244>)
 8009e04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009e08:	6829      	ldr	r1, [r5, #0]
 8009e0a:	6823      	ldr	r3, [r4, #0]
 8009e0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e10:	6029      	str	r1, [r5, #0]
 8009e12:	061d      	lsls	r5, r3, #24
 8009e14:	d514      	bpl.n	8009e40 <_printf_i+0x1ac>
 8009e16:	07df      	lsls	r7, r3, #31
 8009e18:	bf44      	itt	mi
 8009e1a:	f043 0320 	orrmi.w	r3, r3, #32
 8009e1e:	6023      	strmi	r3, [r4, #0]
 8009e20:	b91e      	cbnz	r6, 8009e2a <_printf_i+0x196>
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	f023 0320 	bic.w	r3, r3, #32
 8009e28:	6023      	str	r3, [r4, #0]
 8009e2a:	2310      	movs	r3, #16
 8009e2c:	e7b0      	b.n	8009d90 <_printf_i+0xfc>
 8009e2e:	6823      	ldr	r3, [r4, #0]
 8009e30:	f043 0320 	orr.w	r3, r3, #32
 8009e34:	6023      	str	r3, [r4, #0]
 8009e36:	2378      	movs	r3, #120	; 0x78
 8009e38:	4828      	ldr	r0, [pc, #160]	; (8009edc <_printf_i+0x248>)
 8009e3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e3e:	e7e3      	b.n	8009e08 <_printf_i+0x174>
 8009e40:	0659      	lsls	r1, r3, #25
 8009e42:	bf48      	it	mi
 8009e44:	b2b6      	uxthmi	r6, r6
 8009e46:	e7e6      	b.n	8009e16 <_printf_i+0x182>
 8009e48:	4615      	mov	r5, r2
 8009e4a:	e7bb      	b.n	8009dc4 <_printf_i+0x130>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	6826      	ldr	r6, [r4, #0]
 8009e50:	6961      	ldr	r1, [r4, #20]
 8009e52:	1d18      	adds	r0, r3, #4
 8009e54:	6028      	str	r0, [r5, #0]
 8009e56:	0635      	lsls	r5, r6, #24
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	d501      	bpl.n	8009e60 <_printf_i+0x1cc>
 8009e5c:	6019      	str	r1, [r3, #0]
 8009e5e:	e002      	b.n	8009e66 <_printf_i+0x1d2>
 8009e60:	0670      	lsls	r0, r6, #25
 8009e62:	d5fb      	bpl.n	8009e5c <_printf_i+0x1c8>
 8009e64:	8019      	strh	r1, [r3, #0]
 8009e66:	2300      	movs	r3, #0
 8009e68:	6123      	str	r3, [r4, #16]
 8009e6a:	4615      	mov	r5, r2
 8009e6c:	e7ba      	b.n	8009de4 <_printf_i+0x150>
 8009e6e:	682b      	ldr	r3, [r5, #0]
 8009e70:	1d1a      	adds	r2, r3, #4
 8009e72:	602a      	str	r2, [r5, #0]
 8009e74:	681d      	ldr	r5, [r3, #0]
 8009e76:	6862      	ldr	r2, [r4, #4]
 8009e78:	2100      	movs	r1, #0
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	f7f6 f9b8 	bl	80001f0 <memchr>
 8009e80:	b108      	cbz	r0, 8009e86 <_printf_i+0x1f2>
 8009e82:	1b40      	subs	r0, r0, r5
 8009e84:	6060      	str	r0, [r4, #4]
 8009e86:	6863      	ldr	r3, [r4, #4]
 8009e88:	6123      	str	r3, [r4, #16]
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e90:	e7a8      	b.n	8009de4 <_printf_i+0x150>
 8009e92:	6923      	ldr	r3, [r4, #16]
 8009e94:	462a      	mov	r2, r5
 8009e96:	4649      	mov	r1, r9
 8009e98:	4640      	mov	r0, r8
 8009e9a:	47d0      	blx	sl
 8009e9c:	3001      	adds	r0, #1
 8009e9e:	d0ab      	beq.n	8009df8 <_printf_i+0x164>
 8009ea0:	6823      	ldr	r3, [r4, #0]
 8009ea2:	079b      	lsls	r3, r3, #30
 8009ea4:	d413      	bmi.n	8009ece <_printf_i+0x23a>
 8009ea6:	68e0      	ldr	r0, [r4, #12]
 8009ea8:	9b03      	ldr	r3, [sp, #12]
 8009eaa:	4298      	cmp	r0, r3
 8009eac:	bfb8      	it	lt
 8009eae:	4618      	movlt	r0, r3
 8009eb0:	e7a4      	b.n	8009dfc <_printf_i+0x168>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	4632      	mov	r2, r6
 8009eb6:	4649      	mov	r1, r9
 8009eb8:	4640      	mov	r0, r8
 8009eba:	47d0      	blx	sl
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	d09b      	beq.n	8009df8 <_printf_i+0x164>
 8009ec0:	3501      	adds	r5, #1
 8009ec2:	68e3      	ldr	r3, [r4, #12]
 8009ec4:	9903      	ldr	r1, [sp, #12]
 8009ec6:	1a5b      	subs	r3, r3, r1
 8009ec8:	42ab      	cmp	r3, r5
 8009eca:	dcf2      	bgt.n	8009eb2 <_printf_i+0x21e>
 8009ecc:	e7eb      	b.n	8009ea6 <_printf_i+0x212>
 8009ece:	2500      	movs	r5, #0
 8009ed0:	f104 0619 	add.w	r6, r4, #25
 8009ed4:	e7f5      	b.n	8009ec2 <_printf_i+0x22e>
 8009ed6:	bf00      	nop
 8009ed8:	0800c74a 	.word	0x0800c74a
 8009edc:	0800c75b 	.word	0x0800c75b

08009ee0 <siprintf>:
 8009ee0:	b40e      	push	{r1, r2, r3}
 8009ee2:	b500      	push	{lr}
 8009ee4:	b09c      	sub	sp, #112	; 0x70
 8009ee6:	ab1d      	add	r3, sp, #116	; 0x74
 8009ee8:	9002      	str	r0, [sp, #8]
 8009eea:	9006      	str	r0, [sp, #24]
 8009eec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ef0:	4809      	ldr	r0, [pc, #36]	; (8009f18 <siprintf+0x38>)
 8009ef2:	9107      	str	r1, [sp, #28]
 8009ef4:	9104      	str	r1, [sp, #16]
 8009ef6:	4909      	ldr	r1, [pc, #36]	; (8009f1c <siprintf+0x3c>)
 8009ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009efc:	9105      	str	r1, [sp, #20]
 8009efe:	6800      	ldr	r0, [r0, #0]
 8009f00:	9301      	str	r3, [sp, #4]
 8009f02:	a902      	add	r1, sp, #8
 8009f04:	f001 fb68 	bl	800b5d8 <_svfiprintf_r>
 8009f08:	9b02      	ldr	r3, [sp, #8]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	701a      	strb	r2, [r3, #0]
 8009f0e:	b01c      	add	sp, #112	; 0x70
 8009f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f14:	b003      	add	sp, #12
 8009f16:	4770      	bx	lr
 8009f18:	20000010 	.word	0x20000010
 8009f1c:	ffff0208 	.word	0xffff0208

08009f20 <quorem>:
 8009f20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f24:	6903      	ldr	r3, [r0, #16]
 8009f26:	690c      	ldr	r4, [r1, #16]
 8009f28:	42a3      	cmp	r3, r4
 8009f2a:	4607      	mov	r7, r0
 8009f2c:	f2c0 8081 	blt.w	800a032 <quorem+0x112>
 8009f30:	3c01      	subs	r4, #1
 8009f32:	f101 0814 	add.w	r8, r1, #20
 8009f36:	f100 0514 	add.w	r5, r0, #20
 8009f3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f3e:	9301      	str	r3, [sp, #4]
 8009f40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f54:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f58:	d331      	bcc.n	8009fbe <quorem+0x9e>
 8009f5a:	f04f 0e00 	mov.w	lr, #0
 8009f5e:	4640      	mov	r0, r8
 8009f60:	46ac      	mov	ip, r5
 8009f62:	46f2      	mov	sl, lr
 8009f64:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f68:	b293      	uxth	r3, r2
 8009f6a:	fb06 e303 	mla	r3, r6, r3, lr
 8009f6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	ebaa 0303 	sub.w	r3, sl, r3
 8009f78:	f8dc a000 	ldr.w	sl, [ip]
 8009f7c:	0c12      	lsrs	r2, r2, #16
 8009f7e:	fa13 f38a 	uxtah	r3, r3, sl
 8009f82:	fb06 e202 	mla	r2, r6, r2, lr
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	9b00      	ldr	r3, [sp, #0]
 8009f8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f8e:	b292      	uxth	r2, r2
 8009f90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009f94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f98:	f8bd 3000 	ldrh.w	r3, [sp]
 8009f9c:	4581      	cmp	r9, r0
 8009f9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fa2:	f84c 3b04 	str.w	r3, [ip], #4
 8009fa6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009faa:	d2db      	bcs.n	8009f64 <quorem+0x44>
 8009fac:	f855 300b 	ldr.w	r3, [r5, fp]
 8009fb0:	b92b      	cbnz	r3, 8009fbe <quorem+0x9e>
 8009fb2:	9b01      	ldr	r3, [sp, #4]
 8009fb4:	3b04      	subs	r3, #4
 8009fb6:	429d      	cmp	r5, r3
 8009fb8:	461a      	mov	r2, r3
 8009fba:	d32e      	bcc.n	800a01a <quorem+0xfa>
 8009fbc:	613c      	str	r4, [r7, #16]
 8009fbe:	4638      	mov	r0, r7
 8009fc0:	f001 f8b6 	bl	800b130 <__mcmp>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	db24      	blt.n	800a012 <quorem+0xf2>
 8009fc8:	3601      	adds	r6, #1
 8009fca:	4628      	mov	r0, r5
 8009fcc:	f04f 0c00 	mov.w	ip, #0
 8009fd0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009fd4:	f8d0 e000 	ldr.w	lr, [r0]
 8009fd8:	b293      	uxth	r3, r2
 8009fda:	ebac 0303 	sub.w	r3, ip, r3
 8009fde:	0c12      	lsrs	r2, r2, #16
 8009fe0:	fa13 f38e 	uxtah	r3, r3, lr
 8009fe4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009fe8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ff2:	45c1      	cmp	r9, r8
 8009ff4:	f840 3b04 	str.w	r3, [r0], #4
 8009ff8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009ffc:	d2e8      	bcs.n	8009fd0 <quorem+0xb0>
 8009ffe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a002:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a006:	b922      	cbnz	r2, 800a012 <quorem+0xf2>
 800a008:	3b04      	subs	r3, #4
 800a00a:	429d      	cmp	r5, r3
 800a00c:	461a      	mov	r2, r3
 800a00e:	d30a      	bcc.n	800a026 <quorem+0x106>
 800a010:	613c      	str	r4, [r7, #16]
 800a012:	4630      	mov	r0, r6
 800a014:	b003      	add	sp, #12
 800a016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a01a:	6812      	ldr	r2, [r2, #0]
 800a01c:	3b04      	subs	r3, #4
 800a01e:	2a00      	cmp	r2, #0
 800a020:	d1cc      	bne.n	8009fbc <quorem+0x9c>
 800a022:	3c01      	subs	r4, #1
 800a024:	e7c7      	b.n	8009fb6 <quorem+0x96>
 800a026:	6812      	ldr	r2, [r2, #0]
 800a028:	3b04      	subs	r3, #4
 800a02a:	2a00      	cmp	r2, #0
 800a02c:	d1f0      	bne.n	800a010 <quorem+0xf0>
 800a02e:	3c01      	subs	r4, #1
 800a030:	e7eb      	b.n	800a00a <quorem+0xea>
 800a032:	2000      	movs	r0, #0
 800a034:	e7ee      	b.n	800a014 <quorem+0xf4>
	...

0800a038 <_dtoa_r>:
 800a038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03c:	ed2d 8b04 	vpush	{d8-d9}
 800a040:	ec57 6b10 	vmov	r6, r7, d0
 800a044:	b093      	sub	sp, #76	; 0x4c
 800a046:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a048:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a04c:	9106      	str	r1, [sp, #24]
 800a04e:	ee10 aa10 	vmov	sl, s0
 800a052:	4604      	mov	r4, r0
 800a054:	9209      	str	r2, [sp, #36]	; 0x24
 800a056:	930c      	str	r3, [sp, #48]	; 0x30
 800a058:	46bb      	mov	fp, r7
 800a05a:	b975      	cbnz	r5, 800a07a <_dtoa_r+0x42>
 800a05c:	2010      	movs	r0, #16
 800a05e:	f000 fddd 	bl	800ac1c <malloc>
 800a062:	4602      	mov	r2, r0
 800a064:	6260      	str	r0, [r4, #36]	; 0x24
 800a066:	b920      	cbnz	r0, 800a072 <_dtoa_r+0x3a>
 800a068:	4ba7      	ldr	r3, [pc, #668]	; (800a308 <_dtoa_r+0x2d0>)
 800a06a:	21ea      	movs	r1, #234	; 0xea
 800a06c:	48a7      	ldr	r0, [pc, #668]	; (800a30c <_dtoa_r+0x2d4>)
 800a06e:	f001 fbc3 	bl	800b7f8 <__assert_func>
 800a072:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a076:	6005      	str	r5, [r0, #0]
 800a078:	60c5      	str	r5, [r0, #12]
 800a07a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a07c:	6819      	ldr	r1, [r3, #0]
 800a07e:	b151      	cbz	r1, 800a096 <_dtoa_r+0x5e>
 800a080:	685a      	ldr	r2, [r3, #4]
 800a082:	604a      	str	r2, [r1, #4]
 800a084:	2301      	movs	r3, #1
 800a086:	4093      	lsls	r3, r2
 800a088:	608b      	str	r3, [r1, #8]
 800a08a:	4620      	mov	r0, r4
 800a08c:	f000 fe0e 	bl	800acac <_Bfree>
 800a090:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a092:	2200      	movs	r2, #0
 800a094:	601a      	str	r2, [r3, #0]
 800a096:	1e3b      	subs	r3, r7, #0
 800a098:	bfaa      	itet	ge
 800a09a:	2300      	movge	r3, #0
 800a09c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a0a0:	f8c8 3000 	strge.w	r3, [r8]
 800a0a4:	4b9a      	ldr	r3, [pc, #616]	; (800a310 <_dtoa_r+0x2d8>)
 800a0a6:	bfbc      	itt	lt
 800a0a8:	2201      	movlt	r2, #1
 800a0aa:	f8c8 2000 	strlt.w	r2, [r8]
 800a0ae:	ea33 030b 	bics.w	r3, r3, fp
 800a0b2:	d11b      	bne.n	800a0ec <_dtoa_r+0xb4>
 800a0b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0b6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0ba:	6013      	str	r3, [r2, #0]
 800a0bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0c0:	4333      	orrs	r3, r6
 800a0c2:	f000 8592 	beq.w	800abea <_dtoa_r+0xbb2>
 800a0c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0c8:	b963      	cbnz	r3, 800a0e4 <_dtoa_r+0xac>
 800a0ca:	4b92      	ldr	r3, [pc, #584]	; (800a314 <_dtoa_r+0x2dc>)
 800a0cc:	e022      	b.n	800a114 <_dtoa_r+0xdc>
 800a0ce:	4b92      	ldr	r3, [pc, #584]	; (800a318 <_dtoa_r+0x2e0>)
 800a0d0:	9301      	str	r3, [sp, #4]
 800a0d2:	3308      	adds	r3, #8
 800a0d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0d6:	6013      	str	r3, [r2, #0]
 800a0d8:	9801      	ldr	r0, [sp, #4]
 800a0da:	b013      	add	sp, #76	; 0x4c
 800a0dc:	ecbd 8b04 	vpop	{d8-d9}
 800a0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e4:	4b8b      	ldr	r3, [pc, #556]	; (800a314 <_dtoa_r+0x2dc>)
 800a0e6:	9301      	str	r3, [sp, #4]
 800a0e8:	3303      	adds	r3, #3
 800a0ea:	e7f3      	b.n	800a0d4 <_dtoa_r+0x9c>
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	4650      	mov	r0, sl
 800a0f2:	4659      	mov	r1, fp
 800a0f4:	f7f6 fcf0 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0f8:	ec4b ab19 	vmov	d9, sl, fp
 800a0fc:	4680      	mov	r8, r0
 800a0fe:	b158      	cbz	r0, 800a118 <_dtoa_r+0xe0>
 800a100:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a102:	2301      	movs	r3, #1
 800a104:	6013      	str	r3, [r2, #0]
 800a106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 856b 	beq.w	800abe4 <_dtoa_r+0xbac>
 800a10e:	4883      	ldr	r0, [pc, #524]	; (800a31c <_dtoa_r+0x2e4>)
 800a110:	6018      	str	r0, [r3, #0]
 800a112:	1e43      	subs	r3, r0, #1
 800a114:	9301      	str	r3, [sp, #4]
 800a116:	e7df      	b.n	800a0d8 <_dtoa_r+0xa0>
 800a118:	ec4b ab10 	vmov	d0, sl, fp
 800a11c:	aa10      	add	r2, sp, #64	; 0x40
 800a11e:	a911      	add	r1, sp, #68	; 0x44
 800a120:	4620      	mov	r0, r4
 800a122:	f001 f8ab 	bl	800b27c <__d2b>
 800a126:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a12a:	ee08 0a10 	vmov	s16, r0
 800a12e:	2d00      	cmp	r5, #0
 800a130:	f000 8084 	beq.w	800a23c <_dtoa_r+0x204>
 800a134:	ee19 3a90 	vmov	r3, s19
 800a138:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a13c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a140:	4656      	mov	r6, sl
 800a142:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a146:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a14a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a14e:	4b74      	ldr	r3, [pc, #464]	; (800a320 <_dtoa_r+0x2e8>)
 800a150:	2200      	movs	r2, #0
 800a152:	4630      	mov	r0, r6
 800a154:	4639      	mov	r1, r7
 800a156:	f7f6 f89f 	bl	8000298 <__aeabi_dsub>
 800a15a:	a365      	add	r3, pc, #404	; (adr r3, 800a2f0 <_dtoa_r+0x2b8>)
 800a15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a160:	f7f6 fa52 	bl	8000608 <__aeabi_dmul>
 800a164:	a364      	add	r3, pc, #400	; (adr r3, 800a2f8 <_dtoa_r+0x2c0>)
 800a166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16a:	f7f6 f897 	bl	800029c <__adddf3>
 800a16e:	4606      	mov	r6, r0
 800a170:	4628      	mov	r0, r5
 800a172:	460f      	mov	r7, r1
 800a174:	f7f6 f9de 	bl	8000534 <__aeabi_i2d>
 800a178:	a361      	add	r3, pc, #388	; (adr r3, 800a300 <_dtoa_r+0x2c8>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	f7f6 fa43 	bl	8000608 <__aeabi_dmul>
 800a182:	4602      	mov	r2, r0
 800a184:	460b      	mov	r3, r1
 800a186:	4630      	mov	r0, r6
 800a188:	4639      	mov	r1, r7
 800a18a:	f7f6 f887 	bl	800029c <__adddf3>
 800a18e:	4606      	mov	r6, r0
 800a190:	460f      	mov	r7, r1
 800a192:	f7f6 fce9 	bl	8000b68 <__aeabi_d2iz>
 800a196:	2200      	movs	r2, #0
 800a198:	9000      	str	r0, [sp, #0]
 800a19a:	2300      	movs	r3, #0
 800a19c:	4630      	mov	r0, r6
 800a19e:	4639      	mov	r1, r7
 800a1a0:	f7f6 fca4 	bl	8000aec <__aeabi_dcmplt>
 800a1a4:	b150      	cbz	r0, 800a1bc <_dtoa_r+0x184>
 800a1a6:	9800      	ldr	r0, [sp, #0]
 800a1a8:	f7f6 f9c4 	bl	8000534 <__aeabi_i2d>
 800a1ac:	4632      	mov	r2, r6
 800a1ae:	463b      	mov	r3, r7
 800a1b0:	f7f6 fc92 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1b4:	b910      	cbnz	r0, 800a1bc <_dtoa_r+0x184>
 800a1b6:	9b00      	ldr	r3, [sp, #0]
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	9300      	str	r3, [sp, #0]
 800a1bc:	9b00      	ldr	r3, [sp, #0]
 800a1be:	2b16      	cmp	r3, #22
 800a1c0:	d85a      	bhi.n	800a278 <_dtoa_r+0x240>
 800a1c2:	9a00      	ldr	r2, [sp, #0]
 800a1c4:	4b57      	ldr	r3, [pc, #348]	; (800a324 <_dtoa_r+0x2ec>)
 800a1c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ce:	ec51 0b19 	vmov	r0, r1, d9
 800a1d2:	f7f6 fc8b 	bl	8000aec <__aeabi_dcmplt>
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	d050      	beq.n	800a27c <_dtoa_r+0x244>
 800a1da:	9b00      	ldr	r3, [sp, #0]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1e6:	1b5d      	subs	r5, r3, r5
 800a1e8:	1e6b      	subs	r3, r5, #1
 800a1ea:	9305      	str	r3, [sp, #20]
 800a1ec:	bf45      	ittet	mi
 800a1ee:	f1c5 0301 	rsbmi	r3, r5, #1
 800a1f2:	9304      	strmi	r3, [sp, #16]
 800a1f4:	2300      	movpl	r3, #0
 800a1f6:	2300      	movmi	r3, #0
 800a1f8:	bf4c      	ite	mi
 800a1fa:	9305      	strmi	r3, [sp, #20]
 800a1fc:	9304      	strpl	r3, [sp, #16]
 800a1fe:	9b00      	ldr	r3, [sp, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	db3d      	blt.n	800a280 <_dtoa_r+0x248>
 800a204:	9b05      	ldr	r3, [sp, #20]
 800a206:	9a00      	ldr	r2, [sp, #0]
 800a208:	920a      	str	r2, [sp, #40]	; 0x28
 800a20a:	4413      	add	r3, r2
 800a20c:	9305      	str	r3, [sp, #20]
 800a20e:	2300      	movs	r3, #0
 800a210:	9307      	str	r3, [sp, #28]
 800a212:	9b06      	ldr	r3, [sp, #24]
 800a214:	2b09      	cmp	r3, #9
 800a216:	f200 8089 	bhi.w	800a32c <_dtoa_r+0x2f4>
 800a21a:	2b05      	cmp	r3, #5
 800a21c:	bfc4      	itt	gt
 800a21e:	3b04      	subgt	r3, #4
 800a220:	9306      	strgt	r3, [sp, #24]
 800a222:	9b06      	ldr	r3, [sp, #24]
 800a224:	f1a3 0302 	sub.w	r3, r3, #2
 800a228:	bfcc      	ite	gt
 800a22a:	2500      	movgt	r5, #0
 800a22c:	2501      	movle	r5, #1
 800a22e:	2b03      	cmp	r3, #3
 800a230:	f200 8087 	bhi.w	800a342 <_dtoa_r+0x30a>
 800a234:	e8df f003 	tbb	[pc, r3]
 800a238:	59383a2d 	.word	0x59383a2d
 800a23c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a240:	441d      	add	r5, r3
 800a242:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a246:	2b20      	cmp	r3, #32
 800a248:	bfc1      	itttt	gt
 800a24a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a24e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a252:	fa0b f303 	lslgt.w	r3, fp, r3
 800a256:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a25a:	bfda      	itte	le
 800a25c:	f1c3 0320 	rsble	r3, r3, #32
 800a260:	fa06 f003 	lslle.w	r0, r6, r3
 800a264:	4318      	orrgt	r0, r3
 800a266:	f7f6 f955 	bl	8000514 <__aeabi_ui2d>
 800a26a:	2301      	movs	r3, #1
 800a26c:	4606      	mov	r6, r0
 800a26e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a272:	3d01      	subs	r5, #1
 800a274:	930e      	str	r3, [sp, #56]	; 0x38
 800a276:	e76a      	b.n	800a14e <_dtoa_r+0x116>
 800a278:	2301      	movs	r3, #1
 800a27a:	e7b2      	b.n	800a1e2 <_dtoa_r+0x1aa>
 800a27c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a27e:	e7b1      	b.n	800a1e4 <_dtoa_r+0x1ac>
 800a280:	9b04      	ldr	r3, [sp, #16]
 800a282:	9a00      	ldr	r2, [sp, #0]
 800a284:	1a9b      	subs	r3, r3, r2
 800a286:	9304      	str	r3, [sp, #16]
 800a288:	4253      	negs	r3, r2
 800a28a:	9307      	str	r3, [sp, #28]
 800a28c:	2300      	movs	r3, #0
 800a28e:	930a      	str	r3, [sp, #40]	; 0x28
 800a290:	e7bf      	b.n	800a212 <_dtoa_r+0x1da>
 800a292:	2300      	movs	r3, #0
 800a294:	9308      	str	r3, [sp, #32]
 800a296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a298:	2b00      	cmp	r3, #0
 800a29a:	dc55      	bgt.n	800a348 <_dtoa_r+0x310>
 800a29c:	2301      	movs	r3, #1
 800a29e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	9209      	str	r2, [sp, #36]	; 0x24
 800a2a6:	e00c      	b.n	800a2c2 <_dtoa_r+0x28a>
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e7f3      	b.n	800a294 <_dtoa_r+0x25c>
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2b0:	9308      	str	r3, [sp, #32]
 800a2b2:	9b00      	ldr	r3, [sp, #0]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	9302      	str	r3, [sp, #8]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	9303      	str	r3, [sp, #12]
 800a2be:	bfb8      	it	lt
 800a2c0:	2301      	movlt	r3, #1
 800a2c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	6042      	str	r2, [r0, #4]
 800a2c8:	2204      	movs	r2, #4
 800a2ca:	f102 0614 	add.w	r6, r2, #20
 800a2ce:	429e      	cmp	r6, r3
 800a2d0:	6841      	ldr	r1, [r0, #4]
 800a2d2:	d93d      	bls.n	800a350 <_dtoa_r+0x318>
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f000 fca9 	bl	800ac2c <_Balloc>
 800a2da:	9001      	str	r0, [sp, #4]
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	d13b      	bne.n	800a358 <_dtoa_r+0x320>
 800a2e0:	4b11      	ldr	r3, [pc, #68]	; (800a328 <_dtoa_r+0x2f0>)
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a2e8:	e6c0      	b.n	800a06c <_dtoa_r+0x34>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e7df      	b.n	800a2ae <_dtoa_r+0x276>
 800a2ee:	bf00      	nop
 800a2f0:	636f4361 	.word	0x636f4361
 800a2f4:	3fd287a7 	.word	0x3fd287a7
 800a2f8:	8b60c8b3 	.word	0x8b60c8b3
 800a2fc:	3fc68a28 	.word	0x3fc68a28
 800a300:	509f79fb 	.word	0x509f79fb
 800a304:	3fd34413 	.word	0x3fd34413
 800a308:	0800c779 	.word	0x0800c779
 800a30c:	0800c790 	.word	0x0800c790
 800a310:	7ff00000 	.word	0x7ff00000
 800a314:	0800c775 	.word	0x0800c775
 800a318:	0800c76c 	.word	0x0800c76c
 800a31c:	0800c749 	.word	0x0800c749
 800a320:	3ff80000 	.word	0x3ff80000
 800a324:	0800c880 	.word	0x0800c880
 800a328:	0800c7eb 	.word	0x0800c7eb
 800a32c:	2501      	movs	r5, #1
 800a32e:	2300      	movs	r3, #0
 800a330:	9306      	str	r3, [sp, #24]
 800a332:	9508      	str	r5, [sp, #32]
 800a334:	f04f 33ff 	mov.w	r3, #4294967295
 800a338:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a33c:	2200      	movs	r2, #0
 800a33e:	2312      	movs	r3, #18
 800a340:	e7b0      	b.n	800a2a4 <_dtoa_r+0x26c>
 800a342:	2301      	movs	r3, #1
 800a344:	9308      	str	r3, [sp, #32]
 800a346:	e7f5      	b.n	800a334 <_dtoa_r+0x2fc>
 800a348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a34a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a34e:	e7b8      	b.n	800a2c2 <_dtoa_r+0x28a>
 800a350:	3101      	adds	r1, #1
 800a352:	6041      	str	r1, [r0, #4]
 800a354:	0052      	lsls	r2, r2, #1
 800a356:	e7b8      	b.n	800a2ca <_dtoa_r+0x292>
 800a358:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a35a:	9a01      	ldr	r2, [sp, #4]
 800a35c:	601a      	str	r2, [r3, #0]
 800a35e:	9b03      	ldr	r3, [sp, #12]
 800a360:	2b0e      	cmp	r3, #14
 800a362:	f200 809d 	bhi.w	800a4a0 <_dtoa_r+0x468>
 800a366:	2d00      	cmp	r5, #0
 800a368:	f000 809a 	beq.w	800a4a0 <_dtoa_r+0x468>
 800a36c:	9b00      	ldr	r3, [sp, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	dd32      	ble.n	800a3d8 <_dtoa_r+0x3a0>
 800a372:	4ab7      	ldr	r2, [pc, #732]	; (800a650 <_dtoa_r+0x618>)
 800a374:	f003 030f 	and.w	r3, r3, #15
 800a378:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a37c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a380:	9b00      	ldr	r3, [sp, #0]
 800a382:	05d8      	lsls	r0, r3, #23
 800a384:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a388:	d516      	bpl.n	800a3b8 <_dtoa_r+0x380>
 800a38a:	4bb2      	ldr	r3, [pc, #712]	; (800a654 <_dtoa_r+0x61c>)
 800a38c:	ec51 0b19 	vmov	r0, r1, d9
 800a390:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a394:	f7f6 fa62 	bl	800085c <__aeabi_ddiv>
 800a398:	f007 070f 	and.w	r7, r7, #15
 800a39c:	4682      	mov	sl, r0
 800a39e:	468b      	mov	fp, r1
 800a3a0:	2503      	movs	r5, #3
 800a3a2:	4eac      	ldr	r6, [pc, #688]	; (800a654 <_dtoa_r+0x61c>)
 800a3a4:	b957      	cbnz	r7, 800a3bc <_dtoa_r+0x384>
 800a3a6:	4642      	mov	r2, r8
 800a3a8:	464b      	mov	r3, r9
 800a3aa:	4650      	mov	r0, sl
 800a3ac:	4659      	mov	r1, fp
 800a3ae:	f7f6 fa55 	bl	800085c <__aeabi_ddiv>
 800a3b2:	4682      	mov	sl, r0
 800a3b4:	468b      	mov	fp, r1
 800a3b6:	e028      	b.n	800a40a <_dtoa_r+0x3d2>
 800a3b8:	2502      	movs	r5, #2
 800a3ba:	e7f2      	b.n	800a3a2 <_dtoa_r+0x36a>
 800a3bc:	07f9      	lsls	r1, r7, #31
 800a3be:	d508      	bpl.n	800a3d2 <_dtoa_r+0x39a>
 800a3c0:	4640      	mov	r0, r8
 800a3c2:	4649      	mov	r1, r9
 800a3c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a3c8:	f7f6 f91e 	bl	8000608 <__aeabi_dmul>
 800a3cc:	3501      	adds	r5, #1
 800a3ce:	4680      	mov	r8, r0
 800a3d0:	4689      	mov	r9, r1
 800a3d2:	107f      	asrs	r7, r7, #1
 800a3d4:	3608      	adds	r6, #8
 800a3d6:	e7e5      	b.n	800a3a4 <_dtoa_r+0x36c>
 800a3d8:	f000 809b 	beq.w	800a512 <_dtoa_r+0x4da>
 800a3dc:	9b00      	ldr	r3, [sp, #0]
 800a3de:	4f9d      	ldr	r7, [pc, #628]	; (800a654 <_dtoa_r+0x61c>)
 800a3e0:	425e      	negs	r6, r3
 800a3e2:	4b9b      	ldr	r3, [pc, #620]	; (800a650 <_dtoa_r+0x618>)
 800a3e4:	f006 020f 	and.w	r2, r6, #15
 800a3e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f0:	ec51 0b19 	vmov	r0, r1, d9
 800a3f4:	f7f6 f908 	bl	8000608 <__aeabi_dmul>
 800a3f8:	1136      	asrs	r6, r6, #4
 800a3fa:	4682      	mov	sl, r0
 800a3fc:	468b      	mov	fp, r1
 800a3fe:	2300      	movs	r3, #0
 800a400:	2502      	movs	r5, #2
 800a402:	2e00      	cmp	r6, #0
 800a404:	d17a      	bne.n	800a4fc <_dtoa_r+0x4c4>
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1d3      	bne.n	800a3b2 <_dtoa_r+0x37a>
 800a40a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f000 8082 	beq.w	800a516 <_dtoa_r+0x4de>
 800a412:	4b91      	ldr	r3, [pc, #580]	; (800a658 <_dtoa_r+0x620>)
 800a414:	2200      	movs	r2, #0
 800a416:	4650      	mov	r0, sl
 800a418:	4659      	mov	r1, fp
 800a41a:	f7f6 fb67 	bl	8000aec <__aeabi_dcmplt>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d079      	beq.n	800a516 <_dtoa_r+0x4de>
 800a422:	9b03      	ldr	r3, [sp, #12]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d076      	beq.n	800a516 <_dtoa_r+0x4de>
 800a428:	9b02      	ldr	r3, [sp, #8]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	dd36      	ble.n	800a49c <_dtoa_r+0x464>
 800a42e:	9b00      	ldr	r3, [sp, #0]
 800a430:	4650      	mov	r0, sl
 800a432:	4659      	mov	r1, fp
 800a434:	1e5f      	subs	r7, r3, #1
 800a436:	2200      	movs	r2, #0
 800a438:	4b88      	ldr	r3, [pc, #544]	; (800a65c <_dtoa_r+0x624>)
 800a43a:	f7f6 f8e5 	bl	8000608 <__aeabi_dmul>
 800a43e:	9e02      	ldr	r6, [sp, #8]
 800a440:	4682      	mov	sl, r0
 800a442:	468b      	mov	fp, r1
 800a444:	3501      	adds	r5, #1
 800a446:	4628      	mov	r0, r5
 800a448:	f7f6 f874 	bl	8000534 <__aeabi_i2d>
 800a44c:	4652      	mov	r2, sl
 800a44e:	465b      	mov	r3, fp
 800a450:	f7f6 f8da 	bl	8000608 <__aeabi_dmul>
 800a454:	4b82      	ldr	r3, [pc, #520]	; (800a660 <_dtoa_r+0x628>)
 800a456:	2200      	movs	r2, #0
 800a458:	f7f5 ff20 	bl	800029c <__adddf3>
 800a45c:	46d0      	mov	r8, sl
 800a45e:	46d9      	mov	r9, fp
 800a460:	4682      	mov	sl, r0
 800a462:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a466:	2e00      	cmp	r6, #0
 800a468:	d158      	bne.n	800a51c <_dtoa_r+0x4e4>
 800a46a:	4b7e      	ldr	r3, [pc, #504]	; (800a664 <_dtoa_r+0x62c>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	4640      	mov	r0, r8
 800a470:	4649      	mov	r1, r9
 800a472:	f7f5 ff11 	bl	8000298 <__aeabi_dsub>
 800a476:	4652      	mov	r2, sl
 800a478:	465b      	mov	r3, fp
 800a47a:	4680      	mov	r8, r0
 800a47c:	4689      	mov	r9, r1
 800a47e:	f7f6 fb53 	bl	8000b28 <__aeabi_dcmpgt>
 800a482:	2800      	cmp	r0, #0
 800a484:	f040 8295 	bne.w	800a9b2 <_dtoa_r+0x97a>
 800a488:	4652      	mov	r2, sl
 800a48a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a48e:	4640      	mov	r0, r8
 800a490:	4649      	mov	r1, r9
 800a492:	f7f6 fb2b 	bl	8000aec <__aeabi_dcmplt>
 800a496:	2800      	cmp	r0, #0
 800a498:	f040 8289 	bne.w	800a9ae <_dtoa_r+0x976>
 800a49c:	ec5b ab19 	vmov	sl, fp, d9
 800a4a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f2c0 8148 	blt.w	800a738 <_dtoa_r+0x700>
 800a4a8:	9a00      	ldr	r2, [sp, #0]
 800a4aa:	2a0e      	cmp	r2, #14
 800a4ac:	f300 8144 	bgt.w	800a738 <_dtoa_r+0x700>
 800a4b0:	4b67      	ldr	r3, [pc, #412]	; (800a650 <_dtoa_r+0x618>)
 800a4b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	f280 80d5 	bge.w	800a66c <_dtoa_r+0x634>
 800a4c2:	9b03      	ldr	r3, [sp, #12]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f300 80d1 	bgt.w	800a66c <_dtoa_r+0x634>
 800a4ca:	f040 826f 	bne.w	800a9ac <_dtoa_r+0x974>
 800a4ce:	4b65      	ldr	r3, [pc, #404]	; (800a664 <_dtoa_r+0x62c>)
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	4640      	mov	r0, r8
 800a4d4:	4649      	mov	r1, r9
 800a4d6:	f7f6 f897 	bl	8000608 <__aeabi_dmul>
 800a4da:	4652      	mov	r2, sl
 800a4dc:	465b      	mov	r3, fp
 800a4de:	f7f6 fb19 	bl	8000b14 <__aeabi_dcmpge>
 800a4e2:	9e03      	ldr	r6, [sp, #12]
 800a4e4:	4637      	mov	r7, r6
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	f040 8245 	bne.w	800a976 <_dtoa_r+0x93e>
 800a4ec:	9d01      	ldr	r5, [sp, #4]
 800a4ee:	2331      	movs	r3, #49	; 0x31
 800a4f0:	f805 3b01 	strb.w	r3, [r5], #1
 800a4f4:	9b00      	ldr	r3, [sp, #0]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	e240      	b.n	800a97e <_dtoa_r+0x946>
 800a4fc:	07f2      	lsls	r2, r6, #31
 800a4fe:	d505      	bpl.n	800a50c <_dtoa_r+0x4d4>
 800a500:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a504:	f7f6 f880 	bl	8000608 <__aeabi_dmul>
 800a508:	3501      	adds	r5, #1
 800a50a:	2301      	movs	r3, #1
 800a50c:	1076      	asrs	r6, r6, #1
 800a50e:	3708      	adds	r7, #8
 800a510:	e777      	b.n	800a402 <_dtoa_r+0x3ca>
 800a512:	2502      	movs	r5, #2
 800a514:	e779      	b.n	800a40a <_dtoa_r+0x3d2>
 800a516:	9f00      	ldr	r7, [sp, #0]
 800a518:	9e03      	ldr	r6, [sp, #12]
 800a51a:	e794      	b.n	800a446 <_dtoa_r+0x40e>
 800a51c:	9901      	ldr	r1, [sp, #4]
 800a51e:	4b4c      	ldr	r3, [pc, #304]	; (800a650 <_dtoa_r+0x618>)
 800a520:	4431      	add	r1, r6
 800a522:	910d      	str	r1, [sp, #52]	; 0x34
 800a524:	9908      	ldr	r1, [sp, #32]
 800a526:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a52a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a52e:	2900      	cmp	r1, #0
 800a530:	d043      	beq.n	800a5ba <_dtoa_r+0x582>
 800a532:	494d      	ldr	r1, [pc, #308]	; (800a668 <_dtoa_r+0x630>)
 800a534:	2000      	movs	r0, #0
 800a536:	f7f6 f991 	bl	800085c <__aeabi_ddiv>
 800a53a:	4652      	mov	r2, sl
 800a53c:	465b      	mov	r3, fp
 800a53e:	f7f5 feab 	bl	8000298 <__aeabi_dsub>
 800a542:	9d01      	ldr	r5, [sp, #4]
 800a544:	4682      	mov	sl, r0
 800a546:	468b      	mov	fp, r1
 800a548:	4649      	mov	r1, r9
 800a54a:	4640      	mov	r0, r8
 800a54c:	f7f6 fb0c 	bl	8000b68 <__aeabi_d2iz>
 800a550:	4606      	mov	r6, r0
 800a552:	f7f5 ffef 	bl	8000534 <__aeabi_i2d>
 800a556:	4602      	mov	r2, r0
 800a558:	460b      	mov	r3, r1
 800a55a:	4640      	mov	r0, r8
 800a55c:	4649      	mov	r1, r9
 800a55e:	f7f5 fe9b 	bl	8000298 <__aeabi_dsub>
 800a562:	3630      	adds	r6, #48	; 0x30
 800a564:	f805 6b01 	strb.w	r6, [r5], #1
 800a568:	4652      	mov	r2, sl
 800a56a:	465b      	mov	r3, fp
 800a56c:	4680      	mov	r8, r0
 800a56e:	4689      	mov	r9, r1
 800a570:	f7f6 fabc 	bl	8000aec <__aeabi_dcmplt>
 800a574:	2800      	cmp	r0, #0
 800a576:	d163      	bne.n	800a640 <_dtoa_r+0x608>
 800a578:	4642      	mov	r2, r8
 800a57a:	464b      	mov	r3, r9
 800a57c:	4936      	ldr	r1, [pc, #216]	; (800a658 <_dtoa_r+0x620>)
 800a57e:	2000      	movs	r0, #0
 800a580:	f7f5 fe8a 	bl	8000298 <__aeabi_dsub>
 800a584:	4652      	mov	r2, sl
 800a586:	465b      	mov	r3, fp
 800a588:	f7f6 fab0 	bl	8000aec <__aeabi_dcmplt>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	f040 80b5 	bne.w	800a6fc <_dtoa_r+0x6c4>
 800a592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a594:	429d      	cmp	r5, r3
 800a596:	d081      	beq.n	800a49c <_dtoa_r+0x464>
 800a598:	4b30      	ldr	r3, [pc, #192]	; (800a65c <_dtoa_r+0x624>)
 800a59a:	2200      	movs	r2, #0
 800a59c:	4650      	mov	r0, sl
 800a59e:	4659      	mov	r1, fp
 800a5a0:	f7f6 f832 	bl	8000608 <__aeabi_dmul>
 800a5a4:	4b2d      	ldr	r3, [pc, #180]	; (800a65c <_dtoa_r+0x624>)
 800a5a6:	4682      	mov	sl, r0
 800a5a8:	468b      	mov	fp, r1
 800a5aa:	4640      	mov	r0, r8
 800a5ac:	4649      	mov	r1, r9
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f7f6 f82a 	bl	8000608 <__aeabi_dmul>
 800a5b4:	4680      	mov	r8, r0
 800a5b6:	4689      	mov	r9, r1
 800a5b8:	e7c6      	b.n	800a548 <_dtoa_r+0x510>
 800a5ba:	4650      	mov	r0, sl
 800a5bc:	4659      	mov	r1, fp
 800a5be:	f7f6 f823 	bl	8000608 <__aeabi_dmul>
 800a5c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5c4:	9d01      	ldr	r5, [sp, #4]
 800a5c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5c8:	4682      	mov	sl, r0
 800a5ca:	468b      	mov	fp, r1
 800a5cc:	4649      	mov	r1, r9
 800a5ce:	4640      	mov	r0, r8
 800a5d0:	f7f6 faca 	bl	8000b68 <__aeabi_d2iz>
 800a5d4:	4606      	mov	r6, r0
 800a5d6:	f7f5 ffad 	bl	8000534 <__aeabi_i2d>
 800a5da:	3630      	adds	r6, #48	; 0x30
 800a5dc:	4602      	mov	r2, r0
 800a5de:	460b      	mov	r3, r1
 800a5e0:	4640      	mov	r0, r8
 800a5e2:	4649      	mov	r1, r9
 800a5e4:	f7f5 fe58 	bl	8000298 <__aeabi_dsub>
 800a5e8:	f805 6b01 	strb.w	r6, [r5], #1
 800a5ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5ee:	429d      	cmp	r5, r3
 800a5f0:	4680      	mov	r8, r0
 800a5f2:	4689      	mov	r9, r1
 800a5f4:	f04f 0200 	mov.w	r2, #0
 800a5f8:	d124      	bne.n	800a644 <_dtoa_r+0x60c>
 800a5fa:	4b1b      	ldr	r3, [pc, #108]	; (800a668 <_dtoa_r+0x630>)
 800a5fc:	4650      	mov	r0, sl
 800a5fe:	4659      	mov	r1, fp
 800a600:	f7f5 fe4c 	bl	800029c <__adddf3>
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	4640      	mov	r0, r8
 800a60a:	4649      	mov	r1, r9
 800a60c:	f7f6 fa8c 	bl	8000b28 <__aeabi_dcmpgt>
 800a610:	2800      	cmp	r0, #0
 800a612:	d173      	bne.n	800a6fc <_dtoa_r+0x6c4>
 800a614:	4652      	mov	r2, sl
 800a616:	465b      	mov	r3, fp
 800a618:	4913      	ldr	r1, [pc, #76]	; (800a668 <_dtoa_r+0x630>)
 800a61a:	2000      	movs	r0, #0
 800a61c:	f7f5 fe3c 	bl	8000298 <__aeabi_dsub>
 800a620:	4602      	mov	r2, r0
 800a622:	460b      	mov	r3, r1
 800a624:	4640      	mov	r0, r8
 800a626:	4649      	mov	r1, r9
 800a628:	f7f6 fa60 	bl	8000aec <__aeabi_dcmplt>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	f43f af35 	beq.w	800a49c <_dtoa_r+0x464>
 800a632:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a634:	1e6b      	subs	r3, r5, #1
 800a636:	930f      	str	r3, [sp, #60]	; 0x3c
 800a638:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a63c:	2b30      	cmp	r3, #48	; 0x30
 800a63e:	d0f8      	beq.n	800a632 <_dtoa_r+0x5fa>
 800a640:	9700      	str	r7, [sp, #0]
 800a642:	e049      	b.n	800a6d8 <_dtoa_r+0x6a0>
 800a644:	4b05      	ldr	r3, [pc, #20]	; (800a65c <_dtoa_r+0x624>)
 800a646:	f7f5 ffdf 	bl	8000608 <__aeabi_dmul>
 800a64a:	4680      	mov	r8, r0
 800a64c:	4689      	mov	r9, r1
 800a64e:	e7bd      	b.n	800a5cc <_dtoa_r+0x594>
 800a650:	0800c880 	.word	0x0800c880
 800a654:	0800c858 	.word	0x0800c858
 800a658:	3ff00000 	.word	0x3ff00000
 800a65c:	40240000 	.word	0x40240000
 800a660:	401c0000 	.word	0x401c0000
 800a664:	40140000 	.word	0x40140000
 800a668:	3fe00000 	.word	0x3fe00000
 800a66c:	9d01      	ldr	r5, [sp, #4]
 800a66e:	4656      	mov	r6, sl
 800a670:	465f      	mov	r7, fp
 800a672:	4642      	mov	r2, r8
 800a674:	464b      	mov	r3, r9
 800a676:	4630      	mov	r0, r6
 800a678:	4639      	mov	r1, r7
 800a67a:	f7f6 f8ef 	bl	800085c <__aeabi_ddiv>
 800a67e:	f7f6 fa73 	bl	8000b68 <__aeabi_d2iz>
 800a682:	4682      	mov	sl, r0
 800a684:	f7f5 ff56 	bl	8000534 <__aeabi_i2d>
 800a688:	4642      	mov	r2, r8
 800a68a:	464b      	mov	r3, r9
 800a68c:	f7f5 ffbc 	bl	8000608 <__aeabi_dmul>
 800a690:	4602      	mov	r2, r0
 800a692:	460b      	mov	r3, r1
 800a694:	4630      	mov	r0, r6
 800a696:	4639      	mov	r1, r7
 800a698:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a69c:	f7f5 fdfc 	bl	8000298 <__aeabi_dsub>
 800a6a0:	f805 6b01 	strb.w	r6, [r5], #1
 800a6a4:	9e01      	ldr	r6, [sp, #4]
 800a6a6:	9f03      	ldr	r7, [sp, #12]
 800a6a8:	1bae      	subs	r6, r5, r6
 800a6aa:	42b7      	cmp	r7, r6
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	d135      	bne.n	800a71e <_dtoa_r+0x6e6>
 800a6b2:	f7f5 fdf3 	bl	800029c <__adddf3>
 800a6b6:	4642      	mov	r2, r8
 800a6b8:	464b      	mov	r3, r9
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	460f      	mov	r7, r1
 800a6be:	f7f6 fa33 	bl	8000b28 <__aeabi_dcmpgt>
 800a6c2:	b9d0      	cbnz	r0, 800a6fa <_dtoa_r+0x6c2>
 800a6c4:	4642      	mov	r2, r8
 800a6c6:	464b      	mov	r3, r9
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	4639      	mov	r1, r7
 800a6cc:	f7f6 fa04 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6d0:	b110      	cbz	r0, 800a6d8 <_dtoa_r+0x6a0>
 800a6d2:	f01a 0f01 	tst.w	sl, #1
 800a6d6:	d110      	bne.n	800a6fa <_dtoa_r+0x6c2>
 800a6d8:	4620      	mov	r0, r4
 800a6da:	ee18 1a10 	vmov	r1, s16
 800a6de:	f000 fae5 	bl	800acac <_Bfree>
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	9800      	ldr	r0, [sp, #0]
 800a6e6:	702b      	strb	r3, [r5, #0]
 800a6e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6ea:	3001      	adds	r0, #1
 800a6ec:	6018      	str	r0, [r3, #0]
 800a6ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f43f acf1 	beq.w	800a0d8 <_dtoa_r+0xa0>
 800a6f6:	601d      	str	r5, [r3, #0]
 800a6f8:	e4ee      	b.n	800a0d8 <_dtoa_r+0xa0>
 800a6fa:	9f00      	ldr	r7, [sp, #0]
 800a6fc:	462b      	mov	r3, r5
 800a6fe:	461d      	mov	r5, r3
 800a700:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a704:	2a39      	cmp	r2, #57	; 0x39
 800a706:	d106      	bne.n	800a716 <_dtoa_r+0x6de>
 800a708:	9a01      	ldr	r2, [sp, #4]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d1f7      	bne.n	800a6fe <_dtoa_r+0x6c6>
 800a70e:	9901      	ldr	r1, [sp, #4]
 800a710:	2230      	movs	r2, #48	; 0x30
 800a712:	3701      	adds	r7, #1
 800a714:	700a      	strb	r2, [r1, #0]
 800a716:	781a      	ldrb	r2, [r3, #0]
 800a718:	3201      	adds	r2, #1
 800a71a:	701a      	strb	r2, [r3, #0]
 800a71c:	e790      	b.n	800a640 <_dtoa_r+0x608>
 800a71e:	4ba6      	ldr	r3, [pc, #664]	; (800a9b8 <_dtoa_r+0x980>)
 800a720:	2200      	movs	r2, #0
 800a722:	f7f5 ff71 	bl	8000608 <__aeabi_dmul>
 800a726:	2200      	movs	r2, #0
 800a728:	2300      	movs	r3, #0
 800a72a:	4606      	mov	r6, r0
 800a72c:	460f      	mov	r7, r1
 800a72e:	f7f6 f9d3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a732:	2800      	cmp	r0, #0
 800a734:	d09d      	beq.n	800a672 <_dtoa_r+0x63a>
 800a736:	e7cf      	b.n	800a6d8 <_dtoa_r+0x6a0>
 800a738:	9a08      	ldr	r2, [sp, #32]
 800a73a:	2a00      	cmp	r2, #0
 800a73c:	f000 80d7 	beq.w	800a8ee <_dtoa_r+0x8b6>
 800a740:	9a06      	ldr	r2, [sp, #24]
 800a742:	2a01      	cmp	r2, #1
 800a744:	f300 80ba 	bgt.w	800a8bc <_dtoa_r+0x884>
 800a748:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a74a:	2a00      	cmp	r2, #0
 800a74c:	f000 80b2 	beq.w	800a8b4 <_dtoa_r+0x87c>
 800a750:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a754:	9e07      	ldr	r6, [sp, #28]
 800a756:	9d04      	ldr	r5, [sp, #16]
 800a758:	9a04      	ldr	r2, [sp, #16]
 800a75a:	441a      	add	r2, r3
 800a75c:	9204      	str	r2, [sp, #16]
 800a75e:	9a05      	ldr	r2, [sp, #20]
 800a760:	2101      	movs	r1, #1
 800a762:	441a      	add	r2, r3
 800a764:	4620      	mov	r0, r4
 800a766:	9205      	str	r2, [sp, #20]
 800a768:	f000 fb58 	bl	800ae1c <__i2b>
 800a76c:	4607      	mov	r7, r0
 800a76e:	2d00      	cmp	r5, #0
 800a770:	dd0c      	ble.n	800a78c <_dtoa_r+0x754>
 800a772:	9b05      	ldr	r3, [sp, #20]
 800a774:	2b00      	cmp	r3, #0
 800a776:	dd09      	ble.n	800a78c <_dtoa_r+0x754>
 800a778:	42ab      	cmp	r3, r5
 800a77a:	9a04      	ldr	r2, [sp, #16]
 800a77c:	bfa8      	it	ge
 800a77e:	462b      	movge	r3, r5
 800a780:	1ad2      	subs	r2, r2, r3
 800a782:	9204      	str	r2, [sp, #16]
 800a784:	9a05      	ldr	r2, [sp, #20]
 800a786:	1aed      	subs	r5, r5, r3
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	9305      	str	r3, [sp, #20]
 800a78c:	9b07      	ldr	r3, [sp, #28]
 800a78e:	b31b      	cbz	r3, 800a7d8 <_dtoa_r+0x7a0>
 800a790:	9b08      	ldr	r3, [sp, #32]
 800a792:	2b00      	cmp	r3, #0
 800a794:	f000 80af 	beq.w	800a8f6 <_dtoa_r+0x8be>
 800a798:	2e00      	cmp	r6, #0
 800a79a:	dd13      	ble.n	800a7c4 <_dtoa_r+0x78c>
 800a79c:	4639      	mov	r1, r7
 800a79e:	4632      	mov	r2, r6
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	f000 fbfb 	bl	800af9c <__pow5mult>
 800a7a6:	ee18 2a10 	vmov	r2, s16
 800a7aa:	4601      	mov	r1, r0
 800a7ac:	4607      	mov	r7, r0
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f000 fb4a 	bl	800ae48 <__multiply>
 800a7b4:	ee18 1a10 	vmov	r1, s16
 800a7b8:	4680      	mov	r8, r0
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f000 fa76 	bl	800acac <_Bfree>
 800a7c0:	ee08 8a10 	vmov	s16, r8
 800a7c4:	9b07      	ldr	r3, [sp, #28]
 800a7c6:	1b9a      	subs	r2, r3, r6
 800a7c8:	d006      	beq.n	800a7d8 <_dtoa_r+0x7a0>
 800a7ca:	ee18 1a10 	vmov	r1, s16
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f000 fbe4 	bl	800af9c <__pow5mult>
 800a7d4:	ee08 0a10 	vmov	s16, r0
 800a7d8:	2101      	movs	r1, #1
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f000 fb1e 	bl	800ae1c <__i2b>
 800a7e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	4606      	mov	r6, r0
 800a7e6:	f340 8088 	ble.w	800a8fa <_dtoa_r+0x8c2>
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	4601      	mov	r1, r0
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f000 fbd4 	bl	800af9c <__pow5mult>
 800a7f4:	9b06      	ldr	r3, [sp, #24]
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	f340 8081 	ble.w	800a900 <_dtoa_r+0x8c8>
 800a7fe:	f04f 0800 	mov.w	r8, #0
 800a802:	6933      	ldr	r3, [r6, #16]
 800a804:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a808:	6918      	ldr	r0, [r3, #16]
 800a80a:	f000 fab7 	bl	800ad7c <__hi0bits>
 800a80e:	f1c0 0020 	rsb	r0, r0, #32
 800a812:	9b05      	ldr	r3, [sp, #20]
 800a814:	4418      	add	r0, r3
 800a816:	f010 001f 	ands.w	r0, r0, #31
 800a81a:	f000 8092 	beq.w	800a942 <_dtoa_r+0x90a>
 800a81e:	f1c0 0320 	rsb	r3, r0, #32
 800a822:	2b04      	cmp	r3, #4
 800a824:	f340 808a 	ble.w	800a93c <_dtoa_r+0x904>
 800a828:	f1c0 001c 	rsb	r0, r0, #28
 800a82c:	9b04      	ldr	r3, [sp, #16]
 800a82e:	4403      	add	r3, r0
 800a830:	9304      	str	r3, [sp, #16]
 800a832:	9b05      	ldr	r3, [sp, #20]
 800a834:	4403      	add	r3, r0
 800a836:	4405      	add	r5, r0
 800a838:	9305      	str	r3, [sp, #20]
 800a83a:	9b04      	ldr	r3, [sp, #16]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	dd07      	ble.n	800a850 <_dtoa_r+0x818>
 800a840:	ee18 1a10 	vmov	r1, s16
 800a844:	461a      	mov	r2, r3
 800a846:	4620      	mov	r0, r4
 800a848:	f000 fc02 	bl	800b050 <__lshift>
 800a84c:	ee08 0a10 	vmov	s16, r0
 800a850:	9b05      	ldr	r3, [sp, #20]
 800a852:	2b00      	cmp	r3, #0
 800a854:	dd05      	ble.n	800a862 <_dtoa_r+0x82a>
 800a856:	4631      	mov	r1, r6
 800a858:	461a      	mov	r2, r3
 800a85a:	4620      	mov	r0, r4
 800a85c:	f000 fbf8 	bl	800b050 <__lshift>
 800a860:	4606      	mov	r6, r0
 800a862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a864:	2b00      	cmp	r3, #0
 800a866:	d06e      	beq.n	800a946 <_dtoa_r+0x90e>
 800a868:	ee18 0a10 	vmov	r0, s16
 800a86c:	4631      	mov	r1, r6
 800a86e:	f000 fc5f 	bl	800b130 <__mcmp>
 800a872:	2800      	cmp	r0, #0
 800a874:	da67      	bge.n	800a946 <_dtoa_r+0x90e>
 800a876:	9b00      	ldr	r3, [sp, #0]
 800a878:	3b01      	subs	r3, #1
 800a87a:	ee18 1a10 	vmov	r1, s16
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	220a      	movs	r2, #10
 800a882:	2300      	movs	r3, #0
 800a884:	4620      	mov	r0, r4
 800a886:	f000 fa33 	bl	800acf0 <__multadd>
 800a88a:	9b08      	ldr	r3, [sp, #32]
 800a88c:	ee08 0a10 	vmov	s16, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 81b1 	beq.w	800abf8 <_dtoa_r+0xbc0>
 800a896:	2300      	movs	r3, #0
 800a898:	4639      	mov	r1, r7
 800a89a:	220a      	movs	r2, #10
 800a89c:	4620      	mov	r0, r4
 800a89e:	f000 fa27 	bl	800acf0 <__multadd>
 800a8a2:	9b02      	ldr	r3, [sp, #8]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	4607      	mov	r7, r0
 800a8a8:	f300 808e 	bgt.w	800a9c8 <_dtoa_r+0x990>
 800a8ac:	9b06      	ldr	r3, [sp, #24]
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	dc51      	bgt.n	800a956 <_dtoa_r+0x91e>
 800a8b2:	e089      	b.n	800a9c8 <_dtoa_r+0x990>
 800a8b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a8ba:	e74b      	b.n	800a754 <_dtoa_r+0x71c>
 800a8bc:	9b03      	ldr	r3, [sp, #12]
 800a8be:	1e5e      	subs	r6, r3, #1
 800a8c0:	9b07      	ldr	r3, [sp, #28]
 800a8c2:	42b3      	cmp	r3, r6
 800a8c4:	bfbf      	itttt	lt
 800a8c6:	9b07      	ldrlt	r3, [sp, #28]
 800a8c8:	9607      	strlt	r6, [sp, #28]
 800a8ca:	1af2      	sublt	r2, r6, r3
 800a8cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a8ce:	bfb6      	itet	lt
 800a8d0:	189b      	addlt	r3, r3, r2
 800a8d2:	1b9e      	subge	r6, r3, r6
 800a8d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a8d6:	9b03      	ldr	r3, [sp, #12]
 800a8d8:	bfb8      	it	lt
 800a8da:	2600      	movlt	r6, #0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	bfb7      	itett	lt
 800a8e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a8e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a8e8:	1a9d      	sublt	r5, r3, r2
 800a8ea:	2300      	movlt	r3, #0
 800a8ec:	e734      	b.n	800a758 <_dtoa_r+0x720>
 800a8ee:	9e07      	ldr	r6, [sp, #28]
 800a8f0:	9d04      	ldr	r5, [sp, #16]
 800a8f2:	9f08      	ldr	r7, [sp, #32]
 800a8f4:	e73b      	b.n	800a76e <_dtoa_r+0x736>
 800a8f6:	9a07      	ldr	r2, [sp, #28]
 800a8f8:	e767      	b.n	800a7ca <_dtoa_r+0x792>
 800a8fa:	9b06      	ldr	r3, [sp, #24]
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	dc18      	bgt.n	800a932 <_dtoa_r+0x8fa>
 800a900:	f1ba 0f00 	cmp.w	sl, #0
 800a904:	d115      	bne.n	800a932 <_dtoa_r+0x8fa>
 800a906:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a90a:	b993      	cbnz	r3, 800a932 <_dtoa_r+0x8fa>
 800a90c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a910:	0d1b      	lsrs	r3, r3, #20
 800a912:	051b      	lsls	r3, r3, #20
 800a914:	b183      	cbz	r3, 800a938 <_dtoa_r+0x900>
 800a916:	9b04      	ldr	r3, [sp, #16]
 800a918:	3301      	adds	r3, #1
 800a91a:	9304      	str	r3, [sp, #16]
 800a91c:	9b05      	ldr	r3, [sp, #20]
 800a91e:	3301      	adds	r3, #1
 800a920:	9305      	str	r3, [sp, #20]
 800a922:	f04f 0801 	mov.w	r8, #1
 800a926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f47f af6a 	bne.w	800a802 <_dtoa_r+0x7ca>
 800a92e:	2001      	movs	r0, #1
 800a930:	e76f      	b.n	800a812 <_dtoa_r+0x7da>
 800a932:	f04f 0800 	mov.w	r8, #0
 800a936:	e7f6      	b.n	800a926 <_dtoa_r+0x8ee>
 800a938:	4698      	mov	r8, r3
 800a93a:	e7f4      	b.n	800a926 <_dtoa_r+0x8ee>
 800a93c:	f43f af7d 	beq.w	800a83a <_dtoa_r+0x802>
 800a940:	4618      	mov	r0, r3
 800a942:	301c      	adds	r0, #28
 800a944:	e772      	b.n	800a82c <_dtoa_r+0x7f4>
 800a946:	9b03      	ldr	r3, [sp, #12]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	dc37      	bgt.n	800a9bc <_dtoa_r+0x984>
 800a94c:	9b06      	ldr	r3, [sp, #24]
 800a94e:	2b02      	cmp	r3, #2
 800a950:	dd34      	ble.n	800a9bc <_dtoa_r+0x984>
 800a952:	9b03      	ldr	r3, [sp, #12]
 800a954:	9302      	str	r3, [sp, #8]
 800a956:	9b02      	ldr	r3, [sp, #8]
 800a958:	b96b      	cbnz	r3, 800a976 <_dtoa_r+0x93e>
 800a95a:	4631      	mov	r1, r6
 800a95c:	2205      	movs	r2, #5
 800a95e:	4620      	mov	r0, r4
 800a960:	f000 f9c6 	bl	800acf0 <__multadd>
 800a964:	4601      	mov	r1, r0
 800a966:	4606      	mov	r6, r0
 800a968:	ee18 0a10 	vmov	r0, s16
 800a96c:	f000 fbe0 	bl	800b130 <__mcmp>
 800a970:	2800      	cmp	r0, #0
 800a972:	f73f adbb 	bgt.w	800a4ec <_dtoa_r+0x4b4>
 800a976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a978:	9d01      	ldr	r5, [sp, #4]
 800a97a:	43db      	mvns	r3, r3
 800a97c:	9300      	str	r3, [sp, #0]
 800a97e:	f04f 0800 	mov.w	r8, #0
 800a982:	4631      	mov	r1, r6
 800a984:	4620      	mov	r0, r4
 800a986:	f000 f991 	bl	800acac <_Bfree>
 800a98a:	2f00      	cmp	r7, #0
 800a98c:	f43f aea4 	beq.w	800a6d8 <_dtoa_r+0x6a0>
 800a990:	f1b8 0f00 	cmp.w	r8, #0
 800a994:	d005      	beq.n	800a9a2 <_dtoa_r+0x96a>
 800a996:	45b8      	cmp	r8, r7
 800a998:	d003      	beq.n	800a9a2 <_dtoa_r+0x96a>
 800a99a:	4641      	mov	r1, r8
 800a99c:	4620      	mov	r0, r4
 800a99e:	f000 f985 	bl	800acac <_Bfree>
 800a9a2:	4639      	mov	r1, r7
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f000 f981 	bl	800acac <_Bfree>
 800a9aa:	e695      	b.n	800a6d8 <_dtoa_r+0x6a0>
 800a9ac:	2600      	movs	r6, #0
 800a9ae:	4637      	mov	r7, r6
 800a9b0:	e7e1      	b.n	800a976 <_dtoa_r+0x93e>
 800a9b2:	9700      	str	r7, [sp, #0]
 800a9b4:	4637      	mov	r7, r6
 800a9b6:	e599      	b.n	800a4ec <_dtoa_r+0x4b4>
 800a9b8:	40240000 	.word	0x40240000
 800a9bc:	9b08      	ldr	r3, [sp, #32]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f000 80ca 	beq.w	800ab58 <_dtoa_r+0xb20>
 800a9c4:	9b03      	ldr	r3, [sp, #12]
 800a9c6:	9302      	str	r3, [sp, #8]
 800a9c8:	2d00      	cmp	r5, #0
 800a9ca:	dd05      	ble.n	800a9d8 <_dtoa_r+0x9a0>
 800a9cc:	4639      	mov	r1, r7
 800a9ce:	462a      	mov	r2, r5
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f000 fb3d 	bl	800b050 <__lshift>
 800a9d6:	4607      	mov	r7, r0
 800a9d8:	f1b8 0f00 	cmp.w	r8, #0
 800a9dc:	d05b      	beq.n	800aa96 <_dtoa_r+0xa5e>
 800a9de:	6879      	ldr	r1, [r7, #4]
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f000 f923 	bl	800ac2c <_Balloc>
 800a9e6:	4605      	mov	r5, r0
 800a9e8:	b928      	cbnz	r0, 800a9f6 <_dtoa_r+0x9be>
 800a9ea:	4b87      	ldr	r3, [pc, #540]	; (800ac08 <_dtoa_r+0xbd0>)
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a9f2:	f7ff bb3b 	b.w	800a06c <_dtoa_r+0x34>
 800a9f6:	693a      	ldr	r2, [r7, #16]
 800a9f8:	3202      	adds	r2, #2
 800a9fa:	0092      	lsls	r2, r2, #2
 800a9fc:	f107 010c 	add.w	r1, r7, #12
 800aa00:	300c      	adds	r0, #12
 800aa02:	f7fe fded 	bl	80095e0 <memcpy>
 800aa06:	2201      	movs	r2, #1
 800aa08:	4629      	mov	r1, r5
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	f000 fb20 	bl	800b050 <__lshift>
 800aa10:	9b01      	ldr	r3, [sp, #4]
 800aa12:	f103 0901 	add.w	r9, r3, #1
 800aa16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	9305      	str	r3, [sp, #20]
 800aa1e:	f00a 0301 	and.w	r3, sl, #1
 800aa22:	46b8      	mov	r8, r7
 800aa24:	9304      	str	r3, [sp, #16]
 800aa26:	4607      	mov	r7, r0
 800aa28:	4631      	mov	r1, r6
 800aa2a:	ee18 0a10 	vmov	r0, s16
 800aa2e:	f7ff fa77 	bl	8009f20 <quorem>
 800aa32:	4641      	mov	r1, r8
 800aa34:	9002      	str	r0, [sp, #8]
 800aa36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aa3a:	ee18 0a10 	vmov	r0, s16
 800aa3e:	f000 fb77 	bl	800b130 <__mcmp>
 800aa42:	463a      	mov	r2, r7
 800aa44:	9003      	str	r0, [sp, #12]
 800aa46:	4631      	mov	r1, r6
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f000 fb8d 	bl	800b168 <__mdiff>
 800aa4e:	68c2      	ldr	r2, [r0, #12]
 800aa50:	f109 3bff 	add.w	fp, r9, #4294967295
 800aa54:	4605      	mov	r5, r0
 800aa56:	bb02      	cbnz	r2, 800aa9a <_dtoa_r+0xa62>
 800aa58:	4601      	mov	r1, r0
 800aa5a:	ee18 0a10 	vmov	r0, s16
 800aa5e:	f000 fb67 	bl	800b130 <__mcmp>
 800aa62:	4602      	mov	r2, r0
 800aa64:	4629      	mov	r1, r5
 800aa66:	4620      	mov	r0, r4
 800aa68:	9207      	str	r2, [sp, #28]
 800aa6a:	f000 f91f 	bl	800acac <_Bfree>
 800aa6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800aa72:	ea43 0102 	orr.w	r1, r3, r2
 800aa76:	9b04      	ldr	r3, [sp, #16]
 800aa78:	430b      	orrs	r3, r1
 800aa7a:	464d      	mov	r5, r9
 800aa7c:	d10f      	bne.n	800aa9e <_dtoa_r+0xa66>
 800aa7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa82:	d02a      	beq.n	800aada <_dtoa_r+0xaa2>
 800aa84:	9b03      	ldr	r3, [sp, #12]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	dd02      	ble.n	800aa90 <_dtoa_r+0xa58>
 800aa8a:	9b02      	ldr	r3, [sp, #8]
 800aa8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800aa90:	f88b a000 	strb.w	sl, [fp]
 800aa94:	e775      	b.n	800a982 <_dtoa_r+0x94a>
 800aa96:	4638      	mov	r0, r7
 800aa98:	e7ba      	b.n	800aa10 <_dtoa_r+0x9d8>
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	e7e2      	b.n	800aa64 <_dtoa_r+0xa2c>
 800aa9e:	9b03      	ldr	r3, [sp, #12]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	db04      	blt.n	800aaae <_dtoa_r+0xa76>
 800aaa4:	9906      	ldr	r1, [sp, #24]
 800aaa6:	430b      	orrs	r3, r1
 800aaa8:	9904      	ldr	r1, [sp, #16]
 800aaaa:	430b      	orrs	r3, r1
 800aaac:	d122      	bne.n	800aaf4 <_dtoa_r+0xabc>
 800aaae:	2a00      	cmp	r2, #0
 800aab0:	ddee      	ble.n	800aa90 <_dtoa_r+0xa58>
 800aab2:	ee18 1a10 	vmov	r1, s16
 800aab6:	2201      	movs	r2, #1
 800aab8:	4620      	mov	r0, r4
 800aaba:	f000 fac9 	bl	800b050 <__lshift>
 800aabe:	4631      	mov	r1, r6
 800aac0:	ee08 0a10 	vmov	s16, r0
 800aac4:	f000 fb34 	bl	800b130 <__mcmp>
 800aac8:	2800      	cmp	r0, #0
 800aaca:	dc03      	bgt.n	800aad4 <_dtoa_r+0xa9c>
 800aacc:	d1e0      	bne.n	800aa90 <_dtoa_r+0xa58>
 800aace:	f01a 0f01 	tst.w	sl, #1
 800aad2:	d0dd      	beq.n	800aa90 <_dtoa_r+0xa58>
 800aad4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aad8:	d1d7      	bne.n	800aa8a <_dtoa_r+0xa52>
 800aada:	2339      	movs	r3, #57	; 0x39
 800aadc:	f88b 3000 	strb.w	r3, [fp]
 800aae0:	462b      	mov	r3, r5
 800aae2:	461d      	mov	r5, r3
 800aae4:	3b01      	subs	r3, #1
 800aae6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aaea:	2a39      	cmp	r2, #57	; 0x39
 800aaec:	d071      	beq.n	800abd2 <_dtoa_r+0xb9a>
 800aaee:	3201      	adds	r2, #1
 800aaf0:	701a      	strb	r2, [r3, #0]
 800aaf2:	e746      	b.n	800a982 <_dtoa_r+0x94a>
 800aaf4:	2a00      	cmp	r2, #0
 800aaf6:	dd07      	ble.n	800ab08 <_dtoa_r+0xad0>
 800aaf8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aafc:	d0ed      	beq.n	800aada <_dtoa_r+0xaa2>
 800aafe:	f10a 0301 	add.w	r3, sl, #1
 800ab02:	f88b 3000 	strb.w	r3, [fp]
 800ab06:	e73c      	b.n	800a982 <_dtoa_r+0x94a>
 800ab08:	9b05      	ldr	r3, [sp, #20]
 800ab0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ab0e:	4599      	cmp	r9, r3
 800ab10:	d047      	beq.n	800aba2 <_dtoa_r+0xb6a>
 800ab12:	ee18 1a10 	vmov	r1, s16
 800ab16:	2300      	movs	r3, #0
 800ab18:	220a      	movs	r2, #10
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f000 f8e8 	bl	800acf0 <__multadd>
 800ab20:	45b8      	cmp	r8, r7
 800ab22:	ee08 0a10 	vmov	s16, r0
 800ab26:	f04f 0300 	mov.w	r3, #0
 800ab2a:	f04f 020a 	mov.w	r2, #10
 800ab2e:	4641      	mov	r1, r8
 800ab30:	4620      	mov	r0, r4
 800ab32:	d106      	bne.n	800ab42 <_dtoa_r+0xb0a>
 800ab34:	f000 f8dc 	bl	800acf0 <__multadd>
 800ab38:	4680      	mov	r8, r0
 800ab3a:	4607      	mov	r7, r0
 800ab3c:	f109 0901 	add.w	r9, r9, #1
 800ab40:	e772      	b.n	800aa28 <_dtoa_r+0x9f0>
 800ab42:	f000 f8d5 	bl	800acf0 <__multadd>
 800ab46:	4639      	mov	r1, r7
 800ab48:	4680      	mov	r8, r0
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	220a      	movs	r2, #10
 800ab4e:	4620      	mov	r0, r4
 800ab50:	f000 f8ce 	bl	800acf0 <__multadd>
 800ab54:	4607      	mov	r7, r0
 800ab56:	e7f1      	b.n	800ab3c <_dtoa_r+0xb04>
 800ab58:	9b03      	ldr	r3, [sp, #12]
 800ab5a:	9302      	str	r3, [sp, #8]
 800ab5c:	9d01      	ldr	r5, [sp, #4]
 800ab5e:	ee18 0a10 	vmov	r0, s16
 800ab62:	4631      	mov	r1, r6
 800ab64:	f7ff f9dc 	bl	8009f20 <quorem>
 800ab68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ab6c:	9b01      	ldr	r3, [sp, #4]
 800ab6e:	f805 ab01 	strb.w	sl, [r5], #1
 800ab72:	1aea      	subs	r2, r5, r3
 800ab74:	9b02      	ldr	r3, [sp, #8]
 800ab76:	4293      	cmp	r3, r2
 800ab78:	dd09      	ble.n	800ab8e <_dtoa_r+0xb56>
 800ab7a:	ee18 1a10 	vmov	r1, s16
 800ab7e:	2300      	movs	r3, #0
 800ab80:	220a      	movs	r2, #10
 800ab82:	4620      	mov	r0, r4
 800ab84:	f000 f8b4 	bl	800acf0 <__multadd>
 800ab88:	ee08 0a10 	vmov	s16, r0
 800ab8c:	e7e7      	b.n	800ab5e <_dtoa_r+0xb26>
 800ab8e:	9b02      	ldr	r3, [sp, #8]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	bfc8      	it	gt
 800ab94:	461d      	movgt	r5, r3
 800ab96:	9b01      	ldr	r3, [sp, #4]
 800ab98:	bfd8      	it	le
 800ab9a:	2501      	movle	r5, #1
 800ab9c:	441d      	add	r5, r3
 800ab9e:	f04f 0800 	mov.w	r8, #0
 800aba2:	ee18 1a10 	vmov	r1, s16
 800aba6:	2201      	movs	r2, #1
 800aba8:	4620      	mov	r0, r4
 800abaa:	f000 fa51 	bl	800b050 <__lshift>
 800abae:	4631      	mov	r1, r6
 800abb0:	ee08 0a10 	vmov	s16, r0
 800abb4:	f000 fabc 	bl	800b130 <__mcmp>
 800abb8:	2800      	cmp	r0, #0
 800abba:	dc91      	bgt.n	800aae0 <_dtoa_r+0xaa8>
 800abbc:	d102      	bne.n	800abc4 <_dtoa_r+0xb8c>
 800abbe:	f01a 0f01 	tst.w	sl, #1
 800abc2:	d18d      	bne.n	800aae0 <_dtoa_r+0xaa8>
 800abc4:	462b      	mov	r3, r5
 800abc6:	461d      	mov	r5, r3
 800abc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abcc:	2a30      	cmp	r2, #48	; 0x30
 800abce:	d0fa      	beq.n	800abc6 <_dtoa_r+0xb8e>
 800abd0:	e6d7      	b.n	800a982 <_dtoa_r+0x94a>
 800abd2:	9a01      	ldr	r2, [sp, #4]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d184      	bne.n	800aae2 <_dtoa_r+0xaaa>
 800abd8:	9b00      	ldr	r3, [sp, #0]
 800abda:	3301      	adds	r3, #1
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	2331      	movs	r3, #49	; 0x31
 800abe0:	7013      	strb	r3, [r2, #0]
 800abe2:	e6ce      	b.n	800a982 <_dtoa_r+0x94a>
 800abe4:	4b09      	ldr	r3, [pc, #36]	; (800ac0c <_dtoa_r+0xbd4>)
 800abe6:	f7ff ba95 	b.w	800a114 <_dtoa_r+0xdc>
 800abea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abec:	2b00      	cmp	r3, #0
 800abee:	f47f aa6e 	bne.w	800a0ce <_dtoa_r+0x96>
 800abf2:	4b07      	ldr	r3, [pc, #28]	; (800ac10 <_dtoa_r+0xbd8>)
 800abf4:	f7ff ba8e 	b.w	800a114 <_dtoa_r+0xdc>
 800abf8:	9b02      	ldr	r3, [sp, #8]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	dcae      	bgt.n	800ab5c <_dtoa_r+0xb24>
 800abfe:	9b06      	ldr	r3, [sp, #24]
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	f73f aea8 	bgt.w	800a956 <_dtoa_r+0x91e>
 800ac06:	e7a9      	b.n	800ab5c <_dtoa_r+0xb24>
 800ac08:	0800c7eb 	.word	0x0800c7eb
 800ac0c:	0800c748 	.word	0x0800c748
 800ac10:	0800c76c 	.word	0x0800c76c

0800ac14 <_localeconv_r>:
 800ac14:	4800      	ldr	r0, [pc, #0]	; (800ac18 <_localeconv_r+0x4>)
 800ac16:	4770      	bx	lr
 800ac18:	20000164 	.word	0x20000164

0800ac1c <malloc>:
 800ac1c:	4b02      	ldr	r3, [pc, #8]	; (800ac28 <malloc+0xc>)
 800ac1e:	4601      	mov	r1, r0
 800ac20:	6818      	ldr	r0, [r3, #0]
 800ac22:	f000 bc09 	b.w	800b438 <_malloc_r>
 800ac26:	bf00      	nop
 800ac28:	20000010 	.word	0x20000010

0800ac2c <_Balloc>:
 800ac2c:	b570      	push	{r4, r5, r6, lr}
 800ac2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac30:	4604      	mov	r4, r0
 800ac32:	460d      	mov	r5, r1
 800ac34:	b976      	cbnz	r6, 800ac54 <_Balloc+0x28>
 800ac36:	2010      	movs	r0, #16
 800ac38:	f7ff fff0 	bl	800ac1c <malloc>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	6260      	str	r0, [r4, #36]	; 0x24
 800ac40:	b920      	cbnz	r0, 800ac4c <_Balloc+0x20>
 800ac42:	4b18      	ldr	r3, [pc, #96]	; (800aca4 <_Balloc+0x78>)
 800ac44:	4818      	ldr	r0, [pc, #96]	; (800aca8 <_Balloc+0x7c>)
 800ac46:	2166      	movs	r1, #102	; 0x66
 800ac48:	f000 fdd6 	bl	800b7f8 <__assert_func>
 800ac4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac50:	6006      	str	r6, [r0, #0]
 800ac52:	60c6      	str	r6, [r0, #12]
 800ac54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac56:	68f3      	ldr	r3, [r6, #12]
 800ac58:	b183      	cbz	r3, 800ac7c <_Balloc+0x50>
 800ac5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac62:	b9b8      	cbnz	r0, 800ac94 <_Balloc+0x68>
 800ac64:	2101      	movs	r1, #1
 800ac66:	fa01 f605 	lsl.w	r6, r1, r5
 800ac6a:	1d72      	adds	r2, r6, #5
 800ac6c:	0092      	lsls	r2, r2, #2
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f000 fb60 	bl	800b334 <_calloc_r>
 800ac74:	b160      	cbz	r0, 800ac90 <_Balloc+0x64>
 800ac76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac7a:	e00e      	b.n	800ac9a <_Balloc+0x6e>
 800ac7c:	2221      	movs	r2, #33	; 0x21
 800ac7e:	2104      	movs	r1, #4
 800ac80:	4620      	mov	r0, r4
 800ac82:	f000 fb57 	bl	800b334 <_calloc_r>
 800ac86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac88:	60f0      	str	r0, [r6, #12]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d1e4      	bne.n	800ac5a <_Balloc+0x2e>
 800ac90:	2000      	movs	r0, #0
 800ac92:	bd70      	pop	{r4, r5, r6, pc}
 800ac94:	6802      	ldr	r2, [r0, #0]
 800ac96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aca0:	e7f7      	b.n	800ac92 <_Balloc+0x66>
 800aca2:	bf00      	nop
 800aca4:	0800c779 	.word	0x0800c779
 800aca8:	0800c7fc 	.word	0x0800c7fc

0800acac <_Bfree>:
 800acac:	b570      	push	{r4, r5, r6, lr}
 800acae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800acb0:	4605      	mov	r5, r0
 800acb2:	460c      	mov	r4, r1
 800acb4:	b976      	cbnz	r6, 800acd4 <_Bfree+0x28>
 800acb6:	2010      	movs	r0, #16
 800acb8:	f7ff ffb0 	bl	800ac1c <malloc>
 800acbc:	4602      	mov	r2, r0
 800acbe:	6268      	str	r0, [r5, #36]	; 0x24
 800acc0:	b920      	cbnz	r0, 800accc <_Bfree+0x20>
 800acc2:	4b09      	ldr	r3, [pc, #36]	; (800ace8 <_Bfree+0x3c>)
 800acc4:	4809      	ldr	r0, [pc, #36]	; (800acec <_Bfree+0x40>)
 800acc6:	218a      	movs	r1, #138	; 0x8a
 800acc8:	f000 fd96 	bl	800b7f8 <__assert_func>
 800accc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acd0:	6006      	str	r6, [r0, #0]
 800acd2:	60c6      	str	r6, [r0, #12]
 800acd4:	b13c      	cbz	r4, 800ace6 <_Bfree+0x3a>
 800acd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800acd8:	6862      	ldr	r2, [r4, #4]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ace0:	6021      	str	r1, [r4, #0]
 800ace2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ace6:	bd70      	pop	{r4, r5, r6, pc}
 800ace8:	0800c779 	.word	0x0800c779
 800acec:	0800c7fc 	.word	0x0800c7fc

0800acf0 <__multadd>:
 800acf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf4:	690d      	ldr	r5, [r1, #16]
 800acf6:	4607      	mov	r7, r0
 800acf8:	460c      	mov	r4, r1
 800acfa:	461e      	mov	r6, r3
 800acfc:	f101 0c14 	add.w	ip, r1, #20
 800ad00:	2000      	movs	r0, #0
 800ad02:	f8dc 3000 	ldr.w	r3, [ip]
 800ad06:	b299      	uxth	r1, r3
 800ad08:	fb02 6101 	mla	r1, r2, r1, r6
 800ad0c:	0c1e      	lsrs	r6, r3, #16
 800ad0e:	0c0b      	lsrs	r3, r1, #16
 800ad10:	fb02 3306 	mla	r3, r2, r6, r3
 800ad14:	b289      	uxth	r1, r1
 800ad16:	3001      	adds	r0, #1
 800ad18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad1c:	4285      	cmp	r5, r0
 800ad1e:	f84c 1b04 	str.w	r1, [ip], #4
 800ad22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad26:	dcec      	bgt.n	800ad02 <__multadd+0x12>
 800ad28:	b30e      	cbz	r6, 800ad6e <__multadd+0x7e>
 800ad2a:	68a3      	ldr	r3, [r4, #8]
 800ad2c:	42ab      	cmp	r3, r5
 800ad2e:	dc19      	bgt.n	800ad64 <__multadd+0x74>
 800ad30:	6861      	ldr	r1, [r4, #4]
 800ad32:	4638      	mov	r0, r7
 800ad34:	3101      	adds	r1, #1
 800ad36:	f7ff ff79 	bl	800ac2c <_Balloc>
 800ad3a:	4680      	mov	r8, r0
 800ad3c:	b928      	cbnz	r0, 800ad4a <__multadd+0x5a>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	4b0c      	ldr	r3, [pc, #48]	; (800ad74 <__multadd+0x84>)
 800ad42:	480d      	ldr	r0, [pc, #52]	; (800ad78 <__multadd+0x88>)
 800ad44:	21b5      	movs	r1, #181	; 0xb5
 800ad46:	f000 fd57 	bl	800b7f8 <__assert_func>
 800ad4a:	6922      	ldr	r2, [r4, #16]
 800ad4c:	3202      	adds	r2, #2
 800ad4e:	f104 010c 	add.w	r1, r4, #12
 800ad52:	0092      	lsls	r2, r2, #2
 800ad54:	300c      	adds	r0, #12
 800ad56:	f7fe fc43 	bl	80095e0 <memcpy>
 800ad5a:	4621      	mov	r1, r4
 800ad5c:	4638      	mov	r0, r7
 800ad5e:	f7ff ffa5 	bl	800acac <_Bfree>
 800ad62:	4644      	mov	r4, r8
 800ad64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad68:	3501      	adds	r5, #1
 800ad6a:	615e      	str	r6, [r3, #20]
 800ad6c:	6125      	str	r5, [r4, #16]
 800ad6e:	4620      	mov	r0, r4
 800ad70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad74:	0800c7eb 	.word	0x0800c7eb
 800ad78:	0800c7fc 	.word	0x0800c7fc

0800ad7c <__hi0bits>:
 800ad7c:	0c03      	lsrs	r3, r0, #16
 800ad7e:	041b      	lsls	r3, r3, #16
 800ad80:	b9d3      	cbnz	r3, 800adb8 <__hi0bits+0x3c>
 800ad82:	0400      	lsls	r0, r0, #16
 800ad84:	2310      	movs	r3, #16
 800ad86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ad8a:	bf04      	itt	eq
 800ad8c:	0200      	lsleq	r0, r0, #8
 800ad8e:	3308      	addeq	r3, #8
 800ad90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad94:	bf04      	itt	eq
 800ad96:	0100      	lsleq	r0, r0, #4
 800ad98:	3304      	addeq	r3, #4
 800ad9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad9e:	bf04      	itt	eq
 800ada0:	0080      	lsleq	r0, r0, #2
 800ada2:	3302      	addeq	r3, #2
 800ada4:	2800      	cmp	r0, #0
 800ada6:	db05      	blt.n	800adb4 <__hi0bits+0x38>
 800ada8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800adac:	f103 0301 	add.w	r3, r3, #1
 800adb0:	bf08      	it	eq
 800adb2:	2320      	moveq	r3, #32
 800adb4:	4618      	mov	r0, r3
 800adb6:	4770      	bx	lr
 800adb8:	2300      	movs	r3, #0
 800adba:	e7e4      	b.n	800ad86 <__hi0bits+0xa>

0800adbc <__lo0bits>:
 800adbc:	6803      	ldr	r3, [r0, #0]
 800adbe:	f013 0207 	ands.w	r2, r3, #7
 800adc2:	4601      	mov	r1, r0
 800adc4:	d00b      	beq.n	800adde <__lo0bits+0x22>
 800adc6:	07da      	lsls	r2, r3, #31
 800adc8:	d423      	bmi.n	800ae12 <__lo0bits+0x56>
 800adca:	0798      	lsls	r0, r3, #30
 800adcc:	bf49      	itett	mi
 800adce:	085b      	lsrmi	r3, r3, #1
 800add0:	089b      	lsrpl	r3, r3, #2
 800add2:	2001      	movmi	r0, #1
 800add4:	600b      	strmi	r3, [r1, #0]
 800add6:	bf5c      	itt	pl
 800add8:	600b      	strpl	r3, [r1, #0]
 800adda:	2002      	movpl	r0, #2
 800addc:	4770      	bx	lr
 800adde:	b298      	uxth	r0, r3
 800ade0:	b9a8      	cbnz	r0, 800ae0e <__lo0bits+0x52>
 800ade2:	0c1b      	lsrs	r3, r3, #16
 800ade4:	2010      	movs	r0, #16
 800ade6:	b2da      	uxtb	r2, r3
 800ade8:	b90a      	cbnz	r2, 800adee <__lo0bits+0x32>
 800adea:	3008      	adds	r0, #8
 800adec:	0a1b      	lsrs	r3, r3, #8
 800adee:	071a      	lsls	r2, r3, #28
 800adf0:	bf04      	itt	eq
 800adf2:	091b      	lsreq	r3, r3, #4
 800adf4:	3004      	addeq	r0, #4
 800adf6:	079a      	lsls	r2, r3, #30
 800adf8:	bf04      	itt	eq
 800adfa:	089b      	lsreq	r3, r3, #2
 800adfc:	3002      	addeq	r0, #2
 800adfe:	07da      	lsls	r2, r3, #31
 800ae00:	d403      	bmi.n	800ae0a <__lo0bits+0x4e>
 800ae02:	085b      	lsrs	r3, r3, #1
 800ae04:	f100 0001 	add.w	r0, r0, #1
 800ae08:	d005      	beq.n	800ae16 <__lo0bits+0x5a>
 800ae0a:	600b      	str	r3, [r1, #0]
 800ae0c:	4770      	bx	lr
 800ae0e:	4610      	mov	r0, r2
 800ae10:	e7e9      	b.n	800ade6 <__lo0bits+0x2a>
 800ae12:	2000      	movs	r0, #0
 800ae14:	4770      	bx	lr
 800ae16:	2020      	movs	r0, #32
 800ae18:	4770      	bx	lr
	...

0800ae1c <__i2b>:
 800ae1c:	b510      	push	{r4, lr}
 800ae1e:	460c      	mov	r4, r1
 800ae20:	2101      	movs	r1, #1
 800ae22:	f7ff ff03 	bl	800ac2c <_Balloc>
 800ae26:	4602      	mov	r2, r0
 800ae28:	b928      	cbnz	r0, 800ae36 <__i2b+0x1a>
 800ae2a:	4b05      	ldr	r3, [pc, #20]	; (800ae40 <__i2b+0x24>)
 800ae2c:	4805      	ldr	r0, [pc, #20]	; (800ae44 <__i2b+0x28>)
 800ae2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ae32:	f000 fce1 	bl	800b7f8 <__assert_func>
 800ae36:	2301      	movs	r3, #1
 800ae38:	6144      	str	r4, [r0, #20]
 800ae3a:	6103      	str	r3, [r0, #16]
 800ae3c:	bd10      	pop	{r4, pc}
 800ae3e:	bf00      	nop
 800ae40:	0800c7eb 	.word	0x0800c7eb
 800ae44:	0800c7fc 	.word	0x0800c7fc

0800ae48 <__multiply>:
 800ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4c:	4691      	mov	r9, r2
 800ae4e:	690a      	ldr	r2, [r1, #16]
 800ae50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	bfb8      	it	lt
 800ae58:	460b      	movlt	r3, r1
 800ae5a:	460c      	mov	r4, r1
 800ae5c:	bfbc      	itt	lt
 800ae5e:	464c      	movlt	r4, r9
 800ae60:	4699      	movlt	r9, r3
 800ae62:	6927      	ldr	r7, [r4, #16]
 800ae64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae68:	68a3      	ldr	r3, [r4, #8]
 800ae6a:	6861      	ldr	r1, [r4, #4]
 800ae6c:	eb07 060a 	add.w	r6, r7, sl
 800ae70:	42b3      	cmp	r3, r6
 800ae72:	b085      	sub	sp, #20
 800ae74:	bfb8      	it	lt
 800ae76:	3101      	addlt	r1, #1
 800ae78:	f7ff fed8 	bl	800ac2c <_Balloc>
 800ae7c:	b930      	cbnz	r0, 800ae8c <__multiply+0x44>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	4b44      	ldr	r3, [pc, #272]	; (800af94 <__multiply+0x14c>)
 800ae82:	4845      	ldr	r0, [pc, #276]	; (800af98 <__multiply+0x150>)
 800ae84:	f240 115d 	movw	r1, #349	; 0x15d
 800ae88:	f000 fcb6 	bl	800b7f8 <__assert_func>
 800ae8c:	f100 0514 	add.w	r5, r0, #20
 800ae90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae94:	462b      	mov	r3, r5
 800ae96:	2200      	movs	r2, #0
 800ae98:	4543      	cmp	r3, r8
 800ae9a:	d321      	bcc.n	800aee0 <__multiply+0x98>
 800ae9c:	f104 0314 	add.w	r3, r4, #20
 800aea0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aea4:	f109 0314 	add.w	r3, r9, #20
 800aea8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aeac:	9202      	str	r2, [sp, #8]
 800aeae:	1b3a      	subs	r2, r7, r4
 800aeb0:	3a15      	subs	r2, #21
 800aeb2:	f022 0203 	bic.w	r2, r2, #3
 800aeb6:	3204      	adds	r2, #4
 800aeb8:	f104 0115 	add.w	r1, r4, #21
 800aebc:	428f      	cmp	r7, r1
 800aebe:	bf38      	it	cc
 800aec0:	2204      	movcc	r2, #4
 800aec2:	9201      	str	r2, [sp, #4]
 800aec4:	9a02      	ldr	r2, [sp, #8]
 800aec6:	9303      	str	r3, [sp, #12]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d80c      	bhi.n	800aee6 <__multiply+0x9e>
 800aecc:	2e00      	cmp	r6, #0
 800aece:	dd03      	ble.n	800aed8 <__multiply+0x90>
 800aed0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d05a      	beq.n	800af8e <__multiply+0x146>
 800aed8:	6106      	str	r6, [r0, #16]
 800aeda:	b005      	add	sp, #20
 800aedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee0:	f843 2b04 	str.w	r2, [r3], #4
 800aee4:	e7d8      	b.n	800ae98 <__multiply+0x50>
 800aee6:	f8b3 a000 	ldrh.w	sl, [r3]
 800aeea:	f1ba 0f00 	cmp.w	sl, #0
 800aeee:	d024      	beq.n	800af3a <__multiply+0xf2>
 800aef0:	f104 0e14 	add.w	lr, r4, #20
 800aef4:	46a9      	mov	r9, r5
 800aef6:	f04f 0c00 	mov.w	ip, #0
 800aefa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aefe:	f8d9 1000 	ldr.w	r1, [r9]
 800af02:	fa1f fb82 	uxth.w	fp, r2
 800af06:	b289      	uxth	r1, r1
 800af08:	fb0a 110b 	mla	r1, sl, fp, r1
 800af0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800af10:	f8d9 2000 	ldr.w	r2, [r9]
 800af14:	4461      	add	r1, ip
 800af16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af1a:	fb0a c20b 	mla	r2, sl, fp, ip
 800af1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af22:	b289      	uxth	r1, r1
 800af24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af28:	4577      	cmp	r7, lr
 800af2a:	f849 1b04 	str.w	r1, [r9], #4
 800af2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af32:	d8e2      	bhi.n	800aefa <__multiply+0xb2>
 800af34:	9a01      	ldr	r2, [sp, #4]
 800af36:	f845 c002 	str.w	ip, [r5, r2]
 800af3a:	9a03      	ldr	r2, [sp, #12]
 800af3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af40:	3304      	adds	r3, #4
 800af42:	f1b9 0f00 	cmp.w	r9, #0
 800af46:	d020      	beq.n	800af8a <__multiply+0x142>
 800af48:	6829      	ldr	r1, [r5, #0]
 800af4a:	f104 0c14 	add.w	ip, r4, #20
 800af4e:	46ae      	mov	lr, r5
 800af50:	f04f 0a00 	mov.w	sl, #0
 800af54:	f8bc b000 	ldrh.w	fp, [ip]
 800af58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800af5c:	fb09 220b 	mla	r2, r9, fp, r2
 800af60:	4492      	add	sl, r2
 800af62:	b289      	uxth	r1, r1
 800af64:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800af68:	f84e 1b04 	str.w	r1, [lr], #4
 800af6c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800af70:	f8be 1000 	ldrh.w	r1, [lr]
 800af74:	0c12      	lsrs	r2, r2, #16
 800af76:	fb09 1102 	mla	r1, r9, r2, r1
 800af7a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800af7e:	4567      	cmp	r7, ip
 800af80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af84:	d8e6      	bhi.n	800af54 <__multiply+0x10c>
 800af86:	9a01      	ldr	r2, [sp, #4]
 800af88:	50a9      	str	r1, [r5, r2]
 800af8a:	3504      	adds	r5, #4
 800af8c:	e79a      	b.n	800aec4 <__multiply+0x7c>
 800af8e:	3e01      	subs	r6, #1
 800af90:	e79c      	b.n	800aecc <__multiply+0x84>
 800af92:	bf00      	nop
 800af94:	0800c7eb 	.word	0x0800c7eb
 800af98:	0800c7fc 	.word	0x0800c7fc

0800af9c <__pow5mult>:
 800af9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa0:	4615      	mov	r5, r2
 800afa2:	f012 0203 	ands.w	r2, r2, #3
 800afa6:	4606      	mov	r6, r0
 800afa8:	460f      	mov	r7, r1
 800afaa:	d007      	beq.n	800afbc <__pow5mult+0x20>
 800afac:	4c25      	ldr	r4, [pc, #148]	; (800b044 <__pow5mult+0xa8>)
 800afae:	3a01      	subs	r2, #1
 800afb0:	2300      	movs	r3, #0
 800afb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800afb6:	f7ff fe9b 	bl	800acf0 <__multadd>
 800afba:	4607      	mov	r7, r0
 800afbc:	10ad      	asrs	r5, r5, #2
 800afbe:	d03d      	beq.n	800b03c <__pow5mult+0xa0>
 800afc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800afc2:	b97c      	cbnz	r4, 800afe4 <__pow5mult+0x48>
 800afc4:	2010      	movs	r0, #16
 800afc6:	f7ff fe29 	bl	800ac1c <malloc>
 800afca:	4602      	mov	r2, r0
 800afcc:	6270      	str	r0, [r6, #36]	; 0x24
 800afce:	b928      	cbnz	r0, 800afdc <__pow5mult+0x40>
 800afd0:	4b1d      	ldr	r3, [pc, #116]	; (800b048 <__pow5mult+0xac>)
 800afd2:	481e      	ldr	r0, [pc, #120]	; (800b04c <__pow5mult+0xb0>)
 800afd4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800afd8:	f000 fc0e 	bl	800b7f8 <__assert_func>
 800afdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afe0:	6004      	str	r4, [r0, #0]
 800afe2:	60c4      	str	r4, [r0, #12]
 800afe4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800afe8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afec:	b94c      	cbnz	r4, 800b002 <__pow5mult+0x66>
 800afee:	f240 2171 	movw	r1, #625	; 0x271
 800aff2:	4630      	mov	r0, r6
 800aff4:	f7ff ff12 	bl	800ae1c <__i2b>
 800aff8:	2300      	movs	r3, #0
 800affa:	f8c8 0008 	str.w	r0, [r8, #8]
 800affe:	4604      	mov	r4, r0
 800b000:	6003      	str	r3, [r0, #0]
 800b002:	f04f 0900 	mov.w	r9, #0
 800b006:	07eb      	lsls	r3, r5, #31
 800b008:	d50a      	bpl.n	800b020 <__pow5mult+0x84>
 800b00a:	4639      	mov	r1, r7
 800b00c:	4622      	mov	r2, r4
 800b00e:	4630      	mov	r0, r6
 800b010:	f7ff ff1a 	bl	800ae48 <__multiply>
 800b014:	4639      	mov	r1, r7
 800b016:	4680      	mov	r8, r0
 800b018:	4630      	mov	r0, r6
 800b01a:	f7ff fe47 	bl	800acac <_Bfree>
 800b01e:	4647      	mov	r7, r8
 800b020:	106d      	asrs	r5, r5, #1
 800b022:	d00b      	beq.n	800b03c <__pow5mult+0xa0>
 800b024:	6820      	ldr	r0, [r4, #0]
 800b026:	b938      	cbnz	r0, 800b038 <__pow5mult+0x9c>
 800b028:	4622      	mov	r2, r4
 800b02a:	4621      	mov	r1, r4
 800b02c:	4630      	mov	r0, r6
 800b02e:	f7ff ff0b 	bl	800ae48 <__multiply>
 800b032:	6020      	str	r0, [r4, #0]
 800b034:	f8c0 9000 	str.w	r9, [r0]
 800b038:	4604      	mov	r4, r0
 800b03a:	e7e4      	b.n	800b006 <__pow5mult+0x6a>
 800b03c:	4638      	mov	r0, r7
 800b03e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b042:	bf00      	nop
 800b044:	0800c948 	.word	0x0800c948
 800b048:	0800c779 	.word	0x0800c779
 800b04c:	0800c7fc 	.word	0x0800c7fc

0800b050 <__lshift>:
 800b050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b054:	460c      	mov	r4, r1
 800b056:	6849      	ldr	r1, [r1, #4]
 800b058:	6923      	ldr	r3, [r4, #16]
 800b05a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b05e:	68a3      	ldr	r3, [r4, #8]
 800b060:	4607      	mov	r7, r0
 800b062:	4691      	mov	r9, r2
 800b064:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b068:	f108 0601 	add.w	r6, r8, #1
 800b06c:	42b3      	cmp	r3, r6
 800b06e:	db0b      	blt.n	800b088 <__lshift+0x38>
 800b070:	4638      	mov	r0, r7
 800b072:	f7ff fddb 	bl	800ac2c <_Balloc>
 800b076:	4605      	mov	r5, r0
 800b078:	b948      	cbnz	r0, 800b08e <__lshift+0x3e>
 800b07a:	4602      	mov	r2, r0
 800b07c:	4b2a      	ldr	r3, [pc, #168]	; (800b128 <__lshift+0xd8>)
 800b07e:	482b      	ldr	r0, [pc, #172]	; (800b12c <__lshift+0xdc>)
 800b080:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b084:	f000 fbb8 	bl	800b7f8 <__assert_func>
 800b088:	3101      	adds	r1, #1
 800b08a:	005b      	lsls	r3, r3, #1
 800b08c:	e7ee      	b.n	800b06c <__lshift+0x1c>
 800b08e:	2300      	movs	r3, #0
 800b090:	f100 0114 	add.w	r1, r0, #20
 800b094:	f100 0210 	add.w	r2, r0, #16
 800b098:	4618      	mov	r0, r3
 800b09a:	4553      	cmp	r3, sl
 800b09c:	db37      	blt.n	800b10e <__lshift+0xbe>
 800b09e:	6920      	ldr	r0, [r4, #16]
 800b0a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0a4:	f104 0314 	add.w	r3, r4, #20
 800b0a8:	f019 091f 	ands.w	r9, r9, #31
 800b0ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b0b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b0b4:	d02f      	beq.n	800b116 <__lshift+0xc6>
 800b0b6:	f1c9 0e20 	rsb	lr, r9, #32
 800b0ba:	468a      	mov	sl, r1
 800b0bc:	f04f 0c00 	mov.w	ip, #0
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	fa02 f209 	lsl.w	r2, r2, r9
 800b0c6:	ea42 020c 	orr.w	r2, r2, ip
 800b0ca:	f84a 2b04 	str.w	r2, [sl], #4
 800b0ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0d2:	4298      	cmp	r0, r3
 800b0d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b0d8:	d8f2      	bhi.n	800b0c0 <__lshift+0x70>
 800b0da:	1b03      	subs	r3, r0, r4
 800b0dc:	3b15      	subs	r3, #21
 800b0de:	f023 0303 	bic.w	r3, r3, #3
 800b0e2:	3304      	adds	r3, #4
 800b0e4:	f104 0215 	add.w	r2, r4, #21
 800b0e8:	4290      	cmp	r0, r2
 800b0ea:	bf38      	it	cc
 800b0ec:	2304      	movcc	r3, #4
 800b0ee:	f841 c003 	str.w	ip, [r1, r3]
 800b0f2:	f1bc 0f00 	cmp.w	ip, #0
 800b0f6:	d001      	beq.n	800b0fc <__lshift+0xac>
 800b0f8:	f108 0602 	add.w	r6, r8, #2
 800b0fc:	3e01      	subs	r6, #1
 800b0fe:	4638      	mov	r0, r7
 800b100:	612e      	str	r6, [r5, #16]
 800b102:	4621      	mov	r1, r4
 800b104:	f7ff fdd2 	bl	800acac <_Bfree>
 800b108:	4628      	mov	r0, r5
 800b10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b10e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b112:	3301      	adds	r3, #1
 800b114:	e7c1      	b.n	800b09a <__lshift+0x4a>
 800b116:	3904      	subs	r1, #4
 800b118:	f853 2b04 	ldr.w	r2, [r3], #4
 800b11c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b120:	4298      	cmp	r0, r3
 800b122:	d8f9      	bhi.n	800b118 <__lshift+0xc8>
 800b124:	e7ea      	b.n	800b0fc <__lshift+0xac>
 800b126:	bf00      	nop
 800b128:	0800c7eb 	.word	0x0800c7eb
 800b12c:	0800c7fc 	.word	0x0800c7fc

0800b130 <__mcmp>:
 800b130:	b530      	push	{r4, r5, lr}
 800b132:	6902      	ldr	r2, [r0, #16]
 800b134:	690c      	ldr	r4, [r1, #16]
 800b136:	1b12      	subs	r2, r2, r4
 800b138:	d10e      	bne.n	800b158 <__mcmp+0x28>
 800b13a:	f100 0314 	add.w	r3, r0, #20
 800b13e:	3114      	adds	r1, #20
 800b140:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b144:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b148:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b14c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b150:	42a5      	cmp	r5, r4
 800b152:	d003      	beq.n	800b15c <__mcmp+0x2c>
 800b154:	d305      	bcc.n	800b162 <__mcmp+0x32>
 800b156:	2201      	movs	r2, #1
 800b158:	4610      	mov	r0, r2
 800b15a:	bd30      	pop	{r4, r5, pc}
 800b15c:	4283      	cmp	r3, r0
 800b15e:	d3f3      	bcc.n	800b148 <__mcmp+0x18>
 800b160:	e7fa      	b.n	800b158 <__mcmp+0x28>
 800b162:	f04f 32ff 	mov.w	r2, #4294967295
 800b166:	e7f7      	b.n	800b158 <__mcmp+0x28>

0800b168 <__mdiff>:
 800b168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b16c:	460c      	mov	r4, r1
 800b16e:	4606      	mov	r6, r0
 800b170:	4611      	mov	r1, r2
 800b172:	4620      	mov	r0, r4
 800b174:	4690      	mov	r8, r2
 800b176:	f7ff ffdb 	bl	800b130 <__mcmp>
 800b17a:	1e05      	subs	r5, r0, #0
 800b17c:	d110      	bne.n	800b1a0 <__mdiff+0x38>
 800b17e:	4629      	mov	r1, r5
 800b180:	4630      	mov	r0, r6
 800b182:	f7ff fd53 	bl	800ac2c <_Balloc>
 800b186:	b930      	cbnz	r0, 800b196 <__mdiff+0x2e>
 800b188:	4b3a      	ldr	r3, [pc, #232]	; (800b274 <__mdiff+0x10c>)
 800b18a:	4602      	mov	r2, r0
 800b18c:	f240 2132 	movw	r1, #562	; 0x232
 800b190:	4839      	ldr	r0, [pc, #228]	; (800b278 <__mdiff+0x110>)
 800b192:	f000 fb31 	bl	800b7f8 <__assert_func>
 800b196:	2301      	movs	r3, #1
 800b198:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b19c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a0:	bfa4      	itt	ge
 800b1a2:	4643      	movge	r3, r8
 800b1a4:	46a0      	movge	r8, r4
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b1ac:	bfa6      	itte	ge
 800b1ae:	461c      	movge	r4, r3
 800b1b0:	2500      	movge	r5, #0
 800b1b2:	2501      	movlt	r5, #1
 800b1b4:	f7ff fd3a 	bl	800ac2c <_Balloc>
 800b1b8:	b920      	cbnz	r0, 800b1c4 <__mdiff+0x5c>
 800b1ba:	4b2e      	ldr	r3, [pc, #184]	; (800b274 <__mdiff+0x10c>)
 800b1bc:	4602      	mov	r2, r0
 800b1be:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b1c2:	e7e5      	b.n	800b190 <__mdiff+0x28>
 800b1c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b1c8:	6926      	ldr	r6, [r4, #16]
 800b1ca:	60c5      	str	r5, [r0, #12]
 800b1cc:	f104 0914 	add.w	r9, r4, #20
 800b1d0:	f108 0514 	add.w	r5, r8, #20
 800b1d4:	f100 0e14 	add.w	lr, r0, #20
 800b1d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b1dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b1e0:	f108 0210 	add.w	r2, r8, #16
 800b1e4:	46f2      	mov	sl, lr
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b1ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b1f0:	fa1f f883 	uxth.w	r8, r3
 800b1f4:	fa11 f18b 	uxtah	r1, r1, fp
 800b1f8:	0c1b      	lsrs	r3, r3, #16
 800b1fa:	eba1 0808 	sub.w	r8, r1, r8
 800b1fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b202:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b206:	fa1f f888 	uxth.w	r8, r8
 800b20a:	1419      	asrs	r1, r3, #16
 800b20c:	454e      	cmp	r6, r9
 800b20e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b212:	f84a 3b04 	str.w	r3, [sl], #4
 800b216:	d8e7      	bhi.n	800b1e8 <__mdiff+0x80>
 800b218:	1b33      	subs	r3, r6, r4
 800b21a:	3b15      	subs	r3, #21
 800b21c:	f023 0303 	bic.w	r3, r3, #3
 800b220:	3304      	adds	r3, #4
 800b222:	3415      	adds	r4, #21
 800b224:	42a6      	cmp	r6, r4
 800b226:	bf38      	it	cc
 800b228:	2304      	movcc	r3, #4
 800b22a:	441d      	add	r5, r3
 800b22c:	4473      	add	r3, lr
 800b22e:	469e      	mov	lr, r3
 800b230:	462e      	mov	r6, r5
 800b232:	4566      	cmp	r6, ip
 800b234:	d30e      	bcc.n	800b254 <__mdiff+0xec>
 800b236:	f10c 0203 	add.w	r2, ip, #3
 800b23a:	1b52      	subs	r2, r2, r5
 800b23c:	f022 0203 	bic.w	r2, r2, #3
 800b240:	3d03      	subs	r5, #3
 800b242:	45ac      	cmp	ip, r5
 800b244:	bf38      	it	cc
 800b246:	2200      	movcc	r2, #0
 800b248:	441a      	add	r2, r3
 800b24a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b24e:	b17b      	cbz	r3, 800b270 <__mdiff+0x108>
 800b250:	6107      	str	r7, [r0, #16]
 800b252:	e7a3      	b.n	800b19c <__mdiff+0x34>
 800b254:	f856 8b04 	ldr.w	r8, [r6], #4
 800b258:	fa11 f288 	uxtah	r2, r1, r8
 800b25c:	1414      	asrs	r4, r2, #16
 800b25e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b262:	b292      	uxth	r2, r2
 800b264:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b268:	f84e 2b04 	str.w	r2, [lr], #4
 800b26c:	1421      	asrs	r1, r4, #16
 800b26e:	e7e0      	b.n	800b232 <__mdiff+0xca>
 800b270:	3f01      	subs	r7, #1
 800b272:	e7ea      	b.n	800b24a <__mdiff+0xe2>
 800b274:	0800c7eb 	.word	0x0800c7eb
 800b278:	0800c7fc 	.word	0x0800c7fc

0800b27c <__d2b>:
 800b27c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b280:	4689      	mov	r9, r1
 800b282:	2101      	movs	r1, #1
 800b284:	ec57 6b10 	vmov	r6, r7, d0
 800b288:	4690      	mov	r8, r2
 800b28a:	f7ff fccf 	bl	800ac2c <_Balloc>
 800b28e:	4604      	mov	r4, r0
 800b290:	b930      	cbnz	r0, 800b2a0 <__d2b+0x24>
 800b292:	4602      	mov	r2, r0
 800b294:	4b25      	ldr	r3, [pc, #148]	; (800b32c <__d2b+0xb0>)
 800b296:	4826      	ldr	r0, [pc, #152]	; (800b330 <__d2b+0xb4>)
 800b298:	f240 310a 	movw	r1, #778	; 0x30a
 800b29c:	f000 faac 	bl	800b7f8 <__assert_func>
 800b2a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b2a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b2a8:	bb35      	cbnz	r5, 800b2f8 <__d2b+0x7c>
 800b2aa:	2e00      	cmp	r6, #0
 800b2ac:	9301      	str	r3, [sp, #4]
 800b2ae:	d028      	beq.n	800b302 <__d2b+0x86>
 800b2b0:	4668      	mov	r0, sp
 800b2b2:	9600      	str	r6, [sp, #0]
 800b2b4:	f7ff fd82 	bl	800adbc <__lo0bits>
 800b2b8:	9900      	ldr	r1, [sp, #0]
 800b2ba:	b300      	cbz	r0, 800b2fe <__d2b+0x82>
 800b2bc:	9a01      	ldr	r2, [sp, #4]
 800b2be:	f1c0 0320 	rsb	r3, r0, #32
 800b2c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c6:	430b      	orrs	r3, r1
 800b2c8:	40c2      	lsrs	r2, r0
 800b2ca:	6163      	str	r3, [r4, #20]
 800b2cc:	9201      	str	r2, [sp, #4]
 800b2ce:	9b01      	ldr	r3, [sp, #4]
 800b2d0:	61a3      	str	r3, [r4, #24]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	bf14      	ite	ne
 800b2d6:	2202      	movne	r2, #2
 800b2d8:	2201      	moveq	r2, #1
 800b2da:	6122      	str	r2, [r4, #16]
 800b2dc:	b1d5      	cbz	r5, 800b314 <__d2b+0x98>
 800b2de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b2e2:	4405      	add	r5, r0
 800b2e4:	f8c9 5000 	str.w	r5, [r9]
 800b2e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b2ec:	f8c8 0000 	str.w	r0, [r8]
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	b003      	add	sp, #12
 800b2f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2fc:	e7d5      	b.n	800b2aa <__d2b+0x2e>
 800b2fe:	6161      	str	r1, [r4, #20]
 800b300:	e7e5      	b.n	800b2ce <__d2b+0x52>
 800b302:	a801      	add	r0, sp, #4
 800b304:	f7ff fd5a 	bl	800adbc <__lo0bits>
 800b308:	9b01      	ldr	r3, [sp, #4]
 800b30a:	6163      	str	r3, [r4, #20]
 800b30c:	2201      	movs	r2, #1
 800b30e:	6122      	str	r2, [r4, #16]
 800b310:	3020      	adds	r0, #32
 800b312:	e7e3      	b.n	800b2dc <__d2b+0x60>
 800b314:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b318:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b31c:	f8c9 0000 	str.w	r0, [r9]
 800b320:	6918      	ldr	r0, [r3, #16]
 800b322:	f7ff fd2b 	bl	800ad7c <__hi0bits>
 800b326:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b32a:	e7df      	b.n	800b2ec <__d2b+0x70>
 800b32c:	0800c7eb 	.word	0x0800c7eb
 800b330:	0800c7fc 	.word	0x0800c7fc

0800b334 <_calloc_r>:
 800b334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b336:	fba1 2402 	umull	r2, r4, r1, r2
 800b33a:	b94c      	cbnz	r4, 800b350 <_calloc_r+0x1c>
 800b33c:	4611      	mov	r1, r2
 800b33e:	9201      	str	r2, [sp, #4]
 800b340:	f000 f87a 	bl	800b438 <_malloc_r>
 800b344:	9a01      	ldr	r2, [sp, #4]
 800b346:	4605      	mov	r5, r0
 800b348:	b930      	cbnz	r0, 800b358 <_calloc_r+0x24>
 800b34a:	4628      	mov	r0, r5
 800b34c:	b003      	add	sp, #12
 800b34e:	bd30      	pop	{r4, r5, pc}
 800b350:	220c      	movs	r2, #12
 800b352:	6002      	str	r2, [r0, #0]
 800b354:	2500      	movs	r5, #0
 800b356:	e7f8      	b.n	800b34a <_calloc_r+0x16>
 800b358:	4621      	mov	r1, r4
 800b35a:	f7fe f94f 	bl	80095fc <memset>
 800b35e:	e7f4      	b.n	800b34a <_calloc_r+0x16>

0800b360 <_free_r>:
 800b360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b362:	2900      	cmp	r1, #0
 800b364:	d044      	beq.n	800b3f0 <_free_r+0x90>
 800b366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b36a:	9001      	str	r0, [sp, #4]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f1a1 0404 	sub.w	r4, r1, #4
 800b372:	bfb8      	it	lt
 800b374:	18e4      	addlt	r4, r4, r3
 800b376:	f000 fa9b 	bl	800b8b0 <__malloc_lock>
 800b37a:	4a1e      	ldr	r2, [pc, #120]	; (800b3f4 <_free_r+0x94>)
 800b37c:	9801      	ldr	r0, [sp, #4]
 800b37e:	6813      	ldr	r3, [r2, #0]
 800b380:	b933      	cbnz	r3, 800b390 <_free_r+0x30>
 800b382:	6063      	str	r3, [r4, #4]
 800b384:	6014      	str	r4, [r2, #0]
 800b386:	b003      	add	sp, #12
 800b388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b38c:	f000 ba96 	b.w	800b8bc <__malloc_unlock>
 800b390:	42a3      	cmp	r3, r4
 800b392:	d908      	bls.n	800b3a6 <_free_r+0x46>
 800b394:	6825      	ldr	r5, [r4, #0]
 800b396:	1961      	adds	r1, r4, r5
 800b398:	428b      	cmp	r3, r1
 800b39a:	bf01      	itttt	eq
 800b39c:	6819      	ldreq	r1, [r3, #0]
 800b39e:	685b      	ldreq	r3, [r3, #4]
 800b3a0:	1949      	addeq	r1, r1, r5
 800b3a2:	6021      	streq	r1, [r4, #0]
 800b3a4:	e7ed      	b.n	800b382 <_free_r+0x22>
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	b10b      	cbz	r3, 800b3b0 <_free_r+0x50>
 800b3ac:	42a3      	cmp	r3, r4
 800b3ae:	d9fa      	bls.n	800b3a6 <_free_r+0x46>
 800b3b0:	6811      	ldr	r1, [r2, #0]
 800b3b2:	1855      	adds	r5, r2, r1
 800b3b4:	42a5      	cmp	r5, r4
 800b3b6:	d10b      	bne.n	800b3d0 <_free_r+0x70>
 800b3b8:	6824      	ldr	r4, [r4, #0]
 800b3ba:	4421      	add	r1, r4
 800b3bc:	1854      	adds	r4, r2, r1
 800b3be:	42a3      	cmp	r3, r4
 800b3c0:	6011      	str	r1, [r2, #0]
 800b3c2:	d1e0      	bne.n	800b386 <_free_r+0x26>
 800b3c4:	681c      	ldr	r4, [r3, #0]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	6053      	str	r3, [r2, #4]
 800b3ca:	4421      	add	r1, r4
 800b3cc:	6011      	str	r1, [r2, #0]
 800b3ce:	e7da      	b.n	800b386 <_free_r+0x26>
 800b3d0:	d902      	bls.n	800b3d8 <_free_r+0x78>
 800b3d2:	230c      	movs	r3, #12
 800b3d4:	6003      	str	r3, [r0, #0]
 800b3d6:	e7d6      	b.n	800b386 <_free_r+0x26>
 800b3d8:	6825      	ldr	r5, [r4, #0]
 800b3da:	1961      	adds	r1, r4, r5
 800b3dc:	428b      	cmp	r3, r1
 800b3de:	bf04      	itt	eq
 800b3e0:	6819      	ldreq	r1, [r3, #0]
 800b3e2:	685b      	ldreq	r3, [r3, #4]
 800b3e4:	6063      	str	r3, [r4, #4]
 800b3e6:	bf04      	itt	eq
 800b3e8:	1949      	addeq	r1, r1, r5
 800b3ea:	6021      	streq	r1, [r4, #0]
 800b3ec:	6054      	str	r4, [r2, #4]
 800b3ee:	e7ca      	b.n	800b386 <_free_r+0x26>
 800b3f0:	b003      	add	sp, #12
 800b3f2:	bd30      	pop	{r4, r5, pc}
 800b3f4:	20004ba8 	.word	0x20004ba8

0800b3f8 <sbrk_aligned>:
 800b3f8:	b570      	push	{r4, r5, r6, lr}
 800b3fa:	4e0e      	ldr	r6, [pc, #56]	; (800b434 <sbrk_aligned+0x3c>)
 800b3fc:	460c      	mov	r4, r1
 800b3fe:	6831      	ldr	r1, [r6, #0]
 800b400:	4605      	mov	r5, r0
 800b402:	b911      	cbnz	r1, 800b40a <sbrk_aligned+0x12>
 800b404:	f000 f9e8 	bl	800b7d8 <_sbrk_r>
 800b408:	6030      	str	r0, [r6, #0]
 800b40a:	4621      	mov	r1, r4
 800b40c:	4628      	mov	r0, r5
 800b40e:	f000 f9e3 	bl	800b7d8 <_sbrk_r>
 800b412:	1c43      	adds	r3, r0, #1
 800b414:	d00a      	beq.n	800b42c <sbrk_aligned+0x34>
 800b416:	1cc4      	adds	r4, r0, #3
 800b418:	f024 0403 	bic.w	r4, r4, #3
 800b41c:	42a0      	cmp	r0, r4
 800b41e:	d007      	beq.n	800b430 <sbrk_aligned+0x38>
 800b420:	1a21      	subs	r1, r4, r0
 800b422:	4628      	mov	r0, r5
 800b424:	f000 f9d8 	bl	800b7d8 <_sbrk_r>
 800b428:	3001      	adds	r0, #1
 800b42a:	d101      	bne.n	800b430 <sbrk_aligned+0x38>
 800b42c:	f04f 34ff 	mov.w	r4, #4294967295
 800b430:	4620      	mov	r0, r4
 800b432:	bd70      	pop	{r4, r5, r6, pc}
 800b434:	20004bac 	.word	0x20004bac

0800b438 <_malloc_r>:
 800b438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b43c:	1ccd      	adds	r5, r1, #3
 800b43e:	f025 0503 	bic.w	r5, r5, #3
 800b442:	3508      	adds	r5, #8
 800b444:	2d0c      	cmp	r5, #12
 800b446:	bf38      	it	cc
 800b448:	250c      	movcc	r5, #12
 800b44a:	2d00      	cmp	r5, #0
 800b44c:	4607      	mov	r7, r0
 800b44e:	db01      	blt.n	800b454 <_malloc_r+0x1c>
 800b450:	42a9      	cmp	r1, r5
 800b452:	d905      	bls.n	800b460 <_malloc_r+0x28>
 800b454:	230c      	movs	r3, #12
 800b456:	603b      	str	r3, [r7, #0]
 800b458:	2600      	movs	r6, #0
 800b45a:	4630      	mov	r0, r6
 800b45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b460:	4e2e      	ldr	r6, [pc, #184]	; (800b51c <_malloc_r+0xe4>)
 800b462:	f000 fa25 	bl	800b8b0 <__malloc_lock>
 800b466:	6833      	ldr	r3, [r6, #0]
 800b468:	461c      	mov	r4, r3
 800b46a:	bb34      	cbnz	r4, 800b4ba <_malloc_r+0x82>
 800b46c:	4629      	mov	r1, r5
 800b46e:	4638      	mov	r0, r7
 800b470:	f7ff ffc2 	bl	800b3f8 <sbrk_aligned>
 800b474:	1c43      	adds	r3, r0, #1
 800b476:	4604      	mov	r4, r0
 800b478:	d14d      	bne.n	800b516 <_malloc_r+0xde>
 800b47a:	6834      	ldr	r4, [r6, #0]
 800b47c:	4626      	mov	r6, r4
 800b47e:	2e00      	cmp	r6, #0
 800b480:	d140      	bne.n	800b504 <_malloc_r+0xcc>
 800b482:	6823      	ldr	r3, [r4, #0]
 800b484:	4631      	mov	r1, r6
 800b486:	4638      	mov	r0, r7
 800b488:	eb04 0803 	add.w	r8, r4, r3
 800b48c:	f000 f9a4 	bl	800b7d8 <_sbrk_r>
 800b490:	4580      	cmp	r8, r0
 800b492:	d13a      	bne.n	800b50a <_malloc_r+0xd2>
 800b494:	6821      	ldr	r1, [r4, #0]
 800b496:	3503      	adds	r5, #3
 800b498:	1a6d      	subs	r5, r5, r1
 800b49a:	f025 0503 	bic.w	r5, r5, #3
 800b49e:	3508      	adds	r5, #8
 800b4a0:	2d0c      	cmp	r5, #12
 800b4a2:	bf38      	it	cc
 800b4a4:	250c      	movcc	r5, #12
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	4638      	mov	r0, r7
 800b4aa:	f7ff ffa5 	bl	800b3f8 <sbrk_aligned>
 800b4ae:	3001      	adds	r0, #1
 800b4b0:	d02b      	beq.n	800b50a <_malloc_r+0xd2>
 800b4b2:	6823      	ldr	r3, [r4, #0]
 800b4b4:	442b      	add	r3, r5
 800b4b6:	6023      	str	r3, [r4, #0]
 800b4b8:	e00e      	b.n	800b4d8 <_malloc_r+0xa0>
 800b4ba:	6822      	ldr	r2, [r4, #0]
 800b4bc:	1b52      	subs	r2, r2, r5
 800b4be:	d41e      	bmi.n	800b4fe <_malloc_r+0xc6>
 800b4c0:	2a0b      	cmp	r2, #11
 800b4c2:	d916      	bls.n	800b4f2 <_malloc_r+0xba>
 800b4c4:	1961      	adds	r1, r4, r5
 800b4c6:	42a3      	cmp	r3, r4
 800b4c8:	6025      	str	r5, [r4, #0]
 800b4ca:	bf18      	it	ne
 800b4cc:	6059      	strne	r1, [r3, #4]
 800b4ce:	6863      	ldr	r3, [r4, #4]
 800b4d0:	bf08      	it	eq
 800b4d2:	6031      	streq	r1, [r6, #0]
 800b4d4:	5162      	str	r2, [r4, r5]
 800b4d6:	604b      	str	r3, [r1, #4]
 800b4d8:	4638      	mov	r0, r7
 800b4da:	f104 060b 	add.w	r6, r4, #11
 800b4de:	f000 f9ed 	bl	800b8bc <__malloc_unlock>
 800b4e2:	f026 0607 	bic.w	r6, r6, #7
 800b4e6:	1d23      	adds	r3, r4, #4
 800b4e8:	1af2      	subs	r2, r6, r3
 800b4ea:	d0b6      	beq.n	800b45a <_malloc_r+0x22>
 800b4ec:	1b9b      	subs	r3, r3, r6
 800b4ee:	50a3      	str	r3, [r4, r2]
 800b4f0:	e7b3      	b.n	800b45a <_malloc_r+0x22>
 800b4f2:	6862      	ldr	r2, [r4, #4]
 800b4f4:	42a3      	cmp	r3, r4
 800b4f6:	bf0c      	ite	eq
 800b4f8:	6032      	streq	r2, [r6, #0]
 800b4fa:	605a      	strne	r2, [r3, #4]
 800b4fc:	e7ec      	b.n	800b4d8 <_malloc_r+0xa0>
 800b4fe:	4623      	mov	r3, r4
 800b500:	6864      	ldr	r4, [r4, #4]
 800b502:	e7b2      	b.n	800b46a <_malloc_r+0x32>
 800b504:	4634      	mov	r4, r6
 800b506:	6876      	ldr	r6, [r6, #4]
 800b508:	e7b9      	b.n	800b47e <_malloc_r+0x46>
 800b50a:	230c      	movs	r3, #12
 800b50c:	603b      	str	r3, [r7, #0]
 800b50e:	4638      	mov	r0, r7
 800b510:	f000 f9d4 	bl	800b8bc <__malloc_unlock>
 800b514:	e7a1      	b.n	800b45a <_malloc_r+0x22>
 800b516:	6025      	str	r5, [r4, #0]
 800b518:	e7de      	b.n	800b4d8 <_malloc_r+0xa0>
 800b51a:	bf00      	nop
 800b51c:	20004ba8 	.word	0x20004ba8

0800b520 <__ssputs_r>:
 800b520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b524:	688e      	ldr	r6, [r1, #8]
 800b526:	429e      	cmp	r6, r3
 800b528:	4682      	mov	sl, r0
 800b52a:	460c      	mov	r4, r1
 800b52c:	4690      	mov	r8, r2
 800b52e:	461f      	mov	r7, r3
 800b530:	d838      	bhi.n	800b5a4 <__ssputs_r+0x84>
 800b532:	898a      	ldrh	r2, [r1, #12]
 800b534:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b538:	d032      	beq.n	800b5a0 <__ssputs_r+0x80>
 800b53a:	6825      	ldr	r5, [r4, #0]
 800b53c:	6909      	ldr	r1, [r1, #16]
 800b53e:	eba5 0901 	sub.w	r9, r5, r1
 800b542:	6965      	ldr	r5, [r4, #20]
 800b544:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b548:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b54c:	3301      	adds	r3, #1
 800b54e:	444b      	add	r3, r9
 800b550:	106d      	asrs	r5, r5, #1
 800b552:	429d      	cmp	r5, r3
 800b554:	bf38      	it	cc
 800b556:	461d      	movcc	r5, r3
 800b558:	0553      	lsls	r3, r2, #21
 800b55a:	d531      	bpl.n	800b5c0 <__ssputs_r+0xa0>
 800b55c:	4629      	mov	r1, r5
 800b55e:	f7ff ff6b 	bl	800b438 <_malloc_r>
 800b562:	4606      	mov	r6, r0
 800b564:	b950      	cbnz	r0, 800b57c <__ssputs_r+0x5c>
 800b566:	230c      	movs	r3, #12
 800b568:	f8ca 3000 	str.w	r3, [sl]
 800b56c:	89a3      	ldrh	r3, [r4, #12]
 800b56e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b572:	81a3      	strh	r3, [r4, #12]
 800b574:	f04f 30ff 	mov.w	r0, #4294967295
 800b578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b57c:	6921      	ldr	r1, [r4, #16]
 800b57e:	464a      	mov	r2, r9
 800b580:	f7fe f82e 	bl	80095e0 <memcpy>
 800b584:	89a3      	ldrh	r3, [r4, #12]
 800b586:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b58a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b58e:	81a3      	strh	r3, [r4, #12]
 800b590:	6126      	str	r6, [r4, #16]
 800b592:	6165      	str	r5, [r4, #20]
 800b594:	444e      	add	r6, r9
 800b596:	eba5 0509 	sub.w	r5, r5, r9
 800b59a:	6026      	str	r6, [r4, #0]
 800b59c:	60a5      	str	r5, [r4, #8]
 800b59e:	463e      	mov	r6, r7
 800b5a0:	42be      	cmp	r6, r7
 800b5a2:	d900      	bls.n	800b5a6 <__ssputs_r+0x86>
 800b5a4:	463e      	mov	r6, r7
 800b5a6:	6820      	ldr	r0, [r4, #0]
 800b5a8:	4632      	mov	r2, r6
 800b5aa:	4641      	mov	r1, r8
 800b5ac:	f000 f966 	bl	800b87c <memmove>
 800b5b0:	68a3      	ldr	r3, [r4, #8]
 800b5b2:	1b9b      	subs	r3, r3, r6
 800b5b4:	60a3      	str	r3, [r4, #8]
 800b5b6:	6823      	ldr	r3, [r4, #0]
 800b5b8:	4433      	add	r3, r6
 800b5ba:	6023      	str	r3, [r4, #0]
 800b5bc:	2000      	movs	r0, #0
 800b5be:	e7db      	b.n	800b578 <__ssputs_r+0x58>
 800b5c0:	462a      	mov	r2, r5
 800b5c2:	f000 f981 	bl	800b8c8 <_realloc_r>
 800b5c6:	4606      	mov	r6, r0
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	d1e1      	bne.n	800b590 <__ssputs_r+0x70>
 800b5cc:	6921      	ldr	r1, [r4, #16]
 800b5ce:	4650      	mov	r0, sl
 800b5d0:	f7ff fec6 	bl	800b360 <_free_r>
 800b5d4:	e7c7      	b.n	800b566 <__ssputs_r+0x46>
	...

0800b5d8 <_svfiprintf_r>:
 800b5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5dc:	4698      	mov	r8, r3
 800b5de:	898b      	ldrh	r3, [r1, #12]
 800b5e0:	061b      	lsls	r3, r3, #24
 800b5e2:	b09d      	sub	sp, #116	; 0x74
 800b5e4:	4607      	mov	r7, r0
 800b5e6:	460d      	mov	r5, r1
 800b5e8:	4614      	mov	r4, r2
 800b5ea:	d50e      	bpl.n	800b60a <_svfiprintf_r+0x32>
 800b5ec:	690b      	ldr	r3, [r1, #16]
 800b5ee:	b963      	cbnz	r3, 800b60a <_svfiprintf_r+0x32>
 800b5f0:	2140      	movs	r1, #64	; 0x40
 800b5f2:	f7ff ff21 	bl	800b438 <_malloc_r>
 800b5f6:	6028      	str	r0, [r5, #0]
 800b5f8:	6128      	str	r0, [r5, #16]
 800b5fa:	b920      	cbnz	r0, 800b606 <_svfiprintf_r+0x2e>
 800b5fc:	230c      	movs	r3, #12
 800b5fe:	603b      	str	r3, [r7, #0]
 800b600:	f04f 30ff 	mov.w	r0, #4294967295
 800b604:	e0d1      	b.n	800b7aa <_svfiprintf_r+0x1d2>
 800b606:	2340      	movs	r3, #64	; 0x40
 800b608:	616b      	str	r3, [r5, #20]
 800b60a:	2300      	movs	r3, #0
 800b60c:	9309      	str	r3, [sp, #36]	; 0x24
 800b60e:	2320      	movs	r3, #32
 800b610:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b614:	f8cd 800c 	str.w	r8, [sp, #12]
 800b618:	2330      	movs	r3, #48	; 0x30
 800b61a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b7c4 <_svfiprintf_r+0x1ec>
 800b61e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b622:	f04f 0901 	mov.w	r9, #1
 800b626:	4623      	mov	r3, r4
 800b628:	469a      	mov	sl, r3
 800b62a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b62e:	b10a      	cbz	r2, 800b634 <_svfiprintf_r+0x5c>
 800b630:	2a25      	cmp	r2, #37	; 0x25
 800b632:	d1f9      	bne.n	800b628 <_svfiprintf_r+0x50>
 800b634:	ebba 0b04 	subs.w	fp, sl, r4
 800b638:	d00b      	beq.n	800b652 <_svfiprintf_r+0x7a>
 800b63a:	465b      	mov	r3, fp
 800b63c:	4622      	mov	r2, r4
 800b63e:	4629      	mov	r1, r5
 800b640:	4638      	mov	r0, r7
 800b642:	f7ff ff6d 	bl	800b520 <__ssputs_r>
 800b646:	3001      	adds	r0, #1
 800b648:	f000 80aa 	beq.w	800b7a0 <_svfiprintf_r+0x1c8>
 800b64c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b64e:	445a      	add	r2, fp
 800b650:	9209      	str	r2, [sp, #36]	; 0x24
 800b652:	f89a 3000 	ldrb.w	r3, [sl]
 800b656:	2b00      	cmp	r3, #0
 800b658:	f000 80a2 	beq.w	800b7a0 <_svfiprintf_r+0x1c8>
 800b65c:	2300      	movs	r3, #0
 800b65e:	f04f 32ff 	mov.w	r2, #4294967295
 800b662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b666:	f10a 0a01 	add.w	sl, sl, #1
 800b66a:	9304      	str	r3, [sp, #16]
 800b66c:	9307      	str	r3, [sp, #28]
 800b66e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b672:	931a      	str	r3, [sp, #104]	; 0x68
 800b674:	4654      	mov	r4, sl
 800b676:	2205      	movs	r2, #5
 800b678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b67c:	4851      	ldr	r0, [pc, #324]	; (800b7c4 <_svfiprintf_r+0x1ec>)
 800b67e:	f7f4 fdb7 	bl	80001f0 <memchr>
 800b682:	9a04      	ldr	r2, [sp, #16]
 800b684:	b9d8      	cbnz	r0, 800b6be <_svfiprintf_r+0xe6>
 800b686:	06d0      	lsls	r0, r2, #27
 800b688:	bf44      	itt	mi
 800b68a:	2320      	movmi	r3, #32
 800b68c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b690:	0711      	lsls	r1, r2, #28
 800b692:	bf44      	itt	mi
 800b694:	232b      	movmi	r3, #43	; 0x2b
 800b696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b69a:	f89a 3000 	ldrb.w	r3, [sl]
 800b69e:	2b2a      	cmp	r3, #42	; 0x2a
 800b6a0:	d015      	beq.n	800b6ce <_svfiprintf_r+0xf6>
 800b6a2:	9a07      	ldr	r2, [sp, #28]
 800b6a4:	4654      	mov	r4, sl
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	f04f 0c0a 	mov.w	ip, #10
 800b6ac:	4621      	mov	r1, r4
 800b6ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6b2:	3b30      	subs	r3, #48	; 0x30
 800b6b4:	2b09      	cmp	r3, #9
 800b6b6:	d94e      	bls.n	800b756 <_svfiprintf_r+0x17e>
 800b6b8:	b1b0      	cbz	r0, 800b6e8 <_svfiprintf_r+0x110>
 800b6ba:	9207      	str	r2, [sp, #28]
 800b6bc:	e014      	b.n	800b6e8 <_svfiprintf_r+0x110>
 800b6be:	eba0 0308 	sub.w	r3, r0, r8
 800b6c2:	fa09 f303 	lsl.w	r3, r9, r3
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	9304      	str	r3, [sp, #16]
 800b6ca:	46a2      	mov	sl, r4
 800b6cc:	e7d2      	b.n	800b674 <_svfiprintf_r+0x9c>
 800b6ce:	9b03      	ldr	r3, [sp, #12]
 800b6d0:	1d19      	adds	r1, r3, #4
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	9103      	str	r1, [sp, #12]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	bfbb      	ittet	lt
 800b6da:	425b      	neglt	r3, r3
 800b6dc:	f042 0202 	orrlt.w	r2, r2, #2
 800b6e0:	9307      	strge	r3, [sp, #28]
 800b6e2:	9307      	strlt	r3, [sp, #28]
 800b6e4:	bfb8      	it	lt
 800b6e6:	9204      	strlt	r2, [sp, #16]
 800b6e8:	7823      	ldrb	r3, [r4, #0]
 800b6ea:	2b2e      	cmp	r3, #46	; 0x2e
 800b6ec:	d10c      	bne.n	800b708 <_svfiprintf_r+0x130>
 800b6ee:	7863      	ldrb	r3, [r4, #1]
 800b6f0:	2b2a      	cmp	r3, #42	; 0x2a
 800b6f2:	d135      	bne.n	800b760 <_svfiprintf_r+0x188>
 800b6f4:	9b03      	ldr	r3, [sp, #12]
 800b6f6:	1d1a      	adds	r2, r3, #4
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	9203      	str	r2, [sp, #12]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	bfb8      	it	lt
 800b700:	f04f 33ff 	movlt.w	r3, #4294967295
 800b704:	3402      	adds	r4, #2
 800b706:	9305      	str	r3, [sp, #20]
 800b708:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b7d4 <_svfiprintf_r+0x1fc>
 800b70c:	7821      	ldrb	r1, [r4, #0]
 800b70e:	2203      	movs	r2, #3
 800b710:	4650      	mov	r0, sl
 800b712:	f7f4 fd6d 	bl	80001f0 <memchr>
 800b716:	b140      	cbz	r0, 800b72a <_svfiprintf_r+0x152>
 800b718:	2340      	movs	r3, #64	; 0x40
 800b71a:	eba0 000a 	sub.w	r0, r0, sl
 800b71e:	fa03 f000 	lsl.w	r0, r3, r0
 800b722:	9b04      	ldr	r3, [sp, #16]
 800b724:	4303      	orrs	r3, r0
 800b726:	3401      	adds	r4, #1
 800b728:	9304      	str	r3, [sp, #16]
 800b72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b72e:	4826      	ldr	r0, [pc, #152]	; (800b7c8 <_svfiprintf_r+0x1f0>)
 800b730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b734:	2206      	movs	r2, #6
 800b736:	f7f4 fd5b 	bl	80001f0 <memchr>
 800b73a:	2800      	cmp	r0, #0
 800b73c:	d038      	beq.n	800b7b0 <_svfiprintf_r+0x1d8>
 800b73e:	4b23      	ldr	r3, [pc, #140]	; (800b7cc <_svfiprintf_r+0x1f4>)
 800b740:	bb1b      	cbnz	r3, 800b78a <_svfiprintf_r+0x1b2>
 800b742:	9b03      	ldr	r3, [sp, #12]
 800b744:	3307      	adds	r3, #7
 800b746:	f023 0307 	bic.w	r3, r3, #7
 800b74a:	3308      	adds	r3, #8
 800b74c:	9303      	str	r3, [sp, #12]
 800b74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b750:	4433      	add	r3, r6
 800b752:	9309      	str	r3, [sp, #36]	; 0x24
 800b754:	e767      	b.n	800b626 <_svfiprintf_r+0x4e>
 800b756:	fb0c 3202 	mla	r2, ip, r2, r3
 800b75a:	460c      	mov	r4, r1
 800b75c:	2001      	movs	r0, #1
 800b75e:	e7a5      	b.n	800b6ac <_svfiprintf_r+0xd4>
 800b760:	2300      	movs	r3, #0
 800b762:	3401      	adds	r4, #1
 800b764:	9305      	str	r3, [sp, #20]
 800b766:	4619      	mov	r1, r3
 800b768:	f04f 0c0a 	mov.w	ip, #10
 800b76c:	4620      	mov	r0, r4
 800b76e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b772:	3a30      	subs	r2, #48	; 0x30
 800b774:	2a09      	cmp	r2, #9
 800b776:	d903      	bls.n	800b780 <_svfiprintf_r+0x1a8>
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d0c5      	beq.n	800b708 <_svfiprintf_r+0x130>
 800b77c:	9105      	str	r1, [sp, #20]
 800b77e:	e7c3      	b.n	800b708 <_svfiprintf_r+0x130>
 800b780:	fb0c 2101 	mla	r1, ip, r1, r2
 800b784:	4604      	mov	r4, r0
 800b786:	2301      	movs	r3, #1
 800b788:	e7f0      	b.n	800b76c <_svfiprintf_r+0x194>
 800b78a:	ab03      	add	r3, sp, #12
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	462a      	mov	r2, r5
 800b790:	4b0f      	ldr	r3, [pc, #60]	; (800b7d0 <_svfiprintf_r+0x1f8>)
 800b792:	a904      	add	r1, sp, #16
 800b794:	4638      	mov	r0, r7
 800b796:	f7fd ffd9 	bl	800974c <_printf_float>
 800b79a:	1c42      	adds	r2, r0, #1
 800b79c:	4606      	mov	r6, r0
 800b79e:	d1d6      	bne.n	800b74e <_svfiprintf_r+0x176>
 800b7a0:	89ab      	ldrh	r3, [r5, #12]
 800b7a2:	065b      	lsls	r3, r3, #25
 800b7a4:	f53f af2c 	bmi.w	800b600 <_svfiprintf_r+0x28>
 800b7a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7aa:	b01d      	add	sp, #116	; 0x74
 800b7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b0:	ab03      	add	r3, sp, #12
 800b7b2:	9300      	str	r3, [sp, #0]
 800b7b4:	462a      	mov	r2, r5
 800b7b6:	4b06      	ldr	r3, [pc, #24]	; (800b7d0 <_svfiprintf_r+0x1f8>)
 800b7b8:	a904      	add	r1, sp, #16
 800b7ba:	4638      	mov	r0, r7
 800b7bc:	f7fe fa6a 	bl	8009c94 <_printf_i>
 800b7c0:	e7eb      	b.n	800b79a <_svfiprintf_r+0x1c2>
 800b7c2:	bf00      	nop
 800b7c4:	0800c954 	.word	0x0800c954
 800b7c8:	0800c95e 	.word	0x0800c95e
 800b7cc:	0800974d 	.word	0x0800974d
 800b7d0:	0800b521 	.word	0x0800b521
 800b7d4:	0800c95a 	.word	0x0800c95a

0800b7d8 <_sbrk_r>:
 800b7d8:	b538      	push	{r3, r4, r5, lr}
 800b7da:	4d06      	ldr	r5, [pc, #24]	; (800b7f4 <_sbrk_r+0x1c>)
 800b7dc:	2300      	movs	r3, #0
 800b7de:	4604      	mov	r4, r0
 800b7e0:	4608      	mov	r0, r1
 800b7e2:	602b      	str	r3, [r5, #0]
 800b7e4:	f7f6 fd76 	bl	80022d4 <_sbrk>
 800b7e8:	1c43      	adds	r3, r0, #1
 800b7ea:	d102      	bne.n	800b7f2 <_sbrk_r+0x1a>
 800b7ec:	682b      	ldr	r3, [r5, #0]
 800b7ee:	b103      	cbz	r3, 800b7f2 <_sbrk_r+0x1a>
 800b7f0:	6023      	str	r3, [r4, #0]
 800b7f2:	bd38      	pop	{r3, r4, r5, pc}
 800b7f4:	20004bb0 	.word	0x20004bb0

0800b7f8 <__assert_func>:
 800b7f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7fa:	4614      	mov	r4, r2
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	4b09      	ldr	r3, [pc, #36]	; (800b824 <__assert_func+0x2c>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4605      	mov	r5, r0
 800b804:	68d8      	ldr	r0, [r3, #12]
 800b806:	b14c      	cbz	r4, 800b81c <__assert_func+0x24>
 800b808:	4b07      	ldr	r3, [pc, #28]	; (800b828 <__assert_func+0x30>)
 800b80a:	9100      	str	r1, [sp, #0]
 800b80c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b810:	4906      	ldr	r1, [pc, #24]	; (800b82c <__assert_func+0x34>)
 800b812:	462b      	mov	r3, r5
 800b814:	f000 f80e 	bl	800b834 <fiprintf>
 800b818:	f000 faac 	bl	800bd74 <abort>
 800b81c:	4b04      	ldr	r3, [pc, #16]	; (800b830 <__assert_func+0x38>)
 800b81e:	461c      	mov	r4, r3
 800b820:	e7f3      	b.n	800b80a <__assert_func+0x12>
 800b822:	bf00      	nop
 800b824:	20000010 	.word	0x20000010
 800b828:	0800c965 	.word	0x0800c965
 800b82c:	0800c972 	.word	0x0800c972
 800b830:	0800c9a0 	.word	0x0800c9a0

0800b834 <fiprintf>:
 800b834:	b40e      	push	{r1, r2, r3}
 800b836:	b503      	push	{r0, r1, lr}
 800b838:	4601      	mov	r1, r0
 800b83a:	ab03      	add	r3, sp, #12
 800b83c:	4805      	ldr	r0, [pc, #20]	; (800b854 <fiprintf+0x20>)
 800b83e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b842:	6800      	ldr	r0, [r0, #0]
 800b844:	9301      	str	r3, [sp, #4]
 800b846:	f000 f897 	bl	800b978 <_vfiprintf_r>
 800b84a:	b002      	add	sp, #8
 800b84c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b850:	b003      	add	sp, #12
 800b852:	4770      	bx	lr
 800b854:	20000010 	.word	0x20000010

0800b858 <__ascii_mbtowc>:
 800b858:	b082      	sub	sp, #8
 800b85a:	b901      	cbnz	r1, 800b85e <__ascii_mbtowc+0x6>
 800b85c:	a901      	add	r1, sp, #4
 800b85e:	b142      	cbz	r2, 800b872 <__ascii_mbtowc+0x1a>
 800b860:	b14b      	cbz	r3, 800b876 <__ascii_mbtowc+0x1e>
 800b862:	7813      	ldrb	r3, [r2, #0]
 800b864:	600b      	str	r3, [r1, #0]
 800b866:	7812      	ldrb	r2, [r2, #0]
 800b868:	1e10      	subs	r0, r2, #0
 800b86a:	bf18      	it	ne
 800b86c:	2001      	movne	r0, #1
 800b86e:	b002      	add	sp, #8
 800b870:	4770      	bx	lr
 800b872:	4610      	mov	r0, r2
 800b874:	e7fb      	b.n	800b86e <__ascii_mbtowc+0x16>
 800b876:	f06f 0001 	mvn.w	r0, #1
 800b87a:	e7f8      	b.n	800b86e <__ascii_mbtowc+0x16>

0800b87c <memmove>:
 800b87c:	4288      	cmp	r0, r1
 800b87e:	b510      	push	{r4, lr}
 800b880:	eb01 0402 	add.w	r4, r1, r2
 800b884:	d902      	bls.n	800b88c <memmove+0x10>
 800b886:	4284      	cmp	r4, r0
 800b888:	4623      	mov	r3, r4
 800b88a:	d807      	bhi.n	800b89c <memmove+0x20>
 800b88c:	1e43      	subs	r3, r0, #1
 800b88e:	42a1      	cmp	r1, r4
 800b890:	d008      	beq.n	800b8a4 <memmove+0x28>
 800b892:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b896:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b89a:	e7f8      	b.n	800b88e <memmove+0x12>
 800b89c:	4402      	add	r2, r0
 800b89e:	4601      	mov	r1, r0
 800b8a0:	428a      	cmp	r2, r1
 800b8a2:	d100      	bne.n	800b8a6 <memmove+0x2a>
 800b8a4:	bd10      	pop	{r4, pc}
 800b8a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8ae:	e7f7      	b.n	800b8a0 <memmove+0x24>

0800b8b0 <__malloc_lock>:
 800b8b0:	4801      	ldr	r0, [pc, #4]	; (800b8b8 <__malloc_lock+0x8>)
 800b8b2:	f000 bc1f 	b.w	800c0f4 <__retarget_lock_acquire_recursive>
 800b8b6:	bf00      	nop
 800b8b8:	20004bb4 	.word	0x20004bb4

0800b8bc <__malloc_unlock>:
 800b8bc:	4801      	ldr	r0, [pc, #4]	; (800b8c4 <__malloc_unlock+0x8>)
 800b8be:	f000 bc1a 	b.w	800c0f6 <__retarget_lock_release_recursive>
 800b8c2:	bf00      	nop
 800b8c4:	20004bb4 	.word	0x20004bb4

0800b8c8 <_realloc_r>:
 800b8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8cc:	4680      	mov	r8, r0
 800b8ce:	4614      	mov	r4, r2
 800b8d0:	460e      	mov	r6, r1
 800b8d2:	b921      	cbnz	r1, 800b8de <_realloc_r+0x16>
 800b8d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d8:	4611      	mov	r1, r2
 800b8da:	f7ff bdad 	b.w	800b438 <_malloc_r>
 800b8de:	b92a      	cbnz	r2, 800b8ec <_realloc_r+0x24>
 800b8e0:	f7ff fd3e 	bl	800b360 <_free_r>
 800b8e4:	4625      	mov	r5, r4
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ec:	f000 fc6a 	bl	800c1c4 <_malloc_usable_size_r>
 800b8f0:	4284      	cmp	r4, r0
 800b8f2:	4607      	mov	r7, r0
 800b8f4:	d802      	bhi.n	800b8fc <_realloc_r+0x34>
 800b8f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b8fa:	d812      	bhi.n	800b922 <_realloc_r+0x5a>
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	4640      	mov	r0, r8
 800b900:	f7ff fd9a 	bl	800b438 <_malloc_r>
 800b904:	4605      	mov	r5, r0
 800b906:	2800      	cmp	r0, #0
 800b908:	d0ed      	beq.n	800b8e6 <_realloc_r+0x1e>
 800b90a:	42bc      	cmp	r4, r7
 800b90c:	4622      	mov	r2, r4
 800b90e:	4631      	mov	r1, r6
 800b910:	bf28      	it	cs
 800b912:	463a      	movcs	r2, r7
 800b914:	f7fd fe64 	bl	80095e0 <memcpy>
 800b918:	4631      	mov	r1, r6
 800b91a:	4640      	mov	r0, r8
 800b91c:	f7ff fd20 	bl	800b360 <_free_r>
 800b920:	e7e1      	b.n	800b8e6 <_realloc_r+0x1e>
 800b922:	4635      	mov	r5, r6
 800b924:	e7df      	b.n	800b8e6 <_realloc_r+0x1e>

0800b926 <__sfputc_r>:
 800b926:	6893      	ldr	r3, [r2, #8]
 800b928:	3b01      	subs	r3, #1
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	b410      	push	{r4}
 800b92e:	6093      	str	r3, [r2, #8]
 800b930:	da08      	bge.n	800b944 <__sfputc_r+0x1e>
 800b932:	6994      	ldr	r4, [r2, #24]
 800b934:	42a3      	cmp	r3, r4
 800b936:	db01      	blt.n	800b93c <__sfputc_r+0x16>
 800b938:	290a      	cmp	r1, #10
 800b93a:	d103      	bne.n	800b944 <__sfputc_r+0x1e>
 800b93c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b940:	f000 b94a 	b.w	800bbd8 <__swbuf_r>
 800b944:	6813      	ldr	r3, [r2, #0]
 800b946:	1c58      	adds	r0, r3, #1
 800b948:	6010      	str	r0, [r2, #0]
 800b94a:	7019      	strb	r1, [r3, #0]
 800b94c:	4608      	mov	r0, r1
 800b94e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <__sfputs_r>:
 800b954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b956:	4606      	mov	r6, r0
 800b958:	460f      	mov	r7, r1
 800b95a:	4614      	mov	r4, r2
 800b95c:	18d5      	adds	r5, r2, r3
 800b95e:	42ac      	cmp	r4, r5
 800b960:	d101      	bne.n	800b966 <__sfputs_r+0x12>
 800b962:	2000      	movs	r0, #0
 800b964:	e007      	b.n	800b976 <__sfputs_r+0x22>
 800b966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b96a:	463a      	mov	r2, r7
 800b96c:	4630      	mov	r0, r6
 800b96e:	f7ff ffda 	bl	800b926 <__sfputc_r>
 800b972:	1c43      	adds	r3, r0, #1
 800b974:	d1f3      	bne.n	800b95e <__sfputs_r+0xa>
 800b976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b978 <_vfiprintf_r>:
 800b978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b97c:	460d      	mov	r5, r1
 800b97e:	b09d      	sub	sp, #116	; 0x74
 800b980:	4614      	mov	r4, r2
 800b982:	4698      	mov	r8, r3
 800b984:	4606      	mov	r6, r0
 800b986:	b118      	cbz	r0, 800b990 <_vfiprintf_r+0x18>
 800b988:	6983      	ldr	r3, [r0, #24]
 800b98a:	b90b      	cbnz	r3, 800b990 <_vfiprintf_r+0x18>
 800b98c:	f000 fb14 	bl	800bfb8 <__sinit>
 800b990:	4b89      	ldr	r3, [pc, #548]	; (800bbb8 <_vfiprintf_r+0x240>)
 800b992:	429d      	cmp	r5, r3
 800b994:	d11b      	bne.n	800b9ce <_vfiprintf_r+0x56>
 800b996:	6875      	ldr	r5, [r6, #4]
 800b998:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b99a:	07d9      	lsls	r1, r3, #31
 800b99c:	d405      	bmi.n	800b9aa <_vfiprintf_r+0x32>
 800b99e:	89ab      	ldrh	r3, [r5, #12]
 800b9a0:	059a      	lsls	r2, r3, #22
 800b9a2:	d402      	bmi.n	800b9aa <_vfiprintf_r+0x32>
 800b9a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9a6:	f000 fba5 	bl	800c0f4 <__retarget_lock_acquire_recursive>
 800b9aa:	89ab      	ldrh	r3, [r5, #12]
 800b9ac:	071b      	lsls	r3, r3, #28
 800b9ae:	d501      	bpl.n	800b9b4 <_vfiprintf_r+0x3c>
 800b9b0:	692b      	ldr	r3, [r5, #16]
 800b9b2:	b9eb      	cbnz	r3, 800b9f0 <_vfiprintf_r+0x78>
 800b9b4:	4629      	mov	r1, r5
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	f000 f96e 	bl	800bc98 <__swsetup_r>
 800b9bc:	b1c0      	cbz	r0, 800b9f0 <_vfiprintf_r+0x78>
 800b9be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9c0:	07dc      	lsls	r4, r3, #31
 800b9c2:	d50e      	bpl.n	800b9e2 <_vfiprintf_r+0x6a>
 800b9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c8:	b01d      	add	sp, #116	; 0x74
 800b9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ce:	4b7b      	ldr	r3, [pc, #492]	; (800bbbc <_vfiprintf_r+0x244>)
 800b9d0:	429d      	cmp	r5, r3
 800b9d2:	d101      	bne.n	800b9d8 <_vfiprintf_r+0x60>
 800b9d4:	68b5      	ldr	r5, [r6, #8]
 800b9d6:	e7df      	b.n	800b998 <_vfiprintf_r+0x20>
 800b9d8:	4b79      	ldr	r3, [pc, #484]	; (800bbc0 <_vfiprintf_r+0x248>)
 800b9da:	429d      	cmp	r5, r3
 800b9dc:	bf08      	it	eq
 800b9de:	68f5      	ldreq	r5, [r6, #12]
 800b9e0:	e7da      	b.n	800b998 <_vfiprintf_r+0x20>
 800b9e2:	89ab      	ldrh	r3, [r5, #12]
 800b9e4:	0598      	lsls	r0, r3, #22
 800b9e6:	d4ed      	bmi.n	800b9c4 <_vfiprintf_r+0x4c>
 800b9e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9ea:	f000 fb84 	bl	800c0f6 <__retarget_lock_release_recursive>
 800b9ee:	e7e9      	b.n	800b9c4 <_vfiprintf_r+0x4c>
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b9f4:	2320      	movs	r3, #32
 800b9f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9fe:	2330      	movs	r3, #48	; 0x30
 800ba00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bbc4 <_vfiprintf_r+0x24c>
 800ba04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba08:	f04f 0901 	mov.w	r9, #1
 800ba0c:	4623      	mov	r3, r4
 800ba0e:	469a      	mov	sl, r3
 800ba10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba14:	b10a      	cbz	r2, 800ba1a <_vfiprintf_r+0xa2>
 800ba16:	2a25      	cmp	r2, #37	; 0x25
 800ba18:	d1f9      	bne.n	800ba0e <_vfiprintf_r+0x96>
 800ba1a:	ebba 0b04 	subs.w	fp, sl, r4
 800ba1e:	d00b      	beq.n	800ba38 <_vfiprintf_r+0xc0>
 800ba20:	465b      	mov	r3, fp
 800ba22:	4622      	mov	r2, r4
 800ba24:	4629      	mov	r1, r5
 800ba26:	4630      	mov	r0, r6
 800ba28:	f7ff ff94 	bl	800b954 <__sfputs_r>
 800ba2c:	3001      	adds	r0, #1
 800ba2e:	f000 80aa 	beq.w	800bb86 <_vfiprintf_r+0x20e>
 800ba32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba34:	445a      	add	r2, fp
 800ba36:	9209      	str	r2, [sp, #36]	; 0x24
 800ba38:	f89a 3000 	ldrb.w	r3, [sl]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f000 80a2 	beq.w	800bb86 <_vfiprintf_r+0x20e>
 800ba42:	2300      	movs	r3, #0
 800ba44:	f04f 32ff 	mov.w	r2, #4294967295
 800ba48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba4c:	f10a 0a01 	add.w	sl, sl, #1
 800ba50:	9304      	str	r3, [sp, #16]
 800ba52:	9307      	str	r3, [sp, #28]
 800ba54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba58:	931a      	str	r3, [sp, #104]	; 0x68
 800ba5a:	4654      	mov	r4, sl
 800ba5c:	2205      	movs	r2, #5
 800ba5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba62:	4858      	ldr	r0, [pc, #352]	; (800bbc4 <_vfiprintf_r+0x24c>)
 800ba64:	f7f4 fbc4 	bl	80001f0 <memchr>
 800ba68:	9a04      	ldr	r2, [sp, #16]
 800ba6a:	b9d8      	cbnz	r0, 800baa4 <_vfiprintf_r+0x12c>
 800ba6c:	06d1      	lsls	r1, r2, #27
 800ba6e:	bf44      	itt	mi
 800ba70:	2320      	movmi	r3, #32
 800ba72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba76:	0713      	lsls	r3, r2, #28
 800ba78:	bf44      	itt	mi
 800ba7a:	232b      	movmi	r3, #43	; 0x2b
 800ba7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba80:	f89a 3000 	ldrb.w	r3, [sl]
 800ba84:	2b2a      	cmp	r3, #42	; 0x2a
 800ba86:	d015      	beq.n	800bab4 <_vfiprintf_r+0x13c>
 800ba88:	9a07      	ldr	r2, [sp, #28]
 800ba8a:	4654      	mov	r4, sl
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	f04f 0c0a 	mov.w	ip, #10
 800ba92:	4621      	mov	r1, r4
 800ba94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba98:	3b30      	subs	r3, #48	; 0x30
 800ba9a:	2b09      	cmp	r3, #9
 800ba9c:	d94e      	bls.n	800bb3c <_vfiprintf_r+0x1c4>
 800ba9e:	b1b0      	cbz	r0, 800bace <_vfiprintf_r+0x156>
 800baa0:	9207      	str	r2, [sp, #28]
 800baa2:	e014      	b.n	800bace <_vfiprintf_r+0x156>
 800baa4:	eba0 0308 	sub.w	r3, r0, r8
 800baa8:	fa09 f303 	lsl.w	r3, r9, r3
 800baac:	4313      	orrs	r3, r2
 800baae:	9304      	str	r3, [sp, #16]
 800bab0:	46a2      	mov	sl, r4
 800bab2:	e7d2      	b.n	800ba5a <_vfiprintf_r+0xe2>
 800bab4:	9b03      	ldr	r3, [sp, #12]
 800bab6:	1d19      	adds	r1, r3, #4
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	9103      	str	r1, [sp, #12]
 800babc:	2b00      	cmp	r3, #0
 800babe:	bfbb      	ittet	lt
 800bac0:	425b      	neglt	r3, r3
 800bac2:	f042 0202 	orrlt.w	r2, r2, #2
 800bac6:	9307      	strge	r3, [sp, #28]
 800bac8:	9307      	strlt	r3, [sp, #28]
 800baca:	bfb8      	it	lt
 800bacc:	9204      	strlt	r2, [sp, #16]
 800bace:	7823      	ldrb	r3, [r4, #0]
 800bad0:	2b2e      	cmp	r3, #46	; 0x2e
 800bad2:	d10c      	bne.n	800baee <_vfiprintf_r+0x176>
 800bad4:	7863      	ldrb	r3, [r4, #1]
 800bad6:	2b2a      	cmp	r3, #42	; 0x2a
 800bad8:	d135      	bne.n	800bb46 <_vfiprintf_r+0x1ce>
 800bada:	9b03      	ldr	r3, [sp, #12]
 800badc:	1d1a      	adds	r2, r3, #4
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	9203      	str	r2, [sp, #12]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	bfb8      	it	lt
 800bae6:	f04f 33ff 	movlt.w	r3, #4294967295
 800baea:	3402      	adds	r4, #2
 800baec:	9305      	str	r3, [sp, #20]
 800baee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bbd4 <_vfiprintf_r+0x25c>
 800baf2:	7821      	ldrb	r1, [r4, #0]
 800baf4:	2203      	movs	r2, #3
 800baf6:	4650      	mov	r0, sl
 800baf8:	f7f4 fb7a 	bl	80001f0 <memchr>
 800bafc:	b140      	cbz	r0, 800bb10 <_vfiprintf_r+0x198>
 800bafe:	2340      	movs	r3, #64	; 0x40
 800bb00:	eba0 000a 	sub.w	r0, r0, sl
 800bb04:	fa03 f000 	lsl.w	r0, r3, r0
 800bb08:	9b04      	ldr	r3, [sp, #16]
 800bb0a:	4303      	orrs	r3, r0
 800bb0c:	3401      	adds	r4, #1
 800bb0e:	9304      	str	r3, [sp, #16]
 800bb10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb14:	482c      	ldr	r0, [pc, #176]	; (800bbc8 <_vfiprintf_r+0x250>)
 800bb16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb1a:	2206      	movs	r2, #6
 800bb1c:	f7f4 fb68 	bl	80001f0 <memchr>
 800bb20:	2800      	cmp	r0, #0
 800bb22:	d03f      	beq.n	800bba4 <_vfiprintf_r+0x22c>
 800bb24:	4b29      	ldr	r3, [pc, #164]	; (800bbcc <_vfiprintf_r+0x254>)
 800bb26:	bb1b      	cbnz	r3, 800bb70 <_vfiprintf_r+0x1f8>
 800bb28:	9b03      	ldr	r3, [sp, #12]
 800bb2a:	3307      	adds	r3, #7
 800bb2c:	f023 0307 	bic.w	r3, r3, #7
 800bb30:	3308      	adds	r3, #8
 800bb32:	9303      	str	r3, [sp, #12]
 800bb34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb36:	443b      	add	r3, r7
 800bb38:	9309      	str	r3, [sp, #36]	; 0x24
 800bb3a:	e767      	b.n	800ba0c <_vfiprintf_r+0x94>
 800bb3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb40:	460c      	mov	r4, r1
 800bb42:	2001      	movs	r0, #1
 800bb44:	e7a5      	b.n	800ba92 <_vfiprintf_r+0x11a>
 800bb46:	2300      	movs	r3, #0
 800bb48:	3401      	adds	r4, #1
 800bb4a:	9305      	str	r3, [sp, #20]
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	f04f 0c0a 	mov.w	ip, #10
 800bb52:	4620      	mov	r0, r4
 800bb54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb58:	3a30      	subs	r2, #48	; 0x30
 800bb5a:	2a09      	cmp	r2, #9
 800bb5c:	d903      	bls.n	800bb66 <_vfiprintf_r+0x1ee>
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d0c5      	beq.n	800baee <_vfiprintf_r+0x176>
 800bb62:	9105      	str	r1, [sp, #20]
 800bb64:	e7c3      	b.n	800baee <_vfiprintf_r+0x176>
 800bb66:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	e7f0      	b.n	800bb52 <_vfiprintf_r+0x1da>
 800bb70:	ab03      	add	r3, sp, #12
 800bb72:	9300      	str	r3, [sp, #0]
 800bb74:	462a      	mov	r2, r5
 800bb76:	4b16      	ldr	r3, [pc, #88]	; (800bbd0 <_vfiprintf_r+0x258>)
 800bb78:	a904      	add	r1, sp, #16
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	f7fd fde6 	bl	800974c <_printf_float>
 800bb80:	4607      	mov	r7, r0
 800bb82:	1c78      	adds	r0, r7, #1
 800bb84:	d1d6      	bne.n	800bb34 <_vfiprintf_r+0x1bc>
 800bb86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb88:	07d9      	lsls	r1, r3, #31
 800bb8a:	d405      	bmi.n	800bb98 <_vfiprintf_r+0x220>
 800bb8c:	89ab      	ldrh	r3, [r5, #12]
 800bb8e:	059a      	lsls	r2, r3, #22
 800bb90:	d402      	bmi.n	800bb98 <_vfiprintf_r+0x220>
 800bb92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb94:	f000 faaf 	bl	800c0f6 <__retarget_lock_release_recursive>
 800bb98:	89ab      	ldrh	r3, [r5, #12]
 800bb9a:	065b      	lsls	r3, r3, #25
 800bb9c:	f53f af12 	bmi.w	800b9c4 <_vfiprintf_r+0x4c>
 800bba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bba2:	e711      	b.n	800b9c8 <_vfiprintf_r+0x50>
 800bba4:	ab03      	add	r3, sp, #12
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	462a      	mov	r2, r5
 800bbaa:	4b09      	ldr	r3, [pc, #36]	; (800bbd0 <_vfiprintf_r+0x258>)
 800bbac:	a904      	add	r1, sp, #16
 800bbae:	4630      	mov	r0, r6
 800bbb0:	f7fe f870 	bl	8009c94 <_printf_i>
 800bbb4:	e7e4      	b.n	800bb80 <_vfiprintf_r+0x208>
 800bbb6:	bf00      	nop
 800bbb8:	0800cacc 	.word	0x0800cacc
 800bbbc:	0800caec 	.word	0x0800caec
 800bbc0:	0800caac 	.word	0x0800caac
 800bbc4:	0800c954 	.word	0x0800c954
 800bbc8:	0800c95e 	.word	0x0800c95e
 800bbcc:	0800974d 	.word	0x0800974d
 800bbd0:	0800b955 	.word	0x0800b955
 800bbd4:	0800c95a 	.word	0x0800c95a

0800bbd8 <__swbuf_r>:
 800bbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbda:	460e      	mov	r6, r1
 800bbdc:	4614      	mov	r4, r2
 800bbde:	4605      	mov	r5, r0
 800bbe0:	b118      	cbz	r0, 800bbea <__swbuf_r+0x12>
 800bbe2:	6983      	ldr	r3, [r0, #24]
 800bbe4:	b90b      	cbnz	r3, 800bbea <__swbuf_r+0x12>
 800bbe6:	f000 f9e7 	bl	800bfb8 <__sinit>
 800bbea:	4b21      	ldr	r3, [pc, #132]	; (800bc70 <__swbuf_r+0x98>)
 800bbec:	429c      	cmp	r4, r3
 800bbee:	d12b      	bne.n	800bc48 <__swbuf_r+0x70>
 800bbf0:	686c      	ldr	r4, [r5, #4]
 800bbf2:	69a3      	ldr	r3, [r4, #24]
 800bbf4:	60a3      	str	r3, [r4, #8]
 800bbf6:	89a3      	ldrh	r3, [r4, #12]
 800bbf8:	071a      	lsls	r2, r3, #28
 800bbfa:	d52f      	bpl.n	800bc5c <__swbuf_r+0x84>
 800bbfc:	6923      	ldr	r3, [r4, #16]
 800bbfe:	b36b      	cbz	r3, 800bc5c <__swbuf_r+0x84>
 800bc00:	6923      	ldr	r3, [r4, #16]
 800bc02:	6820      	ldr	r0, [r4, #0]
 800bc04:	1ac0      	subs	r0, r0, r3
 800bc06:	6963      	ldr	r3, [r4, #20]
 800bc08:	b2f6      	uxtb	r6, r6
 800bc0a:	4283      	cmp	r3, r0
 800bc0c:	4637      	mov	r7, r6
 800bc0e:	dc04      	bgt.n	800bc1a <__swbuf_r+0x42>
 800bc10:	4621      	mov	r1, r4
 800bc12:	4628      	mov	r0, r5
 800bc14:	f000 f93c 	bl	800be90 <_fflush_r>
 800bc18:	bb30      	cbnz	r0, 800bc68 <__swbuf_r+0x90>
 800bc1a:	68a3      	ldr	r3, [r4, #8]
 800bc1c:	3b01      	subs	r3, #1
 800bc1e:	60a3      	str	r3, [r4, #8]
 800bc20:	6823      	ldr	r3, [r4, #0]
 800bc22:	1c5a      	adds	r2, r3, #1
 800bc24:	6022      	str	r2, [r4, #0]
 800bc26:	701e      	strb	r6, [r3, #0]
 800bc28:	6963      	ldr	r3, [r4, #20]
 800bc2a:	3001      	adds	r0, #1
 800bc2c:	4283      	cmp	r3, r0
 800bc2e:	d004      	beq.n	800bc3a <__swbuf_r+0x62>
 800bc30:	89a3      	ldrh	r3, [r4, #12]
 800bc32:	07db      	lsls	r3, r3, #31
 800bc34:	d506      	bpl.n	800bc44 <__swbuf_r+0x6c>
 800bc36:	2e0a      	cmp	r6, #10
 800bc38:	d104      	bne.n	800bc44 <__swbuf_r+0x6c>
 800bc3a:	4621      	mov	r1, r4
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	f000 f927 	bl	800be90 <_fflush_r>
 800bc42:	b988      	cbnz	r0, 800bc68 <__swbuf_r+0x90>
 800bc44:	4638      	mov	r0, r7
 800bc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc48:	4b0a      	ldr	r3, [pc, #40]	; (800bc74 <__swbuf_r+0x9c>)
 800bc4a:	429c      	cmp	r4, r3
 800bc4c:	d101      	bne.n	800bc52 <__swbuf_r+0x7a>
 800bc4e:	68ac      	ldr	r4, [r5, #8]
 800bc50:	e7cf      	b.n	800bbf2 <__swbuf_r+0x1a>
 800bc52:	4b09      	ldr	r3, [pc, #36]	; (800bc78 <__swbuf_r+0xa0>)
 800bc54:	429c      	cmp	r4, r3
 800bc56:	bf08      	it	eq
 800bc58:	68ec      	ldreq	r4, [r5, #12]
 800bc5a:	e7ca      	b.n	800bbf2 <__swbuf_r+0x1a>
 800bc5c:	4621      	mov	r1, r4
 800bc5e:	4628      	mov	r0, r5
 800bc60:	f000 f81a 	bl	800bc98 <__swsetup_r>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d0cb      	beq.n	800bc00 <__swbuf_r+0x28>
 800bc68:	f04f 37ff 	mov.w	r7, #4294967295
 800bc6c:	e7ea      	b.n	800bc44 <__swbuf_r+0x6c>
 800bc6e:	bf00      	nop
 800bc70:	0800cacc 	.word	0x0800cacc
 800bc74:	0800caec 	.word	0x0800caec
 800bc78:	0800caac 	.word	0x0800caac

0800bc7c <__ascii_wctomb>:
 800bc7c:	b149      	cbz	r1, 800bc92 <__ascii_wctomb+0x16>
 800bc7e:	2aff      	cmp	r2, #255	; 0xff
 800bc80:	bf85      	ittet	hi
 800bc82:	238a      	movhi	r3, #138	; 0x8a
 800bc84:	6003      	strhi	r3, [r0, #0]
 800bc86:	700a      	strbls	r2, [r1, #0]
 800bc88:	f04f 30ff 	movhi.w	r0, #4294967295
 800bc8c:	bf98      	it	ls
 800bc8e:	2001      	movls	r0, #1
 800bc90:	4770      	bx	lr
 800bc92:	4608      	mov	r0, r1
 800bc94:	4770      	bx	lr
	...

0800bc98 <__swsetup_r>:
 800bc98:	4b32      	ldr	r3, [pc, #200]	; (800bd64 <__swsetup_r+0xcc>)
 800bc9a:	b570      	push	{r4, r5, r6, lr}
 800bc9c:	681d      	ldr	r5, [r3, #0]
 800bc9e:	4606      	mov	r6, r0
 800bca0:	460c      	mov	r4, r1
 800bca2:	b125      	cbz	r5, 800bcae <__swsetup_r+0x16>
 800bca4:	69ab      	ldr	r3, [r5, #24]
 800bca6:	b913      	cbnz	r3, 800bcae <__swsetup_r+0x16>
 800bca8:	4628      	mov	r0, r5
 800bcaa:	f000 f985 	bl	800bfb8 <__sinit>
 800bcae:	4b2e      	ldr	r3, [pc, #184]	; (800bd68 <__swsetup_r+0xd0>)
 800bcb0:	429c      	cmp	r4, r3
 800bcb2:	d10f      	bne.n	800bcd4 <__swsetup_r+0x3c>
 800bcb4:	686c      	ldr	r4, [r5, #4]
 800bcb6:	89a3      	ldrh	r3, [r4, #12]
 800bcb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcbc:	0719      	lsls	r1, r3, #28
 800bcbe:	d42c      	bmi.n	800bd1a <__swsetup_r+0x82>
 800bcc0:	06dd      	lsls	r5, r3, #27
 800bcc2:	d411      	bmi.n	800bce8 <__swsetup_r+0x50>
 800bcc4:	2309      	movs	r3, #9
 800bcc6:	6033      	str	r3, [r6, #0]
 800bcc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bccc:	81a3      	strh	r3, [r4, #12]
 800bcce:	f04f 30ff 	mov.w	r0, #4294967295
 800bcd2:	e03e      	b.n	800bd52 <__swsetup_r+0xba>
 800bcd4:	4b25      	ldr	r3, [pc, #148]	; (800bd6c <__swsetup_r+0xd4>)
 800bcd6:	429c      	cmp	r4, r3
 800bcd8:	d101      	bne.n	800bcde <__swsetup_r+0x46>
 800bcda:	68ac      	ldr	r4, [r5, #8]
 800bcdc:	e7eb      	b.n	800bcb6 <__swsetup_r+0x1e>
 800bcde:	4b24      	ldr	r3, [pc, #144]	; (800bd70 <__swsetup_r+0xd8>)
 800bce0:	429c      	cmp	r4, r3
 800bce2:	bf08      	it	eq
 800bce4:	68ec      	ldreq	r4, [r5, #12]
 800bce6:	e7e6      	b.n	800bcb6 <__swsetup_r+0x1e>
 800bce8:	0758      	lsls	r0, r3, #29
 800bcea:	d512      	bpl.n	800bd12 <__swsetup_r+0x7a>
 800bcec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcee:	b141      	cbz	r1, 800bd02 <__swsetup_r+0x6a>
 800bcf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcf4:	4299      	cmp	r1, r3
 800bcf6:	d002      	beq.n	800bcfe <__swsetup_r+0x66>
 800bcf8:	4630      	mov	r0, r6
 800bcfa:	f7ff fb31 	bl	800b360 <_free_r>
 800bcfe:	2300      	movs	r3, #0
 800bd00:	6363      	str	r3, [r4, #52]	; 0x34
 800bd02:	89a3      	ldrh	r3, [r4, #12]
 800bd04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd08:	81a3      	strh	r3, [r4, #12]
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	6063      	str	r3, [r4, #4]
 800bd0e:	6923      	ldr	r3, [r4, #16]
 800bd10:	6023      	str	r3, [r4, #0]
 800bd12:	89a3      	ldrh	r3, [r4, #12]
 800bd14:	f043 0308 	orr.w	r3, r3, #8
 800bd18:	81a3      	strh	r3, [r4, #12]
 800bd1a:	6923      	ldr	r3, [r4, #16]
 800bd1c:	b94b      	cbnz	r3, 800bd32 <__swsetup_r+0x9a>
 800bd1e:	89a3      	ldrh	r3, [r4, #12]
 800bd20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd28:	d003      	beq.n	800bd32 <__swsetup_r+0x9a>
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	f000 fa09 	bl	800c144 <__smakebuf_r>
 800bd32:	89a0      	ldrh	r0, [r4, #12]
 800bd34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd38:	f010 0301 	ands.w	r3, r0, #1
 800bd3c:	d00a      	beq.n	800bd54 <__swsetup_r+0xbc>
 800bd3e:	2300      	movs	r3, #0
 800bd40:	60a3      	str	r3, [r4, #8]
 800bd42:	6963      	ldr	r3, [r4, #20]
 800bd44:	425b      	negs	r3, r3
 800bd46:	61a3      	str	r3, [r4, #24]
 800bd48:	6923      	ldr	r3, [r4, #16]
 800bd4a:	b943      	cbnz	r3, 800bd5e <__swsetup_r+0xc6>
 800bd4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd50:	d1ba      	bne.n	800bcc8 <__swsetup_r+0x30>
 800bd52:	bd70      	pop	{r4, r5, r6, pc}
 800bd54:	0781      	lsls	r1, r0, #30
 800bd56:	bf58      	it	pl
 800bd58:	6963      	ldrpl	r3, [r4, #20]
 800bd5a:	60a3      	str	r3, [r4, #8]
 800bd5c:	e7f4      	b.n	800bd48 <__swsetup_r+0xb0>
 800bd5e:	2000      	movs	r0, #0
 800bd60:	e7f7      	b.n	800bd52 <__swsetup_r+0xba>
 800bd62:	bf00      	nop
 800bd64:	20000010 	.word	0x20000010
 800bd68:	0800cacc 	.word	0x0800cacc
 800bd6c:	0800caec 	.word	0x0800caec
 800bd70:	0800caac 	.word	0x0800caac

0800bd74 <abort>:
 800bd74:	b508      	push	{r3, lr}
 800bd76:	2006      	movs	r0, #6
 800bd78:	f000 fa54 	bl	800c224 <raise>
 800bd7c:	2001      	movs	r0, #1
 800bd7e:	f7f6 fa31 	bl	80021e4 <_exit>
	...

0800bd84 <__sflush_r>:
 800bd84:	898a      	ldrh	r2, [r1, #12]
 800bd86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd8a:	4605      	mov	r5, r0
 800bd8c:	0710      	lsls	r0, r2, #28
 800bd8e:	460c      	mov	r4, r1
 800bd90:	d458      	bmi.n	800be44 <__sflush_r+0xc0>
 800bd92:	684b      	ldr	r3, [r1, #4]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	dc05      	bgt.n	800bda4 <__sflush_r+0x20>
 800bd98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	dc02      	bgt.n	800bda4 <__sflush_r+0x20>
 800bd9e:	2000      	movs	r0, #0
 800bda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bda6:	2e00      	cmp	r6, #0
 800bda8:	d0f9      	beq.n	800bd9e <__sflush_r+0x1a>
 800bdaa:	2300      	movs	r3, #0
 800bdac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bdb0:	682f      	ldr	r7, [r5, #0]
 800bdb2:	602b      	str	r3, [r5, #0]
 800bdb4:	d032      	beq.n	800be1c <__sflush_r+0x98>
 800bdb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bdb8:	89a3      	ldrh	r3, [r4, #12]
 800bdba:	075a      	lsls	r2, r3, #29
 800bdbc:	d505      	bpl.n	800bdca <__sflush_r+0x46>
 800bdbe:	6863      	ldr	r3, [r4, #4]
 800bdc0:	1ac0      	subs	r0, r0, r3
 800bdc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bdc4:	b10b      	cbz	r3, 800bdca <__sflush_r+0x46>
 800bdc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bdc8:	1ac0      	subs	r0, r0, r3
 800bdca:	2300      	movs	r3, #0
 800bdcc:	4602      	mov	r2, r0
 800bdce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdd0:	6a21      	ldr	r1, [r4, #32]
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	47b0      	blx	r6
 800bdd6:	1c43      	adds	r3, r0, #1
 800bdd8:	89a3      	ldrh	r3, [r4, #12]
 800bdda:	d106      	bne.n	800bdea <__sflush_r+0x66>
 800bddc:	6829      	ldr	r1, [r5, #0]
 800bdde:	291d      	cmp	r1, #29
 800bde0:	d82c      	bhi.n	800be3c <__sflush_r+0xb8>
 800bde2:	4a2a      	ldr	r2, [pc, #168]	; (800be8c <__sflush_r+0x108>)
 800bde4:	40ca      	lsrs	r2, r1
 800bde6:	07d6      	lsls	r6, r2, #31
 800bde8:	d528      	bpl.n	800be3c <__sflush_r+0xb8>
 800bdea:	2200      	movs	r2, #0
 800bdec:	6062      	str	r2, [r4, #4]
 800bdee:	04d9      	lsls	r1, r3, #19
 800bdf0:	6922      	ldr	r2, [r4, #16]
 800bdf2:	6022      	str	r2, [r4, #0]
 800bdf4:	d504      	bpl.n	800be00 <__sflush_r+0x7c>
 800bdf6:	1c42      	adds	r2, r0, #1
 800bdf8:	d101      	bne.n	800bdfe <__sflush_r+0x7a>
 800bdfa:	682b      	ldr	r3, [r5, #0]
 800bdfc:	b903      	cbnz	r3, 800be00 <__sflush_r+0x7c>
 800bdfe:	6560      	str	r0, [r4, #84]	; 0x54
 800be00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be02:	602f      	str	r7, [r5, #0]
 800be04:	2900      	cmp	r1, #0
 800be06:	d0ca      	beq.n	800bd9e <__sflush_r+0x1a>
 800be08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be0c:	4299      	cmp	r1, r3
 800be0e:	d002      	beq.n	800be16 <__sflush_r+0x92>
 800be10:	4628      	mov	r0, r5
 800be12:	f7ff faa5 	bl	800b360 <_free_r>
 800be16:	2000      	movs	r0, #0
 800be18:	6360      	str	r0, [r4, #52]	; 0x34
 800be1a:	e7c1      	b.n	800bda0 <__sflush_r+0x1c>
 800be1c:	6a21      	ldr	r1, [r4, #32]
 800be1e:	2301      	movs	r3, #1
 800be20:	4628      	mov	r0, r5
 800be22:	47b0      	blx	r6
 800be24:	1c41      	adds	r1, r0, #1
 800be26:	d1c7      	bne.n	800bdb8 <__sflush_r+0x34>
 800be28:	682b      	ldr	r3, [r5, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d0c4      	beq.n	800bdb8 <__sflush_r+0x34>
 800be2e:	2b1d      	cmp	r3, #29
 800be30:	d001      	beq.n	800be36 <__sflush_r+0xb2>
 800be32:	2b16      	cmp	r3, #22
 800be34:	d101      	bne.n	800be3a <__sflush_r+0xb6>
 800be36:	602f      	str	r7, [r5, #0]
 800be38:	e7b1      	b.n	800bd9e <__sflush_r+0x1a>
 800be3a:	89a3      	ldrh	r3, [r4, #12]
 800be3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be40:	81a3      	strh	r3, [r4, #12]
 800be42:	e7ad      	b.n	800bda0 <__sflush_r+0x1c>
 800be44:	690f      	ldr	r7, [r1, #16]
 800be46:	2f00      	cmp	r7, #0
 800be48:	d0a9      	beq.n	800bd9e <__sflush_r+0x1a>
 800be4a:	0793      	lsls	r3, r2, #30
 800be4c:	680e      	ldr	r6, [r1, #0]
 800be4e:	bf08      	it	eq
 800be50:	694b      	ldreq	r3, [r1, #20]
 800be52:	600f      	str	r7, [r1, #0]
 800be54:	bf18      	it	ne
 800be56:	2300      	movne	r3, #0
 800be58:	eba6 0807 	sub.w	r8, r6, r7
 800be5c:	608b      	str	r3, [r1, #8]
 800be5e:	f1b8 0f00 	cmp.w	r8, #0
 800be62:	dd9c      	ble.n	800bd9e <__sflush_r+0x1a>
 800be64:	6a21      	ldr	r1, [r4, #32]
 800be66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be68:	4643      	mov	r3, r8
 800be6a:	463a      	mov	r2, r7
 800be6c:	4628      	mov	r0, r5
 800be6e:	47b0      	blx	r6
 800be70:	2800      	cmp	r0, #0
 800be72:	dc06      	bgt.n	800be82 <__sflush_r+0xfe>
 800be74:	89a3      	ldrh	r3, [r4, #12]
 800be76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be7a:	81a3      	strh	r3, [r4, #12]
 800be7c:	f04f 30ff 	mov.w	r0, #4294967295
 800be80:	e78e      	b.n	800bda0 <__sflush_r+0x1c>
 800be82:	4407      	add	r7, r0
 800be84:	eba8 0800 	sub.w	r8, r8, r0
 800be88:	e7e9      	b.n	800be5e <__sflush_r+0xda>
 800be8a:	bf00      	nop
 800be8c:	20400001 	.word	0x20400001

0800be90 <_fflush_r>:
 800be90:	b538      	push	{r3, r4, r5, lr}
 800be92:	690b      	ldr	r3, [r1, #16]
 800be94:	4605      	mov	r5, r0
 800be96:	460c      	mov	r4, r1
 800be98:	b913      	cbnz	r3, 800bea0 <_fflush_r+0x10>
 800be9a:	2500      	movs	r5, #0
 800be9c:	4628      	mov	r0, r5
 800be9e:	bd38      	pop	{r3, r4, r5, pc}
 800bea0:	b118      	cbz	r0, 800beaa <_fflush_r+0x1a>
 800bea2:	6983      	ldr	r3, [r0, #24]
 800bea4:	b90b      	cbnz	r3, 800beaa <_fflush_r+0x1a>
 800bea6:	f000 f887 	bl	800bfb8 <__sinit>
 800beaa:	4b14      	ldr	r3, [pc, #80]	; (800befc <_fflush_r+0x6c>)
 800beac:	429c      	cmp	r4, r3
 800beae:	d11b      	bne.n	800bee8 <_fflush_r+0x58>
 800beb0:	686c      	ldr	r4, [r5, #4]
 800beb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d0ef      	beq.n	800be9a <_fflush_r+0xa>
 800beba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bebc:	07d0      	lsls	r0, r2, #31
 800bebe:	d404      	bmi.n	800beca <_fflush_r+0x3a>
 800bec0:	0599      	lsls	r1, r3, #22
 800bec2:	d402      	bmi.n	800beca <_fflush_r+0x3a>
 800bec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bec6:	f000 f915 	bl	800c0f4 <__retarget_lock_acquire_recursive>
 800beca:	4628      	mov	r0, r5
 800becc:	4621      	mov	r1, r4
 800bece:	f7ff ff59 	bl	800bd84 <__sflush_r>
 800bed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bed4:	07da      	lsls	r2, r3, #31
 800bed6:	4605      	mov	r5, r0
 800bed8:	d4e0      	bmi.n	800be9c <_fflush_r+0xc>
 800beda:	89a3      	ldrh	r3, [r4, #12]
 800bedc:	059b      	lsls	r3, r3, #22
 800bede:	d4dd      	bmi.n	800be9c <_fflush_r+0xc>
 800bee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bee2:	f000 f908 	bl	800c0f6 <__retarget_lock_release_recursive>
 800bee6:	e7d9      	b.n	800be9c <_fflush_r+0xc>
 800bee8:	4b05      	ldr	r3, [pc, #20]	; (800bf00 <_fflush_r+0x70>)
 800beea:	429c      	cmp	r4, r3
 800beec:	d101      	bne.n	800bef2 <_fflush_r+0x62>
 800beee:	68ac      	ldr	r4, [r5, #8]
 800bef0:	e7df      	b.n	800beb2 <_fflush_r+0x22>
 800bef2:	4b04      	ldr	r3, [pc, #16]	; (800bf04 <_fflush_r+0x74>)
 800bef4:	429c      	cmp	r4, r3
 800bef6:	bf08      	it	eq
 800bef8:	68ec      	ldreq	r4, [r5, #12]
 800befa:	e7da      	b.n	800beb2 <_fflush_r+0x22>
 800befc:	0800cacc 	.word	0x0800cacc
 800bf00:	0800caec 	.word	0x0800caec
 800bf04:	0800caac 	.word	0x0800caac

0800bf08 <std>:
 800bf08:	2300      	movs	r3, #0
 800bf0a:	b510      	push	{r4, lr}
 800bf0c:	4604      	mov	r4, r0
 800bf0e:	e9c0 3300 	strd	r3, r3, [r0]
 800bf12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf16:	6083      	str	r3, [r0, #8]
 800bf18:	8181      	strh	r1, [r0, #12]
 800bf1a:	6643      	str	r3, [r0, #100]	; 0x64
 800bf1c:	81c2      	strh	r2, [r0, #14]
 800bf1e:	6183      	str	r3, [r0, #24]
 800bf20:	4619      	mov	r1, r3
 800bf22:	2208      	movs	r2, #8
 800bf24:	305c      	adds	r0, #92	; 0x5c
 800bf26:	f7fd fb69 	bl	80095fc <memset>
 800bf2a:	4b05      	ldr	r3, [pc, #20]	; (800bf40 <std+0x38>)
 800bf2c:	6263      	str	r3, [r4, #36]	; 0x24
 800bf2e:	4b05      	ldr	r3, [pc, #20]	; (800bf44 <std+0x3c>)
 800bf30:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf32:	4b05      	ldr	r3, [pc, #20]	; (800bf48 <std+0x40>)
 800bf34:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf36:	4b05      	ldr	r3, [pc, #20]	; (800bf4c <std+0x44>)
 800bf38:	6224      	str	r4, [r4, #32]
 800bf3a:	6323      	str	r3, [r4, #48]	; 0x30
 800bf3c:	bd10      	pop	{r4, pc}
 800bf3e:	bf00      	nop
 800bf40:	0800c25d 	.word	0x0800c25d
 800bf44:	0800c27f 	.word	0x0800c27f
 800bf48:	0800c2b7 	.word	0x0800c2b7
 800bf4c:	0800c2db 	.word	0x0800c2db

0800bf50 <_cleanup_r>:
 800bf50:	4901      	ldr	r1, [pc, #4]	; (800bf58 <_cleanup_r+0x8>)
 800bf52:	f000 b8af 	b.w	800c0b4 <_fwalk_reent>
 800bf56:	bf00      	nop
 800bf58:	0800be91 	.word	0x0800be91

0800bf5c <__sfmoreglue>:
 800bf5c:	b570      	push	{r4, r5, r6, lr}
 800bf5e:	2268      	movs	r2, #104	; 0x68
 800bf60:	1e4d      	subs	r5, r1, #1
 800bf62:	4355      	muls	r5, r2
 800bf64:	460e      	mov	r6, r1
 800bf66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf6a:	f7ff fa65 	bl	800b438 <_malloc_r>
 800bf6e:	4604      	mov	r4, r0
 800bf70:	b140      	cbz	r0, 800bf84 <__sfmoreglue+0x28>
 800bf72:	2100      	movs	r1, #0
 800bf74:	e9c0 1600 	strd	r1, r6, [r0]
 800bf78:	300c      	adds	r0, #12
 800bf7a:	60a0      	str	r0, [r4, #8]
 800bf7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf80:	f7fd fb3c 	bl	80095fc <memset>
 800bf84:	4620      	mov	r0, r4
 800bf86:	bd70      	pop	{r4, r5, r6, pc}

0800bf88 <__sfp_lock_acquire>:
 800bf88:	4801      	ldr	r0, [pc, #4]	; (800bf90 <__sfp_lock_acquire+0x8>)
 800bf8a:	f000 b8b3 	b.w	800c0f4 <__retarget_lock_acquire_recursive>
 800bf8e:	bf00      	nop
 800bf90:	20004bb5 	.word	0x20004bb5

0800bf94 <__sfp_lock_release>:
 800bf94:	4801      	ldr	r0, [pc, #4]	; (800bf9c <__sfp_lock_release+0x8>)
 800bf96:	f000 b8ae 	b.w	800c0f6 <__retarget_lock_release_recursive>
 800bf9a:	bf00      	nop
 800bf9c:	20004bb5 	.word	0x20004bb5

0800bfa0 <__sinit_lock_acquire>:
 800bfa0:	4801      	ldr	r0, [pc, #4]	; (800bfa8 <__sinit_lock_acquire+0x8>)
 800bfa2:	f000 b8a7 	b.w	800c0f4 <__retarget_lock_acquire_recursive>
 800bfa6:	bf00      	nop
 800bfa8:	20004bb6 	.word	0x20004bb6

0800bfac <__sinit_lock_release>:
 800bfac:	4801      	ldr	r0, [pc, #4]	; (800bfb4 <__sinit_lock_release+0x8>)
 800bfae:	f000 b8a2 	b.w	800c0f6 <__retarget_lock_release_recursive>
 800bfb2:	bf00      	nop
 800bfb4:	20004bb6 	.word	0x20004bb6

0800bfb8 <__sinit>:
 800bfb8:	b510      	push	{r4, lr}
 800bfba:	4604      	mov	r4, r0
 800bfbc:	f7ff fff0 	bl	800bfa0 <__sinit_lock_acquire>
 800bfc0:	69a3      	ldr	r3, [r4, #24]
 800bfc2:	b11b      	cbz	r3, 800bfcc <__sinit+0x14>
 800bfc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfc8:	f7ff bff0 	b.w	800bfac <__sinit_lock_release>
 800bfcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bfd0:	6523      	str	r3, [r4, #80]	; 0x50
 800bfd2:	4b13      	ldr	r3, [pc, #76]	; (800c020 <__sinit+0x68>)
 800bfd4:	4a13      	ldr	r2, [pc, #76]	; (800c024 <__sinit+0x6c>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	62a2      	str	r2, [r4, #40]	; 0x28
 800bfda:	42a3      	cmp	r3, r4
 800bfdc:	bf04      	itt	eq
 800bfde:	2301      	moveq	r3, #1
 800bfe0:	61a3      	streq	r3, [r4, #24]
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f000 f820 	bl	800c028 <__sfp>
 800bfe8:	6060      	str	r0, [r4, #4]
 800bfea:	4620      	mov	r0, r4
 800bfec:	f000 f81c 	bl	800c028 <__sfp>
 800bff0:	60a0      	str	r0, [r4, #8]
 800bff2:	4620      	mov	r0, r4
 800bff4:	f000 f818 	bl	800c028 <__sfp>
 800bff8:	2200      	movs	r2, #0
 800bffa:	60e0      	str	r0, [r4, #12]
 800bffc:	2104      	movs	r1, #4
 800bffe:	6860      	ldr	r0, [r4, #4]
 800c000:	f7ff ff82 	bl	800bf08 <std>
 800c004:	68a0      	ldr	r0, [r4, #8]
 800c006:	2201      	movs	r2, #1
 800c008:	2109      	movs	r1, #9
 800c00a:	f7ff ff7d 	bl	800bf08 <std>
 800c00e:	68e0      	ldr	r0, [r4, #12]
 800c010:	2202      	movs	r2, #2
 800c012:	2112      	movs	r1, #18
 800c014:	f7ff ff78 	bl	800bf08 <std>
 800c018:	2301      	movs	r3, #1
 800c01a:	61a3      	str	r3, [r4, #24]
 800c01c:	e7d2      	b.n	800bfc4 <__sinit+0xc>
 800c01e:	bf00      	nop
 800c020:	0800c734 	.word	0x0800c734
 800c024:	0800bf51 	.word	0x0800bf51

0800c028 <__sfp>:
 800c028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c02a:	4607      	mov	r7, r0
 800c02c:	f7ff ffac 	bl	800bf88 <__sfp_lock_acquire>
 800c030:	4b1e      	ldr	r3, [pc, #120]	; (800c0ac <__sfp+0x84>)
 800c032:	681e      	ldr	r6, [r3, #0]
 800c034:	69b3      	ldr	r3, [r6, #24]
 800c036:	b913      	cbnz	r3, 800c03e <__sfp+0x16>
 800c038:	4630      	mov	r0, r6
 800c03a:	f7ff ffbd 	bl	800bfb8 <__sinit>
 800c03e:	3648      	adds	r6, #72	; 0x48
 800c040:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c044:	3b01      	subs	r3, #1
 800c046:	d503      	bpl.n	800c050 <__sfp+0x28>
 800c048:	6833      	ldr	r3, [r6, #0]
 800c04a:	b30b      	cbz	r3, 800c090 <__sfp+0x68>
 800c04c:	6836      	ldr	r6, [r6, #0]
 800c04e:	e7f7      	b.n	800c040 <__sfp+0x18>
 800c050:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c054:	b9d5      	cbnz	r5, 800c08c <__sfp+0x64>
 800c056:	4b16      	ldr	r3, [pc, #88]	; (800c0b0 <__sfp+0x88>)
 800c058:	60e3      	str	r3, [r4, #12]
 800c05a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c05e:	6665      	str	r5, [r4, #100]	; 0x64
 800c060:	f000 f847 	bl	800c0f2 <__retarget_lock_init_recursive>
 800c064:	f7ff ff96 	bl	800bf94 <__sfp_lock_release>
 800c068:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c06c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c070:	6025      	str	r5, [r4, #0]
 800c072:	61a5      	str	r5, [r4, #24]
 800c074:	2208      	movs	r2, #8
 800c076:	4629      	mov	r1, r5
 800c078:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c07c:	f7fd fabe 	bl	80095fc <memset>
 800c080:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c084:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c088:	4620      	mov	r0, r4
 800c08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c08c:	3468      	adds	r4, #104	; 0x68
 800c08e:	e7d9      	b.n	800c044 <__sfp+0x1c>
 800c090:	2104      	movs	r1, #4
 800c092:	4638      	mov	r0, r7
 800c094:	f7ff ff62 	bl	800bf5c <__sfmoreglue>
 800c098:	4604      	mov	r4, r0
 800c09a:	6030      	str	r0, [r6, #0]
 800c09c:	2800      	cmp	r0, #0
 800c09e:	d1d5      	bne.n	800c04c <__sfp+0x24>
 800c0a0:	f7ff ff78 	bl	800bf94 <__sfp_lock_release>
 800c0a4:	230c      	movs	r3, #12
 800c0a6:	603b      	str	r3, [r7, #0]
 800c0a8:	e7ee      	b.n	800c088 <__sfp+0x60>
 800c0aa:	bf00      	nop
 800c0ac:	0800c734 	.word	0x0800c734
 800c0b0:	ffff0001 	.word	0xffff0001

0800c0b4 <_fwalk_reent>:
 800c0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0b8:	4606      	mov	r6, r0
 800c0ba:	4688      	mov	r8, r1
 800c0bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c0c0:	2700      	movs	r7, #0
 800c0c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0c6:	f1b9 0901 	subs.w	r9, r9, #1
 800c0ca:	d505      	bpl.n	800c0d8 <_fwalk_reent+0x24>
 800c0cc:	6824      	ldr	r4, [r4, #0]
 800c0ce:	2c00      	cmp	r4, #0
 800c0d0:	d1f7      	bne.n	800c0c2 <_fwalk_reent+0xe>
 800c0d2:	4638      	mov	r0, r7
 800c0d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0d8:	89ab      	ldrh	r3, [r5, #12]
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d907      	bls.n	800c0ee <_fwalk_reent+0x3a>
 800c0de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	d003      	beq.n	800c0ee <_fwalk_reent+0x3a>
 800c0e6:	4629      	mov	r1, r5
 800c0e8:	4630      	mov	r0, r6
 800c0ea:	47c0      	blx	r8
 800c0ec:	4307      	orrs	r7, r0
 800c0ee:	3568      	adds	r5, #104	; 0x68
 800c0f0:	e7e9      	b.n	800c0c6 <_fwalk_reent+0x12>

0800c0f2 <__retarget_lock_init_recursive>:
 800c0f2:	4770      	bx	lr

0800c0f4 <__retarget_lock_acquire_recursive>:
 800c0f4:	4770      	bx	lr

0800c0f6 <__retarget_lock_release_recursive>:
 800c0f6:	4770      	bx	lr

0800c0f8 <__swhatbuf_r>:
 800c0f8:	b570      	push	{r4, r5, r6, lr}
 800c0fa:	460e      	mov	r6, r1
 800c0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c100:	2900      	cmp	r1, #0
 800c102:	b096      	sub	sp, #88	; 0x58
 800c104:	4614      	mov	r4, r2
 800c106:	461d      	mov	r5, r3
 800c108:	da08      	bge.n	800c11c <__swhatbuf_r+0x24>
 800c10a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c10e:	2200      	movs	r2, #0
 800c110:	602a      	str	r2, [r5, #0]
 800c112:	061a      	lsls	r2, r3, #24
 800c114:	d410      	bmi.n	800c138 <__swhatbuf_r+0x40>
 800c116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c11a:	e00e      	b.n	800c13a <__swhatbuf_r+0x42>
 800c11c:	466a      	mov	r2, sp
 800c11e:	f000 f903 	bl	800c328 <_fstat_r>
 800c122:	2800      	cmp	r0, #0
 800c124:	dbf1      	blt.n	800c10a <__swhatbuf_r+0x12>
 800c126:	9a01      	ldr	r2, [sp, #4]
 800c128:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c12c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c130:	425a      	negs	r2, r3
 800c132:	415a      	adcs	r2, r3
 800c134:	602a      	str	r2, [r5, #0]
 800c136:	e7ee      	b.n	800c116 <__swhatbuf_r+0x1e>
 800c138:	2340      	movs	r3, #64	; 0x40
 800c13a:	2000      	movs	r0, #0
 800c13c:	6023      	str	r3, [r4, #0]
 800c13e:	b016      	add	sp, #88	; 0x58
 800c140:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c144 <__smakebuf_r>:
 800c144:	898b      	ldrh	r3, [r1, #12]
 800c146:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c148:	079d      	lsls	r5, r3, #30
 800c14a:	4606      	mov	r6, r0
 800c14c:	460c      	mov	r4, r1
 800c14e:	d507      	bpl.n	800c160 <__smakebuf_r+0x1c>
 800c150:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c154:	6023      	str	r3, [r4, #0]
 800c156:	6123      	str	r3, [r4, #16]
 800c158:	2301      	movs	r3, #1
 800c15a:	6163      	str	r3, [r4, #20]
 800c15c:	b002      	add	sp, #8
 800c15e:	bd70      	pop	{r4, r5, r6, pc}
 800c160:	ab01      	add	r3, sp, #4
 800c162:	466a      	mov	r2, sp
 800c164:	f7ff ffc8 	bl	800c0f8 <__swhatbuf_r>
 800c168:	9900      	ldr	r1, [sp, #0]
 800c16a:	4605      	mov	r5, r0
 800c16c:	4630      	mov	r0, r6
 800c16e:	f7ff f963 	bl	800b438 <_malloc_r>
 800c172:	b948      	cbnz	r0, 800c188 <__smakebuf_r+0x44>
 800c174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c178:	059a      	lsls	r2, r3, #22
 800c17a:	d4ef      	bmi.n	800c15c <__smakebuf_r+0x18>
 800c17c:	f023 0303 	bic.w	r3, r3, #3
 800c180:	f043 0302 	orr.w	r3, r3, #2
 800c184:	81a3      	strh	r3, [r4, #12]
 800c186:	e7e3      	b.n	800c150 <__smakebuf_r+0xc>
 800c188:	4b0d      	ldr	r3, [pc, #52]	; (800c1c0 <__smakebuf_r+0x7c>)
 800c18a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c18c:	89a3      	ldrh	r3, [r4, #12]
 800c18e:	6020      	str	r0, [r4, #0]
 800c190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c194:	81a3      	strh	r3, [r4, #12]
 800c196:	9b00      	ldr	r3, [sp, #0]
 800c198:	6163      	str	r3, [r4, #20]
 800c19a:	9b01      	ldr	r3, [sp, #4]
 800c19c:	6120      	str	r0, [r4, #16]
 800c19e:	b15b      	cbz	r3, 800c1b8 <__smakebuf_r+0x74>
 800c1a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1a4:	4630      	mov	r0, r6
 800c1a6:	f000 f8d1 	bl	800c34c <_isatty_r>
 800c1aa:	b128      	cbz	r0, 800c1b8 <__smakebuf_r+0x74>
 800c1ac:	89a3      	ldrh	r3, [r4, #12]
 800c1ae:	f023 0303 	bic.w	r3, r3, #3
 800c1b2:	f043 0301 	orr.w	r3, r3, #1
 800c1b6:	81a3      	strh	r3, [r4, #12]
 800c1b8:	89a0      	ldrh	r0, [r4, #12]
 800c1ba:	4305      	orrs	r5, r0
 800c1bc:	81a5      	strh	r5, [r4, #12]
 800c1be:	e7cd      	b.n	800c15c <__smakebuf_r+0x18>
 800c1c0:	0800bf51 	.word	0x0800bf51

0800c1c4 <_malloc_usable_size_r>:
 800c1c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1c8:	1f18      	subs	r0, r3, #4
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	bfbc      	itt	lt
 800c1ce:	580b      	ldrlt	r3, [r1, r0]
 800c1d0:	18c0      	addlt	r0, r0, r3
 800c1d2:	4770      	bx	lr

0800c1d4 <_raise_r>:
 800c1d4:	291f      	cmp	r1, #31
 800c1d6:	b538      	push	{r3, r4, r5, lr}
 800c1d8:	4604      	mov	r4, r0
 800c1da:	460d      	mov	r5, r1
 800c1dc:	d904      	bls.n	800c1e8 <_raise_r+0x14>
 800c1de:	2316      	movs	r3, #22
 800c1e0:	6003      	str	r3, [r0, #0]
 800c1e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e6:	bd38      	pop	{r3, r4, r5, pc}
 800c1e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c1ea:	b112      	cbz	r2, 800c1f2 <_raise_r+0x1e>
 800c1ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1f0:	b94b      	cbnz	r3, 800c206 <_raise_r+0x32>
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	f000 f830 	bl	800c258 <_getpid_r>
 800c1f8:	462a      	mov	r2, r5
 800c1fa:	4601      	mov	r1, r0
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c202:	f000 b817 	b.w	800c234 <_kill_r>
 800c206:	2b01      	cmp	r3, #1
 800c208:	d00a      	beq.n	800c220 <_raise_r+0x4c>
 800c20a:	1c59      	adds	r1, r3, #1
 800c20c:	d103      	bne.n	800c216 <_raise_r+0x42>
 800c20e:	2316      	movs	r3, #22
 800c210:	6003      	str	r3, [r0, #0]
 800c212:	2001      	movs	r0, #1
 800c214:	e7e7      	b.n	800c1e6 <_raise_r+0x12>
 800c216:	2400      	movs	r4, #0
 800c218:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c21c:	4628      	mov	r0, r5
 800c21e:	4798      	blx	r3
 800c220:	2000      	movs	r0, #0
 800c222:	e7e0      	b.n	800c1e6 <_raise_r+0x12>

0800c224 <raise>:
 800c224:	4b02      	ldr	r3, [pc, #8]	; (800c230 <raise+0xc>)
 800c226:	4601      	mov	r1, r0
 800c228:	6818      	ldr	r0, [r3, #0]
 800c22a:	f7ff bfd3 	b.w	800c1d4 <_raise_r>
 800c22e:	bf00      	nop
 800c230:	20000010 	.word	0x20000010

0800c234 <_kill_r>:
 800c234:	b538      	push	{r3, r4, r5, lr}
 800c236:	4d07      	ldr	r5, [pc, #28]	; (800c254 <_kill_r+0x20>)
 800c238:	2300      	movs	r3, #0
 800c23a:	4604      	mov	r4, r0
 800c23c:	4608      	mov	r0, r1
 800c23e:	4611      	mov	r1, r2
 800c240:	602b      	str	r3, [r5, #0]
 800c242:	f7f5 ffbf 	bl	80021c4 <_kill>
 800c246:	1c43      	adds	r3, r0, #1
 800c248:	d102      	bne.n	800c250 <_kill_r+0x1c>
 800c24a:	682b      	ldr	r3, [r5, #0]
 800c24c:	b103      	cbz	r3, 800c250 <_kill_r+0x1c>
 800c24e:	6023      	str	r3, [r4, #0]
 800c250:	bd38      	pop	{r3, r4, r5, pc}
 800c252:	bf00      	nop
 800c254:	20004bb0 	.word	0x20004bb0

0800c258 <_getpid_r>:
 800c258:	f7f5 bfac 	b.w	80021b4 <_getpid>

0800c25c <__sread>:
 800c25c:	b510      	push	{r4, lr}
 800c25e:	460c      	mov	r4, r1
 800c260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c264:	f000 f894 	bl	800c390 <_read_r>
 800c268:	2800      	cmp	r0, #0
 800c26a:	bfab      	itete	ge
 800c26c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c26e:	89a3      	ldrhlt	r3, [r4, #12]
 800c270:	181b      	addge	r3, r3, r0
 800c272:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c276:	bfac      	ite	ge
 800c278:	6563      	strge	r3, [r4, #84]	; 0x54
 800c27a:	81a3      	strhlt	r3, [r4, #12]
 800c27c:	bd10      	pop	{r4, pc}

0800c27e <__swrite>:
 800c27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c282:	461f      	mov	r7, r3
 800c284:	898b      	ldrh	r3, [r1, #12]
 800c286:	05db      	lsls	r3, r3, #23
 800c288:	4605      	mov	r5, r0
 800c28a:	460c      	mov	r4, r1
 800c28c:	4616      	mov	r6, r2
 800c28e:	d505      	bpl.n	800c29c <__swrite+0x1e>
 800c290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c294:	2302      	movs	r3, #2
 800c296:	2200      	movs	r2, #0
 800c298:	f000 f868 	bl	800c36c <_lseek_r>
 800c29c:	89a3      	ldrh	r3, [r4, #12]
 800c29e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2a6:	81a3      	strh	r3, [r4, #12]
 800c2a8:	4632      	mov	r2, r6
 800c2aa:	463b      	mov	r3, r7
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b2:	f000 b817 	b.w	800c2e4 <_write_r>

0800c2b6 <__sseek>:
 800c2b6:	b510      	push	{r4, lr}
 800c2b8:	460c      	mov	r4, r1
 800c2ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2be:	f000 f855 	bl	800c36c <_lseek_r>
 800c2c2:	1c43      	adds	r3, r0, #1
 800c2c4:	89a3      	ldrh	r3, [r4, #12]
 800c2c6:	bf15      	itete	ne
 800c2c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c2ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c2ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c2d2:	81a3      	strheq	r3, [r4, #12]
 800c2d4:	bf18      	it	ne
 800c2d6:	81a3      	strhne	r3, [r4, #12]
 800c2d8:	bd10      	pop	{r4, pc}

0800c2da <__sclose>:
 800c2da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2de:	f000 b813 	b.w	800c308 <_close_r>
	...

0800c2e4 <_write_r>:
 800c2e4:	b538      	push	{r3, r4, r5, lr}
 800c2e6:	4d07      	ldr	r5, [pc, #28]	; (800c304 <_write_r+0x20>)
 800c2e8:	4604      	mov	r4, r0
 800c2ea:	4608      	mov	r0, r1
 800c2ec:	4611      	mov	r1, r2
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	602a      	str	r2, [r5, #0]
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	f7f5 ff9d 	bl	8002232 <_write>
 800c2f8:	1c43      	adds	r3, r0, #1
 800c2fa:	d102      	bne.n	800c302 <_write_r+0x1e>
 800c2fc:	682b      	ldr	r3, [r5, #0]
 800c2fe:	b103      	cbz	r3, 800c302 <_write_r+0x1e>
 800c300:	6023      	str	r3, [r4, #0]
 800c302:	bd38      	pop	{r3, r4, r5, pc}
 800c304:	20004bb0 	.word	0x20004bb0

0800c308 <_close_r>:
 800c308:	b538      	push	{r3, r4, r5, lr}
 800c30a:	4d06      	ldr	r5, [pc, #24]	; (800c324 <_close_r+0x1c>)
 800c30c:	2300      	movs	r3, #0
 800c30e:	4604      	mov	r4, r0
 800c310:	4608      	mov	r0, r1
 800c312:	602b      	str	r3, [r5, #0]
 800c314:	f7f5 ffa9 	bl	800226a <_close>
 800c318:	1c43      	adds	r3, r0, #1
 800c31a:	d102      	bne.n	800c322 <_close_r+0x1a>
 800c31c:	682b      	ldr	r3, [r5, #0]
 800c31e:	b103      	cbz	r3, 800c322 <_close_r+0x1a>
 800c320:	6023      	str	r3, [r4, #0]
 800c322:	bd38      	pop	{r3, r4, r5, pc}
 800c324:	20004bb0 	.word	0x20004bb0

0800c328 <_fstat_r>:
 800c328:	b538      	push	{r3, r4, r5, lr}
 800c32a:	4d07      	ldr	r5, [pc, #28]	; (800c348 <_fstat_r+0x20>)
 800c32c:	2300      	movs	r3, #0
 800c32e:	4604      	mov	r4, r0
 800c330:	4608      	mov	r0, r1
 800c332:	4611      	mov	r1, r2
 800c334:	602b      	str	r3, [r5, #0]
 800c336:	f7f5 ffa4 	bl	8002282 <_fstat>
 800c33a:	1c43      	adds	r3, r0, #1
 800c33c:	d102      	bne.n	800c344 <_fstat_r+0x1c>
 800c33e:	682b      	ldr	r3, [r5, #0]
 800c340:	b103      	cbz	r3, 800c344 <_fstat_r+0x1c>
 800c342:	6023      	str	r3, [r4, #0]
 800c344:	bd38      	pop	{r3, r4, r5, pc}
 800c346:	bf00      	nop
 800c348:	20004bb0 	.word	0x20004bb0

0800c34c <_isatty_r>:
 800c34c:	b538      	push	{r3, r4, r5, lr}
 800c34e:	4d06      	ldr	r5, [pc, #24]	; (800c368 <_isatty_r+0x1c>)
 800c350:	2300      	movs	r3, #0
 800c352:	4604      	mov	r4, r0
 800c354:	4608      	mov	r0, r1
 800c356:	602b      	str	r3, [r5, #0]
 800c358:	f7f5 ffa3 	bl	80022a2 <_isatty>
 800c35c:	1c43      	adds	r3, r0, #1
 800c35e:	d102      	bne.n	800c366 <_isatty_r+0x1a>
 800c360:	682b      	ldr	r3, [r5, #0]
 800c362:	b103      	cbz	r3, 800c366 <_isatty_r+0x1a>
 800c364:	6023      	str	r3, [r4, #0]
 800c366:	bd38      	pop	{r3, r4, r5, pc}
 800c368:	20004bb0 	.word	0x20004bb0

0800c36c <_lseek_r>:
 800c36c:	b538      	push	{r3, r4, r5, lr}
 800c36e:	4d07      	ldr	r5, [pc, #28]	; (800c38c <_lseek_r+0x20>)
 800c370:	4604      	mov	r4, r0
 800c372:	4608      	mov	r0, r1
 800c374:	4611      	mov	r1, r2
 800c376:	2200      	movs	r2, #0
 800c378:	602a      	str	r2, [r5, #0]
 800c37a:	461a      	mov	r2, r3
 800c37c:	f7f5 ff9c 	bl	80022b8 <_lseek>
 800c380:	1c43      	adds	r3, r0, #1
 800c382:	d102      	bne.n	800c38a <_lseek_r+0x1e>
 800c384:	682b      	ldr	r3, [r5, #0]
 800c386:	b103      	cbz	r3, 800c38a <_lseek_r+0x1e>
 800c388:	6023      	str	r3, [r4, #0]
 800c38a:	bd38      	pop	{r3, r4, r5, pc}
 800c38c:	20004bb0 	.word	0x20004bb0

0800c390 <_read_r>:
 800c390:	b538      	push	{r3, r4, r5, lr}
 800c392:	4d07      	ldr	r5, [pc, #28]	; (800c3b0 <_read_r+0x20>)
 800c394:	4604      	mov	r4, r0
 800c396:	4608      	mov	r0, r1
 800c398:	4611      	mov	r1, r2
 800c39a:	2200      	movs	r2, #0
 800c39c:	602a      	str	r2, [r5, #0]
 800c39e:	461a      	mov	r2, r3
 800c3a0:	f7f5 ff2a 	bl	80021f8 <_read>
 800c3a4:	1c43      	adds	r3, r0, #1
 800c3a6:	d102      	bne.n	800c3ae <_read_r+0x1e>
 800c3a8:	682b      	ldr	r3, [r5, #0]
 800c3aa:	b103      	cbz	r3, 800c3ae <_read_r+0x1e>
 800c3ac:	6023      	str	r3, [r4, #0]
 800c3ae:	bd38      	pop	{r3, r4, r5, pc}
 800c3b0:	20004bb0 	.word	0x20004bb0

0800c3b4 <_init>:
 800c3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3b6:	bf00      	nop
 800c3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ba:	bc08      	pop	{r3}
 800c3bc:	469e      	mov	lr, r3
 800c3be:	4770      	bx	lr

0800c3c0 <_fini>:
 800c3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c2:	bf00      	nop
 800c3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3c6:	bc08      	pop	{r3}
 800c3c8:	469e      	mov	lr, r3
 800c3ca:	4770      	bx	lr
