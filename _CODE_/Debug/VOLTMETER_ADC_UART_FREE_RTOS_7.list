
VOLTMETER_ADC_UART_FREE_RTOS_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dc4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08008f64  08008f64  00018f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009168  08009168  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009168  08009168  00019168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009170  08009170  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009170  08009170  00019170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009174  08009174  00019174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049d8  20000074  080091ec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a4c  080091ec  00024a4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad03  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f8d  00000000  00000000  0003ada7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  0003ed38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f0  00000000  00000000  000402d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7e1  00000000  00000000  000416c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cf7f  00000000  00000000  0005bea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3350  00000000  00000000  00078e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011c170  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cf0  00000000  00000000  0011c1c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008f4c 	.word	0x08008f4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08008f4c 	.word	0x08008f4c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_uldivmod>:
 8000608:	b953      	cbnz	r3, 8000620 <__aeabi_uldivmod+0x18>
 800060a:	b94a      	cbnz	r2, 8000620 <__aeabi_uldivmod+0x18>
 800060c:	2900      	cmp	r1, #0
 800060e:	bf08      	it	eq
 8000610:	2800      	cmpeq	r0, #0
 8000612:	bf1c      	itt	ne
 8000614:	f04f 31ff 	movne.w	r1, #4294967295
 8000618:	f04f 30ff 	movne.w	r0, #4294967295
 800061c:	f000 b974 	b.w	8000908 <__aeabi_idiv0>
 8000620:	f1ad 0c08 	sub.w	ip, sp, #8
 8000624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000628:	f000 f806 	bl	8000638 <__udivmoddi4>
 800062c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr

08000638 <__udivmoddi4>:
 8000638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800063c:	9d08      	ldr	r5, [sp, #32]
 800063e:	4604      	mov	r4, r0
 8000640:	468e      	mov	lr, r1
 8000642:	2b00      	cmp	r3, #0
 8000644:	d14d      	bne.n	80006e2 <__udivmoddi4+0xaa>
 8000646:	428a      	cmp	r2, r1
 8000648:	4694      	mov	ip, r2
 800064a:	d969      	bls.n	8000720 <__udivmoddi4+0xe8>
 800064c:	fab2 f282 	clz	r2, r2
 8000650:	b152      	cbz	r2, 8000668 <__udivmoddi4+0x30>
 8000652:	fa01 f302 	lsl.w	r3, r1, r2
 8000656:	f1c2 0120 	rsb	r1, r2, #32
 800065a:	fa20 f101 	lsr.w	r1, r0, r1
 800065e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000662:	ea41 0e03 	orr.w	lr, r1, r3
 8000666:	4094      	lsls	r4, r2
 8000668:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800066c:	0c21      	lsrs	r1, r4, #16
 800066e:	fbbe f6f8 	udiv	r6, lr, r8
 8000672:	fa1f f78c 	uxth.w	r7, ip
 8000676:	fb08 e316 	mls	r3, r8, r6, lr
 800067a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800067e:	fb06 f107 	mul.w	r1, r6, r7
 8000682:	4299      	cmp	r1, r3
 8000684:	d90a      	bls.n	800069c <__udivmoddi4+0x64>
 8000686:	eb1c 0303 	adds.w	r3, ip, r3
 800068a:	f106 30ff 	add.w	r0, r6, #4294967295
 800068e:	f080 811f 	bcs.w	80008d0 <__udivmoddi4+0x298>
 8000692:	4299      	cmp	r1, r3
 8000694:	f240 811c 	bls.w	80008d0 <__udivmoddi4+0x298>
 8000698:	3e02      	subs	r6, #2
 800069a:	4463      	add	r3, ip
 800069c:	1a5b      	subs	r3, r3, r1
 800069e:	b2a4      	uxth	r4, r4
 80006a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a4:	fb08 3310 	mls	r3, r8, r0, r3
 80006a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006ac:	fb00 f707 	mul.w	r7, r0, r7
 80006b0:	42a7      	cmp	r7, r4
 80006b2:	d90a      	bls.n	80006ca <__udivmoddi4+0x92>
 80006b4:	eb1c 0404 	adds.w	r4, ip, r4
 80006b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006bc:	f080 810a 	bcs.w	80008d4 <__udivmoddi4+0x29c>
 80006c0:	42a7      	cmp	r7, r4
 80006c2:	f240 8107 	bls.w	80008d4 <__udivmoddi4+0x29c>
 80006c6:	4464      	add	r4, ip
 80006c8:	3802      	subs	r0, #2
 80006ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ce:	1be4      	subs	r4, r4, r7
 80006d0:	2600      	movs	r6, #0
 80006d2:	b11d      	cbz	r5, 80006dc <__udivmoddi4+0xa4>
 80006d4:	40d4      	lsrs	r4, r2
 80006d6:	2300      	movs	r3, #0
 80006d8:	e9c5 4300 	strd	r4, r3, [r5]
 80006dc:	4631      	mov	r1, r6
 80006de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e2:	428b      	cmp	r3, r1
 80006e4:	d909      	bls.n	80006fa <__udivmoddi4+0xc2>
 80006e6:	2d00      	cmp	r5, #0
 80006e8:	f000 80ef 	beq.w	80008ca <__udivmoddi4+0x292>
 80006ec:	2600      	movs	r6, #0
 80006ee:	e9c5 0100 	strd	r0, r1, [r5]
 80006f2:	4630      	mov	r0, r6
 80006f4:	4631      	mov	r1, r6
 80006f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fa:	fab3 f683 	clz	r6, r3
 80006fe:	2e00      	cmp	r6, #0
 8000700:	d14a      	bne.n	8000798 <__udivmoddi4+0x160>
 8000702:	428b      	cmp	r3, r1
 8000704:	d302      	bcc.n	800070c <__udivmoddi4+0xd4>
 8000706:	4282      	cmp	r2, r0
 8000708:	f200 80f9 	bhi.w	80008fe <__udivmoddi4+0x2c6>
 800070c:	1a84      	subs	r4, r0, r2
 800070e:	eb61 0303 	sbc.w	r3, r1, r3
 8000712:	2001      	movs	r0, #1
 8000714:	469e      	mov	lr, r3
 8000716:	2d00      	cmp	r5, #0
 8000718:	d0e0      	beq.n	80006dc <__udivmoddi4+0xa4>
 800071a:	e9c5 4e00 	strd	r4, lr, [r5]
 800071e:	e7dd      	b.n	80006dc <__udivmoddi4+0xa4>
 8000720:	b902      	cbnz	r2, 8000724 <__udivmoddi4+0xec>
 8000722:	deff      	udf	#255	; 0xff
 8000724:	fab2 f282 	clz	r2, r2
 8000728:	2a00      	cmp	r2, #0
 800072a:	f040 8092 	bne.w	8000852 <__udivmoddi4+0x21a>
 800072e:	eba1 010c 	sub.w	r1, r1, ip
 8000732:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000736:	fa1f fe8c 	uxth.w	lr, ip
 800073a:	2601      	movs	r6, #1
 800073c:	0c20      	lsrs	r0, r4, #16
 800073e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000742:	fb07 1113 	mls	r1, r7, r3, r1
 8000746:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800074a:	fb0e f003 	mul.w	r0, lr, r3
 800074e:	4288      	cmp	r0, r1
 8000750:	d908      	bls.n	8000764 <__udivmoddi4+0x12c>
 8000752:	eb1c 0101 	adds.w	r1, ip, r1
 8000756:	f103 38ff 	add.w	r8, r3, #4294967295
 800075a:	d202      	bcs.n	8000762 <__udivmoddi4+0x12a>
 800075c:	4288      	cmp	r0, r1
 800075e:	f200 80cb 	bhi.w	80008f8 <__udivmoddi4+0x2c0>
 8000762:	4643      	mov	r3, r8
 8000764:	1a09      	subs	r1, r1, r0
 8000766:	b2a4      	uxth	r4, r4
 8000768:	fbb1 f0f7 	udiv	r0, r1, r7
 800076c:	fb07 1110 	mls	r1, r7, r0, r1
 8000770:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000774:	fb0e fe00 	mul.w	lr, lr, r0
 8000778:	45a6      	cmp	lr, r4
 800077a:	d908      	bls.n	800078e <__udivmoddi4+0x156>
 800077c:	eb1c 0404 	adds.w	r4, ip, r4
 8000780:	f100 31ff 	add.w	r1, r0, #4294967295
 8000784:	d202      	bcs.n	800078c <__udivmoddi4+0x154>
 8000786:	45a6      	cmp	lr, r4
 8000788:	f200 80bb 	bhi.w	8000902 <__udivmoddi4+0x2ca>
 800078c:	4608      	mov	r0, r1
 800078e:	eba4 040e 	sub.w	r4, r4, lr
 8000792:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000796:	e79c      	b.n	80006d2 <__udivmoddi4+0x9a>
 8000798:	f1c6 0720 	rsb	r7, r6, #32
 800079c:	40b3      	lsls	r3, r6
 800079e:	fa22 fc07 	lsr.w	ip, r2, r7
 80007a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007a6:	fa20 f407 	lsr.w	r4, r0, r7
 80007aa:	fa01 f306 	lsl.w	r3, r1, r6
 80007ae:	431c      	orrs	r4, r3
 80007b0:	40f9      	lsrs	r1, r7
 80007b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007b6:	fa00 f306 	lsl.w	r3, r0, r6
 80007ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80007be:	0c20      	lsrs	r0, r4, #16
 80007c0:	fa1f fe8c 	uxth.w	lr, ip
 80007c4:	fb09 1118 	mls	r1, r9, r8, r1
 80007c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007cc:	fb08 f00e 	mul.w	r0, r8, lr
 80007d0:	4288      	cmp	r0, r1
 80007d2:	fa02 f206 	lsl.w	r2, r2, r6
 80007d6:	d90b      	bls.n	80007f0 <__udivmoddi4+0x1b8>
 80007d8:	eb1c 0101 	adds.w	r1, ip, r1
 80007dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80007e0:	f080 8088 	bcs.w	80008f4 <__udivmoddi4+0x2bc>
 80007e4:	4288      	cmp	r0, r1
 80007e6:	f240 8085 	bls.w	80008f4 <__udivmoddi4+0x2bc>
 80007ea:	f1a8 0802 	sub.w	r8, r8, #2
 80007ee:	4461      	add	r1, ip
 80007f0:	1a09      	subs	r1, r1, r0
 80007f2:	b2a4      	uxth	r4, r4
 80007f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80007f8:	fb09 1110 	mls	r1, r9, r0, r1
 80007fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000800:	fb00 fe0e 	mul.w	lr, r0, lr
 8000804:	458e      	cmp	lr, r1
 8000806:	d908      	bls.n	800081a <__udivmoddi4+0x1e2>
 8000808:	eb1c 0101 	adds.w	r1, ip, r1
 800080c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000810:	d26c      	bcs.n	80008ec <__udivmoddi4+0x2b4>
 8000812:	458e      	cmp	lr, r1
 8000814:	d96a      	bls.n	80008ec <__udivmoddi4+0x2b4>
 8000816:	3802      	subs	r0, #2
 8000818:	4461      	add	r1, ip
 800081a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800081e:	fba0 9402 	umull	r9, r4, r0, r2
 8000822:	eba1 010e 	sub.w	r1, r1, lr
 8000826:	42a1      	cmp	r1, r4
 8000828:	46c8      	mov	r8, r9
 800082a:	46a6      	mov	lr, r4
 800082c:	d356      	bcc.n	80008dc <__udivmoddi4+0x2a4>
 800082e:	d053      	beq.n	80008d8 <__udivmoddi4+0x2a0>
 8000830:	b15d      	cbz	r5, 800084a <__udivmoddi4+0x212>
 8000832:	ebb3 0208 	subs.w	r2, r3, r8
 8000836:	eb61 010e 	sbc.w	r1, r1, lr
 800083a:	fa01 f707 	lsl.w	r7, r1, r7
 800083e:	fa22 f306 	lsr.w	r3, r2, r6
 8000842:	40f1      	lsrs	r1, r6
 8000844:	431f      	orrs	r7, r3
 8000846:	e9c5 7100 	strd	r7, r1, [r5]
 800084a:	2600      	movs	r6, #0
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	f1c2 0320 	rsb	r3, r2, #32
 8000856:	40d8      	lsrs	r0, r3
 8000858:	fa0c fc02 	lsl.w	ip, ip, r2
 800085c:	fa21 f303 	lsr.w	r3, r1, r3
 8000860:	4091      	lsls	r1, r2
 8000862:	4301      	orrs	r1, r0
 8000864:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000868:	fa1f fe8c 	uxth.w	lr, ip
 800086c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000870:	fb07 3610 	mls	r6, r7, r0, r3
 8000874:	0c0b      	lsrs	r3, r1, #16
 8000876:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800087a:	fb00 f60e 	mul.w	r6, r0, lr
 800087e:	429e      	cmp	r6, r3
 8000880:	fa04 f402 	lsl.w	r4, r4, r2
 8000884:	d908      	bls.n	8000898 <__udivmoddi4+0x260>
 8000886:	eb1c 0303 	adds.w	r3, ip, r3
 800088a:	f100 38ff 	add.w	r8, r0, #4294967295
 800088e:	d22f      	bcs.n	80008f0 <__udivmoddi4+0x2b8>
 8000890:	429e      	cmp	r6, r3
 8000892:	d92d      	bls.n	80008f0 <__udivmoddi4+0x2b8>
 8000894:	3802      	subs	r0, #2
 8000896:	4463      	add	r3, ip
 8000898:	1b9b      	subs	r3, r3, r6
 800089a:	b289      	uxth	r1, r1
 800089c:	fbb3 f6f7 	udiv	r6, r3, r7
 80008a0:	fb07 3316 	mls	r3, r7, r6, r3
 80008a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008a8:	fb06 f30e 	mul.w	r3, r6, lr
 80008ac:	428b      	cmp	r3, r1
 80008ae:	d908      	bls.n	80008c2 <__udivmoddi4+0x28a>
 80008b0:	eb1c 0101 	adds.w	r1, ip, r1
 80008b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008b8:	d216      	bcs.n	80008e8 <__udivmoddi4+0x2b0>
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d914      	bls.n	80008e8 <__udivmoddi4+0x2b0>
 80008be:	3e02      	subs	r6, #2
 80008c0:	4461      	add	r1, ip
 80008c2:	1ac9      	subs	r1, r1, r3
 80008c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008c8:	e738      	b.n	800073c <__udivmoddi4+0x104>
 80008ca:	462e      	mov	r6, r5
 80008cc:	4628      	mov	r0, r5
 80008ce:	e705      	b.n	80006dc <__udivmoddi4+0xa4>
 80008d0:	4606      	mov	r6, r0
 80008d2:	e6e3      	b.n	800069c <__udivmoddi4+0x64>
 80008d4:	4618      	mov	r0, r3
 80008d6:	e6f8      	b.n	80006ca <__udivmoddi4+0x92>
 80008d8:	454b      	cmp	r3, r9
 80008da:	d2a9      	bcs.n	8000830 <__udivmoddi4+0x1f8>
 80008dc:	ebb9 0802 	subs.w	r8, r9, r2
 80008e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008e4:	3801      	subs	r0, #1
 80008e6:	e7a3      	b.n	8000830 <__udivmoddi4+0x1f8>
 80008e8:	4646      	mov	r6, r8
 80008ea:	e7ea      	b.n	80008c2 <__udivmoddi4+0x28a>
 80008ec:	4620      	mov	r0, r4
 80008ee:	e794      	b.n	800081a <__udivmoddi4+0x1e2>
 80008f0:	4640      	mov	r0, r8
 80008f2:	e7d1      	b.n	8000898 <__udivmoddi4+0x260>
 80008f4:	46d0      	mov	r8, sl
 80008f6:	e77b      	b.n	80007f0 <__udivmoddi4+0x1b8>
 80008f8:	3b02      	subs	r3, #2
 80008fa:	4461      	add	r1, ip
 80008fc:	e732      	b.n	8000764 <__udivmoddi4+0x12c>
 80008fe:	4630      	mov	r0, r6
 8000900:	e709      	b.n	8000716 <__udivmoddi4+0xde>
 8000902:	4464      	add	r4, ip
 8000904:	3802      	subs	r0, #2
 8000906:	e742      	b.n	800078e <__udivmoddi4+0x156>

08000908 <__aeabi_idiv0>:
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000912:	463b      	mov	r3, r7
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800091e:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <MX_ADC1_Init+0x98>)
 8000920:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <MX_ADC1_Init+0x9c>)
 8000922:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000924:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <MX_ADC1_Init+0x98>)
 8000926:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800092a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_ADC1_Init+0x98>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <MX_ADC1_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000938:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_ADC1_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <MX_ADC1_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_ADC1_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <MX_ADC1_Init+0x98>)
 800094e:	4a17      	ldr	r2, [pc, #92]	; (80009ac <MX_ADC1_Init+0xa0>)
 8000950:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_ADC1_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_ADC1_Init+0x98>)
 800095a:	2201      	movs	r2, #1
 800095c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_ADC1_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_ADC1_Init+0x98>)
 8000968:	2201      	movs	r2, #1
 800096a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <MX_ADC1_Init+0x98>)
 800096e:	f001 f827 	bl	80019c0 <HAL_ADC_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000978:	f000 fcc4 	bl	8001304 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800097c:	2300      	movs	r3, #0
 800097e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000980:	2301      	movs	r3, #1
 8000982:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000988:	463b      	mov	r3, r7
 800098a:	4619      	mov	r1, r3
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_ADC1_Init+0x98>)
 800098e:	f001 fad5 	bl	8001f3c <HAL_ADC_ConfigChannel>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000998:	f000 fcb4 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000090 	.word	0x20000090
 80009a8:	40012000 	.word	0x40012000
 80009ac:	0f000001 	.word	0x0f000001

080009b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a1b      	ldr	r2, [pc, #108]	; (8000a3c <HAL_ADC_MspInit+0x8c>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d12f      	bne.n	8000a32 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <HAL_ADC_MspInit+0x90>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	4a19      	ldr	r2, [pc, #100]	; (8000a40 <HAL_ADC_MspInit+0x90>)
 80009dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e0:	6453      	str	r3, [r2, #68]	; 0x44
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <HAL_ADC_MspInit+0x90>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <HAL_ADC_MspInit+0x90>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <HAL_ADC_MspInit+0x90>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <HAL_ADC_MspInit+0x90>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <HAL_ADC_MspInit+0x94>)
 8000a1e:	f002 f999 	bl	8002d54 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2105      	movs	r1, #5
 8000a26:	2012      	movs	r0, #18
 8000a28:	f001 fd68 	bl	80024fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000a2c:	2012      	movs	r0, #18
 8000a2e:	f001 fd81 	bl	8002534 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a32:	bf00      	nop
 8000a34:	3728      	adds	r7, #40	; 0x28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40012000 	.word	0x40012000
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020000 	.word	0x40020000

08000a48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_DMA_Init+0x4c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <MX_DMA_Init+0x4c>)
 8000a58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_DMA_Init+0x4c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2105      	movs	r1, #5
 8000a6e:	203a      	movs	r0, #58	; 0x3a
 8000a70:	f001 fd44 	bl	80024fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a74:	203a      	movs	r0, #58	; 0x3a
 8000a76:	f001 fd5d 	bl	8002534 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2105      	movs	r1, #5
 8000a7e:	2046      	movs	r0, #70	; 0x46
 8000a80:	f001 fd3c 	bl	80024fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000a84:	2046      	movs	r0, #70	; 0x46
 8000a86:	f001 fd55 	bl	8002534 <HAL_NVIC_EnableIRQ>

}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800

08000a98 <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationTickHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <vApplicationGetIdleTaskMemory+0x30>)
 8000aca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2280      	movs	r2, #128	; 0x80
 8000ad0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000320 	.word	0x20000320
 8000ae4:	20000374 	.word	0x20000374

08000ae8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <vApplicationGetTimerTaskMemory+0x2c>)
 8000af8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <vApplicationGetTimerTaskMemory+0x30>)
 8000afe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b06:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	20000574 	.word	0x20000574
 8000b18:	200005c8 	.word	0x200005c8

08000b1c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b1c:	b5b0      	push	{r4, r5, r7, lr}
 8000b1e:	b0d6      	sub	sp, #344	; 0x158
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of MUTEX_ADC_GOING */
  osMutexDef(MUTEX_ADC_GOING);
 8000b22:	2300      	movs	r3, #0
 8000b24:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  MUTEX_ADC_GOINGHandle = osMutexCreate(osMutex(MUTEX_ADC_GOING));
 8000b2e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000b32:	4618      	mov	r0, r3
 8000b34:	f004 fe7e 	bl	8005834 <osMutexCreate>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	4a98      	ldr	r2, [pc, #608]	; (8000d9c <MX_FREERTOS_Init+0x280>)
 8000b3c:	6013      	str	r3, [r2, #0]

  /* definition and creation of MUTEX_UART_GOING */
  osMutexDef(MUTEX_UART_GOING);
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8000b44:	2300      	movs	r3, #0
 8000b46:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  MUTEX_UART_GOINGHandle = osMutexCreate(osMutex(MUTEX_UART_GOING));
 8000b4a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f004 fe70 	bl	8005834 <osMutexCreate>
 8000b54:	4603      	mov	r3, r0
 8000b56:	4a92      	ldr	r2, [pc, #584]	; (8000da0 <MX_FREERTOS_Init+0x284>)
 8000b58:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of SEM_BIN_ADC_COMPLETE */
  osSemaphoreDef(SEM_BIN_ADC_COMPLETE);
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  SEM_BIN_ADC_COMPLETEHandle = osSemaphoreCreate(osSemaphore(SEM_BIN_ADC_COMPLETE), 1);
 8000b66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f004 fe79 	bl	8005864 <osSemaphoreCreate>
 8000b72:	4603      	mov	r3, r0
 8000b74:	4a8b      	ldr	r2, [pc, #556]	; (8000da4 <MX_FREERTOS_Init+0x288>)
 8000b76:	6013      	str	r3, [r2, #0]

  /* definition and creation of SEM_BIN_UART_COMPLETE */
  osSemaphoreDef(SEM_BIN_UART_COMPLETE);
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  SEM_BIN_UART_COMPLETEHandle = osSemaphoreCreate(osSemaphore(SEM_BIN_UART_COMPLETE), 1);
 8000b84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b88:	2101      	movs	r1, #1
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f004 fe6a 	bl	8005864 <osSemaphoreCreate>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4a85      	ldr	r2, [pc, #532]	; (8000da8 <MX_FREERTOS_Init+0x28c>)
 8000b94:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of RTOS_TIMER_1 */
  osTimerDef(RTOS_TIMER_1, TIMER_CALLBACK);
 8000b96:	4b85      	ldr	r3, [pc, #532]	; (8000dac <MX_FREERTOS_Init+0x290>)
 8000b98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  RTOS_TIMER_1Handle = osTimerCreate(osTimer(RTOS_TIMER_1), osTimerPeriodic, NULL);
 8000ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4618      	mov	r0, r3
 8000bac:	f004 fe0e 	bl	80057cc <osTimerCreate>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4a7f      	ldr	r2, [pc, #508]	; (8000db0 <MX_FREERTOS_Init+0x294>)
 8000bb4:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of ADC_QUEUE_UART_TX */
  osMessageQDef(ADC_QUEUE_UART_TX, 16, uint16_t);
 8000bb6:	4b7f      	ldr	r3, [pc, #508]	; (8000db4 <MX_FREERTOS_Init+0x298>)
 8000bb8:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8000bbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ADC_QUEUE_UART_TXHandle = osMessageCreate(osMessageQ(ADC_QUEUE_UART_TX), NULL);
 8000bc2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f004 fe7d 	bl	80058c8 <osMessageCreate>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4a79      	ldr	r2, [pc, #484]	; (8000db8 <MX_FREERTOS_Init+0x29c>)
 8000bd2:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_RX_QUEUE_ADC_TAK */
  osMessageQDef(UART_RX_QUEUE_ADC_TAK, 16, uint16_t);
 8000bd4:	4b77      	ldr	r3, [pc, #476]	; (8000db4 <MX_FREERTOS_Init+0x298>)
 8000bd6:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8000bda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UART_RX_QUEUE_ADC_TAKHandle = osMessageCreate(osMessageQ(UART_RX_QUEUE_ADC_TAK), NULL);
 8000be0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f004 fe6e 	bl	80058c8 <osMessageCreate>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4a73      	ldr	r2, [pc, #460]	; (8000dbc <MX_FREERTOS_Init+0x2a0>)
 8000bf0:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_RX_QUEUE_UART_TX */
  osMessageQDef(UART_RX_QUEUE_UART_TX, 16, uint16_t);
 8000bf2:	4b70      	ldr	r3, [pc, #448]	; (8000db4 <MX_FREERTOS_Init+0x298>)
 8000bf4:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8000bf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UART_RX_QUEUE_UART_TXHandle = osMessageCreate(osMessageQ(UART_RX_QUEUE_UART_TX), NULL);
 8000bfe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f004 fe5f 	bl	80058c8 <osMessageCreate>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a6c      	ldr	r2, [pc, #432]	; (8000dc0 <MX_FREERTOS_Init+0x2a4>)
 8000c0e:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_RX_QUEUE_ADC_CONFIG */
  osMessageQDef(UART_RX_QUEUE_ADC_CONFIG, 16, uint16_t);
 8000c10:	4b68      	ldr	r3, [pc, #416]	; (8000db4 <MX_FREERTOS_Init+0x298>)
 8000c12:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8000c16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UART_RX_QUEUE_ADC_CONFIGHandle = osMessageCreate(osMessageQ(UART_RX_QUEUE_ADC_CONFIG), NULL);
 8000c1c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f004 fe50 	bl	80058c8 <osMessageCreate>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	4a66      	ldr	r2, [pc, #408]	; (8000dc4 <MX_FREERTOS_Init+0x2a8>)
 8000c2c:	6013      	str	r3, [r2, #0]

  /* definition and creation of INT_UART_QUEUE_UART_RX */
  osMessageQDef(INT_UART_QUEUE_UART_RX, 16, uint16_t);
 8000c2e:	4b61      	ldr	r3, [pc, #388]	; (8000db4 <MX_FREERTOS_Init+0x298>)
 8000c30:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8000c34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  INT_UART_QUEUE_UART_RXHandle = osMessageCreate(osMessageQ(INT_UART_QUEUE_UART_RX), NULL);
 8000c3a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f004 fe41 	bl	80058c8 <osMessageCreate>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4a5f      	ldr	r2, [pc, #380]	; (8000dc8 <MX_FREERTOS_Init+0x2ac>)
 8000c4a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000c4c:	4b5f      	ldr	r3, [pc, #380]	; (8000dcc <MX_FREERTOS_Init+0x2b0>)
 8000c4e:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8000c52:	461d      	mov	r5, r3
 8000c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c60:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f004 fd4f 	bl	800570a <osThreadCreate>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	4a58      	ldr	r2, [pc, #352]	; (8000dd0 <MX_FREERTOS_Init+0x2b4>)
 8000c70:	6013      	str	r3, [r2, #0]

  /* definition and creation of IDLE_TASK_1 */
  osThreadDef(IDLE_TASK_1, START_IDLE_TASK_1, osPriorityIdle, 0, 128);
 8000c72:	4b58      	ldr	r3, [pc, #352]	; (8000dd4 <MX_FREERTOS_Init+0x2b8>)
 8000c74:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000c78:	461d      	mov	r5, r3
 8000c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IDLE_TASK_1Handle = osThreadCreate(osThread(IDLE_TASK_1), NULL);
 8000c86:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f004 fd3c 	bl	800570a <osThreadCreate>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4a50      	ldr	r2, [pc, #320]	; (8000dd8 <MX_FREERTOS_Init+0x2bc>)
 8000c96:	6013      	str	r3, [r2, #0]

  /* definition and creation of ADC_TAKE_TASK */
  osThreadDef(ADC_TAKE_TASK, ADC_TAKE_TASK_INIT, osPriorityNormal, 0, 128);
 8000c98:	4b50      	ldr	r3, [pc, #320]	; (8000ddc <MX_FREERTOS_Init+0x2c0>)
 8000c9a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000c9e:	461d      	mov	r5, r3
 8000ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ca8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_TAKE_TASKHandle = osThreadCreate(osThread(ADC_TAKE_TASK), NULL);
 8000cac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f004 fd29 	bl	800570a <osThreadCreate>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	4a49      	ldr	r2, [pc, #292]	; (8000de0 <MX_FREERTOS_Init+0x2c4>)
 8000cbc:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_TX_TASK */
  osThreadDef(UART_TX_TASK, UART_TX_TASK_INIT, osPriorityNormal, 0, 128);
 8000cbe:	4b49      	ldr	r3, [pc, #292]	; (8000de4 <MX_FREERTOS_Init+0x2c8>)
 8000cc0:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000cc4:	461d      	mov	r5, r3
 8000cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_TX_TASKHandle = osThreadCreate(osThread(UART_TX_TASK), NULL);
 8000cd2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f004 fd16 	bl	800570a <osThreadCreate>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	4a41      	ldr	r2, [pc, #260]	; (8000de8 <MX_FREERTOS_Init+0x2cc>)
 8000ce2:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_RX_TASK */
  osThreadDef(UART_RX_TASK, UART_RX_TASK_INIT, osPriorityNormal, 0, 128);
 8000ce4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000ce8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000cec:	4a3f      	ldr	r2, [pc, #252]	; (8000dec <MX_FREERTOS_Init+0x2d0>)
 8000cee:	461c      	mov	r4, r3
 8000cf0:	4615      	mov	r5, r2
 8000cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_RX_TASKHandle = osThreadCreate(osThread(UART_RX_TASK), NULL);
 8000cfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f004 fd00 	bl	800570a <osThreadCreate>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a38      	ldr	r2, [pc, #224]	; (8000df0 <MX_FREERTOS_Init+0x2d4>)
 8000d0e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ADC_CONFIG_TASK */
  osThreadDef(ADC_CONFIG_TASK, ADC_CONFIG_TASK_INIT, osPriorityBelowNormal, 0, 128);
 8000d10:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000d14:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d18:	4a36      	ldr	r2, [pc, #216]	; (8000df4 <MX_FREERTOS_Init+0x2d8>)
 8000d1a:	461c      	mov	r4, r3
 8000d1c:	4615      	mov	r5, r2
 8000d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_CONFIG_TASKHandle = osThreadCreate(osThread(ADC_CONFIG_TASK), NULL);
 8000d2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f004 fcea 	bl	800570a <osThreadCreate>
 8000d36:	4603      	mov	r3, r0
 8000d38:	4a2f      	ldr	r2, [pc, #188]	; (8000df8 <MX_FREERTOS_Init+0x2dc>)
 8000d3a:	6013      	str	r3, [r2, #0]

  /* definition and creation of INT_TIMER_TASK */
  osThreadDef(INT_TIMER_TASK, INT_TIMER_TASK_INIT, osPriorityAboveNormal, 0, 128);
 8000d3c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000d40:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000d44:	4a2d      	ldr	r2, [pc, #180]	; (8000dfc <MX_FREERTOS_Init+0x2e0>)
 8000d46:	461c      	mov	r4, r3
 8000d48:	4615      	mov	r5, r2
 8000d4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  INT_TIMER_TASKHandle = osThreadCreate(osThread(INT_TIMER_TASK), NULL);
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f004 fcd4 	bl	800570a <osThreadCreate>
 8000d62:	4603      	mov	r3, r0
 8000d64:	4a26      	ldr	r2, [pc, #152]	; (8000e00 <MX_FREERTOS_Init+0x2e4>)
 8000d66:	6013      	str	r3, [r2, #0]

  /* definition and creation of INT_UART_TASK */
  osThreadDef(INT_UART_TASK, INT_UART_TASK_INIT, osPriorityAboveNormal, 0, 128);
 8000d68:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000d6c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8000d70:	4a24      	ldr	r2, [pc, #144]	; (8000e04 <MX_FREERTOS_Init+0x2e8>)
 8000d72:	461c      	mov	r4, r3
 8000d74:	4615      	mov	r5, r2
 8000d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  INT_UART_TASKHandle = osThreadCreate(osThread(INT_UART_TASK), NULL);
 8000d82:	463b      	mov	r3, r7
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f004 fcbf 	bl	800570a <osThreadCreate>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4a1e      	ldr	r2, [pc, #120]	; (8000e08 <MX_FREERTOS_Init+0x2ec>)
 8000d90:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000d92:	bf00      	nop
 8000d94:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d9c:	20000310 	.word	0x20000310
 8000da0:	20000314 	.word	0x20000314
 8000da4:	20000318 	.word	0x20000318
 8000da8:	2000031c 	.word	0x2000031c
 8000dac:	08001101 	.word	0x08001101
 8000db0:	2000030c 	.word	0x2000030c
 8000db4:	08008fdc 	.word	0x08008fdc
 8000db8:	200002f8 	.word	0x200002f8
 8000dbc:	200002fc 	.word	0x200002fc
 8000dc0:	20000300 	.word	0x20000300
 8000dc4:	20000304 	.word	0x20000304
 8000dc8:	20000308 	.word	0x20000308
 8000dcc:	08008fec 	.word	0x08008fec
 8000dd0:	200002d8 	.word	0x200002d8
 8000dd4:	08009008 	.word	0x08009008
 8000dd8:	200002dc 	.word	0x200002dc
 8000ddc:	08009024 	.word	0x08009024
 8000de0:	200002e0 	.word	0x200002e0
 8000de4:	08009040 	.word	0x08009040
 8000de8:	200002e4 	.word	0x200002e4
 8000dec:	0800905c 	.word	0x0800905c
 8000df0:	200002e8 	.word	0x200002e8
 8000df4:	08009078 	.word	0x08009078
 8000df8:	200002ec 	.word	0x200002ec
 8000dfc:	08009094 	.word	0x08009094
 8000e00:	200002f0 	.word	0x200002f0
 8000e04:	080090b0 	.word	0x080090b0
 8000e08:	200002f4 	.word	0x200002f4

08000e0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  vTaskSuspend(NULL); // SUSPEND ITSELF
 8000e14:	2000      	movs	r0, #0
 8000e16:	f005 fd69 	bl	80068ec <vTaskSuspend>

  int i = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	  osDelay(1);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f004 fcbf 	bl	80057a2 <osDelay>
	  i = i+1;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	3301      	adds	r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]

	  if(i==1000)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e30:	d1f5      	bne.n	8000e1e <StartDefaultTask+0x12>
	  {
		 i = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); //RED FIRST
 8000e36:	2101      	movs	r1, #1
 8000e38:	4801      	ldr	r0, [pc, #4]	; (8000e40 <StartDefaultTask+0x34>)
 8000e3a:	f002 f928 	bl	800308e <HAL_GPIO_TogglePin>
	  osDelay(1);
 8000e3e:	e7ee      	b.n	8000e1e <StartDefaultTask+0x12>
 8000e40:	40020400 	.word	0x40020400

08000e44 <START_IDLE_TASK_1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_START_IDLE_TASK_1 */
void START_IDLE_TASK_1(void const * argument)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN START_IDLE_TASK_1 */
  /* Infinite loop */

	vTaskSuspend(NULL); // SUSPEND ITSELF
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f005 fd4d 	bl	80068ec <vTaskSuspend>

  for(;;)
  {
    osDelay(1);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f004 fca5 	bl	80057a2 <osDelay>
 8000e58:	e7fb      	b.n	8000e52 <START_IDLE_TASK_1+0xe>
	...

08000e5c <ADC_TAKE_TASK_INIT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADC_TAKE_TASK_INIT */
void ADC_TAKE_TASK_INIT(void const * argument)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
		char MSG[10]; //10 CHARACTER BUFFER (80bits) TO TRANSMIT OVER UART

	  /* Infinite loop */
	  for(;;)
	  {
		  osDelay(1);
 8000e64:	2001      	movs	r0, #1
 8000e66:	f004 fc9c 	bl	80057a2 <osDelay>

		//---------------------------------------------------------------
			  // GET ADC VALUE:

			  //START CONVERSION:
			  HAL_ADC_Start(&hadc1); // PASSING ADC HANDLING ADDRES
 8000e6a:	480c      	ldr	r0, [pc, #48]	; (8000e9c <ADC_TAKE_TASK_INIT+0x40>)
 8000e6c:	f000 fdec 	bl	8001a48 <HAL_ADC_Start>

			  // WAIT TO ADC CONVERSION TO COMPLETE:
			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	4809      	ldr	r0, [pc, #36]	; (8000e9c <ADC_TAKE_TASK_INIT+0x40>)
 8000e76:	f000 fe9b 	bl	8001bb0 <HAL_ADC_PollForConversion>

			  //WHEN CONVERSION IS DONE GET 12bit VALUE: (0-4095)
			  RAW_ADC_VALUE = HAL_ADC_GetValue(&hadc1);
 8000e7a:	4808      	ldr	r0, [pc, #32]	; (8000e9c <ADC_TAKE_TASK_INIT+0x40>)
 8000e7c:	f001 f833 	bl	8001ee6 <HAL_ADC_GetValue>
 8000e80:	4603      	mov	r3, r0
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	82fb      	strh	r3, [r7, #22]

			  //MSG[10] = "POBRANO DANE Z ADC";
			 // sprintf(MSG,"POBRANO DANE Z ADC,  %hu\r\n", RAW_ADC_VALUE);
			 // HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);

			  xQueueSend(ADC_QUEUE_UART_TXHandle, &RAW_ADC_VALUE, portMAX_DELAY);
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <ADC_TAKE_TASK_INIT+0x44>)
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	f107 0116 	add.w	r1, r7, #22
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295
 8000e94:	f004 ff7a 	bl	8005d8c <xQueueGenericSend>
		  osDelay(1);
 8000e98:	e7e4      	b.n	8000e64 <ADC_TAKE_TASK_INIT+0x8>
 8000e9a:	bf00      	nop
 8000e9c:	20000090 	.word	0x20000090
 8000ea0:	200002f8 	.word	0x200002f8

08000ea4 <UART_TX_TASK_INIT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_TASK_INIT */
void UART_TX_TASK_INIT(void const * argument)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN UART_TASK_INIT */
	  //------------------------------------------------------------------------------------------------------------------------------

		//osTimerStart(RTOS_TIMER_1Handle, 500);

	     uint8_t MODE = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		 uint16_t RAW_ADC_VALUE; // 12bit ADC READING
		 //uint16_t VOLTAGE_INT;
		 float VOLTAGE;
		 float DZIELNIK = 1/819;
 8000eb2:	f04f 0300 	mov.w	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
		 char MSG[10]; //10 CHARACTER BUFFER (80bits) TO TRANSMIT OVER UART
		 int i = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f004 fc70 	bl	80057a2 <osDelay>
	    xQueueReceive(ADC_QUEUE_UART_TXHandle, &RAW_ADC_VALUE, portMAX_DELAY);
 8000ec2:	4b42      	ldr	r3, [pc, #264]	; (8000fcc <UART_TX_TASK_INIT+0x128>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f107 0116 	add.w	r1, r7, #22
 8000eca:	f04f 32ff 	mov.w	r2, #4294967295
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f005 f8f6 	bl	80060c0 <xQueueReceive>
	    {

	    }


	    i = i+1;
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
	    if(i==500)
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ee0:	d1ec      	bne.n	8000ebc <UART_TX_TASK_INIT+0x18>
	    {
	    	i = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
	    //---------------------------------------------------------------

	       RAW_ADC_VALUE = (float)RAW_ADC_VALUE;
 8000ee6:	8afb      	ldrh	r3, [r7, #22]
 8000ee8:	ee07 3a90 	vmov	s15, r3
 8000eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ef4:	ee17 3a90 	vmov	r3, s15
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	82fb      	strh	r3, [r7, #22]
	       VOLTAGE = RAW_ADC_VALUE * DZIELNIK;
 8000efc:	8afb      	ldrh	r3, [r7, #22]
 8000efe:	ee07 3a90 	vmov	s15, r3
 8000f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f06:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f0e:	edc7 7a06 	vstr	s15, [r7, #24]
	       //VOLTAGE = RAW_ADC_VALUE/2;

	       sprintf(MSG,"\033c"); // WYSYLANIE KOMENDY CZYSZCZACEJ OKNO TERMINALA
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	492e      	ldr	r1, [pc, #184]	; (8000fd0 <UART_TX_TASK_INIT+0x12c>)
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f007 fbb7 	bl	800868c <siprintf>
	       HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff f95c 	bl	80001e0 <strlen>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	f107 010c 	add.w	r1, r7, #12
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
 8000f34:	4827      	ldr	r0, [pc, #156]	; (8000fd4 <UART_TX_TASK_INIT+0x130>)
 8000f36:	f003 f9e2 	bl	80042fe <HAL_UART_Transmit>

	   	   // CONVERT TO STRING: (HAVE TO INCLUDE LIB <string.h> <stdio.h>
	       sprintf(MSG,"ADC VALUE: %hu\r\n", RAW_ADC_VALUE);
 8000f3a:	8afb      	ldrh	r3, [r7, #22]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	4925      	ldr	r1, [pc, #148]	; (8000fd8 <UART_TX_TASK_INIT+0x134>)
 8000f44:	4618      	mov	r0, r3
 8000f46:	f007 fba1 	bl	800868c <siprintf>
	   	   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff f946 	bl	80001e0 <strlen>
 8000f54:	4603      	mov	r3, r0
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	f107 010c 	add.w	r1, r7, #12
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f60:	481c      	ldr	r0, [pc, #112]	; (8000fd4 <UART_TX_TASK_INIT+0x130>)
 8000f62:	f003 f9cc 	bl	80042fe <HAL_UART_Transmit>

	   	   MSG[10]="";
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <UART_TX_TASK_INIT+0x138>)
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	75bb      	strb	r3, [r7, #22]
	   	   // CONVERT TO STRING: (HAVE TO INCLUDE LIB <string.h> <stdio.h>
	   	   //sprintf(MSG,"VOLTAGE:  %hu\r\n ", VOLTAGE);
	   	   sprintf(MSG,"VOLTAGE:  ", VOLTAGE);
 8000f6c:	69b8      	ldr	r0, [r7, #24]
 8000f6e:	f7ff faf3 	bl	8000558 <__aeabi_f2d>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	f107 000c 	add.w	r0, r7, #12
 8000f7a:	4919      	ldr	r1, [pc, #100]	; (8000fe0 <UART_TX_TASK_INIT+0x13c>)
 8000f7c:	f007 fb86 	bl	800868c <siprintf>
	   	   //sprintf(MSG,"VOLTAGE:  %hu\r\n ", RAW_ADC_VALUE/2, "%.2f V");
	   	   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff f92b 	bl	80001e0 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	f107 010c 	add.w	r1, r7, #12
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	480f      	ldr	r0, [pc, #60]	; (8000fd4 <UART_TX_TASK_INIT+0x130>)
 8000f98:	f003 f9b1 	bl	80042fe <HAL_UART_Transmit>

	   	   MSG[10]="";
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <UART_TX_TASK_INIT+0x138>)
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	75bb      	strb	r3, [r7, #22]
	   	   sprintf(MSG,"V  ");
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	490f      	ldr	r1, [pc, #60]	; (8000fe4 <UART_TX_TASK_INIT+0x140>)
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f007 fb6f 	bl	800868c <siprintf>
	   	   HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff f914 	bl	80001e0 <strlen>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	f107 010c 	add.w	r1, r7, #12
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <UART_TX_TASK_INIT+0x130>)
 8000fc6:	f003 f99a 	bl	80042fe <HAL_UART_Transmit>
	    osDelay(1);
 8000fca:	e777      	b.n	8000ebc <UART_TX_TASK_INIT+0x18>
 8000fcc:	200002f8 	.word	0x200002f8
 8000fd0:	080090cc 	.word	0x080090cc
 8000fd4:	20000aa4 	.word	0x20000aa4
 8000fd8:	080090d0 	.word	0x080090d0
 8000fdc:	080090e4 	.word	0x080090e4
 8000fe0:	080090e8 	.word	0x080090e8
 8000fe4:	080090f4 	.word	0x080090f4

08000fe8 <UART_RX_TASK_INIT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_TASK_INIT */
void UART_RX_TASK_INIT(void const * argument)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
		uint16_t QUEUE_MSG;

	  /* Infinite loop */
	  for(;;)
	  {
		  osDelay(1);
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f004 fbd6 	bl	80057a2 <osDelay>
		  // HAL_UART_Receive(&huart1, (uint8_t*)MSG_RX, strlen(MSG_RX), HAL_MAX_DELAY);
		  // HAL_UART_Receive(&huart1, MSG_RX, strlen(MSG_RX), 1000);
		  // HAL_UART_Receive_DMA(&huart1, (uint8_t*)MSG_RX, strlen(MSG_RX));

		 // xQueueSend(INT_UART_QUEUE_UART_RXHandle, &RX_DATA, portMAX_DELAY);
		  xQueueReceive(INT_UART_QUEUE_UART_RXHandle, &RX_DATA, portMAX_DELAY);
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <UART_RX_TASK_INIT+0x64>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f107 010e 	add.w	r1, r7, #14
 8000ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8001002:	4618      	mov	r0, r3
 8001004:	f005 f85c 	bl	80060c0 <xQueueReceive>

		  if(RX_DATA == 48) // ASCI: 0
 8001008:	7bbb      	ldrb	r3, [r7, #14]
 800100a:	2b30      	cmp	r3, #48	; 0x30
 800100c:	d108      	bne.n	8001020 <UART_RX_TASK_INIT+0x38>
		  {
			  MODE=0; //START PAGE == QUIT
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]

			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <UART_RX_TASK_INIT+0x68>)
 800101a:	f002 f81f 	bl	800305c <HAL_GPIO_WritePin>
 800101e:	e7e7      	b.n	8000ff0 <UART_RX_TASK_INIT+0x8>
			   	//HAL_Delay(1000);

		  }
		  else if(RX_DATA == 57) // ASCI: 9
 8001020:	7bbb      	ldrb	r3, [r7, #14]
 8001022:	2b39      	cmp	r3, #57	; 0x39
 8001024:	d108      	bne.n	8001038 <UART_RX_TASK_INIT+0x50>
		  {
		  	 MODE=0; //START PAGE == QUIT
 8001026:	2300      	movs	r3, #0
 8001028:	73fb      	strb	r3, [r7, #15]

		  	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001030:	4807      	ldr	r0, [pc, #28]	; (8001050 <UART_RX_TASK_INIT+0x68>)
 8001032:	f002 f813 	bl	800305c <HAL_GPIO_WritePin>
 8001036:	e7db      	b.n	8000ff0 <UART_RX_TASK_INIT+0x8>
		  	 //HAL_Delay(1000);

		  }
		  else if(RX_DATA==49 && MODE==0)
 8001038:	7bbb      	ldrb	r3, [r7, #14]
 800103a:	2b31      	cmp	r3, #49	; 0x31
 800103c:	d1d8      	bne.n	8000ff0 <UART_RX_TASK_INIT+0x8>
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1d5      	bne.n	8000ff0 <UART_RX_TASK_INIT+0x8>
		  {
		  	   MODE=1; //
 8001044:	2301      	movs	r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]
		  osDelay(1);
 8001048:	e7d2      	b.n	8000ff0 <UART_RX_TASK_INIT+0x8>
 800104a:	bf00      	nop
 800104c:	20000308 	.word	0x20000308
 8001050:	40020400 	.word	0x40020400

08001054 <ADC_CONFIG_TASK_INIT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADC_CONFIG_TASK_INIT */
void ADC_CONFIG_TASK_INIT(void const * argument)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_CONFIG_TASK_INIT */
  /* Infinite loop */

	uint8_t ADC_PIN = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]

  for(;;)
  {
    osDelay(1);
 8001060:	2001      	movs	r0, #1
 8001062:	f004 fb9e 	bl	80057a2 <osDelay>

    // UART_RX_QUEUE_ADC_CONFIG
    xQueueReceive( UART_RX_QUEUE_ADC_CONFIGHandle, &ADC_PIN, portMAX_DELAY);
 8001066:	4b05      	ldr	r3, [pc, #20]	; (800107c <ADC_CONFIG_TASK_INIT+0x28>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f107 010f 	add.w	r1, r7, #15
 800106e:	f04f 32ff 	mov.w	r2, #4294967295
 8001072:	4618      	mov	r0, r3
 8001074:	f005 f824 	bl	80060c0 <xQueueReceive>
    osDelay(1);
 8001078:	e7f2      	b.n	8001060 <ADC_CONFIG_TASK_INIT+0xc>
 800107a:	bf00      	nop
 800107c:	20000304 	.word	0x20000304

08001080 <INT_TIMER_TASK_INIT>:



/* USER CODE END Header_INT_TIMER_TASK_INIT */
void INT_TIMER_TASK_INIT(void const * argument)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN INT_TIMER_TASK_INIT */
  /* Infinite loop */
  for(;;)
  {
    vTaskSuspend(NULL); // SUSPEND ITSELF
 8001088:	2000      	movs	r0, #0
 800108a:	f005 fc2f 	bl	80068ec <vTaskSuspend>
    // TASK WILL RUN WHEN ISR OCCOUR

    //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);

    HAL_TIM_Base_Start_IT(&htim11); // WZNOWIENIE TIMERA
 800108e:	4802      	ldr	r0, [pc, #8]	; (8001098 <INT_TIMER_TASK_INIT+0x18>)
 8001090:	f002 fcf2 	bl	8003a78 <HAL_TIM_Base_Start_IT>
    vTaskSuspend(NULL); // SUSPEND ITSELF
 8001094:	e7f8      	b.n	8001088 <INT_TIMER_TASK_INIT+0x8>
 8001096:	bf00      	nop
 8001098:	20000a5c 	.word	0x20000a5c

0800109c <INT_UART_TASK_INIT>:



/* USER CODE END Header_INT_UART_TASK_INIT */
void INT_UART_TASK_INIT(void const * argument)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	osDelay(100);
 80010a4:	2064      	movs	r0, #100	; 0x64
 80010a6:	f004 fb7c 	bl	80057a2 <osDelay>
	//HAL_UART_Receive_IT(&huart1, MSG_RX, 2);

	//-----------------------------------------------------------------
	uint8_t RX_DATA;
	// START THE DMA:
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) RxBuf, RxBuf_SIZE);
 80010aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ae:	4910      	ldr	r1, [pc, #64]	; (80010f0 <INT_UART_TASK_INIT+0x54>)
 80010b0:	4810      	ldr	r0, [pc, #64]	; (80010f4 <INT_UART_TASK_INIT+0x58>)
 80010b2:	f003 f9b6 	bl	8004422 <HAL_UARTEx_ReceiveToIdle_DMA>
	//__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);

  for(;;)
  {
	  vTaskSuspend(NULL); // SUSPEND ITSELF
 80010b6:	2000      	movs	r0, #0
 80010b8:	f005 fc18 	bl	80068ec <vTaskSuspend>
	  // TASK WILL RUN WHEN ISR OCCOUR

	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //BLUE DIODE
 80010bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <INT_UART_TASK_INIT+0x5c>)
 80010c2:	f001 ffe4 	bl	800308e <HAL_GPIO_TogglePin>

	  RX_DATA = RxBuf[0];
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <INT_UART_TASK_INIT+0x54>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	73fb      	strb	r3, [r7, #15]
	  xQueueSend(INT_UART_QUEUE_UART_RXHandle, &RX_DATA, portMAX_DELAY);
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <INT_UART_TASK_INIT+0x60>)
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	f107 010f 	add.w	r1, r7, #15
 80010d6:	2300      	movs	r3, #0
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	f004 fe56 	bl	8005d8c <xQueueGenericSend>

	  // START THE DMA AGAIN:
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) RxBuf, RxBuf_SIZE);
 80010e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e4:	4902      	ldr	r1, [pc, #8]	; (80010f0 <INT_UART_TASK_INIT+0x54>)
 80010e6:	4803      	ldr	r0, [pc, #12]	; (80010f4 <INT_UART_TASK_INIT+0x58>)
 80010e8:	f003 f99b 	bl	8004422 <HAL_UARTEx_ReceiveToIdle_DMA>
	  vTaskSuspend(NULL); // SUSPEND ITSELF
 80010ec:	e7e3      	b.n	80010b6 <INT_UART_TASK_INIT+0x1a>
 80010ee:	bf00      	nop
 80010f0:	200000d8 	.word	0x200000d8
 80010f4:	20000aa4 	.word	0x20000aa4
 80010f8:	40020400 	.word	0x40020400
 80010fc:	20000308 	.word	0x20000308

08001100 <TIMER_CALLBACK>:



/* TIMER_CALLBACK function */
void TIMER_CALLBACK(void const * argument)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <HAL_UARTEx_RxEventCallback>:
	   portYIELD_FROM_ISR(checkIfYieldRequired);
}
*/

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]

 //-------------------------------------------------------
 // WZNAWIANIE ZADANIA DO OBSŁUGI TEGO PRZERWANIA:
    BaseType_t checkIfYieldRequired;
 // xTaskResumeFromISR( TASK_HANDLER)
	checkIfYieldRequired = xTaskResumeFromISR(INT_UART_TASKHandle);
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_UARTEx_RxEventCallback+0x38>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f005 fca5 	bl	8006a74 <xTaskResumeFromISR>
 800112a:	60f8      	str	r0, [r7, #12]
	portYIELD_FROM_ISR(checkIfYieldRequired);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d007      	beq.n	8001142 <HAL_UARTEx_RxEventCallback+0x2e>
 8001132:	4b07      	ldr	r3, [pc, #28]	; (8001150 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	f3bf 8f4f 	dsb	sy
 800113e:	f3bf 8f6f 	isb	sy
				isOK = 1;
			}
		}
*/

}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200002f4 	.word	0x200002f4
 8001150:	e000ed04 	.word	0xe000ed04

08001154 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MX_GPIO_Init+0x80>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <MX_GPIO_Init+0x80>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <MX_GPIO_Init+0x80>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <MX_GPIO_Init+0x80>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <MX_GPIO_Init+0x80>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_GPIO_Init+0x80>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14
 80011a2:	2200      	movs	r2, #0
 80011a4:	f24e 0103 	movw	r1, #57347	; 0xe003
 80011a8:	480b      	ldr	r0, [pc, #44]	; (80011d8 <MX_GPIO_Init+0x84>)
 80011aa:	f001 ff57 	bl	800305c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14
 80011ae:	f24e 0303 	movw	r3, #57347	; 0xe003
 80011b2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011b4:	2311      	movs	r3, #17
 80011b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	4619      	mov	r1, r3
 80011c6:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_GPIO_Init+0x84>)
 80011c8:	f001 fdc4 	bl	8002d54 <HAL_GPIO_Init>

}
 80011cc:	bf00      	nop
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020400 	.word	0x40020400

080011dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e0:	f000 fbac 	bl	800193c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e4:	f000 f812 	bl	800120c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e8:	f7ff ffb4 	bl	8001154 <MX_GPIO_Init>
  MX_DMA_Init();
 80011ec:	f7ff fc2c 	bl	8000a48 <MX_DMA_Init>
  MX_ADC1_Init();
 80011f0:	f7ff fb8c 	bl	800090c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80011f4:	f000 fa96 	bl	8001724 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80011f8:	f000 f9d2 	bl	80015a0 <MX_TIM1_Init>
  MX_TIM11_Init();
 80011fc:	f000 fa20 	bl	8001640 <MX_TIM11_Init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001200:	f7ff fc8c 	bl	8000b1c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001204:	f004 fa7a 	bl	80056fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001208:	e7fe      	b.n	8001208 <main+0x2c>
	...

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b094      	sub	sp, #80	; 0x50
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 0320 	add.w	r3, r7, #32
 8001216:	2230      	movs	r2, #48	; 0x30
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f007 fa2e 	bl	800867c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <SystemClock_Config+0xcc>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	4a27      	ldr	r2, [pc, #156]	; (80012d8 <SystemClock_Config+0xcc>)
 800123a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123e:	6413      	str	r3, [r2, #64]	; 0x40
 8001240:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <SystemClock_Config+0xcc>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	4b22      	ldr	r3, [pc, #136]	; (80012dc <SystemClock_Config+0xd0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001258:	4a20      	ldr	r2, [pc, #128]	; (80012dc <SystemClock_Config+0xd0>)
 800125a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <SystemClock_Config+0xd0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800126c:	2302      	movs	r3, #2
 800126e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001270:	2301      	movs	r3, #1
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001274:	2310      	movs	r3, #16
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001278:	2302      	movs	r3, #2
 800127a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800127c:	2300      	movs	r3, #0
 800127e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001280:	2310      	movs	r3, #16
 8001282:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001284:	23a8      	movs	r3, #168	; 0xa8
 8001286:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001288:	2302      	movs	r3, #2
 800128a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800128c:	2304      	movs	r3, #4
 800128e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	4618      	mov	r0, r3
 8001296:	f001 ff15 	bl	80030c4 <HAL_RCC_OscConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012a0:	f000 f830 	bl	8001304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a4:	230f      	movs	r3, #15
 80012a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a8:	2302      	movs	r3, #2
 80012aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	2102      	movs	r1, #2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 f977 	bl	80035b4 <HAL_RCC_ClockConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012cc:	f000 f81a 	bl	8001304 <Error_Handler>
  }
}
 80012d0:	bf00      	nop
 80012d2:	3750      	adds	r7, #80	; 0x50
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40007000 	.word	0x40007000

080012e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d101      	bne.n	80012f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012f2:	f000 fb45 	bl	8001980 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40014400 	.word	0x40014400

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130c:	e7fe      	b.n	800130c <Error_Handler+0x8>
	...

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_MspInit+0x54>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a11      	ldr	r2, [pc, #68]	; (8001364 <HAL_MspInit+0x54>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <HAL_MspInit+0x54>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_MspInit+0x54>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <HAL_MspInit+0x54>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_MspInit+0x54>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	210f      	movs	r1, #15
 8001352:	f06f 0001 	mvn.w	r0, #1
 8001356:	f001 f8d1 	bl	80024fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800

08001368 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08c      	sub	sp, #48	; 0x30
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	4b2e      	ldr	r3, [pc, #184]	; (8001438 <HAL_InitTick+0xd0>)
 800137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001380:	4a2d      	ldr	r2, [pc, #180]	; (8001438 <HAL_InitTick+0xd0>)
 8001382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001386:	6453      	str	r3, [r2, #68]	; 0x44
 8001388:	4b2b      	ldr	r3, [pc, #172]	; (8001438 <HAL_InitTick+0xd0>)
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001394:	f107 020c 	add.w	r2, r7, #12
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f002 fae8 	bl	8003974 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80013a4:	f002 fad2 	bl	800394c <HAL_RCC_GetPCLK2Freq>
 80013a8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ac:	4a23      	ldr	r2, [pc, #140]	; (800143c <HAL_InitTick+0xd4>)
 80013ae:	fba2 2303 	umull	r2, r3, r2, r3
 80013b2:	0c9b      	lsrs	r3, r3, #18
 80013b4:	3b01      	subs	r3, #1
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80013b8:	4b21      	ldr	r3, [pc, #132]	; (8001440 <HAL_InitTick+0xd8>)
 80013ba:	4a22      	ldr	r2, [pc, #136]	; (8001444 <HAL_InitTick+0xdc>)
 80013bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_InitTick+0xd8>)
 80013c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013c4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80013c6:	4a1e      	ldr	r2, [pc, #120]	; (8001440 <HAL_InitTick+0xd8>)
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80013cc:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <HAL_InitTick+0xd8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_InitTick+0xd8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_InitTick+0xd8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80013de:	4818      	ldr	r0, [pc, #96]	; (8001440 <HAL_InitTick+0xd8>)
 80013e0:	f002 fafa 	bl	80039d8 <HAL_TIM_Base_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80013ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d11b      	bne.n	800142a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80013f2:	4813      	ldr	r0, [pc, #76]	; (8001440 <HAL_InitTick+0xd8>)
 80013f4:	f002 fb40 	bl	8003a78 <HAL_TIM_Base_Start_IT>
 80013f8:	4603      	mov	r3, r0
 80013fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80013fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001402:	2b00      	cmp	r3, #0
 8001404:	d111      	bne.n	800142a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001406:	2019      	movs	r0, #25
 8001408:	f001 f894 	bl	8002534 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	d808      	bhi.n	8001424 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001412:	2200      	movs	r2, #0
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	2019      	movs	r0, #25
 8001418:	f001 f870 	bl	80024fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800141c:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <HAL_InitTick+0xe0>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e002      	b.n	800142a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800142a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800142e:	4618      	mov	r0, r3
 8001430:	3730      	adds	r7, #48	; 0x30
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	431bde83 	.word	0x431bde83
 8001440:	200009c8 	.word	0x200009c8
 8001444:	40014400 	.word	0x40014400
 8001448:	20000004 	.word	0x20000004

0800144c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <NMI_Handler+0x4>

08001452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <HardFault_Handler+0x4>

08001458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <MemManage_Handler+0x4>

0800145e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <UsageFault_Handler+0x4>

0800146a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <ADC_IRQHandler+0x10>)
 800147e:	f000 fc22 	bl	8001cc6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000090 	.word	0x20000090

0800148c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001490:	4803      	ldr	r0, [pc, #12]	; (80014a0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001492:	f002 fb53 	bl	8003b3c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001496:	4803      	ldr	r0, [pc, #12]	; (80014a4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001498:	f002 fb50 	bl	8003b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000a14 	.word	0x20000a14
 80014a4:	200009c8 	.word	0x200009c8

080014a8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014ac:	4806      	ldr	r0, [pc, #24]	; (80014c8 <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 80014ae:	f002 fb45 	bl	8003b3c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 80014b4:	f002 fb42 	bl	8003b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */


  	  // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 	 // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80014b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014bc:	4804      	ldr	r0, [pc, #16]	; (80014d0 <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 80014be:	f001 fde6 	bl	800308e <HAL_GPIO_TogglePin>
 	 // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000a14 	.word	0x20000a14
 80014cc:	20000a5c 	.word	0x20000a5c
 80014d0:	40020400 	.word	0x40020400

080014d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <USART1_IRQHandler+0x10>)
 80014da:	f003 f807 	bl	80044ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000aa4 	.word	0x20000aa4

080014e8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <DMA2_Stream2_IRQHandler+0x10>)
 80014ee:	f001 f9c7 	bl	8002880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000ae8 	.word	0x20000ae8

080014fc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <DMA2_Stream7_IRQHandler+0x10>)
 8001502:	f001 f9bd 	bl	8002880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000b48 	.word	0x20000b48

08001510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <_sbrk+0x5c>)
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <_sbrk+0x60>)
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <_sbrk+0x64>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <_sbrk+0x68>)
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	429a      	cmp	r2, r3
 800153e:	d207      	bcs.n	8001550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001540:	f007 f864 	bl	800860c <__errno>
 8001544:	4603      	mov	r3, r0
 8001546:	220c      	movs	r2, #12
 8001548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	e009      	b.n	8001564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <_sbrk+0x64>)
 8001560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20018000 	.word	0x20018000
 8001570:	00000400 	.word	0x00000400
 8001574:	20000a10 	.word	0x20000a10
 8001578:	20004a50 	.word	0x20004a50

0800157c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <SystemInit+0x20>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <SystemInit+0x20>)
 8001588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b4:	463b      	mov	r3, r7
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <MX_TIM1_Init+0x98>)
 80015be:	4a1f      	ldr	r2, [pc, #124]	; (800163c <MX_TIM1_Init+0x9c>)
 80015c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015c2:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <MX_TIM1_Init+0x98>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <MX_TIM1_Init+0x98>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <MX_TIM1_Init+0x98>)
 80015d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <MX_TIM1_Init+0x98>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <MX_TIM1_Init+0x98>)
 80015de:	2200      	movs	r2, #0
 80015e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <MX_TIM1_Init+0x98>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015e8:	4813      	ldr	r0, [pc, #76]	; (8001638 <MX_TIM1_Init+0x98>)
 80015ea:	f002 f9f5 	bl	80039d8 <HAL_TIM_Base_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015f4:	f7ff fe86 	bl	8001304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015fe:	f107 0308 	add.w	r3, r7, #8
 8001602:	4619      	mov	r1, r3
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <MX_TIM1_Init+0x98>)
 8001606:	f002 fba1 	bl	8003d4c <HAL_TIM_ConfigClockSource>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001610:	f7ff fe78 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001614:	2300      	movs	r3, #0
 8001616:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800161c:	463b      	mov	r3, r7
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_TIM1_Init+0x98>)
 8001622:	f002 fd9d 	bl	8004160 <HAL_TIMEx_MasterConfigSynchronization>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800162c:	f7ff fe6a 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000a14 	.word	0x20000a14
 800163c:	40010000 	.word	0x40010000

08001640 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001644:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MX_TIM11_Init+0x40>)
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <MX_TIM11_Init+0x44>)
 8001648:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8399;
 800164a:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <MX_TIM11_Init+0x40>)
 800164c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001650:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <MX_TIM11_Init+0x40>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_TIM11_Init+0x40>)
 800165a:	f242 720f 	movw	r2, #9999	; 0x270f
 800165e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <MX_TIM11_Init+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <MX_TIM11_Init+0x40>)
 8001668:	2280      	movs	r2, #128	; 0x80
 800166a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800166c:	4804      	ldr	r0, [pc, #16]	; (8001680 <MX_TIM11_Init+0x40>)
 800166e:	f002 f9b3 	bl	80039d8 <HAL_TIM_Base_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001678:	f7ff fe44 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000a5c 	.word	0x20000a5c
 8001684:	40014800 	.word	0x40014800

08001688 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a20      	ldr	r2, [pc, #128]	; (8001718 <HAL_TIM_Base_MspInit+0x90>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d11e      	bne.n	80016d8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b1f      	ldr	r3, [pc, #124]	; (800171c <HAL_TIM_Base_MspInit+0x94>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	4a1e      	ldr	r2, [pc, #120]	; (800171c <HAL_TIM_Base_MspInit+0x94>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6453      	str	r3, [r2, #68]	; 0x44
 80016aa:	4b1c      	ldr	r3, [pc, #112]	; (800171c <HAL_TIM_Base_MspInit+0x94>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2105      	movs	r1, #5
 80016ba:	2019      	movs	r0, #25
 80016bc:	f000 ff1e 	bl	80024fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016c0:	2019      	movs	r0, #25
 80016c2:	f000 ff37 	bl	8002534 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2105      	movs	r1, #5
 80016ca:	201a      	movs	r0, #26
 80016cc:	f000 ff16 	bl	80024fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80016d0:	201a      	movs	r0, #26
 80016d2:	f000 ff2f 	bl	8002534 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80016d6:	e01a      	b.n	800170e <HAL_TIM_Base_MspInit+0x86>
  else if(tim_baseHandle->Instance==TIM11)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a10      	ldr	r2, [pc, #64]	; (8001720 <HAL_TIM_Base_MspInit+0x98>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d115      	bne.n	800170e <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_TIM_Base_MspInit+0x94>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	4a0c      	ldr	r2, [pc, #48]	; (800171c <HAL_TIM_Base_MspInit+0x94>)
 80016ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f0:	6453      	str	r3, [r2, #68]	; 0x44
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <HAL_TIM_Base_MspInit+0x94>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2105      	movs	r1, #5
 8001702:	201a      	movs	r0, #26
 8001704:	f000 fefa 	bl	80024fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001708:	201a      	movs	r0, #26
 800170a:	f000 ff13 	bl	8002534 <HAL_NVIC_EnableIRQ>
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40010000 	.word	0x40010000
 800171c:	40023800 	.word	0x40023800
 8001720:	40014800 	.word	0x40014800

08001724 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_USART1_UART_Init+0x4c>)
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <MX_USART1_UART_Init+0x50>)
 800172c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <MX_USART1_UART_Init+0x4c>)
 8001730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_USART1_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_USART1_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <MX_USART1_UART_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_USART1_UART_Init+0x4c>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <MX_USART1_UART_Init+0x4c>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_USART1_UART_Init+0x4c>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_USART1_UART_Init+0x4c>)
 800175c:	f002 fd82 	bl	8004264 <HAL_UART_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001766:	f7ff fdcd 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000aa4 	.word	0x20000aa4
 8001774:	40011000 	.word	0x40011000

08001778 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a4d      	ldr	r2, [pc, #308]	; (80018cc <HAL_UART_MspInit+0x154>)
 8001796:	4293      	cmp	r3, r2
 8001798:	f040 8093 	bne.w	80018c2 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800179c:	2300      	movs	r3, #0
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	4b4b      	ldr	r3, [pc, #300]	; (80018d0 <HAL_UART_MspInit+0x158>)
 80017a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a4:	4a4a      	ldr	r2, [pc, #296]	; (80018d0 <HAL_UART_MspInit+0x158>)
 80017a6:	f043 0310 	orr.w	r3, r3, #16
 80017aa:	6453      	str	r3, [r2, #68]	; 0x44
 80017ac:	4b48      	ldr	r3, [pc, #288]	; (80018d0 <HAL_UART_MspInit+0x158>)
 80017ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	4b44      	ldr	r3, [pc, #272]	; (80018d0 <HAL_UART_MspInit+0x158>)
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c0:	4a43      	ldr	r2, [pc, #268]	; (80018d0 <HAL_UART_MspInit+0x158>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6313      	str	r3, [r2, #48]	; 0x30
 80017c8:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <HAL_UART_MspInit+0x158>)
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017e6:	2307      	movs	r3, #7
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	4838      	ldr	r0, [pc, #224]	; (80018d4 <HAL_UART_MspInit+0x15c>)
 80017f2:	f001 faaf 	bl	8002d54 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80017f6:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <HAL_UART_MspInit+0x160>)
 80017f8:	4a38      	ldr	r2, [pc, #224]	; (80018dc <HAL_UART_MspInit+0x164>)
 80017fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80017fc:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <HAL_UART_MspInit+0x160>)
 80017fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001802:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001804:	4b34      	ldr	r3, [pc, #208]	; (80018d8 <HAL_UART_MspInit+0x160>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800180a:	4b33      	ldr	r3, [pc, #204]	; (80018d8 <HAL_UART_MspInit+0x160>)
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001810:	4b31      	ldr	r3, [pc, #196]	; (80018d8 <HAL_UART_MspInit+0x160>)
 8001812:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001816:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001818:	4b2f      	ldr	r3, [pc, #188]	; (80018d8 <HAL_UART_MspInit+0x160>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800181e:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <HAL_UART_MspInit+0x160>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001824:	4b2c      	ldr	r3, [pc, #176]	; (80018d8 <HAL_UART_MspInit+0x160>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800182a:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <HAL_UART_MspInit+0x160>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001830:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <HAL_UART_MspInit+0x160>)
 8001832:	2200      	movs	r2, #0
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001836:	4828      	ldr	r0, [pc, #160]	; (80018d8 <HAL_UART_MspInit+0x160>)
 8001838:	f000 fe8a 	bl	8002550 <HAL_DMA_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001842:	f7ff fd5f 	bl	8001304 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a23      	ldr	r2, [pc, #140]	; (80018d8 <HAL_UART_MspInit+0x160>)
 800184a:	639a      	str	r2, [r3, #56]	; 0x38
 800184c:	4a22      	ldr	r2, [pc, #136]	; (80018d8 <HAL_UART_MspInit+0x160>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001852:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <HAL_UART_MspInit+0x168>)
 8001854:	4a23      	ldr	r2, [pc, #140]	; (80018e4 <HAL_UART_MspInit+0x16c>)
 8001856:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001858:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <HAL_UART_MspInit+0x168>)
 800185a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800185e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001860:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <HAL_UART_MspInit+0x168>)
 8001862:	2240      	movs	r2, #64	; 0x40
 8001864:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001866:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <HAL_UART_MspInit+0x168>)
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800186c:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <HAL_UART_MspInit+0x168>)
 800186e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001872:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <HAL_UART_MspInit+0x168>)
 8001876:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800187a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HAL_UART_MspInit+0x168>)
 800187e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001882:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <HAL_UART_MspInit+0x168>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_UART_MspInit+0x168>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001890:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <HAL_UART_MspInit+0x168>)
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001896:	4812      	ldr	r0, [pc, #72]	; (80018e0 <HAL_UART_MspInit+0x168>)
 8001898:	f000 fe5a 	bl	8002550 <HAL_DMA_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80018a2:	f7ff fd2f 	bl	8001304 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a0d      	ldr	r2, [pc, #52]	; (80018e0 <HAL_UART_MspInit+0x168>)
 80018aa:	635a      	str	r2, [r3, #52]	; 0x34
 80018ac:	4a0c      	ldr	r2, [pc, #48]	; (80018e0 <HAL_UART_MspInit+0x168>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2105      	movs	r1, #5
 80018b6:	2025      	movs	r0, #37	; 0x25
 80018b8:	f000 fe20 	bl	80024fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018bc:	2025      	movs	r0, #37	; 0x25
 80018be:	f000 fe39 	bl	8002534 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	; 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40011000 	.word	0x40011000
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020000 	.word	0x40020000
 80018d8:	20000ae8 	.word	0x20000ae8
 80018dc:	40026440 	.word	0x40026440
 80018e0:	20000b48 	.word	0x20000b48
 80018e4:	400264b8 	.word	0x400264b8

080018e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001920 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018ec:	480d      	ldr	r0, [pc, #52]	; (8001924 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018ee:	490e      	ldr	r1, [pc, #56]	; (8001928 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018f0:	4a0e      	ldr	r2, [pc, #56]	; (800192c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001904:	4c0b      	ldr	r4, [pc, #44]	; (8001934 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001912:	f7ff fe33 	bl	800157c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001916:	f006 fe7f 	bl	8008618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191a:	f7ff fc5f 	bl	80011dc <main>
  bx  lr    
 800191e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001920:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001928:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800192c:	08009178 	.word	0x08009178
  ldr r2, =_sbss
 8001930:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001934:	20004a4c 	.word	0x20004a4c

08001938 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <DMA1_Stream0_IRQHandler>
	...

0800193c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001940:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0d      	ldr	r2, [pc, #52]	; (800197c <HAL_Init+0x40>)
 8001946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_Init+0x40>)
 8001952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001956:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_Init+0x40>)
 800195e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f000 fdbe 	bl	80024e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196a:	2005      	movs	r0, #5
 800196c:	f7ff fcfc 	bl	8001368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001970:	f7ff fcce 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023c00 	.word	0x40023c00

08001980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_IncTick+0x20>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_IncTick+0x24>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4413      	add	r3, r2
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <HAL_IncTick+0x24>)
 8001992:	6013      	str	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000008 	.word	0x20000008
 80019a4:	20000ba8 	.word	0x20000ba8

080019a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return uwTick;
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <HAL_GetTick+0x14>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000ba8 	.word	0x20000ba8

080019c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e033      	b.n	8001a3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d109      	bne.n	80019f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7fe ffe6 	bl	80009b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d118      	bne.n	8001a30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a06:	f023 0302 	bic.w	r3, r3, #2
 8001a0a:	f043 0202 	orr.w	r2, r3, #2
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 fbb4 	bl	8002180 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f023 0303 	bic.w	r3, r3, #3
 8001a26:	f043 0201 	orr.w	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a2e:	e001      	b.n	8001a34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_ADC_Start+0x1a>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e097      	b.n	8001b92 <HAL_ADC_Start+0x14a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d018      	beq.n	8001aaa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a88:	4b45      	ldr	r3, [pc, #276]	; (8001ba0 <HAL_ADC_Start+0x158>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a45      	ldr	r2, [pc, #276]	; (8001ba4 <HAL_ADC_Start+0x15c>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	0c9a      	lsrs	r2, r3, #18
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a9c:	e002      	b.n	8001aa4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f9      	bne.n	8001a9e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d15f      	bne.n	8001b78 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d007      	beq.n	8001aea <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ae2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af6:	d106      	bne.n	8001b06 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afc:	f023 0206 	bic.w	r2, r3, #6
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	645a      	str	r2, [r3, #68]	; 0x44
 8001b04:	e002      	b.n	8001b0c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b14:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <HAL_ADC_Start+0x160>)
 8001b16:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b20:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 031f 	and.w	r3, r3, #31
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10f      	bne.n	8001b4e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d129      	bne.n	8001b90 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	e020      	b.n	8001b90 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a16      	ldr	r2, [pc, #88]	; (8001bac <HAL_ADC_Start+0x164>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d11b      	bne.n	8001b90 <HAL_ADC_Start+0x148>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d114      	bne.n	8001b90 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	e00b      	b.n	8001b90 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f043 0210 	orr.w	r2, r3, #16
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b88:	f043 0201 	orr.w	r2, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	431bde83 	.word	0x431bde83
 8001ba8:	40012300 	.word	0x40012300
 8001bac:	40012000 	.word	0x40012000

08001bb0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bcc:	d113      	bne.n	8001bf6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bdc:	d10b      	bne.n	8001bf6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f043 0220 	orr.w	r2, r3, #32
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e063      	b.n	8001cbe <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001bf6:	f7ff fed7 	bl	80019a8 <HAL_GetTick>
 8001bfa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bfc:	e021      	b.n	8001c42 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c04:	d01d      	beq.n	8001c42 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d007      	beq.n	8001c1c <HAL_ADC_PollForConversion+0x6c>
 8001c0c:	f7ff fecc 	bl	80019a8 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d212      	bcs.n	8001c42 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d00b      	beq.n	8001c42 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f043 0204 	orr.w	r2, r3, #4
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e03d      	b.n	8001cbe <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d1d6      	bne.n	8001bfe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0212 	mvn.w	r2, #18
 8001c58:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d123      	bne.n	8001cbc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d11f      	bne.n	8001cbc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d006      	beq.n	8001c98 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d111      	bne.n	8001cbc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d105      	bne.n	8001cbc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f043 0201 	orr.w	r2, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	f003 0320 	and.w	r3, r3, #32
 8001cf4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d049      	beq.n	8001d90 <HAL_ADC_IRQHandler+0xca>
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d046      	beq.n	8001d90 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d105      	bne.n	8001d1a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d12b      	bne.n	8001d80 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d127      	bne.n	8001d80 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d006      	beq.n	8001d4c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d119      	bne.n	8001d80 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0220 	bic.w	r2, r2, #32
 8001d5a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d105      	bne.n	8001d80 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	f043 0201 	orr.w	r2, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f8bd 	bl	8001f00 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f06f 0212 	mvn.w	r2, #18
 8001d8e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d057      	beq.n	8001e56 <HAL_ADC_IRQHandler+0x190>
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d054      	beq.n	8001e56 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d105      	bne.n	8001dc4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d139      	bne.n	8001e46 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d12b      	bne.n	8001e46 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d124      	bne.n	8001e46 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d11d      	bne.n	8001e46 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d119      	bne.n	8001e46 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e20:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d105      	bne.n	8001e46 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f043 0201 	orr.w	r2, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 fa96 	bl	8002378 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 020c 	mvn.w	r2, #12
 8001e54:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e64:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d017      	beq.n	8001e9c <HAL_ADC_IRQHandler+0x1d6>
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d014      	beq.n	8001e9c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d10d      	bne.n	8001e9c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f841 	bl	8001f14 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f06f 0201 	mvn.w	r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eaa:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d015      	beq.n	8001ede <HAL_ADC_IRQHandler+0x218>
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d012      	beq.n	8001ede <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebc:	f043 0202 	orr.w	r2, r3, #2
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0220 	mvn.w	r2, #32
 8001ecc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f82a 	bl	8001f28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0220 	mvn.w	r2, #32
 8001edc:	601a      	str	r2, [r3, #0]
  }
}
 8001ede:	bf00      	nop
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1c>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e105      	b.n	8002164 <HAL_ADC_ConfigChannel+0x228>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b09      	cmp	r3, #9
 8001f66:	d925      	bls.n	8001fb4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68d9      	ldr	r1, [r3, #12]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b1e      	subs	r3, #30
 8001f7e:	2207      	movs	r2, #7
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43da      	mvns	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68d9      	ldr	r1, [r3, #12]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4403      	add	r3, r0
 8001fa6:	3b1e      	subs	r3, #30
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	e022      	b.n	8001ffa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6919      	ldr	r1, [r3, #16]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	2207      	movs	r2, #7
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	400a      	ands	r2, r1
 8001fd6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6919      	ldr	r1, [r3, #16]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	4618      	mov	r0, r3
 8001fea:	4603      	mov	r3, r0
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4403      	add	r3, r0
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d824      	bhi.n	800204c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	3b05      	subs	r3, #5
 8002014:	221f      	movs	r2, #31
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43da      	mvns	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	400a      	ands	r2, r1
 8002022:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	4618      	mov	r0, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	3b05      	subs	r3, #5
 800203e:	fa00 f203 	lsl.w	r2, r0, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	635a      	str	r2, [r3, #52]	; 0x34
 800204a:	e04c      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b0c      	cmp	r3, #12
 8002052:	d824      	bhi.n	800209e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	3b23      	subs	r3, #35	; 0x23
 8002066:	221f      	movs	r2, #31
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43da      	mvns	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	400a      	ands	r2, r1
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	b29b      	uxth	r3, r3
 8002082:	4618      	mov	r0, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	3b23      	subs	r3, #35	; 0x23
 8002090:	fa00 f203 	lsl.w	r2, r0, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	631a      	str	r2, [r3, #48]	; 0x30
 800209c:	e023      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	3b41      	subs	r3, #65	; 0x41
 80020b0:	221f      	movs	r2, #31
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43da      	mvns	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	400a      	ands	r2, r1
 80020be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	4618      	mov	r0, r3
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	3b41      	subs	r3, #65	; 0x41
 80020da:	fa00 f203 	lsl.w	r2, r0, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020e6:	4b22      	ldr	r3, [pc, #136]	; (8002170 <HAL_ADC_ConfigChannel+0x234>)
 80020e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a21      	ldr	r2, [pc, #132]	; (8002174 <HAL_ADC_ConfigChannel+0x238>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d109      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x1cc>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b12      	cmp	r3, #18
 80020fa:	d105      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a19      	ldr	r2, [pc, #100]	; (8002174 <HAL_ADC_ConfigChannel+0x238>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d123      	bne.n	800215a <HAL_ADC_ConfigChannel+0x21e>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b10      	cmp	r3, #16
 8002118:	d003      	beq.n	8002122 <HAL_ADC_ConfigChannel+0x1e6>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b11      	cmp	r3, #17
 8002120:	d11b      	bne.n	800215a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b10      	cmp	r3, #16
 8002134:	d111      	bne.n	800215a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_ADC_ConfigChannel+0x23c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a10      	ldr	r2, [pc, #64]	; (800217c <HAL_ADC_ConfigChannel+0x240>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	0c9a      	lsrs	r2, r3, #18
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800214c:	e002      	b.n	8002154 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	3b01      	subs	r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f9      	bne.n	800214e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	40012300 	.word	0x40012300
 8002174:	40012000 	.word	0x40012000
 8002178:	20000000 	.word	0x20000000
 800217c:	431bde83 	.word	0x431bde83

08002180 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002188:	4b79      	ldr	r3, [pc, #484]	; (8002370 <ADC_Init+0x1f0>)
 800218a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	431a      	orrs	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	021a      	lsls	r2, r3, #8
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6859      	ldr	r1, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6899      	ldr	r1, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	4a58      	ldr	r2, [pc, #352]	; (8002374 <ADC_Init+0x1f4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d022      	beq.n	800225e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002226:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6899      	ldr	r1, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002248:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6899      	ldr	r1, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	e00f      	b.n	800227e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800226c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800227c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0202 	bic.w	r2, r2, #2
 800228c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6899      	ldr	r1, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	7e1b      	ldrb	r3, [r3, #24]
 8002298:	005a      	lsls	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01b      	beq.n	80022e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6859      	ldr	r1, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	3b01      	subs	r3, #1
 80022d8:	035a      	lsls	r2, r3, #13
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	e007      	b.n	80022f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002302:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	3b01      	subs	r3, #1
 8002310:	051a      	lsls	r2, r3, #20
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002328:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6899      	ldr	r1, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002336:	025a      	lsls	r2, r3, #9
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6899      	ldr	r1, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	029a      	lsls	r2, r3, #10
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	609a      	str	r2, [r3, #8]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	40012300 	.word	0x40012300
 8002374:	0f000001 	.word	0x0f000001

08002378 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a8:	4013      	ands	r3, r2
 80023aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023be:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	60d3      	str	r3, [r2, #12]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d8:	4b04      	ldr	r3, [pc, #16]	; (80023ec <__NVIC_GetPriorityGrouping+0x18>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	f003 0307 	and.w	r3, r3, #7
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db0b      	blt.n	800241a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	4907      	ldr	r1, [pc, #28]	; (8002428 <__NVIC_EnableIRQ+0x38>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	2001      	movs	r0, #1
 8002412:	fa00 f202 	lsl.w	r2, r0, r2
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000e100 	.word	0xe000e100

0800242c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	2b00      	cmp	r3, #0
 800243e:	db0a      	blt.n	8002456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	b2da      	uxtb	r2, r3
 8002444:	490c      	ldr	r1, [pc, #48]	; (8002478 <__NVIC_SetPriority+0x4c>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	0112      	lsls	r2, r2, #4
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	440b      	add	r3, r1
 8002450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002454:	e00a      	b.n	800246c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4908      	ldr	r1, [pc, #32]	; (800247c <__NVIC_SetPriority+0x50>)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	3b04      	subs	r3, #4
 8002464:	0112      	lsls	r2, r2, #4
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	440b      	add	r3, r1
 800246a:	761a      	strb	r2, [r3, #24]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000e100 	.word	0xe000e100
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f1c3 0307 	rsb	r3, r3, #7
 800249a:	2b04      	cmp	r3, #4
 800249c:	bf28      	it	cs
 800249e:	2304      	movcs	r3, #4
 80024a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3304      	adds	r3, #4
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	d902      	bls.n	80024b0 <NVIC_EncodePriority+0x30>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3b03      	subs	r3, #3
 80024ae:	e000      	b.n	80024b2 <NVIC_EncodePriority+0x32>
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	f04f 32ff 	mov.w	r2, #4294967295
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43da      	mvns	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	401a      	ands	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c8:	f04f 31ff 	mov.w	r1, #4294967295
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	43d9      	mvns	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	4313      	orrs	r3, r2
         );
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3724      	adds	r7, #36	; 0x24
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ff4c 	bl	800238c <__NVIC_SetPriorityGrouping>
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800250e:	f7ff ff61 	bl	80023d4 <__NVIC_GetPriorityGrouping>
 8002512:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	6978      	ldr	r0, [r7, #20]
 800251a:	f7ff ffb1 	bl	8002480 <NVIC_EncodePriority>
 800251e:	4602      	mov	r2, r0
 8002520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff ff80 	bl	800242c <__NVIC_SetPriority>
}
 800252c:	bf00      	nop
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff ff54 	bl	80023f0 <__NVIC_EnableIRQ>
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800255c:	f7ff fa24 	bl	80019a8 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e099      	b.n	80026a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800258c:	e00f      	b.n	80025ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800258e:	f7ff fa0b 	bl	80019a8 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b05      	cmp	r3, #5
 800259a:	d908      	bls.n	80025ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2220      	movs	r2, #32
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2203      	movs	r2, #3
 80025a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e078      	b.n	80026a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1e8      	bne.n	800258e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	4b38      	ldr	r3, [pc, #224]	; (80026a8 <HAL_DMA_Init+0x158>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	2b04      	cmp	r3, #4
 8002606:	d107      	bne.n	8002618 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	4313      	orrs	r3, r2
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4313      	orrs	r3, r2
 8002616:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f023 0307 	bic.w	r3, r3, #7
 800262e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	4313      	orrs	r3, r2
 8002638:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	2b04      	cmp	r3, #4
 8002640:	d117      	bne.n	8002672 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4313      	orrs	r3, r2
 800264a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00e      	beq.n	8002672 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 fb01 	bl	8002c5c <DMA_CheckFifoParam>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2240      	movs	r2, #64	; 0x40
 8002664:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800266e:	2301      	movs	r3, #1
 8002670:	e016      	b.n	80026a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fab8 	bl	8002bf0 <DMA_CalcBaseAndBitshift>
 8002680:	4603      	mov	r3, r0
 8002682:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002688:	223f      	movs	r2, #63	; 0x3f
 800268a:	409a      	lsls	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	f010803f 	.word	0xf010803f

080026ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_DMA_Start_IT+0x26>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e040      	b.n	8002754 <HAL_DMA_Start_IT+0xa8>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d12f      	bne.n	8002746 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2202      	movs	r2, #2
 80026ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fa4a 	bl	8002b94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002704:	223f      	movs	r2, #63	; 0x3f
 8002706:	409a      	lsls	r2, r3
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0216 	orr.w	r2, r2, #22
 800271a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0208 	orr.w	r2, r2, #8
 8002732:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	e005      	b.n	8002752 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800274e:	2302      	movs	r3, #2
 8002750:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002752:	7dfb      	ldrb	r3, [r7, #23]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002768:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800276a:	f7ff f91d 	bl	80019a8 <HAL_GetTick>
 800276e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d008      	beq.n	800278e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2280      	movs	r2, #128	; 0x80
 8002780:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e052      	b.n	8002834 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0216 	bic.w	r2, r2, #22
 800279c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d103      	bne.n	80027be <HAL_DMA_Abort+0x62>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d007      	beq.n	80027ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0208 	bic.w	r2, r2, #8
 80027cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0201 	bic.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027de:	e013      	b.n	8002808 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027e0:	f7ff f8e2 	bl	80019a8 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	d90c      	bls.n	8002808 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2220      	movs	r2, #32
 80027f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2203      	movs	r2, #3
 80027f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e015      	b.n	8002834 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1e4      	bne.n	80027e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	223f      	movs	r2, #63	; 0x3f
 800281c:	409a      	lsls	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d004      	beq.n	800285a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2280      	movs	r2, #128	; 0x80
 8002854:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e00c      	b.n	8002874 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2205      	movs	r2, #5
 800285e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0201 	bic.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800288c:	4b8e      	ldr	r3, [pc, #568]	; (8002ac8 <HAL_DMA_IRQHandler+0x248>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a8e      	ldr	r2, [pc, #568]	; (8002acc <HAL_DMA_IRQHandler+0x24c>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	0a9b      	lsrs	r3, r3, #10
 8002898:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028aa:	2208      	movs	r2, #8
 80028ac:	409a      	lsls	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d01a      	beq.n	80028ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d013      	beq.n	80028ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0204 	bic.w	r2, r2, #4
 80028d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d8:	2208      	movs	r2, #8
 80028da:	409a      	lsls	r2, r3
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e4:	f043 0201 	orr.w	r2, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f0:	2201      	movs	r2, #1
 80028f2:	409a      	lsls	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d012      	beq.n	8002922 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00b      	beq.n	8002922 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290e:	2201      	movs	r2, #1
 8002910:	409a      	lsls	r2, r3
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291a:	f043 0202 	orr.w	r2, r3, #2
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002926:	2204      	movs	r2, #4
 8002928:	409a      	lsls	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d012      	beq.n	8002958 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00b      	beq.n	8002958 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002944:	2204      	movs	r2, #4
 8002946:	409a      	lsls	r2, r3
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002950:	f043 0204 	orr.w	r2, r3, #4
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295c:	2210      	movs	r2, #16
 800295e:	409a      	lsls	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4013      	ands	r3, r2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d043      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d03c      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	2210      	movs	r2, #16
 800297c:	409a      	lsls	r2, r3
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d018      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d108      	bne.n	80029b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d024      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	4798      	blx	r3
 80029ae:	e01f      	b.n	80029f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d01b      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4798      	blx	r3
 80029c0:	e016      	b.n	80029f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d107      	bne.n	80029e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0208 	bic.w	r2, r2, #8
 80029de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f4:	2220      	movs	r2, #32
 80029f6:	409a      	lsls	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 808f 	beq.w	8002b20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 8087 	beq.w	8002b20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a16:	2220      	movs	r2, #32
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b05      	cmp	r3, #5
 8002a28:	d136      	bne.n	8002a98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0216 	bic.w	r2, r2, #22
 8002a38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695a      	ldr	r2, [r3, #20]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d103      	bne.n	8002a5a <HAL_DMA_IRQHandler+0x1da>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d007      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0208 	bic.w	r2, r2, #8
 8002a68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6e:	223f      	movs	r2, #63	; 0x3f
 8002a70:	409a      	lsls	r2, r3
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d07e      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	4798      	blx	r3
        }
        return;
 8002a96:	e079      	b.n	8002b8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d01d      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10d      	bne.n	8002ad0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d031      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4798      	blx	r3
 8002ac4:	e02c      	b.n	8002b20 <HAL_DMA_IRQHandler+0x2a0>
 8002ac6:	bf00      	nop
 8002ac8:	20000000 	.word	0x20000000
 8002acc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d023      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
 8002ae0:	e01e      	b.n	8002b20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10f      	bne.n	8002b10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0210 	bic.w	r2, r2, #16
 8002afe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d032      	beq.n	8002b8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d022      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2205      	movs	r2, #5
 8002b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d307      	bcc.n	8002b68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f2      	bne.n	8002b4c <HAL_DMA_IRQHandler+0x2cc>
 8002b66:	e000      	b.n	8002b6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	4798      	blx	r3
 8002b8a:	e000      	b.n	8002b8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b8c:	bf00      	nop
    }
  }
}
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b40      	cmp	r3, #64	; 0x40
 8002bc0:	d108      	bne.n	8002bd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bd2:	e007      	b.n	8002be4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	60da      	str	r2, [r3, #12]
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	3b10      	subs	r3, #16
 8002c00:	4a14      	ldr	r2, [pc, #80]	; (8002c54 <DMA_CalcBaseAndBitshift+0x64>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	091b      	lsrs	r3, r3, #4
 8002c08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c0a:	4a13      	ldr	r2, [pc, #76]	; (8002c58 <DMA_CalcBaseAndBitshift+0x68>)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4413      	add	r3, r2
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d909      	bls.n	8002c32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	1d1a      	adds	r2, r3, #4
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c30:	e007      	b.n	8002c42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c3a:	f023 0303 	bic.w	r3, r3, #3
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	aaaaaaab 	.word	0xaaaaaaab
 8002c58:	0800912c 	.word	0x0800912c

08002c5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d11f      	bne.n	8002cb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d856      	bhi.n	8002d2a <DMA_CheckFifoParam+0xce>
 8002c7c:	a201      	add	r2, pc, #4	; (adr r2, 8002c84 <DMA_CheckFifoParam+0x28>)
 8002c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c82:	bf00      	nop
 8002c84:	08002c95 	.word	0x08002c95
 8002c88:	08002ca7 	.word	0x08002ca7
 8002c8c:	08002c95 	.word	0x08002c95
 8002c90:	08002d2b 	.word	0x08002d2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d046      	beq.n	8002d2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca4:	e043      	b.n	8002d2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002caa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cae:	d140      	bne.n	8002d32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb4:	e03d      	b.n	8002d32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cbe:	d121      	bne.n	8002d04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d837      	bhi.n	8002d36 <DMA_CheckFifoParam+0xda>
 8002cc6:	a201      	add	r2, pc, #4	; (adr r2, 8002ccc <DMA_CheckFifoParam+0x70>)
 8002cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ccc:	08002cdd 	.word	0x08002cdd
 8002cd0:	08002ce3 	.word	0x08002ce3
 8002cd4:	08002cdd 	.word	0x08002cdd
 8002cd8:	08002cf5 	.word	0x08002cf5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce0:	e030      	b.n	8002d44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d025      	beq.n	8002d3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf2:	e022      	b.n	8002d3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cfc:	d11f      	bne.n	8002d3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d02:	e01c      	b.n	8002d3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d903      	bls.n	8002d12 <DMA_CheckFifoParam+0xb6>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d003      	beq.n	8002d18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d10:	e018      	b.n	8002d44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	73fb      	strb	r3, [r7, #15]
      break;
 8002d16:	e015      	b.n	8002d44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00e      	beq.n	8002d42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
      break;
 8002d28:	e00b      	b.n	8002d42 <DMA_CheckFifoParam+0xe6>
      break;
 8002d2a:	bf00      	nop
 8002d2c:	e00a      	b.n	8002d44 <DMA_CheckFifoParam+0xe8>
      break;
 8002d2e:	bf00      	nop
 8002d30:	e008      	b.n	8002d44 <DMA_CheckFifoParam+0xe8>
      break;
 8002d32:	bf00      	nop
 8002d34:	e006      	b.n	8002d44 <DMA_CheckFifoParam+0xe8>
      break;
 8002d36:	bf00      	nop
 8002d38:	e004      	b.n	8002d44 <DMA_CheckFifoParam+0xe8>
      break;
 8002d3a:	bf00      	nop
 8002d3c:	e002      	b.n	8002d44 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d3e:	bf00      	nop
 8002d40:	e000      	b.n	8002d44 <DMA_CheckFifoParam+0xe8>
      break;
 8002d42:	bf00      	nop
    }
  } 
  
  return status; 
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop

08002d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b089      	sub	sp, #36	; 0x24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	e159      	b.n	8003024 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d70:	2201      	movs	r2, #1
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4013      	ands	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	f040 8148 	bne.w	800301e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d005      	beq.n	8002da6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d130      	bne.n	8002e08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	2203      	movs	r2, #3
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ddc:	2201      	movs	r2, #1
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f003 0201 	and.w	r2, r3, #1
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d017      	beq.n	8002e44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	2203      	movs	r2, #3
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d123      	bne.n	8002e98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	08da      	lsrs	r2, r3, #3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3208      	adds	r2, #8
 8002e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	220f      	movs	r2, #15
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	08da      	lsrs	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3208      	adds	r2, #8
 8002e92:	69b9      	ldr	r1, [r7, #24]
 8002e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0203 	and.w	r2, r3, #3
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80a2 	beq.w	800301e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	4b57      	ldr	r3, [pc, #348]	; (800303c <HAL_GPIO_Init+0x2e8>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	4a56      	ldr	r2, [pc, #344]	; (800303c <HAL_GPIO_Init+0x2e8>)
 8002ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eea:	4b54      	ldr	r3, [pc, #336]	; (800303c <HAL_GPIO_Init+0x2e8>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ef6:	4a52      	ldr	r2, [pc, #328]	; (8003040 <HAL_GPIO_Init+0x2ec>)
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	089b      	lsrs	r3, r3, #2
 8002efc:	3302      	adds	r3, #2
 8002efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	220f      	movs	r2, #15
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43db      	mvns	r3, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4013      	ands	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a49      	ldr	r2, [pc, #292]	; (8003044 <HAL_GPIO_Init+0x2f0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d019      	beq.n	8002f56 <HAL_GPIO_Init+0x202>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a48      	ldr	r2, [pc, #288]	; (8003048 <HAL_GPIO_Init+0x2f4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d013      	beq.n	8002f52 <HAL_GPIO_Init+0x1fe>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a47      	ldr	r2, [pc, #284]	; (800304c <HAL_GPIO_Init+0x2f8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00d      	beq.n	8002f4e <HAL_GPIO_Init+0x1fa>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a46      	ldr	r2, [pc, #280]	; (8003050 <HAL_GPIO_Init+0x2fc>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d007      	beq.n	8002f4a <HAL_GPIO_Init+0x1f6>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a45      	ldr	r2, [pc, #276]	; (8003054 <HAL_GPIO_Init+0x300>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d101      	bne.n	8002f46 <HAL_GPIO_Init+0x1f2>
 8002f42:	2304      	movs	r3, #4
 8002f44:	e008      	b.n	8002f58 <HAL_GPIO_Init+0x204>
 8002f46:	2307      	movs	r3, #7
 8002f48:	e006      	b.n	8002f58 <HAL_GPIO_Init+0x204>
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e004      	b.n	8002f58 <HAL_GPIO_Init+0x204>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e002      	b.n	8002f58 <HAL_GPIO_Init+0x204>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <HAL_GPIO_Init+0x204>
 8002f56:	2300      	movs	r3, #0
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	f002 0203 	and.w	r2, r2, #3
 8002f5e:	0092      	lsls	r2, r2, #2
 8002f60:	4093      	lsls	r3, r2
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f68:	4935      	ldr	r1, [pc, #212]	; (8003040 <HAL_GPIO_Init+0x2ec>)
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	089b      	lsrs	r3, r3, #2
 8002f6e:	3302      	adds	r3, #2
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f76:	4b38      	ldr	r3, [pc, #224]	; (8003058 <HAL_GPIO_Init+0x304>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f9a:	4a2f      	ldr	r2, [pc, #188]	; (8003058 <HAL_GPIO_Init+0x304>)
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fa0:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <HAL_GPIO_Init+0x304>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fc4:	4a24      	ldr	r2, [pc, #144]	; (8003058 <HAL_GPIO_Init+0x304>)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fca:	4b23      	ldr	r3, [pc, #140]	; (8003058 <HAL_GPIO_Init+0x304>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fee:	4a1a      	ldr	r2, [pc, #104]	; (8003058 <HAL_GPIO_Init+0x304>)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ff4:	4b18      	ldr	r3, [pc, #96]	; (8003058 <HAL_GPIO_Init+0x304>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003018:	4a0f      	ldr	r2, [pc, #60]	; (8003058 <HAL_GPIO_Init+0x304>)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3301      	adds	r3, #1
 8003022:	61fb      	str	r3, [r7, #28]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	2b0f      	cmp	r3, #15
 8003028:	f67f aea2 	bls.w	8002d70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	3724      	adds	r7, #36	; 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800
 8003040:	40013800 	.word	0x40013800
 8003044:	40020000 	.word	0x40020000
 8003048:	40020400 	.word	0x40020400
 800304c:	40020800 	.word	0x40020800
 8003050:	40020c00 	.word	0x40020c00
 8003054:	40021000 	.word	0x40021000
 8003058:	40013c00 	.word	0x40013c00

0800305c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
 8003068:	4613      	mov	r3, r2
 800306a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800306c:	787b      	ldrb	r3, [r7, #1]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003072:	887a      	ldrh	r2, [r7, #2]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003078:	e003      	b.n	8003082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800307a:	887b      	ldrh	r3, [r7, #2]
 800307c:	041a      	lsls	r2, r3, #16
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	619a      	str	r2, [r3, #24]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030a0:	887a      	ldrh	r2, [r7, #2]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4013      	ands	r3, r2
 80030a6:	041a      	lsls	r2, r3, #16
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	43d9      	mvns	r1, r3
 80030ac:	887b      	ldrh	r3, [r7, #2]
 80030ae:	400b      	ands	r3, r1
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	619a      	str	r2, [r3, #24]
}
 80030b6:	bf00      	nop
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e267      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d075      	beq.n	80031ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030e2:	4b88      	ldr	r3, [pc, #544]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d00c      	beq.n	8003108 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ee:	4b85      	ldr	r3, [pc, #532]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d112      	bne.n	8003120 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fa:	4b82      	ldr	r3, [pc, #520]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003106:	d10b      	bne.n	8003120 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	4b7e      	ldr	r3, [pc, #504]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d05b      	beq.n	80031cc <HAL_RCC_OscConfig+0x108>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d157      	bne.n	80031cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e242      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003128:	d106      	bne.n	8003138 <HAL_RCC_OscConfig+0x74>
 800312a:	4b76      	ldr	r3, [pc, #472]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a75      	ldr	r2, [pc, #468]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e01d      	b.n	8003174 <HAL_RCC_OscConfig+0xb0>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003140:	d10c      	bne.n	800315c <HAL_RCC_OscConfig+0x98>
 8003142:	4b70      	ldr	r3, [pc, #448]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a6f      	ldr	r2, [pc, #444]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	4b6d      	ldr	r3, [pc, #436]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a6c      	ldr	r2, [pc, #432]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	e00b      	b.n	8003174 <HAL_RCC_OscConfig+0xb0>
 800315c:	4b69      	ldr	r3, [pc, #420]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a68      	ldr	r2, [pc, #416]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	4b66      	ldr	r3, [pc, #408]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a65      	ldr	r2, [pc, #404]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 800316e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d013      	beq.n	80031a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7fe fc14 	bl	80019a8 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003184:	f7fe fc10 	bl	80019a8 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	; 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e207      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	4b5b      	ldr	r3, [pc, #364]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0xc0>
 80031a2:	e014      	b.n	80031ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fe fc00 	bl	80019a8 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ac:	f7fe fbfc 	bl	80019a8 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b64      	cmp	r3, #100	; 0x64
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e1f3      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031be:	4b51      	ldr	r3, [pc, #324]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0xe8>
 80031ca:	e000      	b.n	80031ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d063      	beq.n	80032a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031da:	4b4a      	ldr	r3, [pc, #296]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00b      	beq.n	80031fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031e6:	4b47      	ldr	r3, [pc, #284]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d11c      	bne.n	800322c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f2:	4b44      	ldr	r3, [pc, #272]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d116      	bne.n	800322c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fe:	4b41      	ldr	r3, [pc, #260]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d005      	beq.n	8003216 <HAL_RCC_OscConfig+0x152>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d001      	beq.n	8003216 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e1c7      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003216:	4b3b      	ldr	r3, [pc, #236]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4937      	ldr	r1, [pc, #220]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003226:	4313      	orrs	r3, r2
 8003228:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322a:	e03a      	b.n	80032a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d020      	beq.n	8003276 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003234:	4b34      	ldr	r3, [pc, #208]	; (8003308 <HAL_RCC_OscConfig+0x244>)
 8003236:	2201      	movs	r2, #1
 8003238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323a:	f7fe fbb5 	bl	80019a8 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003242:	f7fe fbb1 	bl	80019a8 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e1a8      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003254:	4b2b      	ldr	r3, [pc, #172]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003260:	4b28      	ldr	r3, [pc, #160]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	4925      	ldr	r1, [pc, #148]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003270:	4313      	orrs	r3, r2
 8003272:	600b      	str	r3, [r1, #0]
 8003274:	e015      	b.n	80032a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003276:	4b24      	ldr	r3, [pc, #144]	; (8003308 <HAL_RCC_OscConfig+0x244>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7fe fb94 	bl	80019a8 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003284:	f7fe fb90 	bl	80019a8 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e187      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003296:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d036      	beq.n	800331c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d016      	beq.n	80032e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032b6:	4b15      	ldr	r3, [pc, #84]	; (800330c <HAL_RCC_OscConfig+0x248>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032bc:	f7fe fb74 	bl	80019a8 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032c4:	f7fe fb70 	bl	80019a8 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e167      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 80032d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x200>
 80032e2:	e01b      	b.n	800331c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032e4:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_RCC_OscConfig+0x248>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ea:	f7fe fb5d 	bl	80019a8 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f0:	e00e      	b.n	8003310 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f2:	f7fe fb59 	bl	80019a8 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d907      	bls.n	8003310 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e150      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
 8003304:	40023800 	.word	0x40023800
 8003308:	42470000 	.word	0x42470000
 800330c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003310:	4b88      	ldr	r3, [pc, #544]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 8003312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1ea      	bne.n	80032f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8097 	beq.w	8003458 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332a:	2300      	movs	r3, #0
 800332c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800332e:	4b81      	ldr	r3, [pc, #516]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10f      	bne.n	800335a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	4b7d      	ldr	r3, [pc, #500]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	4a7c      	ldr	r2, [pc, #496]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 8003344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003348:	6413      	str	r3, [r2, #64]	; 0x40
 800334a:	4b7a      	ldr	r3, [pc, #488]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003356:	2301      	movs	r3, #1
 8003358:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335a:	4b77      	ldr	r3, [pc, #476]	; (8003538 <HAL_RCC_OscConfig+0x474>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d118      	bne.n	8003398 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003366:	4b74      	ldr	r3, [pc, #464]	; (8003538 <HAL_RCC_OscConfig+0x474>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a73      	ldr	r2, [pc, #460]	; (8003538 <HAL_RCC_OscConfig+0x474>)
 800336c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003372:	f7fe fb19 	bl	80019a8 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337a:	f7fe fb15 	bl	80019a8 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e10c      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338c:	4b6a      	ldr	r3, [pc, #424]	; (8003538 <HAL_RCC_OscConfig+0x474>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d106      	bne.n	80033ae <HAL_RCC_OscConfig+0x2ea>
 80033a0:	4b64      	ldr	r3, [pc, #400]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	4a63      	ldr	r2, [pc, #396]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6713      	str	r3, [r2, #112]	; 0x70
 80033ac:	e01c      	b.n	80033e8 <HAL_RCC_OscConfig+0x324>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x30c>
 80033b6:	4b5f      	ldr	r3, [pc, #380]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	4a5e      	ldr	r2, [pc, #376]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80033bc:	f043 0304 	orr.w	r3, r3, #4
 80033c0:	6713      	str	r3, [r2, #112]	; 0x70
 80033c2:	4b5c      	ldr	r3, [pc, #368]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	4a5b      	ldr	r2, [pc, #364]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	6713      	str	r3, [r2, #112]	; 0x70
 80033ce:	e00b      	b.n	80033e8 <HAL_RCC_OscConfig+0x324>
 80033d0:	4b58      	ldr	r3, [pc, #352]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80033d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d4:	4a57      	ldr	r2, [pc, #348]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80033d6:	f023 0301 	bic.w	r3, r3, #1
 80033da:	6713      	str	r3, [r2, #112]	; 0x70
 80033dc:	4b55      	ldr	r3, [pc, #340]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80033de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e0:	4a54      	ldr	r2, [pc, #336]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80033e2:	f023 0304 	bic.w	r3, r3, #4
 80033e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d015      	beq.n	800341c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f0:	f7fe fada 	bl	80019a8 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f6:	e00a      	b.n	800340e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f8:	f7fe fad6 	bl	80019a8 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	; 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e0cb      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340e:	4b49      	ldr	r3, [pc, #292]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0ee      	beq.n	80033f8 <HAL_RCC_OscConfig+0x334>
 800341a:	e014      	b.n	8003446 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341c:	f7fe fac4 	bl	80019a8 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003422:	e00a      	b.n	800343a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003424:	f7fe fac0 	bl	80019a8 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e0b5      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343a:	4b3e      	ldr	r3, [pc, #248]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1ee      	bne.n	8003424 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003446:	7dfb      	ldrb	r3, [r7, #23]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d105      	bne.n	8003458 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344c:	4b39      	ldr	r3, [pc, #228]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	4a38      	ldr	r2, [pc, #224]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 8003452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003456:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 80a1 	beq.w	80035a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003462:	4b34      	ldr	r3, [pc, #208]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b08      	cmp	r3, #8
 800346c:	d05c      	beq.n	8003528 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d141      	bne.n	80034fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003476:	4b31      	ldr	r3, [pc, #196]	; (800353c <HAL_RCC_OscConfig+0x478>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fe fa94 	bl	80019a8 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003484:	f7fe fa90 	bl	80019a8 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e087      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	4b27      	ldr	r3, [pc, #156]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69da      	ldr	r2, [r3, #28]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	019b      	lsls	r3, r3, #6
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	085b      	lsrs	r3, r3, #1
 80034ba:	3b01      	subs	r3, #1
 80034bc:	041b      	lsls	r3, r3, #16
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	061b      	lsls	r3, r3, #24
 80034c6:	491b      	ldr	r1, [pc, #108]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034cc:	4b1b      	ldr	r3, [pc, #108]	; (800353c <HAL_RCC_OscConfig+0x478>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d2:	f7fe fa69 	bl	80019a8 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034da:	f7fe fa65 	bl	80019a8 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e05c      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x416>
 80034f8:	e054      	b.n	80035a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <HAL_RCC_OscConfig+0x478>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7fe fa52 	bl	80019a8 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003508:	f7fe fa4e 	bl	80019a8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e045      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x444>
 8003526:	e03d      	b.n	80035a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d107      	bne.n	8003540 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e038      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
 8003534:	40023800 	.word	0x40023800
 8003538:	40007000 	.word	0x40007000
 800353c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003540:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <HAL_RCC_OscConfig+0x4ec>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d028      	beq.n	80035a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d121      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d11a      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003570:	4013      	ands	r3, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003578:	4293      	cmp	r3, r2
 800357a:	d111      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	085b      	lsrs	r3, r3, #1
 8003588:	3b01      	subs	r3, #1
 800358a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d107      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800

080035b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0cc      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035c8:	4b68      	ldr	r3, [pc, #416]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d90c      	bls.n	80035f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d6:	4b65      	ldr	r3, [pc, #404]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b63      	ldr	r3, [pc, #396]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0b8      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d020      	beq.n	800363e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003608:	4b59      	ldr	r3, [pc, #356]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	4a58      	ldr	r2, [pc, #352]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003612:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003620:	4b53      	ldr	r3, [pc, #332]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a52      	ldr	r2, [pc, #328]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800362a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800362c:	4b50      	ldr	r3, [pc, #320]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	494d      	ldr	r1, [pc, #308]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d044      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b47      	ldr	r3, [pc, #284]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d119      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e07f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d003      	beq.n	8003672 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800366e:	2b03      	cmp	r3, #3
 8003670:	d107      	bne.n	8003682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003672:	4b3f      	ldr	r3, [pc, #252]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d109      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e06f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003682:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e067      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003692:	4b37      	ldr	r3, [pc, #220]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f023 0203 	bic.w	r2, r3, #3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	4934      	ldr	r1, [pc, #208]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036a4:	f7fe f980 	bl	80019a8 <HAL_GetTick>
 80036a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ac:	f7fe f97c 	bl	80019a8 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e04f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c2:	4b2b      	ldr	r3, [pc, #172]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 020c 	and.w	r2, r3, #12
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d1eb      	bne.n	80036ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036d4:	4b25      	ldr	r3, [pc, #148]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d20c      	bcs.n	80036fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e2:	4b22      	ldr	r3, [pc, #136]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	4b20      	ldr	r3, [pc, #128]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e032      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003708:	4b19      	ldr	r3, [pc, #100]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4916      	ldr	r1, [pc, #88]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003726:	4b12      	ldr	r3, [pc, #72]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	490e      	ldr	r1, [pc, #56]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800373a:	f000 f821 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 800373e:	4602      	mov	r2, r0
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	091b      	lsrs	r3, r3, #4
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	490a      	ldr	r1, [pc, #40]	; (8003774 <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	5ccb      	ldrb	r3, [r1, r3]
 800374e:	fa22 f303 	lsr.w	r3, r2, r3
 8003752:	4a09      	ldr	r2, [pc, #36]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003756:	4b09      	ldr	r3, [pc, #36]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7fd fe04 	bl	8001368 <HAL_InitTick>

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40023c00 	.word	0x40023c00
 8003770:	40023800 	.word	0x40023800
 8003774:	08009114 	.word	0x08009114
 8003778:	20000000 	.word	0x20000000
 800377c:	20000004 	.word	0x20000004

08003780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003784:	b090      	sub	sp, #64	; 0x40
 8003786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	637b      	str	r3, [r7, #52]	; 0x34
 800378c:	2300      	movs	r3, #0
 800378e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003790:	2300      	movs	r3, #0
 8003792:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003798:	4b59      	ldr	r3, [pc, #356]	; (8003900 <HAL_RCC_GetSysClockFreq+0x180>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 030c 	and.w	r3, r3, #12
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d00d      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x40>
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	f200 80a1 	bhi.w	80038ec <HAL_RCC_GetSysClockFreq+0x16c>
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x34>
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d003      	beq.n	80037ba <HAL_RCC_GetSysClockFreq+0x3a>
 80037b2:	e09b      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037b4:	4b53      	ldr	r3, [pc, #332]	; (8003904 <HAL_RCC_GetSysClockFreq+0x184>)
 80037b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80037b8:	e09b      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ba:	4b53      	ldr	r3, [pc, #332]	; (8003908 <HAL_RCC_GetSysClockFreq+0x188>)
 80037bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037be:	e098      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037c0:	4b4f      	ldr	r3, [pc, #316]	; (8003900 <HAL_RCC_GetSysClockFreq+0x180>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037ca:	4b4d      	ldr	r3, [pc, #308]	; (8003900 <HAL_RCC_GetSysClockFreq+0x180>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d028      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d6:	4b4a      	ldr	r3, [pc, #296]	; (8003900 <HAL_RCC_GetSysClockFreq+0x180>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	099b      	lsrs	r3, r3, #6
 80037dc:	2200      	movs	r2, #0
 80037de:	623b      	str	r3, [r7, #32]
 80037e0:	627a      	str	r2, [r7, #36]	; 0x24
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037e8:	2100      	movs	r1, #0
 80037ea:	4b47      	ldr	r3, [pc, #284]	; (8003908 <HAL_RCC_GetSysClockFreq+0x188>)
 80037ec:	fb03 f201 	mul.w	r2, r3, r1
 80037f0:	2300      	movs	r3, #0
 80037f2:	fb00 f303 	mul.w	r3, r0, r3
 80037f6:	4413      	add	r3, r2
 80037f8:	4a43      	ldr	r2, [pc, #268]	; (8003908 <HAL_RCC_GetSysClockFreq+0x188>)
 80037fa:	fba0 1202 	umull	r1, r2, r0, r2
 80037fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003800:	460a      	mov	r2, r1
 8003802:	62ba      	str	r2, [r7, #40]	; 0x28
 8003804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003806:	4413      	add	r3, r2
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800380a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800380c:	2200      	movs	r2, #0
 800380e:	61bb      	str	r3, [r7, #24]
 8003810:	61fa      	str	r2, [r7, #28]
 8003812:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003816:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800381a:	f7fc fef5 	bl	8000608 <__aeabi_uldivmod>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4613      	mov	r3, r2
 8003824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003826:	e053      	b.n	80038d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003828:	4b35      	ldr	r3, [pc, #212]	; (8003900 <HAL_RCC_GetSysClockFreq+0x180>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	099b      	lsrs	r3, r3, #6
 800382e:	2200      	movs	r2, #0
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	617a      	str	r2, [r7, #20]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800383a:	f04f 0b00 	mov.w	fp, #0
 800383e:	4652      	mov	r2, sl
 8003840:	465b      	mov	r3, fp
 8003842:	f04f 0000 	mov.w	r0, #0
 8003846:	f04f 0100 	mov.w	r1, #0
 800384a:	0159      	lsls	r1, r3, #5
 800384c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003850:	0150      	lsls	r0, r2, #5
 8003852:	4602      	mov	r2, r0
 8003854:	460b      	mov	r3, r1
 8003856:	ebb2 080a 	subs.w	r8, r2, sl
 800385a:	eb63 090b 	sbc.w	r9, r3, fp
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800386a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800386e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003872:	ebb2 0408 	subs.w	r4, r2, r8
 8003876:	eb63 0509 	sbc.w	r5, r3, r9
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	00eb      	lsls	r3, r5, #3
 8003884:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003888:	00e2      	lsls	r2, r4, #3
 800388a:	4614      	mov	r4, r2
 800388c:	461d      	mov	r5, r3
 800388e:	eb14 030a 	adds.w	r3, r4, sl
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	eb45 030b 	adc.w	r3, r5, fp
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	f04f 0300 	mov.w	r3, #0
 80038a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038a6:	4629      	mov	r1, r5
 80038a8:	028b      	lsls	r3, r1, #10
 80038aa:	4621      	mov	r1, r4
 80038ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038b0:	4621      	mov	r1, r4
 80038b2:	028a      	lsls	r2, r1, #10
 80038b4:	4610      	mov	r0, r2
 80038b6:	4619      	mov	r1, r3
 80038b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ba:	2200      	movs	r2, #0
 80038bc:	60bb      	str	r3, [r7, #8]
 80038be:	60fa      	str	r2, [r7, #12]
 80038c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038c4:	f7fc fea0 	bl	8000608 <__aeabi_uldivmod>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4613      	mov	r3, r2
 80038ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_RCC_GetSysClockFreq+0x180>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	3301      	adds	r3, #1
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038ea:	e002      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038ec:	4b05      	ldr	r3, [pc, #20]	; (8003904 <HAL_RCC_GetSysClockFreq+0x184>)
 80038ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3740      	adds	r7, #64	; 0x40
 80038f8:	46bd      	mov	sp, r7
 80038fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800
 8003904:	00f42400 	.word	0x00f42400
 8003908:	017d7840 	.word	0x017d7840

0800390c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003910:	4b03      	ldr	r3, [pc, #12]	; (8003920 <HAL_RCC_GetHCLKFreq+0x14>)
 8003912:	681b      	ldr	r3, [r3, #0]
}
 8003914:	4618      	mov	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	20000000 	.word	0x20000000

08003924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003928:	f7ff fff0 	bl	800390c <HAL_RCC_GetHCLKFreq>
 800392c:	4602      	mov	r2, r0
 800392e:	4b05      	ldr	r3, [pc, #20]	; (8003944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	0a9b      	lsrs	r3, r3, #10
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	4903      	ldr	r1, [pc, #12]	; (8003948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800393a:	5ccb      	ldrb	r3, [r1, r3]
 800393c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003940:	4618      	mov	r0, r3
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40023800 	.word	0x40023800
 8003948:	08009124 	.word	0x08009124

0800394c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003950:	f7ff ffdc 	bl	800390c <HAL_RCC_GetHCLKFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	0b5b      	lsrs	r3, r3, #13
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	4903      	ldr	r1, [pc, #12]	; (8003970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003962:	5ccb      	ldrb	r3, [r1, r3]
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40023800 	.word	0x40023800
 8003970:	08009124 	.word	0x08009124

08003974 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	220f      	movs	r2, #15
 8003982:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003984:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0203 	and.w	r2, r3, #3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800399c:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <HAL_RCC_GetClockConfig+0x5c>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039a8:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <HAL_RCC_GetClockConfig+0x5c>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	08db      	lsrs	r3, r3, #3
 80039ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039b6:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <HAL_RCC_GetClockConfig+0x60>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0207 	and.w	r2, r3, #7
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	601a      	str	r2, [r3, #0]
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40023c00 	.word	0x40023c00

080039d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e041      	b.n	8003a6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fd fe42 	bl	8001688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3304      	adds	r3, #4
 8003a14:	4619      	mov	r1, r3
 8003a16:	4610      	mov	r0, r2
 8003a18:	f000 fa88 	bl	8003f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d001      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e044      	b.n	8003b1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1e      	ldr	r2, [pc, #120]	; (8003b28 <HAL_TIM_Base_Start_IT+0xb0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d018      	beq.n	8003ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aba:	d013      	beq.n	8003ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1a      	ldr	r2, [pc, #104]	; (8003b2c <HAL_TIM_Base_Start_IT+0xb4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00e      	beq.n	8003ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a19      	ldr	r2, [pc, #100]	; (8003b30 <HAL_TIM_Base_Start_IT+0xb8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d009      	beq.n	8003ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a17      	ldr	r2, [pc, #92]	; (8003b34 <HAL_TIM_Base_Start_IT+0xbc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d004      	beq.n	8003ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a16      	ldr	r2, [pc, #88]	; (8003b38 <HAL_TIM_Base_Start_IT+0xc0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d111      	bne.n	8003b08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2b06      	cmp	r3, #6
 8003af4:	d010      	beq.n	8003b18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f042 0201 	orr.w	r2, r2, #1
 8003b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b06:	e007      	b.n	8003b18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40010000 	.word	0x40010000
 8003b2c:	40000400 	.word	0x40000400
 8003b30:	40000800 	.word	0x40000800
 8003b34:	40000c00 	.word	0x40000c00
 8003b38:	40014000 	.word	0x40014000

08003b3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d122      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d11b      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0202 	mvn.w	r2, #2
 8003b68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f9b5 	bl	8003eee <HAL_TIM_IC_CaptureCallback>
 8003b84:	e005      	b.n	8003b92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f9a7 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f9b8 	bl	8003f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d122      	bne.n	8003bec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d11b      	bne.n	8003bec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0204 	mvn.w	r2, #4
 8003bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f98b 	bl	8003eee <HAL_TIM_IC_CaptureCallback>
 8003bd8:	e005      	b.n	8003be6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f97d 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f98e 	bl	8003f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d122      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d11b      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0208 	mvn.w	r2, #8
 8003c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2204      	movs	r2, #4
 8003c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f961 	bl	8003eee <HAL_TIM_IC_CaptureCallback>
 8003c2c:	e005      	b.n	8003c3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f953 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f964 	bl	8003f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0310 	and.w	r3, r3, #16
 8003c4a:	2b10      	cmp	r3, #16
 8003c4c:	d122      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d11b      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0210 	mvn.w	r2, #16
 8003c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2208      	movs	r2, #8
 8003c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f937 	bl	8003eee <HAL_TIM_IC_CaptureCallback>
 8003c80:	e005      	b.n	8003c8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f929 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f93a 	bl	8003f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d10e      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d107      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0201 	mvn.w	r2, #1
 8003cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fd fb10 	bl	80012e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cca:	2b80      	cmp	r3, #128	; 0x80
 8003ccc:	d10e      	bne.n	8003cec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd8:	2b80      	cmp	r3, #128	; 0x80
 8003cda:	d107      	bne.n	8003cec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fab2 	bl	8004250 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	d10e      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d04:	2b40      	cmp	r3, #64	; 0x40
 8003d06:	d107      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f8ff 	bl	8003f16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	d10e      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d107      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0220 	mvn.w	r2, #32
 8003d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fa7c 	bl	800423c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_TIM_ConfigClockSource+0x1c>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e0b4      	b.n	8003ed2 <HAL_TIM_ConfigClockSource+0x186>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da0:	d03e      	beq.n	8003e20 <HAL_TIM_ConfigClockSource+0xd4>
 8003da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da6:	f200 8087 	bhi.w	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dae:	f000 8086 	beq.w	8003ebe <HAL_TIM_ConfigClockSource+0x172>
 8003db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db6:	d87f      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003db8:	2b70      	cmp	r3, #112	; 0x70
 8003dba:	d01a      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0xa6>
 8003dbc:	2b70      	cmp	r3, #112	; 0x70
 8003dbe:	d87b      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc0:	2b60      	cmp	r3, #96	; 0x60
 8003dc2:	d050      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x11a>
 8003dc4:	2b60      	cmp	r3, #96	; 0x60
 8003dc6:	d877      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc8:	2b50      	cmp	r3, #80	; 0x50
 8003dca:	d03c      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0xfa>
 8003dcc:	2b50      	cmp	r3, #80	; 0x50
 8003dce:	d873      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd0:	2b40      	cmp	r3, #64	; 0x40
 8003dd2:	d058      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x13a>
 8003dd4:	2b40      	cmp	r3, #64	; 0x40
 8003dd6:	d86f      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd8:	2b30      	cmp	r3, #48	; 0x30
 8003dda:	d064      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ddc:	2b30      	cmp	r3, #48	; 0x30
 8003dde:	d86b      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d060      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d867      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05c      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d05a      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003df0:	e062      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6899      	ldr	r1, [r3, #8]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f000 f98d 	bl	8004120 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	609a      	str	r2, [r3, #8]
      break;
 8003e1e:	e04f      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	6899      	ldr	r1, [r3, #8]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f000 f976 	bl	8004120 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e42:	609a      	str	r2, [r3, #8]
      break;
 8003e44:	e03c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6859      	ldr	r1, [r3, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	461a      	mov	r2, r3
 8003e54:	f000 f8ea 	bl	800402c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2150      	movs	r1, #80	; 0x50
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 f943 	bl	80040ea <TIM_ITRx_SetConfig>
      break;
 8003e64:	e02c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6859      	ldr	r1, [r3, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	461a      	mov	r2, r3
 8003e74:	f000 f909 	bl	800408a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2160      	movs	r1, #96	; 0x60
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 f933 	bl	80040ea <TIM_ITRx_SetConfig>
      break;
 8003e84:	e01c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6859      	ldr	r1, [r3, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	461a      	mov	r2, r3
 8003e94:	f000 f8ca 	bl	800402c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2140      	movs	r1, #64	; 0x40
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 f923 	bl	80040ea <TIM_ITRx_SetConfig>
      break;
 8003ea4:	e00c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	f000 f91a 	bl	80040ea <TIM_ITRx_SetConfig>
      break;
 8003eb6:	e003      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]
      break;
 8003ebc:	e000      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a34      	ldr	r2, [pc, #208]	; (8004010 <TIM_Base_SetConfig+0xe4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d00f      	beq.n	8003f64 <TIM_Base_SetConfig+0x38>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4a:	d00b      	beq.n	8003f64 <TIM_Base_SetConfig+0x38>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a31      	ldr	r2, [pc, #196]	; (8004014 <TIM_Base_SetConfig+0xe8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d007      	beq.n	8003f64 <TIM_Base_SetConfig+0x38>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a30      	ldr	r2, [pc, #192]	; (8004018 <TIM_Base_SetConfig+0xec>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <TIM_Base_SetConfig+0x38>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a2f      	ldr	r2, [pc, #188]	; (800401c <TIM_Base_SetConfig+0xf0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d108      	bne.n	8003f76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a25      	ldr	r2, [pc, #148]	; (8004010 <TIM_Base_SetConfig+0xe4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d01b      	beq.n	8003fb6 <TIM_Base_SetConfig+0x8a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f84:	d017      	beq.n	8003fb6 <TIM_Base_SetConfig+0x8a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a22      	ldr	r2, [pc, #136]	; (8004014 <TIM_Base_SetConfig+0xe8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <TIM_Base_SetConfig+0x8a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a21      	ldr	r2, [pc, #132]	; (8004018 <TIM_Base_SetConfig+0xec>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00f      	beq.n	8003fb6 <TIM_Base_SetConfig+0x8a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a20      	ldr	r2, [pc, #128]	; (800401c <TIM_Base_SetConfig+0xf0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00b      	beq.n	8003fb6 <TIM_Base_SetConfig+0x8a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a1f      	ldr	r2, [pc, #124]	; (8004020 <TIM_Base_SetConfig+0xf4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d007      	beq.n	8003fb6 <TIM_Base_SetConfig+0x8a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a1e      	ldr	r2, [pc, #120]	; (8004024 <TIM_Base_SetConfig+0xf8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d003      	beq.n	8003fb6 <TIM_Base_SetConfig+0x8a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a1d      	ldr	r2, [pc, #116]	; (8004028 <TIM_Base_SetConfig+0xfc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d108      	bne.n	8003fc8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a08      	ldr	r2, [pc, #32]	; (8004010 <TIM_Base_SetConfig+0xe4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d103      	bne.n	8003ffc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	615a      	str	r2, [r3, #20]
}
 8004002:	bf00      	nop
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40010000 	.word	0x40010000
 8004014:	40000400 	.word	0x40000400
 8004018:	40000800 	.word	0x40000800
 800401c:	40000c00 	.word	0x40000c00
 8004020:	40014000 	.word	0x40014000
 8004024:	40014400 	.word	0x40014400
 8004028:	40014800 	.word	0x40014800

0800402c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f023 0201 	bic.w	r2, r3, #1
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f023 030a 	bic.w	r3, r3, #10
 8004068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	621a      	str	r2, [r3, #32]
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800408a:	b480      	push	{r7}
 800408c:	b087      	sub	sp, #28
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	f023 0210 	bic.w	r2, r3, #16
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	031b      	lsls	r3, r3, #12
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	621a      	str	r2, [r3, #32]
}
 80040de:	bf00      	nop
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b085      	sub	sp, #20
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004100:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	f043 0307 	orr.w	r3, r3, #7
 800410c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	609a      	str	r2, [r3, #8]
}
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800413a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	021a      	lsls	r2, r3, #8
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	431a      	orrs	r2, r3
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4313      	orrs	r3, r2
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	609a      	str	r2, [r3, #8]
}
 8004154:	bf00      	nop
 8004156:	371c      	adds	r7, #28
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004174:	2302      	movs	r3, #2
 8004176:	e050      	b.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1c      	ldr	r2, [pc, #112]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d018      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c4:	d013      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a18      	ldr	r2, [pc, #96]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00e      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a16      	ldr	r2, [pc, #88]	; (8004230 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d009      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a15      	ldr	r2, [pc, #84]	; (8004234 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d004      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a13      	ldr	r2, [pc, #76]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10c      	bne.n	8004208 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40010000 	.word	0x40010000
 800422c:	40000400 	.word	0x40000400
 8004230:	40000800 	.word	0x40000800
 8004234:	40000c00 	.word	0x40000c00
 8004238:	40014000 	.word	0x40014000

0800423c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e03f      	b.n	80042f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fd fa74 	bl	8001778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2224      	movs	r2, #36	; 0x24
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 ff9b 	bl	80051e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b08a      	sub	sp, #40	; 0x28
 8004302:	af02      	add	r7, sp, #8
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	4613      	mov	r3, r2
 800430c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b20      	cmp	r3, #32
 800431c:	d17c      	bne.n	8004418 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <HAL_UART_Transmit+0x2c>
 8004324:	88fb      	ldrh	r3, [r7, #6]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e075      	b.n	800441a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_UART_Transmit+0x3e>
 8004338:	2302      	movs	r3, #2
 800433a:	e06e      	b.n	800441a <HAL_UART_Transmit+0x11c>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2221      	movs	r2, #33	; 0x21
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004352:	f7fd fb29 	bl	80019a8 <HAL_GetTick>
 8004356:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	88fa      	ldrh	r2, [r7, #6]
 800435c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	88fa      	ldrh	r2, [r7, #6]
 8004362:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436c:	d108      	bne.n	8004380 <HAL_UART_Transmit+0x82>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d104      	bne.n	8004380 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	61bb      	str	r3, [r7, #24]
 800437e:	e003      	b.n	8004388 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004384:	2300      	movs	r3, #0
 8004386:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004390:	e02a      	b.n	80043e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2200      	movs	r2, #0
 800439a:	2180      	movs	r1, #128	; 0x80
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 fc53 	bl	8004c48 <UART_WaitOnFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e036      	b.n	800441a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10b      	bne.n	80043ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	3302      	adds	r3, #2
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	e007      	b.n	80043da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	781a      	ldrb	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	3301      	adds	r3, #1
 80043d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1cf      	bne.n	8004392 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2200      	movs	r2, #0
 80043fa:	2140      	movs	r1, #64	; 0x40
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 fc23 	bl	8004c48 <UART_WaitOnFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e006      	b.n	800441a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	e000      	b.n	800441a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004418:	2302      	movs	r3, #2
  }
}
 800441a:	4618      	mov	r0, r3
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b08c      	sub	sp, #48	; 0x30
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	4613      	mov	r3, r2
 800442e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b20      	cmp	r3, #32
 800443a:	d152      	bne.n	80044e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004442:	88fb      	ldrh	r3, [r7, #6]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e04b      	b.n	80044e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004456:	2302      	movs	r3, #2
 8004458:	e044      	b.n	80044e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2201      	movs	r2, #1
 8004466:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004468:	88fb      	ldrh	r3, [r7, #6]
 800446a:	461a      	mov	r2, r3
 800446c:	68b9      	ldr	r1, [r7, #8]
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 fc58 	bl	8004d24 <UART_Start_Receive_DMA>
 8004474:	4603      	mov	r3, r0
 8004476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800447a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800447e:	2b00      	cmp	r3, #0
 8004480:	d12c      	bne.n	80044dc <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	2b01      	cmp	r3, #1
 8004488:	d125      	bne.n	80044d6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800448a:	2300      	movs	r3, #0
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	e853 3f00 	ldrex	r3, [r3]
 80044ae:	617b      	str	r3, [r7, #20]
   return(result);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f043 0310 	orr.w	r3, r3, #16
 80044b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	330c      	adds	r3, #12
 80044be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c0:	627a      	str	r2, [r7, #36]	; 0x24
 80044c2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	6a39      	ldr	r1, [r7, #32]
 80044c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c8:	e841 2300 	strex	r3, r2, [r1]
 80044cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e5      	bne.n	80044a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80044d4:	e002      	b.n	80044dc <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80044dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80044e0:	e000      	b.n	80044e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80044e2:	2302      	movs	r3, #2
  }
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3730      	adds	r7, #48	; 0x30
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b0ba      	sub	sp, #232	; 0xe8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004512:	2300      	movs	r3, #0
 8004514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004518:	2300      	movs	r3, #0
 800451a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800451e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800452a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10f      	bne.n	8004552 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b00      	cmp	r3, #0
 800453c:	d009      	beq.n	8004552 <HAL_UART_IRQHandler+0x66>
 800453e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 fd8f 	bl	800506e <UART_Receive_IT>
      return;
 8004550:	e256      	b.n	8004a00 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004552:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 80de 	beq.w	8004718 <HAL_UART_IRQHandler+0x22c>
 800455c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d106      	bne.n	8004576 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800456c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80d1 	beq.w	8004718 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00b      	beq.n	800459a <HAL_UART_IRQHandler+0xae>
 8004582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d005      	beq.n	800459a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f043 0201 	orr.w	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800459a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800459e:	f003 0304 	and.w	r3, r3, #4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00b      	beq.n	80045be <HAL_UART_IRQHandler+0xd2>
 80045a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f043 0202 	orr.w	r2, r3, #2
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <HAL_UART_IRQHandler+0xf6>
 80045ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f043 0204 	orr.w	r2, r3, #4
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d011      	beq.n	8004612 <HAL_UART_IRQHandler+0x126>
 80045ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f2:	f003 0320 	and.w	r3, r3, #32
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d105      	bne.n	8004606 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	f043 0208 	orr.w	r2, r3, #8
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 81ed 	beq.w	80049f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800461c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004620:	f003 0320 	and.w	r3, r3, #32
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <HAL_UART_IRQHandler+0x14e>
 8004628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 fd1a 	bl	800506e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004644:	2b40      	cmp	r3, #64	; 0x40
 8004646:	bf0c      	ite	eq
 8004648:	2301      	moveq	r3, #1
 800464a:	2300      	movne	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d103      	bne.n	8004666 <HAL_UART_IRQHandler+0x17a>
 800465e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004662:	2b00      	cmp	r3, #0
 8004664:	d04f      	beq.n	8004706 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fc22 	bl	8004eb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004676:	2b40      	cmp	r3, #64	; 0x40
 8004678:	d141      	bne.n	80046fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3314      	adds	r3, #20
 8004680:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004684:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004690:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004698:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3314      	adds	r3, #20
 80046a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046b6:	e841 2300 	strex	r3, r2, [r1]
 80046ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1d9      	bne.n	800467a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d013      	beq.n	80046f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	4a7d      	ldr	r2, [pc, #500]	; (80048c8 <HAL_UART_IRQHandler+0x3dc>)
 80046d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fe f8ae 	bl	800283c <HAL_DMA_Abort_IT>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d016      	beq.n	8004714 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046f0:	4610      	mov	r0, r2
 80046f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f4:	e00e      	b.n	8004714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f9a4 	bl	8004a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fc:	e00a      	b.n	8004714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f9a0 	bl	8004a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004704:	e006      	b.n	8004714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f99c 	bl	8004a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004712:	e170      	b.n	80049f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004714:	bf00      	nop
    return;
 8004716:	e16e      	b.n	80049f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	2b01      	cmp	r3, #1
 800471e:	f040 814a 	bne.w	80049b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004726:	f003 0310 	and.w	r3, r3, #16
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 8143 	beq.w	80049b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 813c 	beq.w	80049b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800473e:	2300      	movs	r3, #0
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475e:	2b40      	cmp	r3, #64	; 0x40
 8004760:	f040 80b4 	bne.w	80048cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004770:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 8140 	beq.w	80049fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800477e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004782:	429a      	cmp	r2, r3
 8004784:	f080 8139 	bcs.w	80049fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800478e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800479a:	f000 8088 	beq.w	80048ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	330c      	adds	r3, #12
 80047a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	330c      	adds	r3, #12
 80047c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80047ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1d9      	bne.n	800479e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3314      	adds	r3, #20
 80047f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047f4:	e853 3f00 	ldrex	r3, [r3]
 80047f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047fc:	f023 0301 	bic.w	r3, r3, #1
 8004800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	3314      	adds	r3, #20
 800480a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800480e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004812:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004814:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004816:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e1      	bne.n	80047ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3314      	adds	r3, #20
 800482c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004830:	e853 3f00 	ldrex	r3, [r3]
 8004834:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800483c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3314      	adds	r3, #20
 8004846:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800484a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800484c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004850:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004852:	e841 2300 	strex	r3, r2, [r1]
 8004856:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1e3      	bne.n	8004826 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	330c      	adds	r3, #12
 8004872:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004876:	e853 3f00 	ldrex	r3, [r3]
 800487a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800487c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800487e:	f023 0310 	bic.w	r3, r3, #16
 8004882:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	330c      	adds	r3, #12
 800488c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004890:	65ba      	str	r2, [r7, #88]	; 0x58
 8004892:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004896:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004898:	e841 2300 	strex	r3, r2, [r1]
 800489c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800489e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e3      	bne.n	800486c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fd ff57 	bl	800275c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	4619      	mov	r1, r3
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fc fc28 	bl	8001114 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048c4:	e099      	b.n	80049fa <HAL_UART_IRQHandler+0x50e>
 80048c6:	bf00      	nop
 80048c8:	08004f77 	.word	0x08004f77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 808b 	beq.w	80049fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80048e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 8086 	beq.w	80049fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	330c      	adds	r3, #12
 80048f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004904:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004908:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	330c      	adds	r3, #12
 8004912:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004916:	647a      	str	r2, [r7, #68]	; 0x44
 8004918:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800491c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800491e:	e841 2300 	strex	r3, r2, [r1]
 8004922:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1e3      	bne.n	80048f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3314      	adds	r3, #20
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	623b      	str	r3, [r7, #32]
   return(result);
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	f023 0301 	bic.w	r3, r3, #1
 8004940:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3314      	adds	r3, #20
 800494a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800494e:	633a      	str	r2, [r7, #48]	; 0x30
 8004950:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e3      	bne.n	800492a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	330c      	adds	r3, #12
 8004976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	e853 3f00 	ldrex	r3, [r3]
 800497e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0310 	bic.w	r3, r3, #16
 8004986:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	330c      	adds	r3, #12
 8004990:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004994:	61fa      	str	r2, [r7, #28]
 8004996:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	69b9      	ldr	r1, [r7, #24]
 800499a:	69fa      	ldr	r2, [r7, #28]
 800499c:	e841 2300 	strex	r3, r2, [r1]
 80049a0:	617b      	str	r3, [r7, #20]
   return(result);
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e3      	bne.n	8004970 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049ac:	4619      	mov	r1, r3
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fc fbb0 	bl	8001114 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049b4:	e023      	b.n	80049fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d009      	beq.n	80049d6 <HAL_UART_IRQHandler+0x4ea>
 80049c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fae5 	bl	8004f9e <UART_Transmit_IT>
    return;
 80049d4:	e014      	b.n	8004a00 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00e      	beq.n	8004a00 <HAL_UART_IRQHandler+0x514>
 80049e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d008      	beq.n	8004a00 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fb25 	bl	800503e <UART_EndTransmit_IT>
    return;
 80049f4:	e004      	b.n	8004a00 <HAL_UART_IRQHandler+0x514>
    return;
 80049f6:	bf00      	nop
 80049f8:	e002      	b.n	8004a00 <HAL_UART_IRQHandler+0x514>
      return;
 80049fa:	bf00      	nop
 80049fc:	e000      	b.n	8004a00 <HAL_UART_IRQHandler+0x514>
      return;
 80049fe:	bf00      	nop
  }
}
 8004a00:	37e8      	adds	r7, #232	; 0xe8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop

08004a08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b09c      	sub	sp, #112	; 0x70
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d172      	bne.n	8004b5a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a76:	2200      	movs	r2, #0
 8004a78:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	330c      	adds	r3, #12
 8004a80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a90:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	330c      	adds	r3, #12
 8004a98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a9a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a9c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004aa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e5      	bne.n	8004a7a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3314      	adds	r3, #20
 8004ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac0:	f023 0301 	bic.w	r3, r3, #1
 8004ac4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3314      	adds	r3, #20
 8004acc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ace:	647a      	str	r2, [r7, #68]	; 0x44
 8004ad0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ad4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e5      	bne.n	8004aae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3314      	adds	r3, #20
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	e853 3f00 	ldrex	r3, [r3]
 8004af0:	623b      	str	r3, [r7, #32]
   return(result);
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af8:	663b      	str	r3, [r7, #96]	; 0x60
 8004afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3314      	adds	r3, #20
 8004b00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b02:	633a      	str	r2, [r7, #48]	; 0x30
 8004b04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e5      	bne.n	8004ae2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d119      	bne.n	8004b5a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	330c      	adds	r3, #12
 8004b2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f023 0310 	bic.w	r3, r3, #16
 8004b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	330c      	adds	r3, #12
 8004b44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b46:	61fa      	str	r2, [r7, #28]
 8004b48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	69b9      	ldr	r1, [r7, #24]
 8004b4c:	69fa      	ldr	r2, [r7, #28]
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	617b      	str	r3, [r7, #20]
   return(result);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e5      	bne.n	8004b26 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d106      	bne.n	8004b70 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b66:	4619      	mov	r1, r3
 8004b68:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b6a:	f7fc fad3 	bl	8001114 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b6e:	e002      	b.n	8004b76 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004b70:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b72:	f7ff ff53 	bl	8004a1c <HAL_UART_RxCpltCallback>
}
 8004b76:	bf00      	nop
 8004b78:	3770      	adds	r7, #112	; 0x70
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d108      	bne.n	8004ba6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b98:	085b      	lsrs	r3, r3, #1
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f7fc fab8 	bl	8001114 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ba4:	e002      	b.n	8004bac <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f7ff ff42 	bl	8004a30 <HAL_UART_RxHalfCpltCallback>
}
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd0:	2b80      	cmp	r3, #128	; 0x80
 8004bd2:	bf0c      	ite	eq
 8004bd4:	2301      	moveq	r3, #1
 8004bd6:	2300      	movne	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b21      	cmp	r3, #33	; 0x21
 8004be6:	d108      	bne.n	8004bfa <UART_DMAError+0x46>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d005      	beq.n	8004bfa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004bf4:	68b8      	ldr	r0, [r7, #8]
 8004bf6:	f000 f933 	bl	8004e60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c04:	2b40      	cmp	r3, #64	; 0x40
 8004c06:	bf0c      	ite	eq
 8004c08:	2301      	moveq	r3, #1
 8004c0a:	2300      	movne	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b22      	cmp	r3, #34	; 0x22
 8004c1a:	d108      	bne.n	8004c2e <UART_DMAError+0x7a>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d005      	beq.n	8004c2e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2200      	movs	r2, #0
 8004c26:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004c28:	68b8      	ldr	r0, [r7, #8]
 8004c2a:	f000 f941 	bl	8004eb0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f043 0210 	orr.w	r2, r3, #16
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c3a:	68b8      	ldr	r0, [r7, #8]
 8004c3c:	f7ff ff02 	bl	8004a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c40:	bf00      	nop
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b090      	sub	sp, #64	; 0x40
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	4613      	mov	r3, r2
 8004c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c58:	e050      	b.n	8004cfc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d04c      	beq.n	8004cfc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d007      	beq.n	8004c78 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c68:	f7fc fe9e 	bl	80019a8 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d241      	bcs.n	8004cfc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	330c      	adds	r3, #12
 8004c96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c98:	637a      	str	r2, [r7, #52]	; 0x34
 8004c9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e5      	bne.n	8004c78 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3314      	adds	r3, #20
 8004cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	613b      	str	r3, [r7, #16]
   return(result);
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3314      	adds	r3, #20
 8004cca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ccc:	623a      	str	r2, [r7, #32]
 8004cce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	69f9      	ldr	r1, [r7, #28]
 8004cd2:	6a3a      	ldr	r2, [r7, #32]
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e5      	bne.n	8004cac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e00f      	b.n	8004d1c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4013      	ands	r3, r2
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	bf0c      	ite	eq
 8004d0c:	2301      	moveq	r3, #1
 8004d0e:	2300      	movne	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d09f      	beq.n	8004c5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3740      	adds	r7, #64	; 0x40
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b098      	sub	sp, #96	; 0x60
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	88fa      	ldrh	r2, [r7, #6]
 8004d3c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2222      	movs	r2, #34	; 0x22
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	4a40      	ldr	r2, [pc, #256]	; (8004e54 <UART_Start_Receive_DMA+0x130>)
 8004d52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	4a3f      	ldr	r2, [pc, #252]	; (8004e58 <UART_Start_Receive_DMA+0x134>)
 8004d5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	4a3e      	ldr	r2, [pc, #248]	; (8004e5c <UART_Start_Receive_DMA+0x138>)
 8004d62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	2200      	movs	r2, #0
 8004d6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004d6c:	f107 0308 	add.w	r3, r7, #8
 8004d70:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	88fb      	ldrh	r3, [r7, #6]
 8004d84:	f7fd fc92 	bl	80026ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004d88:	2300      	movs	r3, #0
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	613b      	str	r3, [r7, #16]
 8004d9c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d019      	beq.n	8004de2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	330c      	adds	r3, #12
 8004db4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004db8:	e853 3f00 	ldrex	r3, [r3]
 8004dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	330c      	adds	r3, #12
 8004dcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dce:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004dd0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004dd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dd6:	e841 2300 	strex	r3, r2, [r1]
 8004dda:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1e5      	bne.n	8004dae <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3314      	adds	r3, #20
 8004de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	f043 0301 	orr.w	r3, r3, #1
 8004df8:	657b      	str	r3, [r7, #84]	; 0x54
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3314      	adds	r3, #20
 8004e00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e02:	63ba      	str	r2, [r7, #56]	; 0x38
 8004e04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e0a:	e841 2300 	strex	r3, r2, [r1]
 8004e0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e5      	bne.n	8004de2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3314      	adds	r3, #20
 8004e1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	617b      	str	r3, [r7, #20]
   return(result);
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e2c:	653b      	str	r3, [r7, #80]	; 0x50
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3314      	adds	r3, #20
 8004e34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e36:	627a      	str	r2, [r7, #36]	; 0x24
 8004e38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6a39      	ldr	r1, [r7, #32]
 8004e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e5      	bne.n	8004e16 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3760      	adds	r7, #96	; 0x60
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	08004a59 	.word	0x08004a59
 8004e58:	08004b7f 	.word	0x08004b7f
 8004e5c:	08004bb5 	.word	0x08004bb5

08004e60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b089      	sub	sp, #36	; 0x24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	330c      	adds	r3, #12
 8004e6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	e853 3f00 	ldrex	r3, [r3]
 8004e76:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	330c      	adds	r3, #12
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	61ba      	str	r2, [r7, #24]
 8004e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8c:	6979      	ldr	r1, [r7, #20]
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	e841 2300 	strex	r3, r2, [r1]
 8004e94:	613b      	str	r3, [r7, #16]
   return(result);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1e5      	bne.n	8004e68 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004ea4:	bf00      	nop
 8004ea6:	3724      	adds	r7, #36	; 0x24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b095      	sub	sp, #84	; 0x54
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	330c      	adds	r3, #12
 8004ebe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec2:	e853 3f00 	ldrex	r3, [r3]
 8004ec6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	330c      	adds	r3, #12
 8004ed6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ed8:	643a      	str	r2, [r7, #64]	; 0x40
 8004eda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004edc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ede:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ee0:	e841 2300 	strex	r3, r2, [r1]
 8004ee4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1e5      	bne.n	8004eb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3314      	adds	r3, #20
 8004ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	f023 0301 	bic.w	r3, r3, #1
 8004f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3314      	adds	r3, #20
 8004f0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f14:	e841 2300 	strex	r3, r2, [r1]
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e5      	bne.n	8004eec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d119      	bne.n	8004f5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	e853 3f00 	ldrex	r3, [r3]
 8004f36:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f023 0310 	bic.w	r3, r3, #16
 8004f3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f48:	61ba      	str	r2, [r7, #24]
 8004f4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6979      	ldr	r1, [r7, #20]
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	613b      	str	r3, [r7, #16]
   return(result);
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e5      	bne.n	8004f28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f6a:	bf00      	nop
 8004f6c:	3754      	adds	r7, #84	; 0x54
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b084      	sub	sp, #16
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f7ff fd57 	bl	8004a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f96:	bf00      	nop
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b21      	cmp	r3, #33	; 0x21
 8004fb0:	d13e      	bne.n	8005030 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fba:	d114      	bne.n	8004fe6 <UART_Transmit_IT+0x48>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d110      	bne.n	8004fe6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	1c9a      	adds	r2, r3, #2
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	621a      	str	r2, [r3, #32]
 8004fe4:	e008      	b.n	8004ff8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	1c59      	adds	r1, r3, #1
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6211      	str	r1, [r2, #32]
 8004ff0:	781a      	ldrb	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29b      	uxth	r3, r3
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	4619      	mov	r1, r3
 8005006:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10f      	bne.n	800502c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800501a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800502a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800502c:	2300      	movs	r3, #0
 800502e:	e000      	b.n	8005032 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005030:	2302      	movs	r3, #2
  }
}
 8005032:	4618      	mov	r0, r3
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005054:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7ff fcd2 	bl	8004a08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b08c      	sub	sp, #48	; 0x30
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b22      	cmp	r3, #34	; 0x22
 8005080:	f040 80ab 	bne.w	80051da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800508c:	d117      	bne.n	80050be <UART_Receive_IT+0x50>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d113      	bne.n	80050be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005096:	2300      	movs	r3, #0
 8005098:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b6:	1c9a      	adds	r2, r3, #2
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28
 80050bc:	e026      	b.n	800510c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80050c4:	2300      	movs	r3, #0
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d0:	d007      	beq.n	80050e2 <UART_Receive_IT+0x74>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10a      	bne.n	80050f0 <UART_Receive_IT+0x82>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d106      	bne.n	80050f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ec:	701a      	strb	r2, [r3, #0]
 80050ee:	e008      	b.n	8005102 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005100:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29b      	uxth	r3, r3
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	4619      	mov	r1, r3
 800511a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800511c:	2b00      	cmp	r3, #0
 800511e:	d15a      	bne.n	80051d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0220 	bic.w	r2, r2, #32
 800512e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800513e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695a      	ldr	r2, [r3, #20]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0201 	bic.w	r2, r2, #1
 800514e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515c:	2b01      	cmp	r3, #1
 800515e:	d135      	bne.n	80051cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	330c      	adds	r3, #12
 800516c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	e853 3f00 	ldrex	r3, [r3]
 8005174:	613b      	str	r3, [r7, #16]
   return(result);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f023 0310 	bic.w	r3, r3, #16
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	330c      	adds	r3, #12
 8005184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005186:	623a      	str	r2, [r7, #32]
 8005188:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	69f9      	ldr	r1, [r7, #28]
 800518c:	6a3a      	ldr	r2, [r7, #32]
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	61bb      	str	r3, [r7, #24]
   return(result);
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e5      	bne.n	8005166 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d10a      	bne.n	80051be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051a8:	2300      	movs	r3, #0
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051c2:	4619      	mov	r1, r3
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7fb ffa5 	bl	8001114 <HAL_UARTEx_RxEventCallback>
 80051ca:	e002      	b.n	80051d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff fc25 	bl	8004a1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	e002      	b.n	80051dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	e000      	b.n	80051dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80051da:	2302      	movs	r3, #2
  }
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3730      	adds	r7, #48	; 0x30
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051e8:	b0c0      	sub	sp, #256	; 0x100
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005200:	68d9      	ldr	r1, [r3, #12]
 8005202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	ea40 0301 	orr.w	r3, r0, r1
 800520c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800520e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	431a      	orrs	r2, r3
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	431a      	orrs	r2, r3
 8005224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800523c:	f021 010c 	bic.w	r1, r1, #12
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800524a:	430b      	orrs	r3, r1
 800524c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800524e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800525a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525e:	6999      	ldr	r1, [r3, #24]
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	ea40 0301 	orr.w	r3, r0, r1
 800526a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	4b8f      	ldr	r3, [pc, #572]	; (80054b0 <UART_SetConfig+0x2cc>)
 8005274:	429a      	cmp	r2, r3
 8005276:	d005      	beq.n	8005284 <UART_SetConfig+0xa0>
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	4b8d      	ldr	r3, [pc, #564]	; (80054b4 <UART_SetConfig+0x2d0>)
 8005280:	429a      	cmp	r2, r3
 8005282:	d104      	bne.n	800528e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005284:	f7fe fb62 	bl	800394c <HAL_RCC_GetPCLK2Freq>
 8005288:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800528c:	e003      	b.n	8005296 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800528e:	f7fe fb49 	bl	8003924 <HAL_RCC_GetPCLK1Freq>
 8005292:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a0:	f040 810c 	bne.w	80054bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a8:	2200      	movs	r2, #0
 80052aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052b6:	4622      	mov	r2, r4
 80052b8:	462b      	mov	r3, r5
 80052ba:	1891      	adds	r1, r2, r2
 80052bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80052be:	415b      	adcs	r3, r3
 80052c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052c6:	4621      	mov	r1, r4
 80052c8:	eb12 0801 	adds.w	r8, r2, r1
 80052cc:	4629      	mov	r1, r5
 80052ce:	eb43 0901 	adc.w	r9, r3, r1
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052e6:	4690      	mov	r8, r2
 80052e8:	4699      	mov	r9, r3
 80052ea:	4623      	mov	r3, r4
 80052ec:	eb18 0303 	adds.w	r3, r8, r3
 80052f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052f4:	462b      	mov	r3, r5
 80052f6:	eb49 0303 	adc.w	r3, r9, r3
 80052fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800530a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800530e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005312:	460b      	mov	r3, r1
 8005314:	18db      	adds	r3, r3, r3
 8005316:	653b      	str	r3, [r7, #80]	; 0x50
 8005318:	4613      	mov	r3, r2
 800531a:	eb42 0303 	adc.w	r3, r2, r3
 800531e:	657b      	str	r3, [r7, #84]	; 0x54
 8005320:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005324:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005328:	f7fb f96e 	bl	8000608 <__aeabi_uldivmod>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4b61      	ldr	r3, [pc, #388]	; (80054b8 <UART_SetConfig+0x2d4>)
 8005332:	fba3 2302 	umull	r2, r3, r3, r2
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	011c      	lsls	r4, r3, #4
 800533a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800533e:	2200      	movs	r2, #0
 8005340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005344:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005348:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800534c:	4642      	mov	r2, r8
 800534e:	464b      	mov	r3, r9
 8005350:	1891      	adds	r1, r2, r2
 8005352:	64b9      	str	r1, [r7, #72]	; 0x48
 8005354:	415b      	adcs	r3, r3
 8005356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005358:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800535c:	4641      	mov	r1, r8
 800535e:	eb12 0a01 	adds.w	sl, r2, r1
 8005362:	4649      	mov	r1, r9
 8005364:	eb43 0b01 	adc.w	fp, r3, r1
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005374:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005378:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800537c:	4692      	mov	sl, r2
 800537e:	469b      	mov	fp, r3
 8005380:	4643      	mov	r3, r8
 8005382:	eb1a 0303 	adds.w	r3, sl, r3
 8005386:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800538a:	464b      	mov	r3, r9
 800538c:	eb4b 0303 	adc.w	r3, fp, r3
 8005390:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053a8:	460b      	mov	r3, r1
 80053aa:	18db      	adds	r3, r3, r3
 80053ac:	643b      	str	r3, [r7, #64]	; 0x40
 80053ae:	4613      	mov	r3, r2
 80053b0:	eb42 0303 	adc.w	r3, r2, r3
 80053b4:	647b      	str	r3, [r7, #68]	; 0x44
 80053b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053be:	f7fb f923 	bl	8000608 <__aeabi_uldivmod>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4611      	mov	r1, r2
 80053c8:	4b3b      	ldr	r3, [pc, #236]	; (80054b8 <UART_SetConfig+0x2d4>)
 80053ca:	fba3 2301 	umull	r2, r3, r3, r1
 80053ce:	095b      	lsrs	r3, r3, #5
 80053d0:	2264      	movs	r2, #100	; 0x64
 80053d2:	fb02 f303 	mul.w	r3, r2, r3
 80053d6:	1acb      	subs	r3, r1, r3
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053de:	4b36      	ldr	r3, [pc, #216]	; (80054b8 <UART_SetConfig+0x2d4>)
 80053e0:	fba3 2302 	umull	r2, r3, r3, r2
 80053e4:	095b      	lsrs	r3, r3, #5
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053ec:	441c      	add	r4, r3
 80053ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80053fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005400:	4642      	mov	r2, r8
 8005402:	464b      	mov	r3, r9
 8005404:	1891      	adds	r1, r2, r2
 8005406:	63b9      	str	r1, [r7, #56]	; 0x38
 8005408:	415b      	adcs	r3, r3
 800540a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800540c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005410:	4641      	mov	r1, r8
 8005412:	1851      	adds	r1, r2, r1
 8005414:	6339      	str	r1, [r7, #48]	; 0x30
 8005416:	4649      	mov	r1, r9
 8005418:	414b      	adcs	r3, r1
 800541a:	637b      	str	r3, [r7, #52]	; 0x34
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005428:	4659      	mov	r1, fp
 800542a:	00cb      	lsls	r3, r1, #3
 800542c:	4651      	mov	r1, sl
 800542e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005432:	4651      	mov	r1, sl
 8005434:	00ca      	lsls	r2, r1, #3
 8005436:	4610      	mov	r0, r2
 8005438:	4619      	mov	r1, r3
 800543a:	4603      	mov	r3, r0
 800543c:	4642      	mov	r2, r8
 800543e:	189b      	adds	r3, r3, r2
 8005440:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005444:	464b      	mov	r3, r9
 8005446:	460a      	mov	r2, r1
 8005448:	eb42 0303 	adc.w	r3, r2, r3
 800544c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800545c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005460:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005464:	460b      	mov	r3, r1
 8005466:	18db      	adds	r3, r3, r3
 8005468:	62bb      	str	r3, [r7, #40]	; 0x28
 800546a:	4613      	mov	r3, r2
 800546c:	eb42 0303 	adc.w	r3, r2, r3
 8005470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005472:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005476:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800547a:	f7fb f8c5 	bl	8000608 <__aeabi_uldivmod>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4b0d      	ldr	r3, [pc, #52]	; (80054b8 <UART_SetConfig+0x2d4>)
 8005484:	fba3 1302 	umull	r1, r3, r3, r2
 8005488:	095b      	lsrs	r3, r3, #5
 800548a:	2164      	movs	r1, #100	; 0x64
 800548c:	fb01 f303 	mul.w	r3, r1, r3
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	3332      	adds	r3, #50	; 0x32
 8005496:	4a08      	ldr	r2, [pc, #32]	; (80054b8 <UART_SetConfig+0x2d4>)
 8005498:	fba2 2303 	umull	r2, r3, r2, r3
 800549c:	095b      	lsrs	r3, r3, #5
 800549e:	f003 0207 	and.w	r2, r3, #7
 80054a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4422      	add	r2, r4
 80054aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054ac:	e105      	b.n	80056ba <UART_SetConfig+0x4d6>
 80054ae:	bf00      	nop
 80054b0:	40011000 	.word	0x40011000
 80054b4:	40011400 	.word	0x40011400
 80054b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054c0:	2200      	movs	r2, #0
 80054c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054ce:	4642      	mov	r2, r8
 80054d0:	464b      	mov	r3, r9
 80054d2:	1891      	adds	r1, r2, r2
 80054d4:	6239      	str	r1, [r7, #32]
 80054d6:	415b      	adcs	r3, r3
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
 80054da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054de:	4641      	mov	r1, r8
 80054e0:	1854      	adds	r4, r2, r1
 80054e2:	4649      	mov	r1, r9
 80054e4:	eb43 0501 	adc.w	r5, r3, r1
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	f04f 0300 	mov.w	r3, #0
 80054f0:	00eb      	lsls	r3, r5, #3
 80054f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054f6:	00e2      	lsls	r2, r4, #3
 80054f8:	4614      	mov	r4, r2
 80054fa:	461d      	mov	r5, r3
 80054fc:	4643      	mov	r3, r8
 80054fe:	18e3      	adds	r3, r4, r3
 8005500:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005504:	464b      	mov	r3, r9
 8005506:	eb45 0303 	adc.w	r3, r5, r3
 800550a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800550e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800551a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800552a:	4629      	mov	r1, r5
 800552c:	008b      	lsls	r3, r1, #2
 800552e:	4621      	mov	r1, r4
 8005530:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005534:	4621      	mov	r1, r4
 8005536:	008a      	lsls	r2, r1, #2
 8005538:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800553c:	f7fb f864 	bl	8000608 <__aeabi_uldivmod>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4b60      	ldr	r3, [pc, #384]	; (80056c8 <UART_SetConfig+0x4e4>)
 8005546:	fba3 2302 	umull	r2, r3, r3, r2
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	011c      	lsls	r4, r3, #4
 800554e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005552:	2200      	movs	r2, #0
 8005554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005558:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800555c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005560:	4642      	mov	r2, r8
 8005562:	464b      	mov	r3, r9
 8005564:	1891      	adds	r1, r2, r2
 8005566:	61b9      	str	r1, [r7, #24]
 8005568:	415b      	adcs	r3, r3
 800556a:	61fb      	str	r3, [r7, #28]
 800556c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005570:	4641      	mov	r1, r8
 8005572:	1851      	adds	r1, r2, r1
 8005574:	6139      	str	r1, [r7, #16]
 8005576:	4649      	mov	r1, r9
 8005578:	414b      	adcs	r3, r1
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	f04f 0200 	mov.w	r2, #0
 8005580:	f04f 0300 	mov.w	r3, #0
 8005584:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005588:	4659      	mov	r1, fp
 800558a:	00cb      	lsls	r3, r1, #3
 800558c:	4651      	mov	r1, sl
 800558e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005592:	4651      	mov	r1, sl
 8005594:	00ca      	lsls	r2, r1, #3
 8005596:	4610      	mov	r0, r2
 8005598:	4619      	mov	r1, r3
 800559a:	4603      	mov	r3, r0
 800559c:	4642      	mov	r2, r8
 800559e:	189b      	adds	r3, r3, r2
 80055a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055a4:	464b      	mov	r3, r9
 80055a6:	460a      	mov	r2, r1
 80055a8:	eb42 0303 	adc.w	r3, r2, r3
 80055ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80055ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055c8:	4649      	mov	r1, r9
 80055ca:	008b      	lsls	r3, r1, #2
 80055cc:	4641      	mov	r1, r8
 80055ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055d2:	4641      	mov	r1, r8
 80055d4:	008a      	lsls	r2, r1, #2
 80055d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055da:	f7fb f815 	bl	8000608 <__aeabi_uldivmod>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4b39      	ldr	r3, [pc, #228]	; (80056c8 <UART_SetConfig+0x4e4>)
 80055e4:	fba3 1302 	umull	r1, r3, r3, r2
 80055e8:	095b      	lsrs	r3, r3, #5
 80055ea:	2164      	movs	r1, #100	; 0x64
 80055ec:	fb01 f303 	mul.w	r3, r1, r3
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	3332      	adds	r3, #50	; 0x32
 80055f6:	4a34      	ldr	r2, [pc, #208]	; (80056c8 <UART_SetConfig+0x4e4>)
 80055f8:	fba2 2303 	umull	r2, r3, r2, r3
 80055fc:	095b      	lsrs	r3, r3, #5
 80055fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005602:	441c      	add	r4, r3
 8005604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005608:	2200      	movs	r2, #0
 800560a:	673b      	str	r3, [r7, #112]	; 0x70
 800560c:	677a      	str	r2, [r7, #116]	; 0x74
 800560e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005612:	4642      	mov	r2, r8
 8005614:	464b      	mov	r3, r9
 8005616:	1891      	adds	r1, r2, r2
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	415b      	adcs	r3, r3
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005622:	4641      	mov	r1, r8
 8005624:	1851      	adds	r1, r2, r1
 8005626:	6039      	str	r1, [r7, #0]
 8005628:	4649      	mov	r1, r9
 800562a:	414b      	adcs	r3, r1
 800562c:	607b      	str	r3, [r7, #4]
 800562e:	f04f 0200 	mov.w	r2, #0
 8005632:	f04f 0300 	mov.w	r3, #0
 8005636:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800563a:	4659      	mov	r1, fp
 800563c:	00cb      	lsls	r3, r1, #3
 800563e:	4651      	mov	r1, sl
 8005640:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005644:	4651      	mov	r1, sl
 8005646:	00ca      	lsls	r2, r1, #3
 8005648:	4610      	mov	r0, r2
 800564a:	4619      	mov	r1, r3
 800564c:	4603      	mov	r3, r0
 800564e:	4642      	mov	r2, r8
 8005650:	189b      	adds	r3, r3, r2
 8005652:	66bb      	str	r3, [r7, #104]	; 0x68
 8005654:	464b      	mov	r3, r9
 8005656:	460a      	mov	r2, r1
 8005658:	eb42 0303 	adc.w	r3, r2, r3
 800565c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800565e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	663b      	str	r3, [r7, #96]	; 0x60
 8005668:	667a      	str	r2, [r7, #100]	; 0x64
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005676:	4649      	mov	r1, r9
 8005678:	008b      	lsls	r3, r1, #2
 800567a:	4641      	mov	r1, r8
 800567c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005680:	4641      	mov	r1, r8
 8005682:	008a      	lsls	r2, r1, #2
 8005684:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005688:	f7fa ffbe 	bl	8000608 <__aeabi_uldivmod>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <UART_SetConfig+0x4e4>)
 8005692:	fba3 1302 	umull	r1, r3, r3, r2
 8005696:	095b      	lsrs	r3, r3, #5
 8005698:	2164      	movs	r1, #100	; 0x64
 800569a:	fb01 f303 	mul.w	r3, r1, r3
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	3332      	adds	r3, #50	; 0x32
 80056a4:	4a08      	ldr	r2, [pc, #32]	; (80056c8 <UART_SetConfig+0x4e4>)
 80056a6:	fba2 2303 	umull	r2, r3, r2, r3
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	f003 020f 	and.w	r2, r3, #15
 80056b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4422      	add	r2, r4
 80056b8:	609a      	str	r2, [r3, #8]
}
 80056ba:	bf00      	nop
 80056bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056c0:	46bd      	mov	sp, r7
 80056c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056c6:	bf00      	nop
 80056c8:	51eb851f 	.word	0x51eb851f

080056cc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4603      	mov	r3, r0
 80056d4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80056da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056de:	2b84      	cmp	r3, #132	; 0x84
 80056e0:	d005      	beq.n	80056ee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80056e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4413      	add	r3, r2
 80056ea:	3303      	adds	r3, #3
 80056ec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80056ee:	68fb      	ldr	r3, [r7, #12]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005700:	f001 fa2a 	bl	8006b58 <vTaskStartScheduler>
  
  return osOK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	bd80      	pop	{r7, pc}

0800570a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800570a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800570c:	b089      	sub	sp, #36	; 0x24
 800570e:	af04      	add	r7, sp, #16
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d020      	beq.n	800575e <osThreadCreate+0x54>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d01c      	beq.n	800575e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685c      	ldr	r4, [r3, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681d      	ldr	r5, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691e      	ldr	r6, [r3, #16]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff ffc8 	bl	80056cc <makeFreeRtosPriority>
 800573c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005746:	9202      	str	r2, [sp, #8]
 8005748:	9301      	str	r3, [sp, #4]
 800574a:	9100      	str	r1, [sp, #0]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	4632      	mov	r2, r6
 8005750:	4629      	mov	r1, r5
 8005752:	4620      	mov	r0, r4
 8005754:	f000 ff02 	bl	800655c <xTaskCreateStatic>
 8005758:	4603      	mov	r3, r0
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	e01c      	b.n	8005798 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685c      	ldr	r4, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800576a:	b29e      	uxth	r6, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff ffaa 	bl	80056cc <makeFreeRtosPriority>
 8005778:	4602      	mov	r2, r0
 800577a:	f107 030c 	add.w	r3, r7, #12
 800577e:	9301      	str	r3, [sp, #4]
 8005780:	9200      	str	r2, [sp, #0]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	4632      	mov	r2, r6
 8005786:	4629      	mov	r1, r5
 8005788:	4620      	mov	r0, r4
 800578a:	f000 ff44 	bl	8006616 <xTaskCreate>
 800578e:	4603      	mov	r3, r0
 8005790:	2b01      	cmp	r3, #1
 8005792:	d001      	beq.n	8005798 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005794:	2300      	movs	r3, #0
 8005796:	e000      	b.n	800579a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005798:	68fb      	ldr	r3, [r7, #12]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057a2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <osDelay+0x16>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	e000      	b.n	80057ba <osDelay+0x18>
 80057b8:	2301      	movs	r3, #1
 80057ba:	4618      	mov	r0, r3
 80057bc:	f001 f862 	bl	8006884 <vTaskDelay>
  
  return osOK;
 80057c0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af02      	add	r7, sp, #8
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	460b      	mov	r3, r1
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d013      	beq.n	800580a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80057e2:	7afb      	ldrb	r3, [r7, #11]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <osTimerCreate+0x20>
 80057e8:	2101      	movs	r1, #1
 80057ea:	e000      	b.n	80057ee <osTimerCreate+0x22>
 80057ec:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80057f6:	9201      	str	r2, [sp, #4]
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	460a      	mov	r2, r1
 80057fe:	2101      	movs	r1, #1
 8005800:	480b      	ldr	r0, [pc, #44]	; (8005830 <osTimerCreate+0x64>)
 8005802:	f001 ff66 	bl	80076d2 <xTimerCreateStatic>
 8005806:	4603      	mov	r3, r0
 8005808:	e00e      	b.n	8005828 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800580a:	7afb      	ldrb	r3, [r7, #11]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <osTimerCreate+0x48>
 8005810:	2201      	movs	r2, #1
 8005812:	e000      	b.n	8005816 <osTimerCreate+0x4a>
 8005814:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2101      	movs	r1, #1
 8005820:	4803      	ldr	r0, [pc, #12]	; (8005830 <osTimerCreate+0x64>)
 8005822:	f001 ff35 	bl	8007690 <xTimerCreate>
 8005826:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	080090f8 	.word	0x080090f8

08005834 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d007      	beq.n	8005854 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	4619      	mov	r1, r3
 800584a:	2001      	movs	r0, #1
 800584c:	f000 fa83 	bl	8005d56 <xQueueCreateMutexStatic>
 8005850:	4603      	mov	r3, r0
 8005852:	e003      	b.n	800585c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005854:	2001      	movs	r0, #1
 8005856:	f000 fa66 	bl	8005d26 <xQueueCreateMutex>
 800585a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af02      	add	r7, sp, #8
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00f      	beq.n	8005896 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d10a      	bne.n	8005892 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	2203      	movs	r2, #3
 8005882:	9200      	str	r2, [sp, #0]
 8005884:	2200      	movs	r2, #0
 8005886:	2100      	movs	r1, #0
 8005888:	2001      	movs	r0, #1
 800588a:	f000 f961 	bl	8005b50 <xQueueGenericCreateStatic>
 800588e:	4603      	mov	r3, r0
 8005890:	e016      	b.n	80058c0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	e014      	b.n	80058c0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d110      	bne.n	80058be <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800589c:	2203      	movs	r2, #3
 800589e:	2100      	movs	r1, #0
 80058a0:	2001      	movs	r0, #1
 80058a2:	f000 f9cd 	bl	8005c40 <xQueueGenericCreate>
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d005      	beq.n	80058ba <osSemaphoreCreate+0x56>
 80058ae:	2300      	movs	r3, #0
 80058b0:	2200      	movs	r2, #0
 80058b2:	2100      	movs	r1, #0
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 fa69 	bl	8005d8c <xQueueGenericSend>
      return sema;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	e000      	b.n	80058c0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80058be:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80058c8:	b590      	push	{r4, r7, lr}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af02      	add	r7, sp, #8
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d011      	beq.n	80058fe <osMessageCreate+0x36>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00d      	beq.n	80058fe <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6818      	ldr	r0, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6859      	ldr	r1, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	2400      	movs	r4, #0
 80058f4:	9400      	str	r4, [sp, #0]
 80058f6:	f000 f92b 	bl	8005b50 <xQueueGenericCreateStatic>
 80058fa:	4603      	mov	r3, r0
 80058fc:	e008      	b.n	8005910 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	4619      	mov	r1, r3
 800590a:	f000 f999 	bl	8005c40 <xQueueGenericCreate>
 800590e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	bd90      	pop	{r4, r7, pc}

08005918 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f103 0208 	add.w	r2, r3, #8
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f04f 32ff 	mov.w	r2, #4294967295
 8005930:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f103 0208 	add.w	r2, r3, #8
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f103 0208 	add.w	r2, r3, #8
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	601a      	str	r2, [r3, #0]
}
 80059ae:	bf00      	nop
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059ba:	b480      	push	{r7}
 80059bc:	b085      	sub	sp, #20
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d0:	d103      	bne.n	80059da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	e00c      	b.n	80059f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	3308      	adds	r3, #8
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	e002      	b.n	80059e8 <vListInsert+0x2e>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d2f6      	bcs.n	80059e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	601a      	str	r2, [r3, #0]
}
 8005a20:	bf00      	nop
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6892      	ldr	r2, [r2, #8]
 8005a42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6852      	ldr	r2, [r2, #4]
 8005a4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d103      	bne.n	8005a60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	1e5a      	subs	r2, r3, #1
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10a      	bne.n	8005aaa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005aa6:	bf00      	nop
 8005aa8:	e7fe      	b.n	8005aa8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005aaa:	f002 faa3 	bl	8007ff4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab6:	68f9      	ldr	r1, [r7, #12]
 8005ab8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005aba:	fb01 f303 	mul.w	r3, r1, r3
 8005abe:	441a      	add	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ada:	3b01      	subs	r3, #1
 8005adc:	68f9      	ldr	r1, [r7, #12]
 8005ade:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ae0:	fb01 f303 	mul.w	r3, r1, r3
 8005ae4:	441a      	add	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	22ff      	movs	r2, #255	; 0xff
 8005aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	22ff      	movs	r2, #255	; 0xff
 8005af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d114      	bne.n	8005b2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01a      	beq.n	8005b3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	3310      	adds	r3, #16
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f001 faaf 	bl	8007070 <xTaskRemoveFromEventList>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d012      	beq.n	8005b3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b18:	4b0c      	ldr	r3, [pc, #48]	; (8005b4c <xQueueGenericReset+0xcc>)
 8005b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	e009      	b.n	8005b3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	3310      	adds	r3, #16
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7ff fef2 	bl	8005918 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3324      	adds	r3, #36	; 0x24
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7ff feed 	bl	8005918 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b3e:	f002 fa89 	bl	8008054 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b42:	2301      	movs	r3, #1
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	e000ed04 	.word	0xe000ed04

08005b50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08e      	sub	sp, #56	; 0x38
 8005b54:	af02      	add	r7, sp, #8
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10a      	bne.n	8005b7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b76:	bf00      	nop
 8005b78:	e7fe      	b.n	8005b78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10a      	bne.n	8005b96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b92:	bf00      	nop
 8005b94:	e7fe      	b.n	8005b94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <xQueueGenericCreateStatic+0x52>
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <xQueueGenericCreateStatic+0x56>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <xQueueGenericCreateStatic+0x58>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10a      	bne.n	8005bc2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	623b      	str	r3, [r7, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	e7fe      	b.n	8005bc0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d102      	bne.n	8005bce <xQueueGenericCreateStatic+0x7e>
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <xQueueGenericCreateStatic+0x82>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <xQueueGenericCreateStatic+0x84>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10a      	bne.n	8005bee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	61fb      	str	r3, [r7, #28]
}
 8005bea:	bf00      	nop
 8005bec:	e7fe      	b.n	8005bec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005bee:	2348      	movs	r3, #72	; 0x48
 8005bf0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2b48      	cmp	r3, #72	; 0x48
 8005bf6:	d00a      	beq.n	8005c0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	61bb      	str	r3, [r7, #24]
}
 8005c0a:	bf00      	nop
 8005c0c:	e7fe      	b.n	8005c0c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005c0e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00d      	beq.n	8005c36 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	68b9      	ldr	r1, [r7, #8]
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 f83f 	bl	8005cb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3730      	adds	r7, #48	; 0x30
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08a      	sub	sp, #40	; 0x28
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10a      	bne.n	8005c6a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	613b      	str	r3, [r7, #16]
}
 8005c66:	bf00      	nop
 8005c68:	e7fe      	b.n	8005c68 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	fb02 f303 	mul.w	r3, r2, r3
 8005c72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	3348      	adds	r3, #72	; 0x48
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f002 fadd 	bl	8008238 <pvPortMalloc>
 8005c7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d011      	beq.n	8005caa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	3348      	adds	r3, #72	; 0x48
 8005c8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c98:	79fa      	ldrb	r2, [r7, #7]
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 f805 	bl	8005cb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005caa:	69bb      	ldr	r3, [r7, #24]
	}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3720      	adds	r7, #32
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
 8005cc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d103      	bne.n	8005cd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	e002      	b.n	8005cd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	69b8      	ldr	r0, [r7, #24]
 8005ce6:	f7ff fecb 	bl	8005a80 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005cea:	bf00      	nop
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00e      	beq.n	8005d1e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005d12:	2300      	movs	r3, #0
 8005d14:	2200      	movs	r2, #0
 8005d16:	2100      	movs	r1, #0
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f837 	bl	8005d8c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005d1e:	bf00      	nop
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b086      	sub	sp, #24
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005d30:	2301      	movs	r3, #1
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	2300      	movs	r3, #0
 8005d36:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005d38:	79fb      	ldrb	r3, [r7, #7]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	6939      	ldr	r1, [r7, #16]
 8005d3e:	6978      	ldr	r0, [r7, #20]
 8005d40:	f7ff ff7e 	bl	8005c40 <xQueueGenericCreate>
 8005d44:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f7ff ffd3 	bl	8005cf2 <prvInitialiseMutex>

		return xNewQueue;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
	}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b088      	sub	sp, #32
 8005d5a:	af02      	add	r7, sp, #8
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	6039      	str	r1, [r7, #0]
 8005d60:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005d62:	2301      	movs	r3, #1
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	2300      	movs	r3, #0
 8005d68:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005d6a:	79fb      	ldrb	r3, [r7, #7]
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2200      	movs	r2, #0
 8005d72:	6939      	ldr	r1, [r7, #16]
 8005d74:	6978      	ldr	r0, [r7, #20]
 8005d76:	f7ff feeb 	bl	8005b50 <xQueueGenericCreateStatic>
 8005d7a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7ff ffb8 	bl	8005cf2 <prvInitialiseMutex>

		return xNewQueue;
 8005d82:	68fb      	ldr	r3, [r7, #12]
	}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08e      	sub	sp, #56	; 0x38
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10a      	bne.n	8005dbe <xQueueGenericSend+0x32>
	__asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dba:	bf00      	nop
 8005dbc:	e7fe      	b.n	8005dbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d103      	bne.n	8005dcc <xQueueGenericSend+0x40>
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <xQueueGenericSend+0x44>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e000      	b.n	8005dd2 <xQueueGenericSend+0x46>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10a      	bne.n	8005dec <xQueueGenericSend+0x60>
	__asm volatile
 8005dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005de8:	bf00      	nop
 8005dea:	e7fe      	b.n	8005dea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d103      	bne.n	8005dfa <xQueueGenericSend+0x6e>
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d101      	bne.n	8005dfe <xQueueGenericSend+0x72>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e000      	b.n	8005e00 <xQueueGenericSend+0x74>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10a      	bne.n	8005e1a <xQueueGenericSend+0x8e>
	__asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	623b      	str	r3, [r7, #32]
}
 8005e16:	bf00      	nop
 8005e18:	e7fe      	b.n	8005e18 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e1a:	f001 fae7 	bl	80073ec <xTaskGetSchedulerState>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d102      	bne.n	8005e2a <xQueueGenericSend+0x9e>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <xQueueGenericSend+0xa2>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e000      	b.n	8005e30 <xQueueGenericSend+0xa4>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10a      	bne.n	8005e4a <xQueueGenericSend+0xbe>
	__asm volatile
 8005e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	61fb      	str	r3, [r7, #28]
}
 8005e46:	bf00      	nop
 8005e48:	e7fe      	b.n	8005e48 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e4a:	f002 f8d3 	bl	8007ff4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d302      	bcc.n	8005e60 <xQueueGenericSend+0xd4>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d129      	bne.n	8005eb4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	68b9      	ldr	r1, [r7, #8]
 8005e64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e66:	f000 fa0b 	bl	8006280 <prvCopyDataToQueue>
 8005e6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d010      	beq.n	8005e96 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	3324      	adds	r3, #36	; 0x24
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f001 f8f9 	bl	8007070 <xTaskRemoveFromEventList>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d013      	beq.n	8005eac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e84:	4b3f      	ldr	r3, [pc, #252]	; (8005f84 <xQueueGenericSend+0x1f8>)
 8005e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	e00a      	b.n	8005eac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d007      	beq.n	8005eac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e9c:	4b39      	ldr	r3, [pc, #228]	; (8005f84 <xQueueGenericSend+0x1f8>)
 8005e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005eac:	f002 f8d2 	bl	8008054 <vPortExitCritical>
				return pdPASS;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e063      	b.n	8005f7c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d103      	bne.n	8005ec2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005eba:	f002 f8cb 	bl	8008054 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e05c      	b.n	8005f7c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d106      	bne.n	8005ed6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ec8:	f107 0314 	add.w	r3, r7, #20
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f001 f931 	bl	8007134 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ed6:	f002 f8bd 	bl	8008054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005eda:	f000 fea3 	bl	8006c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ede:	f002 f889 	bl	8007ff4 <vPortEnterCritical>
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ee8:	b25b      	sxtb	r3, r3
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eee:	d103      	bne.n	8005ef8 <xQueueGenericSend+0x16c>
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005efe:	b25b      	sxtb	r3, r3
 8005f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f04:	d103      	bne.n	8005f0e <xQueueGenericSend+0x182>
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f0e:	f002 f8a1 	bl	8008054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f12:	1d3a      	adds	r2, r7, #4
 8005f14:	f107 0314 	add.w	r3, r7, #20
 8005f18:	4611      	mov	r1, r2
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f001 f920 	bl	8007160 <xTaskCheckForTimeOut>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d124      	bne.n	8005f70 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f28:	f000 faa2 	bl	8006470 <prvIsQueueFull>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d018      	beq.n	8005f64 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	3310      	adds	r3, #16
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	4611      	mov	r1, r2
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f001 f848 	bl	8006fd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f42:	f000 fa2d 	bl	80063a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f46:	f000 fe7b 	bl	8006c40 <xTaskResumeAll>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f47f af7c 	bne.w	8005e4a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005f52:	4b0c      	ldr	r3, [pc, #48]	; (8005f84 <xQueueGenericSend+0x1f8>)
 8005f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	e772      	b.n	8005e4a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f66:	f000 fa1b 	bl	80063a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f6a:	f000 fe69 	bl	8006c40 <xTaskResumeAll>
 8005f6e:	e76c      	b.n	8005e4a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f72:	f000 fa15 	bl	80063a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f76:	f000 fe63 	bl	8006c40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3738      	adds	r7, #56	; 0x38
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	e000ed04 	.word	0xe000ed04

08005f88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b090      	sub	sp, #64	; 0x40
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d103      	bne.n	8005fc4 <xQueueGenericSendFromISR+0x3c>
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <xQueueGenericSendFromISR+0x40>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e000      	b.n	8005fca <xQueueGenericSendFromISR+0x42>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10a      	bne.n	8005fe4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fe0:	bf00      	nop
 8005fe2:	e7fe      	b.n	8005fe2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d103      	bne.n	8005ff2 <xQueueGenericSendFromISR+0x6a>
 8005fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d101      	bne.n	8005ff6 <xQueueGenericSendFromISR+0x6e>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <xQueueGenericSendFromISR+0x70>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10a      	bne.n	8006012 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	623b      	str	r3, [r7, #32]
}
 800600e:	bf00      	nop
 8006010:	e7fe      	b.n	8006010 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006012:	f002 f8d1 	bl	80081b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006016:	f3ef 8211 	mrs	r2, BASEPRI
 800601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	61fa      	str	r2, [r7, #28]
 800602c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800602e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006030:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603a:	429a      	cmp	r2, r3
 800603c:	d302      	bcc.n	8006044 <xQueueGenericSendFromISR+0xbc>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b02      	cmp	r3, #2
 8006042:	d12f      	bne.n	80060a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006046:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800604a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800604e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006052:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	68b9      	ldr	r1, [r7, #8]
 8006058:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800605a:	f000 f911 	bl	8006280 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800605e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006066:	d112      	bne.n	800608e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	2b00      	cmp	r3, #0
 800606e:	d016      	beq.n	800609e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	3324      	adds	r3, #36	; 0x24
 8006074:	4618      	mov	r0, r3
 8006076:	f000 fffb 	bl	8007070 <xTaskRemoveFromEventList>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00e      	beq.n	800609e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00b      	beq.n	800609e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	e007      	b.n	800609e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800608e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006092:	3301      	adds	r3, #1
 8006094:	b2db      	uxtb	r3, r3
 8006096:	b25a      	sxtb	r2, r3
 8006098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800609e:	2301      	movs	r3, #1
 80060a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80060a2:	e001      	b.n	80060a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060a4:	2300      	movs	r3, #0
 80060a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3740      	adds	r7, #64	; 0x40
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08c      	sub	sp, #48	; 0x30
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80060cc:	2300      	movs	r3, #0
 80060ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10a      	bne.n	80060f0 <xQueueReceive+0x30>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	623b      	str	r3, [r7, #32]
}
 80060ec:	bf00      	nop
 80060ee:	e7fe      	b.n	80060ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d103      	bne.n	80060fe <xQueueReceive+0x3e>
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <xQueueReceive+0x42>
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <xQueueReceive+0x44>
 8006102:	2300      	movs	r3, #0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <xQueueReceive+0x5e>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	61fb      	str	r3, [r7, #28]
}
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800611e:	f001 f965 	bl	80073ec <xTaskGetSchedulerState>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d102      	bne.n	800612e <xQueueReceive+0x6e>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <xQueueReceive+0x72>
 800612e:	2301      	movs	r3, #1
 8006130:	e000      	b.n	8006134 <xQueueReceive+0x74>
 8006132:	2300      	movs	r3, #0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10a      	bne.n	800614e <xQueueReceive+0x8e>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	61bb      	str	r3, [r7, #24]
}
 800614a:	bf00      	nop
 800614c:	e7fe      	b.n	800614c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800614e:	f001 ff51 	bl	8007ff4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006156:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	2b00      	cmp	r3, #0
 800615c:	d01f      	beq.n	800619e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006162:	f000 f8f7 	bl	8006354 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	1e5a      	subs	r2, r3, #1
 800616a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00f      	beq.n	8006196 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006178:	3310      	adds	r3, #16
 800617a:	4618      	mov	r0, r3
 800617c:	f000 ff78 	bl	8007070 <xTaskRemoveFromEventList>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d007      	beq.n	8006196 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006186:	4b3d      	ldr	r3, [pc, #244]	; (800627c <xQueueReceive+0x1bc>)
 8006188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006196:	f001 ff5d 	bl	8008054 <vPortExitCritical>
				return pdPASS;
 800619a:	2301      	movs	r3, #1
 800619c:	e069      	b.n	8006272 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d103      	bne.n	80061ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061a4:	f001 ff56 	bl	8008054 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80061a8:	2300      	movs	r3, #0
 80061aa:	e062      	b.n	8006272 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d106      	bne.n	80061c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061b2:	f107 0310 	add.w	r3, r7, #16
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 ffbc 	bl	8007134 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061bc:	2301      	movs	r3, #1
 80061be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061c0:	f001 ff48 	bl	8008054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061c4:	f000 fd2e 	bl	8006c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061c8:	f001 ff14 	bl	8007ff4 <vPortEnterCritical>
 80061cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061d2:	b25b      	sxtb	r3, r3
 80061d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d8:	d103      	bne.n	80061e2 <xQueueReceive+0x122>
 80061da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061e8:	b25b      	sxtb	r3, r3
 80061ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ee:	d103      	bne.n	80061f8 <xQueueReceive+0x138>
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061f8:	f001 ff2c 	bl	8008054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061fc:	1d3a      	adds	r2, r7, #4
 80061fe:	f107 0310 	add.w	r3, r7, #16
 8006202:	4611      	mov	r1, r2
 8006204:	4618      	mov	r0, r3
 8006206:	f000 ffab 	bl	8007160 <xTaskCheckForTimeOut>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d123      	bne.n	8006258 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006212:	f000 f917 	bl	8006444 <prvIsQueueEmpty>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d017      	beq.n	800624c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	3324      	adds	r3, #36	; 0x24
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	4611      	mov	r1, r2
 8006224:	4618      	mov	r0, r3
 8006226:	f000 fed3 	bl	8006fd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800622a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800622c:	f000 f8b8 	bl	80063a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006230:	f000 fd06 	bl	8006c40 <xTaskResumeAll>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d189      	bne.n	800614e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800623a:	4b10      	ldr	r3, [pc, #64]	; (800627c <xQueueReceive+0x1bc>)
 800623c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	e780      	b.n	800614e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800624c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800624e:	f000 f8a7 	bl	80063a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006252:	f000 fcf5 	bl	8006c40 <xTaskResumeAll>
 8006256:	e77a      	b.n	800614e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800625a:	f000 f8a1 	bl	80063a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800625e:	f000 fcef 	bl	8006c40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006264:	f000 f8ee 	bl	8006444 <prvIsQueueEmpty>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	f43f af6f 	beq.w	800614e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006270:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006272:	4618      	mov	r0, r3
 8006274:	3730      	adds	r7, #48	; 0x30
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	e000ed04 	.word	0xe000ed04

08006280 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800628c:	2300      	movs	r3, #0
 800628e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10d      	bne.n	80062ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d14d      	bne.n	8006342 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f001 f8bc 	bl	8007428 <xTaskPriorityDisinherit>
 80062b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	609a      	str	r2, [r3, #8]
 80062b8:	e043      	b.n	8006342 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d119      	bne.n	80062f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6858      	ldr	r0, [r3, #4]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c8:	461a      	mov	r2, r3
 80062ca:	68b9      	ldr	r1, [r7, #8]
 80062cc:	f002 f9c8 	bl	8008660 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	441a      	add	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d32b      	bcc.n	8006342 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	605a      	str	r2, [r3, #4]
 80062f2:	e026      	b.n	8006342 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	68d8      	ldr	r0, [r3, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	461a      	mov	r2, r3
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	f002 f9ae 	bl	8008660 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	425b      	negs	r3, r3
 800630e:	441a      	add	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	68da      	ldr	r2, [r3, #12]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	429a      	cmp	r2, r3
 800631e:	d207      	bcs.n	8006330 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	425b      	negs	r3, r3
 800632a:	441a      	add	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b02      	cmp	r3, #2
 8006334:	d105      	bne.n	8006342 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	3b01      	subs	r3, #1
 8006340:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800634a:	697b      	ldr	r3, [r7, #20]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	2b00      	cmp	r3, #0
 8006364:	d018      	beq.n	8006398 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68da      	ldr	r2, [r3, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	441a      	add	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68da      	ldr	r2, [r3, #12]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	429a      	cmp	r2, r3
 800637e:	d303      	bcc.n	8006388 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68d9      	ldr	r1, [r3, #12]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006390:	461a      	mov	r2, r3
 8006392:	6838      	ldr	r0, [r7, #0]
 8006394:	f002 f964 	bl	8008660 <memcpy>
	}
}
 8006398:	bf00      	nop
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063a8:	f001 fe24 	bl	8007ff4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063b4:	e011      	b.n	80063da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d012      	beq.n	80063e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3324      	adds	r3, #36	; 0x24
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fe54 	bl	8007070 <xTaskRemoveFromEventList>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80063ce:	f000 ff29 	bl	8007224 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	dce9      	bgt.n	80063b6 <prvUnlockQueue+0x16>
 80063e2:	e000      	b.n	80063e6 <prvUnlockQueue+0x46>
					break;
 80063e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	22ff      	movs	r2, #255	; 0xff
 80063ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80063ee:	f001 fe31 	bl	8008054 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80063f2:	f001 fdff 	bl	8007ff4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063fe:	e011      	b.n	8006424 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d012      	beq.n	800642e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3310      	adds	r3, #16
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fe2f 	bl	8007070 <xTaskRemoveFromEventList>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006418:	f000 ff04 	bl	8007224 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800641c:	7bbb      	ldrb	r3, [r7, #14]
 800641e:	3b01      	subs	r3, #1
 8006420:	b2db      	uxtb	r3, r3
 8006422:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006424:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006428:	2b00      	cmp	r3, #0
 800642a:	dce9      	bgt.n	8006400 <prvUnlockQueue+0x60>
 800642c:	e000      	b.n	8006430 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800642e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	22ff      	movs	r2, #255	; 0xff
 8006434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006438:	f001 fe0c 	bl	8008054 <vPortExitCritical>
}
 800643c:	bf00      	nop
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800644c:	f001 fdd2 	bl	8007ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006454:	2b00      	cmp	r3, #0
 8006456:	d102      	bne.n	800645e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006458:	2301      	movs	r3, #1
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	e001      	b.n	8006462 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800645e:	2300      	movs	r3, #0
 8006460:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006462:	f001 fdf7 	bl	8008054 <vPortExitCritical>

	return xReturn;
 8006466:	68fb      	ldr	r3, [r7, #12]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006478:	f001 fdbc 	bl	8007ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006484:	429a      	cmp	r2, r3
 8006486:	d102      	bne.n	800648e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006488:	2301      	movs	r3, #1
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	e001      	b.n	8006492 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800648e:	2300      	movs	r3, #0
 8006490:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006492:	f001 fddf 	bl	8008054 <vPortExitCritical>

	return xReturn;
 8006496:	68fb      	ldr	r3, [r7, #12]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064aa:	2300      	movs	r3, #0
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	e014      	b.n	80064da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80064b0:	4a0f      	ldr	r2, [pc, #60]	; (80064f0 <vQueueAddToRegistry+0x50>)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10b      	bne.n	80064d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80064bc:	490c      	ldr	r1, [pc, #48]	; (80064f0 <vQueueAddToRegistry+0x50>)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80064c6:	4a0a      	ldr	r2, [pc, #40]	; (80064f0 <vQueueAddToRegistry+0x50>)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	4413      	add	r3, r2
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80064d2:	e006      	b.n	80064e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	3301      	adds	r3, #1
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b07      	cmp	r3, #7
 80064de:	d9e7      	bls.n	80064b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80064e0:	bf00      	nop
 80064e2:	bf00      	nop
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	20000bac 	.word	0x20000bac

080064f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006504:	f001 fd76 	bl	8007ff4 <vPortEnterCritical>
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800650e:	b25b      	sxtb	r3, r3
 8006510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006514:	d103      	bne.n	800651e <vQueueWaitForMessageRestricted+0x2a>
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006524:	b25b      	sxtb	r3, r3
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652a:	d103      	bne.n	8006534 <vQueueWaitForMessageRestricted+0x40>
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006534:	f001 fd8e 	bl	8008054 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653c:	2b00      	cmp	r3, #0
 800653e:	d106      	bne.n	800654e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	3324      	adds	r3, #36	; 0x24
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	68b9      	ldr	r1, [r7, #8]
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fd65 	bl	8007018 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800654e:	6978      	ldr	r0, [r7, #20]
 8006550:	f7ff ff26 	bl	80063a0 <prvUnlockQueue>
	}
 8006554:	bf00      	nop
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08e      	sub	sp, #56	; 0x38
 8006560:	af04      	add	r7, sp, #16
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800656a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10a      	bne.n	8006586 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	623b      	str	r3, [r7, #32]
}
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10a      	bne.n	80065a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	61fb      	str	r3, [r7, #28]
}
 800659e:	bf00      	nop
 80065a0:	e7fe      	b.n	80065a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80065a2:	2354      	movs	r3, #84	; 0x54
 80065a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	2b54      	cmp	r3, #84	; 0x54
 80065aa:	d00a      	beq.n	80065c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	61bb      	str	r3, [r7, #24]
}
 80065be:	bf00      	nop
 80065c0:	e7fe      	b.n	80065c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80065c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80065c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d01e      	beq.n	8006608 <xTaskCreateStatic+0xac>
 80065ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01b      	beq.n	8006608 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	2202      	movs	r2, #2
 80065de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065e2:	2300      	movs	r3, #0
 80065e4:	9303      	str	r3, [sp, #12]
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	9302      	str	r3, [sp, #8]
 80065ea:	f107 0314 	add.w	r3, r7, #20
 80065ee:	9301      	str	r3, [sp, #4]
 80065f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	68b9      	ldr	r1, [r7, #8]
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 f850 	bl	80066a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006602:	f000 f8d5 	bl	80067b0 <prvAddNewTaskToReadyList>
 8006606:	e001      	b.n	800660c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006608:	2300      	movs	r3, #0
 800660a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800660c:	697b      	ldr	r3, [r7, #20]
	}
 800660e:	4618      	mov	r0, r3
 8006610:	3728      	adds	r7, #40	; 0x28
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006616:	b580      	push	{r7, lr}
 8006618:	b08c      	sub	sp, #48	; 0x30
 800661a:	af04      	add	r7, sp, #16
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	603b      	str	r3, [r7, #0]
 8006622:	4613      	mov	r3, r2
 8006624:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006626:	88fb      	ldrh	r3, [r7, #6]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4618      	mov	r0, r3
 800662c:	f001 fe04 	bl	8008238 <pvPortMalloc>
 8006630:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00e      	beq.n	8006656 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006638:	2054      	movs	r0, #84	; 0x54
 800663a:	f001 fdfd 	bl	8008238 <pvPortMalloc>
 800663e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	631a      	str	r2, [r3, #48]	; 0x30
 800664c:	e005      	b.n	800665a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800664e:	6978      	ldr	r0, [r7, #20]
 8006650:	f001 febe 	bl	80083d0 <vPortFree>
 8006654:	e001      	b.n	800665a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006656:	2300      	movs	r3, #0
 8006658:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d017      	beq.n	8006690 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006668:	88fa      	ldrh	r2, [r7, #6]
 800666a:	2300      	movs	r3, #0
 800666c:	9303      	str	r3, [sp, #12]
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	9302      	str	r3, [sp, #8]
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	9301      	str	r3, [sp, #4]
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68b9      	ldr	r1, [r7, #8]
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f000 f80e 	bl	80066a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006684:	69f8      	ldr	r0, [r7, #28]
 8006686:	f000 f893 	bl	80067b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800668a:	2301      	movs	r3, #1
 800668c:	61bb      	str	r3, [r7, #24]
 800668e:	e002      	b.n	8006696 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006690:	f04f 33ff 	mov.w	r3, #4294967295
 8006694:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006696:	69bb      	ldr	r3, [r7, #24]
	}
 8006698:	4618      	mov	r0, r3
 800669a:	3720      	adds	r7, #32
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b088      	sub	sp, #32
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
 80066ac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80066b8:	3b01      	subs	r3, #1
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	f023 0307 	bic.w	r3, r3, #7
 80066c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	f003 0307 	and.w	r3, r3, #7
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	617b      	str	r3, [r7, #20]
}
 80066e4:	bf00      	nop
 80066e6:	e7fe      	b.n	80066e6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d01f      	beq.n	800672e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066ee:	2300      	movs	r3, #0
 80066f0:	61fb      	str	r3, [r7, #28]
 80066f2:	e012      	b.n	800671a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	4413      	add	r3, r2
 80066fa:	7819      	ldrb	r1, [r3, #0]
 80066fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	4413      	add	r3, r2
 8006702:	3334      	adds	r3, #52	; 0x34
 8006704:	460a      	mov	r2, r1
 8006706:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	4413      	add	r3, r2
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d006      	beq.n	8006722 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	3301      	adds	r3, #1
 8006718:	61fb      	str	r3, [r7, #28]
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	2b0f      	cmp	r3, #15
 800671e:	d9e9      	bls.n	80066f4 <prvInitialiseNewTask+0x54>
 8006720:	e000      	b.n	8006724 <prvInitialiseNewTask+0x84>
			{
				break;
 8006722:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800672c:	e003      	b.n	8006736 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	2b06      	cmp	r3, #6
 800673a:	d901      	bls.n	8006740 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800673c:	2306      	movs	r3, #6
 800673e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006744:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800674a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800674c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674e:	2200      	movs	r2, #0
 8006750:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006754:	3304      	adds	r3, #4
 8006756:	4618      	mov	r0, r3
 8006758:	f7ff f8fe 	bl	8005958 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800675c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675e:	3318      	adds	r3, #24
 8006760:	4618      	mov	r0, r3
 8006762:	f7ff f8f9 	bl	8005958 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800676a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800676c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676e:	f1c3 0207 	rsb	r2, r3, #7
 8006772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006774:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	2200      	movs	r2, #0
 8006780:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	68f9      	ldr	r1, [r7, #12]
 800678e:	69b8      	ldr	r0, [r7, #24]
 8006790:	f001 fb02 	bl	8007d98 <pxPortInitialiseStack>
 8006794:	4602      	mov	r2, r0
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800679a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679c:	2b00      	cmp	r3, #0
 800679e:	d002      	beq.n	80067a6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80067a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067a6:	bf00      	nop
 80067a8:	3720      	adds	r7, #32
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
	...

080067b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80067b8:	f001 fc1c 	bl	8007ff4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80067bc:	4b2a      	ldr	r3, [pc, #168]	; (8006868 <prvAddNewTaskToReadyList+0xb8>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3301      	adds	r3, #1
 80067c2:	4a29      	ldr	r2, [pc, #164]	; (8006868 <prvAddNewTaskToReadyList+0xb8>)
 80067c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80067c6:	4b29      	ldr	r3, [pc, #164]	; (800686c <prvAddNewTaskToReadyList+0xbc>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d109      	bne.n	80067e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80067ce:	4a27      	ldr	r2, [pc, #156]	; (800686c <prvAddNewTaskToReadyList+0xbc>)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067d4:	4b24      	ldr	r3, [pc, #144]	; (8006868 <prvAddNewTaskToReadyList+0xb8>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d110      	bne.n	80067fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067dc:	f000 fd48 	bl	8007270 <prvInitialiseTaskLists>
 80067e0:	e00d      	b.n	80067fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067e2:	4b23      	ldr	r3, [pc, #140]	; (8006870 <prvAddNewTaskToReadyList+0xc0>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d109      	bne.n	80067fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067ea:	4b20      	ldr	r3, [pc, #128]	; (800686c <prvAddNewTaskToReadyList+0xbc>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d802      	bhi.n	80067fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067f8:	4a1c      	ldr	r2, [pc, #112]	; (800686c <prvAddNewTaskToReadyList+0xbc>)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80067fe:	4b1d      	ldr	r3, [pc, #116]	; (8006874 <prvAddNewTaskToReadyList+0xc4>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3301      	adds	r3, #1
 8006804:	4a1b      	ldr	r2, [pc, #108]	; (8006874 <prvAddNewTaskToReadyList+0xc4>)
 8006806:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680c:	2201      	movs	r2, #1
 800680e:	409a      	lsls	r2, r3
 8006810:	4b19      	ldr	r3, [pc, #100]	; (8006878 <prvAddNewTaskToReadyList+0xc8>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4313      	orrs	r3, r2
 8006816:	4a18      	ldr	r2, [pc, #96]	; (8006878 <prvAddNewTaskToReadyList+0xc8>)
 8006818:	6013      	str	r3, [r2, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681e:	4613      	mov	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4a15      	ldr	r2, [pc, #84]	; (800687c <prvAddNewTaskToReadyList+0xcc>)
 8006828:	441a      	add	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	3304      	adds	r3, #4
 800682e:	4619      	mov	r1, r3
 8006830:	4610      	mov	r0, r2
 8006832:	f7ff f89e 	bl	8005972 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006836:	f001 fc0d 	bl	8008054 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800683a:	4b0d      	ldr	r3, [pc, #52]	; (8006870 <prvAddNewTaskToReadyList+0xc0>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00e      	beq.n	8006860 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006842:	4b0a      	ldr	r3, [pc, #40]	; (800686c <prvAddNewTaskToReadyList+0xbc>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	429a      	cmp	r2, r3
 800684e:	d207      	bcs.n	8006860 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006850:	4b0b      	ldr	r3, [pc, #44]	; (8006880 <prvAddNewTaskToReadyList+0xd0>)
 8006852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	20000cec 	.word	0x20000cec
 800686c:	20000bec 	.word	0x20000bec
 8006870:	20000cf8 	.word	0x20000cf8
 8006874:	20000d08 	.word	0x20000d08
 8006878:	20000cf4 	.word	0x20000cf4
 800687c:	20000bf0 	.word	0x20000bf0
 8006880:	e000ed04 	.word	0xe000ed04

08006884 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800688c:	2300      	movs	r3, #0
 800688e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d017      	beq.n	80068c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006896:	4b13      	ldr	r3, [pc, #76]	; (80068e4 <vTaskDelay+0x60>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <vTaskDelay+0x30>
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	60bb      	str	r3, [r7, #8]
}
 80068b0:	bf00      	nop
 80068b2:	e7fe      	b.n	80068b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80068b4:	f000 f9b6 	bl	8006c24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80068b8:	2100      	movs	r1, #0
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fe3a 	bl	8007534 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80068c0:	f000 f9be 	bl	8006c40 <xTaskResumeAll>
 80068c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d107      	bne.n	80068dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80068cc:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <vTaskDelay+0x64>)
 80068ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068dc:	bf00      	nop
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	20000d14 	.word	0x20000d14
 80068e8:	e000ed04 	.word	0xe000ed04

080068ec <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80068f4:	f001 fb7e 	bl	8007ff4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d102      	bne.n	8006904 <vTaskSuspend+0x18>
 80068fe:	4b3c      	ldr	r3, [pc, #240]	; (80069f0 <vTaskSuspend+0x104>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	e000      	b.n	8006906 <vTaskSuspend+0x1a>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3304      	adds	r3, #4
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff f88d 	bl	8005a2c <uxListRemove>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d115      	bne.n	8006944 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691c:	4935      	ldr	r1, [pc, #212]	; (80069f4 <vTaskSuspend+0x108>)
 800691e:	4613      	mov	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	440b      	add	r3, r1
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10a      	bne.n	8006944 <vTaskSuspend+0x58>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006932:	2201      	movs	r2, #1
 8006934:	fa02 f303 	lsl.w	r3, r2, r3
 8006938:	43da      	mvns	r2, r3
 800693a:	4b2f      	ldr	r3, [pc, #188]	; (80069f8 <vTaskSuspend+0x10c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4013      	ands	r3, r2
 8006940:	4a2d      	ldr	r2, [pc, #180]	; (80069f8 <vTaskSuspend+0x10c>)
 8006942:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006948:	2b00      	cmp	r3, #0
 800694a:	d004      	beq.n	8006956 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	3318      	adds	r3, #24
 8006950:	4618      	mov	r0, r3
 8006952:	f7ff f86b 	bl	8005a2c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	3304      	adds	r3, #4
 800695a:	4619      	mov	r1, r3
 800695c:	4827      	ldr	r0, [pc, #156]	; (80069fc <vTaskSuspend+0x110>)
 800695e:	f7ff f808 	bl	8005972 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b01      	cmp	r3, #1
 800696c:	d103      	bne.n	8006976 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006976:	f001 fb6d 	bl	8008054 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800697a:	4b21      	ldr	r3, [pc, #132]	; (8006a00 <vTaskSuspend+0x114>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d005      	beq.n	800698e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006982:	f001 fb37 	bl	8007ff4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006986:	f000 fd11 	bl	80073ac <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800698a:	f001 fb63 	bl	8008054 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800698e:	4b18      	ldr	r3, [pc, #96]	; (80069f0 <vTaskSuspend+0x104>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	429a      	cmp	r2, r3
 8006996:	d127      	bne.n	80069e8 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8006998:	4b19      	ldr	r3, [pc, #100]	; (8006a00 <vTaskSuspend+0x114>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d017      	beq.n	80069d0 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80069a0:	4b18      	ldr	r3, [pc, #96]	; (8006a04 <vTaskSuspend+0x118>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00a      	beq.n	80069be <vTaskSuspend+0xd2>
	__asm volatile
 80069a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	60bb      	str	r3, [r7, #8]
}
 80069ba:	bf00      	nop
 80069bc:	e7fe      	b.n	80069bc <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80069be:	4b12      	ldr	r3, [pc, #72]	; (8006a08 <vTaskSuspend+0x11c>)
 80069c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069ce:	e00b      	b.n	80069e8 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80069d0:	4b0a      	ldr	r3, [pc, #40]	; (80069fc <vTaskSuspend+0x110>)
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	4b0d      	ldr	r3, [pc, #52]	; (8006a0c <vTaskSuspend+0x120>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d103      	bne.n	80069e4 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 80069dc:	4b04      	ldr	r3, [pc, #16]	; (80069f0 <vTaskSuspend+0x104>)
 80069de:	2200      	movs	r2, #0
 80069e0:	601a      	str	r2, [r3, #0]
	}
 80069e2:	e001      	b.n	80069e8 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 80069e4:	f000 fa98 	bl	8006f18 <vTaskSwitchContext>
	}
 80069e8:	bf00      	nop
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	20000bec 	.word	0x20000bec
 80069f4:	20000bf0 	.word	0x20000bf0
 80069f8:	20000cf4 	.word	0x20000cf4
 80069fc:	20000cd8 	.word	0x20000cd8
 8006a00:	20000cf8 	.word	0x20000cf8
 8006a04:	20000d14 	.word	0x20000d14
 8006a08:	e000ed04 	.word	0xe000ed04
 8006a0c:	20000cec 	.word	0x20000cec

08006a10 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10a      	bne.n	8006a3c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	60fb      	str	r3, [r7, #12]
}
 8006a38:	bf00      	nop
 8006a3a:	e7fe      	b.n	8006a3a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	4a0a      	ldr	r2, [pc, #40]	; (8006a6c <prvTaskIsTaskSuspended+0x5c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d10a      	bne.n	8006a5c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4a:	4a09      	ldr	r2, [pc, #36]	; (8006a70 <prvTaskIsTaskSuspended+0x60>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d005      	beq.n	8006a5c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a5c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006a5e:	4618      	mov	r0, r3
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	20000cd8 	.word	0x20000cd8
 8006a70:	20000cac 	.word	0x20000cac

08006a74 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b08a      	sub	sp, #40	; 0x28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10a      	bne.n	8006aa0 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	61bb      	str	r3, [r7, #24]
}
 8006a9c:	bf00      	nop
 8006a9e:	e7fe      	b.n	8006a9e <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006aa0:	f001 fb8a 	bl	80081b8 <vPortValidateInterruptPriority>
	__asm volatile
 8006aa4:	f3ef 8211 	mrs	r2, BASEPRI
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	617a      	str	r2, [r7, #20]
 8006aba:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006abc:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006abe:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006ac0:	6a38      	ldr	r0, [r7, #32]
 8006ac2:	f7ff ffa5 	bl	8006a10 <prvTaskIsTaskSuspended>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d02f      	beq.n	8006b2c <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006acc:	4b1d      	ldr	r3, [pc, #116]	; (8006b44 <xTaskResumeFromISR+0xd0>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d125      	bne.n	8006b20 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad8:	4b1b      	ldr	r3, [pc, #108]	; (8006b48 <xTaskResumeFromISR+0xd4>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d301      	bcc.n	8006ae6 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	3304      	adds	r3, #4
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fe ff9e 	bl	8005a2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	2201      	movs	r2, #1
 8006af6:	409a      	lsls	r2, r3
 8006af8:	4b14      	ldr	r3, [pc, #80]	; (8006b4c <xTaskResumeFromISR+0xd8>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	4a13      	ldr	r2, [pc, #76]	; (8006b4c <xTaskResumeFromISR+0xd8>)
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b06:	4613      	mov	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4a10      	ldr	r2, [pc, #64]	; (8006b50 <xTaskResumeFromISR+0xdc>)
 8006b10:	441a      	add	r2, r3
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	3304      	adds	r3, #4
 8006b16:	4619      	mov	r1, r3
 8006b18:	4610      	mov	r0, r2
 8006b1a:	f7fe ff2a 	bl	8005972 <vListInsertEnd>
 8006b1e:	e005      	b.n	8006b2c <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	3318      	adds	r3, #24
 8006b24:	4619      	mov	r1, r3
 8006b26:	480b      	ldr	r0, [pc, #44]	; (8006b54 <xTaskResumeFromISR+0xe0>)
 8006b28:	f7fe ff23 	bl	8005972 <vListInsertEnd>
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f383 8811 	msr	BASEPRI, r3
}
 8006b36:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3728      	adds	r7, #40	; 0x28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20000d14 	.word	0x20000d14
 8006b48:	20000bec 	.word	0x20000bec
 8006b4c:	20000cf4 	.word	0x20000cf4
 8006b50:	20000bf0 	.word	0x20000bf0
 8006b54:	20000cac 	.word	0x20000cac

08006b58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08a      	sub	sp, #40	; 0x28
 8006b5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b62:	2300      	movs	r3, #0
 8006b64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b66:	463a      	mov	r2, r7
 8006b68:	1d39      	adds	r1, r7, #4
 8006b6a:	f107 0308 	add.w	r3, r7, #8
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7f9 ffa0 	bl	8000ab4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	9202      	str	r2, [sp, #8]
 8006b7c:	9301      	str	r3, [sp, #4]
 8006b7e:	2300      	movs	r3, #0
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	2300      	movs	r3, #0
 8006b84:	460a      	mov	r2, r1
 8006b86:	4921      	ldr	r1, [pc, #132]	; (8006c0c <vTaskStartScheduler+0xb4>)
 8006b88:	4821      	ldr	r0, [pc, #132]	; (8006c10 <vTaskStartScheduler+0xb8>)
 8006b8a:	f7ff fce7 	bl	800655c <xTaskCreateStatic>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	4a20      	ldr	r2, [pc, #128]	; (8006c14 <vTaskStartScheduler+0xbc>)
 8006b92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b94:	4b1f      	ldr	r3, [pc, #124]	; (8006c14 <vTaskStartScheduler+0xbc>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	e001      	b.n	8006ba6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d102      	bne.n	8006bb2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006bac:	f000 fd28 	bl	8007600 <xTimerCreateTimerTask>
 8006bb0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d116      	bne.n	8006be6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	613b      	str	r3, [r7, #16]
}
 8006bca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006bcc:	4b12      	ldr	r3, [pc, #72]	; (8006c18 <vTaskStartScheduler+0xc0>)
 8006bce:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006bd4:	4b11      	ldr	r3, [pc, #68]	; (8006c1c <vTaskStartScheduler+0xc4>)
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006bda:	4b11      	ldr	r3, [pc, #68]	; (8006c20 <vTaskStartScheduler+0xc8>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006be0:	f001 f966 	bl	8007eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006be4:	e00e      	b.n	8006c04 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bec:	d10a      	bne.n	8006c04 <vTaskStartScheduler+0xac>
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	60fb      	str	r3, [r7, #12]
}
 8006c00:	bf00      	nop
 8006c02:	e7fe      	b.n	8006c02 <vTaskStartScheduler+0xaa>
}
 8006c04:	bf00      	nop
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	080090fc 	.word	0x080090fc
 8006c10:	0800723d 	.word	0x0800723d
 8006c14:	20000d10 	.word	0x20000d10
 8006c18:	20000d0c 	.word	0x20000d0c
 8006c1c:	20000cf8 	.word	0x20000cf8
 8006c20:	20000cf0 	.word	0x20000cf0

08006c24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c24:	b480      	push	{r7}
 8006c26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006c28:	4b04      	ldr	r3, [pc, #16]	; (8006c3c <vTaskSuspendAll+0x18>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	4a03      	ldr	r2, [pc, #12]	; (8006c3c <vTaskSuspendAll+0x18>)
 8006c30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006c32:	bf00      	nop
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	20000d14 	.word	0x20000d14

08006c40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c4e:	4b41      	ldr	r3, [pc, #260]	; (8006d54 <xTaskResumeAll+0x114>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10a      	bne.n	8006c6c <xTaskResumeAll+0x2c>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	603b      	str	r3, [r7, #0]
}
 8006c68:	bf00      	nop
 8006c6a:	e7fe      	b.n	8006c6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c6c:	f001 f9c2 	bl	8007ff4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c70:	4b38      	ldr	r3, [pc, #224]	; (8006d54 <xTaskResumeAll+0x114>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	4a37      	ldr	r2, [pc, #220]	; (8006d54 <xTaskResumeAll+0x114>)
 8006c78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c7a:	4b36      	ldr	r3, [pc, #216]	; (8006d54 <xTaskResumeAll+0x114>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d161      	bne.n	8006d46 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c82:	4b35      	ldr	r3, [pc, #212]	; (8006d58 <xTaskResumeAll+0x118>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d05d      	beq.n	8006d46 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c8a:	e02e      	b.n	8006cea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c8c:	4b33      	ldr	r3, [pc, #204]	; (8006d5c <xTaskResumeAll+0x11c>)
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3318      	adds	r3, #24
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7fe fec7 	bl	8005a2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7fe fec2 	bl	8005a2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cac:	2201      	movs	r2, #1
 8006cae:	409a      	lsls	r2, r3
 8006cb0:	4b2b      	ldr	r3, [pc, #172]	; (8006d60 <xTaskResumeAll+0x120>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	4a2a      	ldr	r2, [pc, #168]	; (8006d60 <xTaskResumeAll+0x120>)
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4a27      	ldr	r2, [pc, #156]	; (8006d64 <xTaskResumeAll+0x124>)
 8006cc8:	441a      	add	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	4619      	mov	r1, r3
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	f7fe fe4e 	bl	8005972 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cda:	4b23      	ldr	r3, [pc, #140]	; (8006d68 <xTaskResumeAll+0x128>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d302      	bcc.n	8006cea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006ce4:	4b21      	ldr	r3, [pc, #132]	; (8006d6c <xTaskResumeAll+0x12c>)
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cea:	4b1c      	ldr	r3, [pc, #112]	; (8006d5c <xTaskResumeAll+0x11c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1cc      	bne.n	8006c8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006cf8:	f000 fb58 	bl	80073ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006cfc:	4b1c      	ldr	r3, [pc, #112]	; (8006d70 <xTaskResumeAll+0x130>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d010      	beq.n	8006d2a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d08:	f000 f846 	bl	8006d98 <xTaskIncrementTick>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d002      	beq.n	8006d18 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006d12:	4b16      	ldr	r3, [pc, #88]	; (8006d6c <xTaskResumeAll+0x12c>)
 8006d14:	2201      	movs	r2, #1
 8006d16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1f1      	bne.n	8006d08 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006d24:	4b12      	ldr	r3, [pc, #72]	; (8006d70 <xTaskResumeAll+0x130>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d2a:	4b10      	ldr	r3, [pc, #64]	; (8006d6c <xTaskResumeAll+0x12c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d009      	beq.n	8006d46 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d32:	2301      	movs	r3, #1
 8006d34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d36:	4b0f      	ldr	r3, [pc, #60]	; (8006d74 <xTaskResumeAll+0x134>)
 8006d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d46:	f001 f985 	bl	8008054 <vPortExitCritical>

	return xAlreadyYielded;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20000d14 	.word	0x20000d14
 8006d58:	20000cec 	.word	0x20000cec
 8006d5c:	20000cac 	.word	0x20000cac
 8006d60:	20000cf4 	.word	0x20000cf4
 8006d64:	20000bf0 	.word	0x20000bf0
 8006d68:	20000bec 	.word	0x20000bec
 8006d6c:	20000d00 	.word	0x20000d00
 8006d70:	20000cfc 	.word	0x20000cfc
 8006d74:	e000ed04 	.word	0xe000ed04

08006d78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d7e:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <xTaskGetTickCount+0x1c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d84:	687b      	ldr	r3, [r7, #4]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	20000cf0 	.word	0x20000cf0

08006d98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006da2:	4b52      	ldr	r3, [pc, #328]	; (8006eec <xTaskIncrementTick+0x154>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f040 8094 	bne.w	8006ed4 <xTaskIncrementTick+0x13c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006dac:	4b50      	ldr	r3, [pc, #320]	; (8006ef0 <xTaskIncrementTick+0x158>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3301      	adds	r3, #1
 8006db2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006db4:	4a4e      	ldr	r2, [pc, #312]	; (8006ef0 <xTaskIncrementTick+0x158>)
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d120      	bne.n	8006e02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006dc0:	4b4c      	ldr	r3, [pc, #304]	; (8006ef4 <xTaskIncrementTick+0x15c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00a      	beq.n	8006de0 <xTaskIncrementTick+0x48>
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	603b      	str	r3, [r7, #0]
}
 8006ddc:	bf00      	nop
 8006dde:	e7fe      	b.n	8006dde <xTaskIncrementTick+0x46>
 8006de0:	4b44      	ldr	r3, [pc, #272]	; (8006ef4 <xTaskIncrementTick+0x15c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	4b44      	ldr	r3, [pc, #272]	; (8006ef8 <xTaskIncrementTick+0x160>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a42      	ldr	r2, [pc, #264]	; (8006ef4 <xTaskIncrementTick+0x15c>)
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	4a42      	ldr	r2, [pc, #264]	; (8006ef8 <xTaskIncrementTick+0x160>)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6013      	str	r3, [r2, #0]
 8006df4:	4b41      	ldr	r3, [pc, #260]	; (8006efc <xTaskIncrementTick+0x164>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	4a40      	ldr	r2, [pc, #256]	; (8006efc <xTaskIncrementTick+0x164>)
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	f000 fad5 	bl	80073ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e02:	4b3f      	ldr	r3, [pc, #252]	; (8006f00 <xTaskIncrementTick+0x168>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d348      	bcc.n	8006e9e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e0c:	4b39      	ldr	r3, [pc, #228]	; (8006ef4 <xTaskIncrementTick+0x15c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d104      	bne.n	8006e20 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e16:	4b3a      	ldr	r3, [pc, #232]	; (8006f00 <xTaskIncrementTick+0x168>)
 8006e18:	f04f 32ff 	mov.w	r2, #4294967295
 8006e1c:	601a      	str	r2, [r3, #0]
					break;
 8006e1e:	e03e      	b.n	8006e9e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e20:	4b34      	ldr	r3, [pc, #208]	; (8006ef4 <xTaskIncrementTick+0x15c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d203      	bcs.n	8006e40 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e38:	4a31      	ldr	r2, [pc, #196]	; (8006f00 <xTaskIncrementTick+0x168>)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e3e:	e02e      	b.n	8006e9e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	3304      	adds	r3, #4
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fe fdf1 	bl	8005a2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d004      	beq.n	8006e5c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	3318      	adds	r3, #24
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fe fde8 	bl	8005a2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e60:	2201      	movs	r2, #1
 8006e62:	409a      	lsls	r2, r3
 8006e64:	4b27      	ldr	r3, [pc, #156]	; (8006f04 <xTaskIncrementTick+0x16c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	4a26      	ldr	r2, [pc, #152]	; (8006f04 <xTaskIncrementTick+0x16c>)
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e72:	4613      	mov	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4a23      	ldr	r2, [pc, #140]	; (8006f08 <xTaskIncrementTick+0x170>)
 8006e7c:	441a      	add	r2, r3
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	3304      	adds	r3, #4
 8006e82:	4619      	mov	r1, r3
 8006e84:	4610      	mov	r0, r2
 8006e86:	f7fe fd74 	bl	8005972 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e8e:	4b1f      	ldr	r3, [pc, #124]	; (8006f0c <xTaskIncrementTick+0x174>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d3b9      	bcc.n	8006e0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e9c:	e7b6      	b.n	8006e0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e9e:	4b1b      	ldr	r3, [pc, #108]	; (8006f0c <xTaskIncrementTick+0x174>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea4:	4918      	ldr	r1, [pc, #96]	; (8006f08 <xTaskIncrementTick+0x170>)
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	440b      	add	r3, r1
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d901      	bls.n	8006eba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8006eba:	4b15      	ldr	r3, [pc, #84]	; (8006f10 <xTaskIncrementTick+0x178>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <xTaskIncrementTick+0x12e>
			{
				vApplicationTickHook();
 8006ec2:	f7f9 fdf0 	bl	8000aa6 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ec6:	4b13      	ldr	r3, [pc, #76]	; (8006f14 <xTaskIncrementTick+0x17c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d009      	beq.n	8006ee2 <xTaskIncrementTick+0x14a>
			{
				xSwitchRequired = pdTRUE;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	e006      	b.n	8006ee2 <xTaskIncrementTick+0x14a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006ed4:	4b0e      	ldr	r3, [pc, #56]	; (8006f10 <xTaskIncrementTick+0x178>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	4a0d      	ldr	r2, [pc, #52]	; (8006f10 <xTaskIncrementTick+0x178>)
 8006edc:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8006ede:	f7f9 fde2 	bl	8000aa6 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8006ee2:	697b      	ldr	r3, [r7, #20]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3718      	adds	r7, #24
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	20000d14 	.word	0x20000d14
 8006ef0:	20000cf0 	.word	0x20000cf0
 8006ef4:	20000ca4 	.word	0x20000ca4
 8006ef8:	20000ca8 	.word	0x20000ca8
 8006efc:	20000d04 	.word	0x20000d04
 8006f00:	20000d0c 	.word	0x20000d0c
 8006f04:	20000cf4 	.word	0x20000cf4
 8006f08:	20000bf0 	.word	0x20000bf0
 8006f0c:	20000bec 	.word	0x20000bec
 8006f10:	20000cfc 	.word	0x20000cfc
 8006f14:	20000d00 	.word	0x20000d00

08006f18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f1e:	4b27      	ldr	r3, [pc, #156]	; (8006fbc <vTaskSwitchContext+0xa4>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f26:	4b26      	ldr	r3, [pc, #152]	; (8006fc0 <vTaskSwitchContext+0xa8>)
 8006f28:	2201      	movs	r2, #1
 8006f2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f2c:	e03f      	b.n	8006fae <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006f2e:	4b24      	ldr	r3, [pc, #144]	; (8006fc0 <vTaskSwitchContext+0xa8>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f34:	4b23      	ldr	r3, [pc, #140]	; (8006fc4 <vTaskSwitchContext+0xac>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	fab3 f383 	clz	r3, r3
 8006f40:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006f42:	7afb      	ldrb	r3, [r7, #11]
 8006f44:	f1c3 031f 	rsb	r3, r3, #31
 8006f48:	617b      	str	r3, [r7, #20]
 8006f4a:	491f      	ldr	r1, [pc, #124]	; (8006fc8 <vTaskSwitchContext+0xb0>)
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10a      	bne.n	8006f74 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	607b      	str	r3, [r7, #4]
}
 8006f70:	bf00      	nop
 8006f72:	e7fe      	b.n	8006f72 <vTaskSwitchContext+0x5a>
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	4613      	mov	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4a12      	ldr	r2, [pc, #72]	; (8006fc8 <vTaskSwitchContext+0xb0>)
 8006f80:	4413      	add	r3, r2
 8006f82:	613b      	str	r3, [r7, #16]
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	605a      	str	r2, [r3, #4]
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	3308      	adds	r3, #8
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d104      	bne.n	8006fa4 <vTaskSwitchContext+0x8c>
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	605a      	str	r2, [r3, #4]
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	4a08      	ldr	r2, [pc, #32]	; (8006fcc <vTaskSwitchContext+0xb4>)
 8006fac:	6013      	str	r3, [r2, #0]
}
 8006fae:	bf00      	nop
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	20000d14 	.word	0x20000d14
 8006fc0:	20000d00 	.word	0x20000d00
 8006fc4:	20000cf4 	.word	0x20000cf4
 8006fc8:	20000bf0 	.word	0x20000bf0
 8006fcc:	20000bec 	.word	0x20000bec

08006fd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10a      	bne.n	8006ff6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	60fb      	str	r3, [r7, #12]
}
 8006ff2:	bf00      	nop
 8006ff4:	e7fe      	b.n	8006ff4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ff6:	4b07      	ldr	r3, [pc, #28]	; (8007014 <vTaskPlaceOnEventList+0x44>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3318      	adds	r3, #24
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7fe fcdb 	bl	80059ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007004:	2101      	movs	r1, #1
 8007006:	6838      	ldr	r0, [r7, #0]
 8007008:	f000 fa94 	bl	8007534 <prvAddCurrentTaskToDelayedList>
}
 800700c:	bf00      	nop
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	20000bec 	.word	0x20000bec

08007018 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10a      	bne.n	8007040 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	617b      	str	r3, [r7, #20]
}
 800703c:	bf00      	nop
 800703e:	e7fe      	b.n	800703e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007040:	4b0a      	ldr	r3, [pc, #40]	; (800706c <vTaskPlaceOnEventListRestricted+0x54>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3318      	adds	r3, #24
 8007046:	4619      	mov	r1, r3
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f7fe fc92 	bl	8005972 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007054:	f04f 33ff 	mov.w	r3, #4294967295
 8007058:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800705a:	6879      	ldr	r1, [r7, #4]
 800705c:	68b8      	ldr	r0, [r7, #8]
 800705e:	f000 fa69 	bl	8007534 <prvAddCurrentTaskToDelayedList>
	}
 8007062:	bf00      	nop
 8007064:	3718      	adds	r7, #24
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20000bec 	.word	0x20000bec

08007070 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10a      	bne.n	800709c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	60fb      	str	r3, [r7, #12]
}
 8007098:	bf00      	nop
 800709a:	e7fe      	b.n	800709a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	3318      	adds	r3, #24
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fe fcc3 	bl	8005a2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070a6:	4b1d      	ldr	r3, [pc, #116]	; (800711c <xTaskRemoveFromEventList+0xac>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d11c      	bne.n	80070e8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	3304      	adds	r3, #4
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fe fcba 	bl	8005a2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070bc:	2201      	movs	r2, #1
 80070be:	409a      	lsls	r2, r3
 80070c0:	4b17      	ldr	r3, [pc, #92]	; (8007120 <xTaskRemoveFromEventList+0xb0>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	4a16      	ldr	r2, [pc, #88]	; (8007120 <xTaskRemoveFromEventList+0xb0>)
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ce:	4613      	mov	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4a13      	ldr	r2, [pc, #76]	; (8007124 <xTaskRemoveFromEventList+0xb4>)
 80070d8:	441a      	add	r2, r3
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	3304      	adds	r3, #4
 80070de:	4619      	mov	r1, r3
 80070e0:	4610      	mov	r0, r2
 80070e2:	f7fe fc46 	bl	8005972 <vListInsertEnd>
 80070e6:	e005      	b.n	80070f4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	3318      	adds	r3, #24
 80070ec:	4619      	mov	r1, r3
 80070ee:	480e      	ldr	r0, [pc, #56]	; (8007128 <xTaskRemoveFromEventList+0xb8>)
 80070f0:	f7fe fc3f 	bl	8005972 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f8:	4b0c      	ldr	r3, [pc, #48]	; (800712c <xTaskRemoveFromEventList+0xbc>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fe:	429a      	cmp	r2, r3
 8007100:	d905      	bls.n	800710e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007102:	2301      	movs	r3, #1
 8007104:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007106:	4b0a      	ldr	r3, [pc, #40]	; (8007130 <xTaskRemoveFromEventList+0xc0>)
 8007108:	2201      	movs	r2, #1
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	e001      	b.n	8007112 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800710e:	2300      	movs	r3, #0
 8007110:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007112:	697b      	ldr	r3, [r7, #20]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3718      	adds	r7, #24
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	20000d14 	.word	0x20000d14
 8007120:	20000cf4 	.word	0x20000cf4
 8007124:	20000bf0 	.word	0x20000bf0
 8007128:	20000cac 	.word	0x20000cac
 800712c:	20000bec 	.word	0x20000bec
 8007130:	20000d00 	.word	0x20000d00

08007134 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800713c:	4b06      	ldr	r3, [pc, #24]	; (8007158 <vTaskInternalSetTimeOutState+0x24>)
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007144:	4b05      	ldr	r3, [pc, #20]	; (800715c <vTaskInternalSetTimeOutState+0x28>)
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	605a      	str	r2, [r3, #4]
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	20000d04 	.word	0x20000d04
 800715c:	20000cf0 	.word	0x20000cf0

08007160 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b088      	sub	sp, #32
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10a      	bne.n	8007186 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	613b      	str	r3, [r7, #16]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10a      	bne.n	80071a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	60fb      	str	r3, [r7, #12]
}
 800719e:	bf00      	nop
 80071a0:	e7fe      	b.n	80071a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80071a2:	f000 ff27 	bl	8007ff4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071a6:	4b1d      	ldr	r3, [pc, #116]	; (800721c <xTaskCheckForTimeOut+0xbc>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	69ba      	ldr	r2, [r7, #24]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071be:	d102      	bne.n	80071c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071c0:	2300      	movs	r3, #0
 80071c2:	61fb      	str	r3, [r7, #28]
 80071c4:	e023      	b.n	800720e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	4b15      	ldr	r3, [pc, #84]	; (8007220 <xTaskCheckForTimeOut+0xc0>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d007      	beq.n	80071e2 <xTaskCheckForTimeOut+0x82>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	69ba      	ldr	r2, [r7, #24]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d302      	bcc.n	80071e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80071dc:	2301      	movs	r3, #1
 80071de:	61fb      	str	r3, [r7, #28]
 80071e0:	e015      	b.n	800720e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d20b      	bcs.n	8007204 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	1ad2      	subs	r2, r2, r3
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7ff ff9b 	bl	8007134 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80071fe:	2300      	movs	r3, #0
 8007200:	61fb      	str	r3, [r7, #28]
 8007202:	e004      	b.n	800720e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	2200      	movs	r2, #0
 8007208:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800720a:	2301      	movs	r3, #1
 800720c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800720e:	f000 ff21 	bl	8008054 <vPortExitCritical>

	return xReturn;
 8007212:	69fb      	ldr	r3, [r7, #28]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3720      	adds	r7, #32
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20000cf0 	.word	0x20000cf0
 8007220:	20000d04 	.word	0x20000d04

08007224 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007224:	b480      	push	{r7}
 8007226:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007228:	4b03      	ldr	r3, [pc, #12]	; (8007238 <vTaskMissedYield+0x14>)
 800722a:	2201      	movs	r2, #1
 800722c:	601a      	str	r2, [r3, #0]
}
 800722e:	bf00      	nop
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	20000d00 	.word	0x20000d00

0800723c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007244:	f000 f854 	bl	80072f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007248:	4b07      	ldr	r3, [pc, #28]	; (8007268 <prvIdleTask+0x2c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d907      	bls.n	8007260 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007250:	4b06      	ldr	r3, [pc, #24]	; (800726c <prvIdleTask+0x30>)
 8007252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007260:	f7f9 fc1a 	bl	8000a98 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007264:	e7ee      	b.n	8007244 <prvIdleTask+0x8>
 8007266:	bf00      	nop
 8007268:	20000bf0 	.word	0x20000bf0
 800726c:	e000ed04 	.word	0xe000ed04

08007270 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007276:	2300      	movs	r3, #0
 8007278:	607b      	str	r3, [r7, #4]
 800727a:	e00c      	b.n	8007296 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	4613      	mov	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4a12      	ldr	r2, [pc, #72]	; (80072d0 <prvInitialiseTaskLists+0x60>)
 8007288:	4413      	add	r3, r2
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe fb44 	bl	8005918 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	3301      	adds	r3, #1
 8007294:	607b      	str	r3, [r7, #4]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2b06      	cmp	r3, #6
 800729a:	d9ef      	bls.n	800727c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800729c:	480d      	ldr	r0, [pc, #52]	; (80072d4 <prvInitialiseTaskLists+0x64>)
 800729e:	f7fe fb3b 	bl	8005918 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072a2:	480d      	ldr	r0, [pc, #52]	; (80072d8 <prvInitialiseTaskLists+0x68>)
 80072a4:	f7fe fb38 	bl	8005918 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072a8:	480c      	ldr	r0, [pc, #48]	; (80072dc <prvInitialiseTaskLists+0x6c>)
 80072aa:	f7fe fb35 	bl	8005918 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072ae:	480c      	ldr	r0, [pc, #48]	; (80072e0 <prvInitialiseTaskLists+0x70>)
 80072b0:	f7fe fb32 	bl	8005918 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072b4:	480b      	ldr	r0, [pc, #44]	; (80072e4 <prvInitialiseTaskLists+0x74>)
 80072b6:	f7fe fb2f 	bl	8005918 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072ba:	4b0b      	ldr	r3, [pc, #44]	; (80072e8 <prvInitialiseTaskLists+0x78>)
 80072bc:	4a05      	ldr	r2, [pc, #20]	; (80072d4 <prvInitialiseTaskLists+0x64>)
 80072be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072c0:	4b0a      	ldr	r3, [pc, #40]	; (80072ec <prvInitialiseTaskLists+0x7c>)
 80072c2:	4a05      	ldr	r2, [pc, #20]	; (80072d8 <prvInitialiseTaskLists+0x68>)
 80072c4:	601a      	str	r2, [r3, #0]
}
 80072c6:	bf00      	nop
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	20000bf0 	.word	0x20000bf0
 80072d4:	20000c7c 	.word	0x20000c7c
 80072d8:	20000c90 	.word	0x20000c90
 80072dc:	20000cac 	.word	0x20000cac
 80072e0:	20000cc0 	.word	0x20000cc0
 80072e4:	20000cd8 	.word	0x20000cd8
 80072e8:	20000ca4 	.word	0x20000ca4
 80072ec:	20000ca8 	.word	0x20000ca8

080072f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072f6:	e019      	b.n	800732c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072f8:	f000 fe7c 	bl	8007ff4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072fc:	4b10      	ldr	r3, [pc, #64]	; (8007340 <prvCheckTasksWaitingTermination+0x50>)
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3304      	adds	r3, #4
 8007308:	4618      	mov	r0, r3
 800730a:	f7fe fb8f 	bl	8005a2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800730e:	4b0d      	ldr	r3, [pc, #52]	; (8007344 <prvCheckTasksWaitingTermination+0x54>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3b01      	subs	r3, #1
 8007314:	4a0b      	ldr	r2, [pc, #44]	; (8007344 <prvCheckTasksWaitingTermination+0x54>)
 8007316:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007318:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <prvCheckTasksWaitingTermination+0x58>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3b01      	subs	r3, #1
 800731e:	4a0a      	ldr	r2, [pc, #40]	; (8007348 <prvCheckTasksWaitingTermination+0x58>)
 8007320:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007322:	f000 fe97 	bl	8008054 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f810 	bl	800734c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800732c:	4b06      	ldr	r3, [pc, #24]	; (8007348 <prvCheckTasksWaitingTermination+0x58>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e1      	bne.n	80072f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007334:	bf00      	nop
 8007336:	bf00      	nop
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20000cc0 	.word	0x20000cc0
 8007344:	20000cec 	.word	0x20000cec
 8007348:	20000cd4 	.word	0x20000cd4

0800734c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800735a:	2b00      	cmp	r3, #0
 800735c:	d108      	bne.n	8007370 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007362:	4618      	mov	r0, r3
 8007364:	f001 f834 	bl	80083d0 <vPortFree>
				vPortFree( pxTCB );
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f001 f831 	bl	80083d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800736e:	e018      	b.n	80073a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007376:	2b01      	cmp	r3, #1
 8007378:	d103      	bne.n	8007382 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f001 f828 	bl	80083d0 <vPortFree>
	}
 8007380:	e00f      	b.n	80073a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007388:	2b02      	cmp	r3, #2
 800738a:	d00a      	beq.n	80073a2 <prvDeleteTCB+0x56>
	__asm volatile
 800738c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007390:	f383 8811 	msr	BASEPRI, r3
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	60fb      	str	r3, [r7, #12]
}
 800739e:	bf00      	nop
 80073a0:	e7fe      	b.n	80073a0 <prvDeleteTCB+0x54>
	}
 80073a2:	bf00      	nop
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
	...

080073ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073b2:	4b0c      	ldr	r3, [pc, #48]	; (80073e4 <prvResetNextTaskUnblockTime+0x38>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d104      	bne.n	80073c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073bc:	4b0a      	ldr	r3, [pc, #40]	; (80073e8 <prvResetNextTaskUnblockTime+0x3c>)
 80073be:	f04f 32ff 	mov.w	r2, #4294967295
 80073c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073c4:	e008      	b.n	80073d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073c6:	4b07      	ldr	r3, [pc, #28]	; (80073e4 <prvResetNextTaskUnblockTime+0x38>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	4a04      	ldr	r2, [pc, #16]	; (80073e8 <prvResetNextTaskUnblockTime+0x3c>)
 80073d6:	6013      	str	r3, [r2, #0]
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	20000ca4 	.word	0x20000ca4
 80073e8:	20000d0c 	.word	0x20000d0c

080073ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073f2:	4b0b      	ldr	r3, [pc, #44]	; (8007420 <xTaskGetSchedulerState+0x34>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d102      	bne.n	8007400 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073fa:	2301      	movs	r3, #1
 80073fc:	607b      	str	r3, [r7, #4]
 80073fe:	e008      	b.n	8007412 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007400:	4b08      	ldr	r3, [pc, #32]	; (8007424 <xTaskGetSchedulerState+0x38>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d102      	bne.n	800740e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007408:	2302      	movs	r3, #2
 800740a:	607b      	str	r3, [r7, #4]
 800740c:	e001      	b.n	8007412 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800740e:	2300      	movs	r3, #0
 8007410:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007412:	687b      	ldr	r3, [r7, #4]
	}
 8007414:	4618      	mov	r0, r3
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	20000cf8 	.word	0x20000cf8
 8007424:	20000d14 	.word	0x20000d14

08007428 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007434:	2300      	movs	r3, #0
 8007436:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d06e      	beq.n	800751c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800743e:	4b3a      	ldr	r3, [pc, #232]	; (8007528 <xTaskPriorityDisinherit+0x100>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	429a      	cmp	r2, r3
 8007446:	d00a      	beq.n	800745e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	60fb      	str	r3, [r7, #12]
}
 800745a:	bf00      	nop
 800745c:	e7fe      	b.n	800745c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10a      	bne.n	800747c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	60bb      	str	r3, [r7, #8]
}
 8007478:	bf00      	nop
 800747a:	e7fe      	b.n	800747a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007480:	1e5a      	subs	r2, r3, #1
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748e:	429a      	cmp	r2, r3
 8007490:	d044      	beq.n	800751c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007496:	2b00      	cmp	r3, #0
 8007498:	d140      	bne.n	800751c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	3304      	adds	r3, #4
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe fac4 	bl	8005a2c <uxListRemove>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d115      	bne.n	80074d6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ae:	491f      	ldr	r1, [pc, #124]	; (800752c <xTaskPriorityDisinherit+0x104>)
 80074b0:	4613      	mov	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4413      	add	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	440b      	add	r3, r1
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10a      	bne.n	80074d6 <xTaskPriorityDisinherit+0xae>
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c4:	2201      	movs	r2, #1
 80074c6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ca:	43da      	mvns	r2, r3
 80074cc:	4b18      	ldr	r3, [pc, #96]	; (8007530 <xTaskPriorityDisinherit+0x108>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4013      	ands	r3, r2
 80074d2:	4a17      	ldr	r2, [pc, #92]	; (8007530 <xTaskPriorityDisinherit+0x108>)
 80074d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e2:	f1c3 0207 	rsb	r2, r3, #7
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ee:	2201      	movs	r2, #1
 80074f0:	409a      	lsls	r2, r3
 80074f2:	4b0f      	ldr	r3, [pc, #60]	; (8007530 <xTaskPriorityDisinherit+0x108>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	4a0d      	ldr	r2, [pc, #52]	; (8007530 <xTaskPriorityDisinherit+0x108>)
 80074fa:	6013      	str	r3, [r2, #0]
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007500:	4613      	mov	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4a08      	ldr	r2, [pc, #32]	; (800752c <xTaskPriorityDisinherit+0x104>)
 800750a:	441a      	add	r2, r3
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	3304      	adds	r3, #4
 8007510:	4619      	mov	r1, r3
 8007512:	4610      	mov	r0, r2
 8007514:	f7fe fa2d 	bl	8005972 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007518:	2301      	movs	r3, #1
 800751a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800751c:	697b      	ldr	r3, [r7, #20]
	}
 800751e:	4618      	mov	r0, r3
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20000bec 	.word	0x20000bec
 800752c:	20000bf0 	.word	0x20000bf0
 8007530:	20000cf4 	.word	0x20000cf4

08007534 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800753e:	4b29      	ldr	r3, [pc, #164]	; (80075e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007544:	4b28      	ldr	r3, [pc, #160]	; (80075e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3304      	adds	r3, #4
 800754a:	4618      	mov	r0, r3
 800754c:	f7fe fa6e 	bl	8005a2c <uxListRemove>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10b      	bne.n	800756e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007556:	4b24      	ldr	r3, [pc, #144]	; (80075e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755c:	2201      	movs	r2, #1
 800755e:	fa02 f303 	lsl.w	r3, r2, r3
 8007562:	43da      	mvns	r2, r3
 8007564:	4b21      	ldr	r3, [pc, #132]	; (80075ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4013      	ands	r3, r2
 800756a:	4a20      	ldr	r2, [pc, #128]	; (80075ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800756c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007574:	d10a      	bne.n	800758c <prvAddCurrentTaskToDelayedList+0x58>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d007      	beq.n	800758c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800757c:	4b1a      	ldr	r3, [pc, #104]	; (80075e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3304      	adds	r3, #4
 8007582:	4619      	mov	r1, r3
 8007584:	481a      	ldr	r0, [pc, #104]	; (80075f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007586:	f7fe f9f4 	bl	8005972 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800758a:	e026      	b.n	80075da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4413      	add	r3, r2
 8007592:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007594:	4b14      	ldr	r3, [pc, #80]	; (80075e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d209      	bcs.n	80075b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075a4:	4b13      	ldr	r3, [pc, #76]	; (80075f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	4b0f      	ldr	r3, [pc, #60]	; (80075e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3304      	adds	r3, #4
 80075ae:	4619      	mov	r1, r3
 80075b0:	4610      	mov	r0, r2
 80075b2:	f7fe fa02 	bl	80059ba <vListInsert>
}
 80075b6:	e010      	b.n	80075da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075b8:	4b0f      	ldr	r3, [pc, #60]	; (80075f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	4b0a      	ldr	r3, [pc, #40]	; (80075e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3304      	adds	r3, #4
 80075c2:	4619      	mov	r1, r3
 80075c4:	4610      	mov	r0, r2
 80075c6:	f7fe f9f8 	bl	80059ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80075ca:	4b0c      	ldr	r3, [pc, #48]	; (80075fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d202      	bcs.n	80075da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80075d4:	4a09      	ldr	r2, [pc, #36]	; (80075fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	6013      	str	r3, [r2, #0]
}
 80075da:	bf00      	nop
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	20000cf0 	.word	0x20000cf0
 80075e8:	20000bec 	.word	0x20000bec
 80075ec:	20000cf4 	.word	0x20000cf4
 80075f0:	20000cd8 	.word	0x20000cd8
 80075f4:	20000ca8 	.word	0x20000ca8
 80075f8:	20000ca4 	.word	0x20000ca4
 80075fc:	20000d0c 	.word	0x20000d0c

08007600 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b08a      	sub	sp, #40	; 0x28
 8007604:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007606:	2300      	movs	r3, #0
 8007608:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800760a:	f000 fb85 	bl	8007d18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800760e:	4b1c      	ldr	r3, [pc, #112]	; (8007680 <xTimerCreateTimerTask+0x80>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d021      	beq.n	800765a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007616:	2300      	movs	r3, #0
 8007618:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800761a:	2300      	movs	r3, #0
 800761c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800761e:	1d3a      	adds	r2, r7, #4
 8007620:	f107 0108 	add.w	r1, r7, #8
 8007624:	f107 030c 	add.w	r3, r7, #12
 8007628:	4618      	mov	r0, r3
 800762a:	f7f9 fa5d 	bl	8000ae8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800762e:	6879      	ldr	r1, [r7, #4]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	9202      	str	r2, [sp, #8]
 8007636:	9301      	str	r3, [sp, #4]
 8007638:	2302      	movs	r3, #2
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	2300      	movs	r3, #0
 800763e:	460a      	mov	r2, r1
 8007640:	4910      	ldr	r1, [pc, #64]	; (8007684 <xTimerCreateTimerTask+0x84>)
 8007642:	4811      	ldr	r0, [pc, #68]	; (8007688 <xTimerCreateTimerTask+0x88>)
 8007644:	f7fe ff8a 	bl	800655c <xTaskCreateStatic>
 8007648:	4603      	mov	r3, r0
 800764a:	4a10      	ldr	r2, [pc, #64]	; (800768c <xTimerCreateTimerTask+0x8c>)
 800764c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800764e:	4b0f      	ldr	r3, [pc, #60]	; (800768c <xTimerCreateTimerTask+0x8c>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007656:	2301      	movs	r3, #1
 8007658:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10a      	bne.n	8007676 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	613b      	str	r3, [r7, #16]
}
 8007672:	bf00      	nop
 8007674:	e7fe      	b.n	8007674 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007676:	697b      	ldr	r3, [r7, #20]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3718      	adds	r7, #24
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20000d48 	.word	0x20000d48
 8007684:	08009104 	.word	0x08009104
 8007688:	080078f9 	.word	0x080078f9
 800768c:	20000d4c 	.word	0x20000d4c

08007690 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007690:	b580      	push	{r7, lr}
 8007692:	b088      	sub	sp, #32
 8007694:	af02      	add	r7, sp, #8
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
 800769c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800769e:	2028      	movs	r0, #40	; 0x28
 80076a0:	f000 fdca 	bl	8008238 <pvPortMalloc>
 80076a4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00d      	beq.n	80076c8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	9301      	str	r3, [sp, #4]
 80076b8:	6a3b      	ldr	r3, [r7, #32]
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	68b9      	ldr	r1, [r7, #8]
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f000 f843 	bl	800774e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80076c8:	697b      	ldr	r3, [r7, #20]
	}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3718      	adds	r7, #24
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b08a      	sub	sp, #40	; 0x28
 80076d6:	af02      	add	r7, sp, #8
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	607a      	str	r2, [r7, #4]
 80076de:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80076e0:	2328      	movs	r3, #40	; 0x28
 80076e2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	2b28      	cmp	r3, #40	; 0x28
 80076e8:	d00a      	beq.n	8007700 <xTimerCreateStatic+0x2e>
	__asm volatile
 80076ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	61bb      	str	r3, [r7, #24]
}
 80076fc:	bf00      	nop
 80076fe:	e7fe      	b.n	80076fe <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007700:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10a      	bne.n	800771e <xTimerCreateStatic+0x4c>
	__asm volatile
 8007708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	617b      	str	r3, [r7, #20]
}
 800771a:	bf00      	nop
 800771c:	e7fe      	b.n	800771c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007720:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00d      	beq.n	8007744 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	2202      	movs	r2, #2
 800772c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	9301      	str	r3, [sp, #4]
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	68b9      	ldr	r1, [r7, #8]
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 f805 	bl	800774e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007744:	69fb      	ldr	r3, [r7, #28]
	}
 8007746:	4618      	mov	r0, r3
 8007748:	3720      	adds	r7, #32
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b086      	sub	sp, #24
 8007752:	af00      	add	r7, sp, #0
 8007754:	60f8      	str	r0, [r7, #12]
 8007756:	60b9      	str	r1, [r7, #8]
 8007758:	607a      	str	r2, [r7, #4]
 800775a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10a      	bne.n	8007778 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	617b      	str	r3, [r7, #20]
}
 8007774:	bf00      	nop
 8007776:	e7fe      	b.n	8007776 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	2b00      	cmp	r3, #0
 800777c:	d01e      	beq.n	80077bc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800777e:	f000 facb 	bl	8007d18 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	6a3a      	ldr	r2, [r7, #32]
 8007798:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	3304      	adds	r3, #4
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fe f8da 	bl	8005958 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d008      	beq.n	80077bc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80077b0:	f043 0304 	orr.w	r3, r3, #4
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80077bc:	bf00      	nop
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08a      	sub	sp, #40	; 0x28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10a      	bne.n	80077f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	623b      	str	r3, [r7, #32]
}
 80077ee:	bf00      	nop
 80077f0:	e7fe      	b.n	80077f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80077f2:	4b1a      	ldr	r3, [pc, #104]	; (800785c <xTimerGenericCommand+0x98>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d02a      	beq.n	8007850 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b05      	cmp	r3, #5
 800780a:	dc18      	bgt.n	800783e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800780c:	f7ff fdee 	bl	80073ec <xTaskGetSchedulerState>
 8007810:	4603      	mov	r3, r0
 8007812:	2b02      	cmp	r3, #2
 8007814:	d109      	bne.n	800782a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007816:	4b11      	ldr	r3, [pc, #68]	; (800785c <xTimerGenericCommand+0x98>)
 8007818:	6818      	ldr	r0, [r3, #0]
 800781a:	f107 0114 	add.w	r1, r7, #20
 800781e:	2300      	movs	r3, #0
 8007820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007822:	f7fe fab3 	bl	8005d8c <xQueueGenericSend>
 8007826:	6278      	str	r0, [r7, #36]	; 0x24
 8007828:	e012      	b.n	8007850 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800782a:	4b0c      	ldr	r3, [pc, #48]	; (800785c <xTimerGenericCommand+0x98>)
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	f107 0114 	add.w	r1, r7, #20
 8007832:	2300      	movs	r3, #0
 8007834:	2200      	movs	r2, #0
 8007836:	f7fe faa9 	bl	8005d8c <xQueueGenericSend>
 800783a:	6278      	str	r0, [r7, #36]	; 0x24
 800783c:	e008      	b.n	8007850 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800783e:	4b07      	ldr	r3, [pc, #28]	; (800785c <xTimerGenericCommand+0x98>)
 8007840:	6818      	ldr	r0, [r3, #0]
 8007842:	f107 0114 	add.w	r1, r7, #20
 8007846:	2300      	movs	r3, #0
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	f7fe fb9d 	bl	8005f88 <xQueueGenericSendFromISR>
 800784e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007852:	4618      	mov	r0, r3
 8007854:	3728      	adds	r7, #40	; 0x28
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	20000d48 	.word	0x20000d48

08007860 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b088      	sub	sp, #32
 8007864:	af02      	add	r7, sp, #8
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800786a:	4b22      	ldr	r3, [pc, #136]	; (80078f4 <prvProcessExpiredTimer+0x94>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	3304      	adds	r3, #4
 8007878:	4618      	mov	r0, r3
 800787a:	f7fe f8d7 	bl	8005a2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007884:	f003 0304 	and.w	r3, r3, #4
 8007888:	2b00      	cmp	r3, #0
 800788a:	d022      	beq.n	80078d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	699a      	ldr	r2, [r3, #24]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	18d1      	adds	r1, r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	6978      	ldr	r0, [r7, #20]
 800789a:	f000 f8d1 	bl	8007a40 <prvInsertTimerInActiveList>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d01f      	beq.n	80078e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078a4:	2300      	movs	r3, #0
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	2300      	movs	r3, #0
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	2100      	movs	r1, #0
 80078ae:	6978      	ldr	r0, [r7, #20]
 80078b0:	f7ff ff88 	bl	80077c4 <xTimerGenericCommand>
 80078b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d113      	bne.n	80078e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80078bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c0:	f383 8811 	msr	BASEPRI, r3
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	60fb      	str	r3, [r7, #12]
}
 80078ce:	bf00      	nop
 80078d0:	e7fe      	b.n	80078d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80078d8:	f023 0301 	bic.w	r3, r3, #1
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	6978      	ldr	r0, [r7, #20]
 80078ea:	4798      	blx	r3
}
 80078ec:	bf00      	nop
 80078ee:	3718      	adds	r7, #24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	20000d40 	.word	0x20000d40

080078f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007900:	f107 0308 	add.w	r3, r7, #8
 8007904:	4618      	mov	r0, r3
 8007906:	f000 f857 	bl	80079b8 <prvGetNextExpireTime>
 800790a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	4619      	mov	r1, r3
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f803 	bl	800791c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007916:	f000 f8d5 	bl	8007ac4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800791a:	e7f1      	b.n	8007900 <prvTimerTask+0x8>

0800791c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007926:	f7ff f97d 	bl	8006c24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800792a:	f107 0308 	add.w	r3, r7, #8
 800792e:	4618      	mov	r0, r3
 8007930:	f000 f866 	bl	8007a00 <prvSampleTimeNow>
 8007934:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d130      	bne.n	800799e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <prvProcessTimerOrBlockTask+0x3c>
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	429a      	cmp	r2, r3
 8007948:	d806      	bhi.n	8007958 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800794a:	f7ff f979 	bl	8006c40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800794e:	68f9      	ldr	r1, [r7, #12]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7ff ff85 	bl	8007860 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007956:	e024      	b.n	80079a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d008      	beq.n	8007970 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800795e:	4b13      	ldr	r3, [pc, #76]	; (80079ac <prvProcessTimerOrBlockTask+0x90>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <prvProcessTimerOrBlockTask+0x50>
 8007968:	2301      	movs	r3, #1
 800796a:	e000      	b.n	800796e <prvProcessTimerOrBlockTask+0x52>
 800796c:	2300      	movs	r3, #0
 800796e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007970:	4b0f      	ldr	r3, [pc, #60]	; (80079b0 <prvProcessTimerOrBlockTask+0x94>)
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	4619      	mov	r1, r3
 800797e:	f7fe fdb9 	bl	80064f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007982:	f7ff f95d 	bl	8006c40 <xTaskResumeAll>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10a      	bne.n	80079a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800798c:	4b09      	ldr	r3, [pc, #36]	; (80079b4 <prvProcessTimerOrBlockTask+0x98>)
 800798e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	f3bf 8f6f 	isb	sy
}
 800799c:	e001      	b.n	80079a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800799e:	f7ff f94f 	bl	8006c40 <xTaskResumeAll>
}
 80079a2:	bf00      	nop
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	20000d44 	.word	0x20000d44
 80079b0:	20000d48 	.word	0x20000d48
 80079b4:	e000ed04 	.word	0xe000ed04

080079b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079c0:	4b0e      	ldr	r3, [pc, #56]	; (80079fc <prvGetNextExpireTime+0x44>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <prvGetNextExpireTime+0x16>
 80079ca:	2201      	movs	r2, #1
 80079cc:	e000      	b.n	80079d0 <prvGetNextExpireTime+0x18>
 80079ce:	2200      	movs	r2, #0
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d105      	bne.n	80079e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079dc:	4b07      	ldr	r3, [pc, #28]	; (80079fc <prvGetNextExpireTime+0x44>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60fb      	str	r3, [r7, #12]
 80079e6:	e001      	b.n	80079ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80079ec:	68fb      	ldr	r3, [r7, #12]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	20000d40 	.word	0x20000d40

08007a00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a08:	f7ff f9b6 	bl	8006d78 <xTaskGetTickCount>
 8007a0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a0e:	4b0b      	ldr	r3, [pc, #44]	; (8007a3c <prvSampleTimeNow+0x3c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d205      	bcs.n	8007a24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a18:	f000 f91a 	bl	8007c50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	601a      	str	r2, [r3, #0]
 8007a22:	e002      	b.n	8007a2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a2a:	4a04      	ldr	r2, [pc, #16]	; (8007a3c <prvSampleTimeNow+0x3c>)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a30:	68fb      	ldr	r3, [r7, #12]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20000d50 	.word	0x20000d50

08007a40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
 8007a4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d812      	bhi.n	8007a8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	1ad2      	subs	r2, r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d302      	bcc.n	8007a7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a74:	2301      	movs	r3, #1
 8007a76:	617b      	str	r3, [r7, #20]
 8007a78:	e01b      	b.n	8007ab2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a7a:	4b10      	ldr	r3, [pc, #64]	; (8007abc <prvInsertTimerInActiveList+0x7c>)
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3304      	adds	r3, #4
 8007a82:	4619      	mov	r1, r3
 8007a84:	4610      	mov	r0, r2
 8007a86:	f7fd ff98 	bl	80059ba <vListInsert>
 8007a8a:	e012      	b.n	8007ab2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d206      	bcs.n	8007aa2 <prvInsertTimerInActiveList+0x62>
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d302      	bcc.n	8007aa2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	617b      	str	r3, [r7, #20]
 8007aa0:	e007      	b.n	8007ab2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007aa2:	4b07      	ldr	r3, [pc, #28]	; (8007ac0 <prvInsertTimerInActiveList+0x80>)
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	4619      	mov	r1, r3
 8007aac:	4610      	mov	r0, r2
 8007aae:	f7fd ff84 	bl	80059ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ab2:	697b      	ldr	r3, [r7, #20]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3718      	adds	r7, #24
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	20000d44 	.word	0x20000d44
 8007ac0:	20000d40 	.word	0x20000d40

08007ac4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08c      	sub	sp, #48	; 0x30
 8007ac8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007aca:	e0ae      	b.n	8007c2a <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f2c0 80aa 	blt.w	8007c28 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d004      	beq.n	8007aea <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fd ffa1 	bl	8005a2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007aea:	1d3b      	adds	r3, r7, #4
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7ff ff87 	bl	8007a00 <prvSampleTimeNow>
 8007af2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	2b09      	cmp	r3, #9
 8007af8:	f200 8097 	bhi.w	8007c2a <prvProcessReceivedCommands+0x166>
 8007afc:	a201      	add	r2, pc, #4	; (adr r2, 8007b04 <prvProcessReceivedCommands+0x40>)
 8007afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b02:	bf00      	nop
 8007b04:	08007b2d 	.word	0x08007b2d
 8007b08:	08007b2d 	.word	0x08007b2d
 8007b0c:	08007b2d 	.word	0x08007b2d
 8007b10:	08007ba1 	.word	0x08007ba1
 8007b14:	08007bb5 	.word	0x08007bb5
 8007b18:	08007bff 	.word	0x08007bff
 8007b1c:	08007b2d 	.word	0x08007b2d
 8007b20:	08007b2d 	.word	0x08007b2d
 8007b24:	08007ba1 	.word	0x08007ba1
 8007b28:	08007bb5 	.word	0x08007bb5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b32:	f043 0301 	orr.w	r3, r3, #1
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	18d1      	adds	r1, r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6a3a      	ldr	r2, [r7, #32]
 8007b4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b4c:	f7ff ff78 	bl	8007a40 <prvInsertTimerInActiveList>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d069      	beq.n	8007c2a <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b64:	f003 0304 	and.w	r3, r3, #4
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d05e      	beq.n	8007c2a <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	441a      	add	r2, r3
 8007b74:	2300      	movs	r3, #0
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	2300      	movs	r3, #0
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b7e:	f7ff fe21 	bl	80077c4 <xTimerGenericCommand>
 8007b82:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d14f      	bne.n	8007c2a <prvProcessReceivedCommands+0x166>
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	61bb      	str	r3, [r7, #24]
}
 8007b9c:	bf00      	nop
 8007b9e:	e7fe      	b.n	8007b9e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ba6:	f023 0301 	bic.w	r3, r3, #1
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8007bb2:	e03a      	b.n	8007c2a <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bba:	f043 0301 	orr.w	r3, r3, #1
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10a      	bne.n	8007bea <prvProcessReceivedCommands+0x126>
	__asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	617b      	str	r3, [r7, #20]
}
 8007be6:	bf00      	nop
 8007be8:	e7fe      	b.n	8007be8 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	699a      	ldr	r2, [r3, #24]
 8007bee:	6a3b      	ldr	r3, [r7, #32]
 8007bf0:	18d1      	adds	r1, r2, r3
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	6a3a      	ldr	r2, [r7, #32]
 8007bf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bf8:	f7ff ff22 	bl	8007a40 <prvInsertTimerInActiveList>
					break;
 8007bfc:	e015      	b.n	8007c2a <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d103      	bne.n	8007c14 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8007c0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c0e:	f000 fbdf 	bl	80083d0 <vPortFree>
 8007c12:	e00a      	b.n	8007c2a <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c1a:	f023 0301 	bic.w	r3, r3, #1
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c26:	e000      	b.n	8007c2a <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007c28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c2a:	4b08      	ldr	r3, [pc, #32]	; (8007c4c <prvProcessReceivedCommands+0x188>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f107 0108 	add.w	r1, r7, #8
 8007c32:	2200      	movs	r2, #0
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7fe fa43 	bl	80060c0 <xQueueReceive>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f47f af45 	bne.w	8007acc <prvProcessReceivedCommands+0x8>
	}
}
 8007c42:	bf00      	nop
 8007c44:	bf00      	nop
 8007c46:	3728      	adds	r7, #40	; 0x28
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	20000d48 	.word	0x20000d48

08007c50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b088      	sub	sp, #32
 8007c54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c56:	e048      	b.n	8007cea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c58:	4b2d      	ldr	r3, [pc, #180]	; (8007d10 <prvSwitchTimerLists+0xc0>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c62:	4b2b      	ldr	r3, [pc, #172]	; (8007d10 <prvSwitchTimerLists+0xc0>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	3304      	adds	r3, #4
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fd fedb 	bl	8005a2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c84:	f003 0304 	and.w	r3, r3, #4
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d02e      	beq.n	8007cea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	4413      	add	r3, r2
 8007c94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d90e      	bls.n	8007cbc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007caa:	4b19      	ldr	r3, [pc, #100]	; (8007d10 <prvSwitchTimerLists+0xc0>)
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	f7fd fe80 	bl	80059ba <vListInsert>
 8007cba:	e016      	b.n	8007cea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f7ff fd7c 	bl	80077c4 <xTimerGenericCommand>
 8007ccc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10a      	bne.n	8007cea <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	603b      	str	r3, [r7, #0]
}
 8007ce6:	bf00      	nop
 8007ce8:	e7fe      	b.n	8007ce8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cea:	4b09      	ldr	r3, [pc, #36]	; (8007d10 <prvSwitchTimerLists+0xc0>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1b1      	bne.n	8007c58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007cf4:	4b06      	ldr	r3, [pc, #24]	; (8007d10 <prvSwitchTimerLists+0xc0>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007cfa:	4b06      	ldr	r3, [pc, #24]	; (8007d14 <prvSwitchTimerLists+0xc4>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a04      	ldr	r2, [pc, #16]	; (8007d10 <prvSwitchTimerLists+0xc0>)
 8007d00:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d02:	4a04      	ldr	r2, [pc, #16]	; (8007d14 <prvSwitchTimerLists+0xc4>)
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	6013      	str	r3, [r2, #0]
}
 8007d08:	bf00      	nop
 8007d0a:	3718      	adds	r7, #24
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	20000d40 	.word	0x20000d40
 8007d14:	20000d44 	.word	0x20000d44

08007d18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d1e:	f000 f969 	bl	8007ff4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d22:	4b15      	ldr	r3, [pc, #84]	; (8007d78 <prvCheckForValidListAndQueue+0x60>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d120      	bne.n	8007d6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d2a:	4814      	ldr	r0, [pc, #80]	; (8007d7c <prvCheckForValidListAndQueue+0x64>)
 8007d2c:	f7fd fdf4 	bl	8005918 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d30:	4813      	ldr	r0, [pc, #76]	; (8007d80 <prvCheckForValidListAndQueue+0x68>)
 8007d32:	f7fd fdf1 	bl	8005918 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d36:	4b13      	ldr	r3, [pc, #76]	; (8007d84 <prvCheckForValidListAndQueue+0x6c>)
 8007d38:	4a10      	ldr	r2, [pc, #64]	; (8007d7c <prvCheckForValidListAndQueue+0x64>)
 8007d3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d3c:	4b12      	ldr	r3, [pc, #72]	; (8007d88 <prvCheckForValidListAndQueue+0x70>)
 8007d3e:	4a10      	ldr	r2, [pc, #64]	; (8007d80 <prvCheckForValidListAndQueue+0x68>)
 8007d40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d42:	2300      	movs	r3, #0
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	4b11      	ldr	r3, [pc, #68]	; (8007d8c <prvCheckForValidListAndQueue+0x74>)
 8007d48:	4a11      	ldr	r2, [pc, #68]	; (8007d90 <prvCheckForValidListAndQueue+0x78>)
 8007d4a:	210c      	movs	r1, #12
 8007d4c:	200a      	movs	r0, #10
 8007d4e:	f7fd feff 	bl	8005b50 <xQueueGenericCreateStatic>
 8007d52:	4603      	mov	r3, r0
 8007d54:	4a08      	ldr	r2, [pc, #32]	; (8007d78 <prvCheckForValidListAndQueue+0x60>)
 8007d56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d58:	4b07      	ldr	r3, [pc, #28]	; (8007d78 <prvCheckForValidListAndQueue+0x60>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d005      	beq.n	8007d6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d60:	4b05      	ldr	r3, [pc, #20]	; (8007d78 <prvCheckForValidListAndQueue+0x60>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	490b      	ldr	r1, [pc, #44]	; (8007d94 <prvCheckForValidListAndQueue+0x7c>)
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe fb9a 	bl	80064a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d6c:	f000 f972 	bl	8008054 <vPortExitCritical>
}
 8007d70:	bf00      	nop
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	20000d48 	.word	0x20000d48
 8007d7c:	20000d18 	.word	0x20000d18
 8007d80:	20000d2c 	.word	0x20000d2c
 8007d84:	20000d40 	.word	0x20000d40
 8007d88:	20000d44 	.word	0x20000d44
 8007d8c:	20000dcc 	.word	0x20000dcc
 8007d90:	20000d54 	.word	0x20000d54
 8007d94:	0800910c 	.word	0x0800910c

08007d98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3b04      	subs	r3, #4
 8007da8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007db0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3b04      	subs	r3, #4
 8007db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f023 0201 	bic.w	r2, r3, #1
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	3b04      	subs	r3, #4
 8007dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007dc8:	4a0c      	ldr	r2, [pc, #48]	; (8007dfc <pxPortInitialiseStack+0x64>)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3b14      	subs	r3, #20
 8007dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3b04      	subs	r3, #4
 8007dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f06f 0202 	mvn.w	r2, #2
 8007de6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3b20      	subs	r3, #32
 8007dec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007dee:	68fb      	ldr	r3, [r7, #12]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	08007e01 	.word	0x08007e01

08007e00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e0a:	4b12      	ldr	r3, [pc, #72]	; (8007e54 <prvTaskExitError+0x54>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e12:	d00a      	beq.n	8007e2a <prvTaskExitError+0x2a>
	__asm volatile
 8007e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	60fb      	str	r3, [r7, #12]
}
 8007e26:	bf00      	nop
 8007e28:	e7fe      	b.n	8007e28 <prvTaskExitError+0x28>
	__asm volatile
 8007e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	60bb      	str	r3, [r7, #8]
}
 8007e3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e3e:	bf00      	nop
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d0fc      	beq.n	8007e40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e46:	bf00      	nop
 8007e48:	bf00      	nop
 8007e4a:	3714      	adds	r7, #20
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	2000000c 	.word	0x2000000c
	...

08007e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e60:	4b07      	ldr	r3, [pc, #28]	; (8007e80 <pxCurrentTCBConst2>)
 8007e62:	6819      	ldr	r1, [r3, #0]
 8007e64:	6808      	ldr	r0, [r1, #0]
 8007e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6a:	f380 8809 	msr	PSP, r0
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f04f 0000 	mov.w	r0, #0
 8007e76:	f380 8811 	msr	BASEPRI, r0
 8007e7a:	4770      	bx	lr
 8007e7c:	f3af 8000 	nop.w

08007e80 <pxCurrentTCBConst2>:
 8007e80:	20000bec 	.word	0x20000bec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop

08007e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e88:	4808      	ldr	r0, [pc, #32]	; (8007eac <prvPortStartFirstTask+0x24>)
 8007e8a:	6800      	ldr	r0, [r0, #0]
 8007e8c:	6800      	ldr	r0, [r0, #0]
 8007e8e:	f380 8808 	msr	MSP, r0
 8007e92:	f04f 0000 	mov.w	r0, #0
 8007e96:	f380 8814 	msr	CONTROL, r0
 8007e9a:	b662      	cpsie	i
 8007e9c:	b661      	cpsie	f
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	df00      	svc	0
 8007ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007eaa:	bf00      	nop
 8007eac:	e000ed08 	.word	0xe000ed08

08007eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007eb6:	4b46      	ldr	r3, [pc, #280]	; (8007fd0 <xPortStartScheduler+0x120>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a46      	ldr	r2, [pc, #280]	; (8007fd4 <xPortStartScheduler+0x124>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d10a      	bne.n	8007ed6 <xPortStartScheduler+0x26>
	__asm volatile
 8007ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	613b      	str	r3, [r7, #16]
}
 8007ed2:	bf00      	nop
 8007ed4:	e7fe      	b.n	8007ed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ed6:	4b3e      	ldr	r3, [pc, #248]	; (8007fd0 <xPortStartScheduler+0x120>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a3f      	ldr	r2, [pc, #252]	; (8007fd8 <xPortStartScheduler+0x128>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d10a      	bne.n	8007ef6 <xPortStartScheduler+0x46>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	60fb      	str	r3, [r7, #12]
}
 8007ef2:	bf00      	nop
 8007ef4:	e7fe      	b.n	8007ef4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ef6:	4b39      	ldr	r3, [pc, #228]	; (8007fdc <xPortStartScheduler+0x12c>)
 8007ef8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	22ff      	movs	r2, #255	; 0xff
 8007f06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f10:	78fb      	ldrb	r3, [r7, #3]
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	4b31      	ldr	r3, [pc, #196]	; (8007fe0 <xPortStartScheduler+0x130>)
 8007f1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f1e:	4b31      	ldr	r3, [pc, #196]	; (8007fe4 <xPortStartScheduler+0x134>)
 8007f20:	2207      	movs	r2, #7
 8007f22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f24:	e009      	b.n	8007f3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007f26:	4b2f      	ldr	r3, [pc, #188]	; (8007fe4 <xPortStartScheduler+0x134>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	4a2d      	ldr	r2, [pc, #180]	; (8007fe4 <xPortStartScheduler+0x134>)
 8007f2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f30:	78fb      	ldrb	r3, [r7, #3]
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	005b      	lsls	r3, r3, #1
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f3a:	78fb      	ldrb	r3, [r7, #3]
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f42:	2b80      	cmp	r3, #128	; 0x80
 8007f44:	d0ef      	beq.n	8007f26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f46:	4b27      	ldr	r3, [pc, #156]	; (8007fe4 <xPortStartScheduler+0x134>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f1c3 0307 	rsb	r3, r3, #7
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d00a      	beq.n	8007f68 <xPortStartScheduler+0xb8>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	60bb      	str	r3, [r7, #8]
}
 8007f64:	bf00      	nop
 8007f66:	e7fe      	b.n	8007f66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f68:	4b1e      	ldr	r3, [pc, #120]	; (8007fe4 <xPortStartScheduler+0x134>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	021b      	lsls	r3, r3, #8
 8007f6e:	4a1d      	ldr	r2, [pc, #116]	; (8007fe4 <xPortStartScheduler+0x134>)
 8007f70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f72:	4b1c      	ldr	r3, [pc, #112]	; (8007fe4 <xPortStartScheduler+0x134>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f7a:	4a1a      	ldr	r2, [pc, #104]	; (8007fe4 <xPortStartScheduler+0x134>)
 8007f7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	b2da      	uxtb	r2, r3
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f86:	4b18      	ldr	r3, [pc, #96]	; (8007fe8 <xPortStartScheduler+0x138>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a17      	ldr	r2, [pc, #92]	; (8007fe8 <xPortStartScheduler+0x138>)
 8007f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f92:	4b15      	ldr	r3, [pc, #84]	; (8007fe8 <xPortStartScheduler+0x138>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a14      	ldr	r2, [pc, #80]	; (8007fe8 <xPortStartScheduler+0x138>)
 8007f98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f9e:	f000 f8dd 	bl	800815c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fa2:	4b12      	ldr	r3, [pc, #72]	; (8007fec <xPortStartScheduler+0x13c>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007fa8:	f000 f8fc 	bl	80081a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fac:	4b10      	ldr	r3, [pc, #64]	; (8007ff0 <xPortStartScheduler+0x140>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a0f      	ldr	r2, [pc, #60]	; (8007ff0 <xPortStartScheduler+0x140>)
 8007fb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007fb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007fb8:	f7ff ff66 	bl	8007e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fbc:	f7fe ffac 	bl	8006f18 <vTaskSwitchContext>
	prvTaskExitError();
 8007fc0:	f7ff ff1e 	bl	8007e00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3718      	adds	r7, #24
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	e000ed00 	.word	0xe000ed00
 8007fd4:	410fc271 	.word	0x410fc271
 8007fd8:	410fc270 	.word	0x410fc270
 8007fdc:	e000e400 	.word	0xe000e400
 8007fe0:	20000e14 	.word	0x20000e14
 8007fe4:	20000e18 	.word	0x20000e18
 8007fe8:	e000ed20 	.word	0xe000ed20
 8007fec:	2000000c 	.word	0x2000000c
 8007ff0:	e000ef34 	.word	0xe000ef34

08007ff4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	607b      	str	r3, [r7, #4]
}
 800800c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800800e:	4b0f      	ldr	r3, [pc, #60]	; (800804c <vPortEnterCritical+0x58>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	3301      	adds	r3, #1
 8008014:	4a0d      	ldr	r2, [pc, #52]	; (800804c <vPortEnterCritical+0x58>)
 8008016:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008018:	4b0c      	ldr	r3, [pc, #48]	; (800804c <vPortEnterCritical+0x58>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d10f      	bne.n	8008040 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008020:	4b0b      	ldr	r3, [pc, #44]	; (8008050 <vPortEnterCritical+0x5c>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00a      	beq.n	8008040 <vPortEnterCritical+0x4c>
	__asm volatile
 800802a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802e:	f383 8811 	msr	BASEPRI, r3
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	603b      	str	r3, [r7, #0]
}
 800803c:	bf00      	nop
 800803e:	e7fe      	b.n	800803e <vPortEnterCritical+0x4a>
	}
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	2000000c 	.word	0x2000000c
 8008050:	e000ed04 	.word	0xe000ed04

08008054 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800805a:	4b12      	ldr	r3, [pc, #72]	; (80080a4 <vPortExitCritical+0x50>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10a      	bne.n	8008078 <vPortExitCritical+0x24>
	__asm volatile
 8008062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	607b      	str	r3, [r7, #4]
}
 8008074:	bf00      	nop
 8008076:	e7fe      	b.n	8008076 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008078:	4b0a      	ldr	r3, [pc, #40]	; (80080a4 <vPortExitCritical+0x50>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	3b01      	subs	r3, #1
 800807e:	4a09      	ldr	r2, [pc, #36]	; (80080a4 <vPortExitCritical+0x50>)
 8008080:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008082:	4b08      	ldr	r3, [pc, #32]	; (80080a4 <vPortExitCritical+0x50>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d105      	bne.n	8008096 <vPortExitCritical+0x42>
 800808a:	2300      	movs	r3, #0
 800808c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	f383 8811 	msr	BASEPRI, r3
}
 8008094:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008096:	bf00      	nop
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	2000000c 	.word	0x2000000c
	...

080080b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080b0:	f3ef 8009 	mrs	r0, PSP
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	4b15      	ldr	r3, [pc, #84]	; (8008110 <pxCurrentTCBConst>)
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	f01e 0f10 	tst.w	lr, #16
 80080c0:	bf08      	it	eq
 80080c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ca:	6010      	str	r0, [r2, #0]
 80080cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80080d4:	f380 8811 	msr	BASEPRI, r0
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f7fe ff1a 	bl	8006f18 <vTaskSwitchContext>
 80080e4:	f04f 0000 	mov.w	r0, #0
 80080e8:	f380 8811 	msr	BASEPRI, r0
 80080ec:	bc09      	pop	{r0, r3}
 80080ee:	6819      	ldr	r1, [r3, #0]
 80080f0:	6808      	ldr	r0, [r1, #0]
 80080f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f6:	f01e 0f10 	tst.w	lr, #16
 80080fa:	bf08      	it	eq
 80080fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008100:	f380 8809 	msr	PSP, r0
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	f3af 8000 	nop.w

08008110 <pxCurrentTCBConst>:
 8008110:	20000bec 	.word	0x20000bec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008114:	bf00      	nop
 8008116:	bf00      	nop

08008118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
	__asm volatile
 800811e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	607b      	str	r3, [r7, #4]
}
 8008130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008132:	f7fe fe31 	bl	8006d98 <xTaskIncrementTick>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d003      	beq.n	8008144 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800813c:	4b06      	ldr	r3, [pc, #24]	; (8008158 <SysTick_Handler+0x40>)
 800813e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	2300      	movs	r3, #0
 8008146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	f383 8811 	msr	BASEPRI, r3
}
 800814e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008150:	bf00      	nop
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	e000ed04 	.word	0xe000ed04

0800815c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800815c:	b480      	push	{r7}
 800815e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008160:	4b0b      	ldr	r3, [pc, #44]	; (8008190 <vPortSetupTimerInterrupt+0x34>)
 8008162:	2200      	movs	r2, #0
 8008164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008166:	4b0b      	ldr	r3, [pc, #44]	; (8008194 <vPortSetupTimerInterrupt+0x38>)
 8008168:	2200      	movs	r2, #0
 800816a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800816c:	4b0a      	ldr	r3, [pc, #40]	; (8008198 <vPortSetupTimerInterrupt+0x3c>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a0a      	ldr	r2, [pc, #40]	; (800819c <vPortSetupTimerInterrupt+0x40>)
 8008172:	fba2 2303 	umull	r2, r3, r2, r3
 8008176:	099b      	lsrs	r3, r3, #6
 8008178:	4a09      	ldr	r2, [pc, #36]	; (80081a0 <vPortSetupTimerInterrupt+0x44>)
 800817a:	3b01      	subs	r3, #1
 800817c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800817e:	4b04      	ldr	r3, [pc, #16]	; (8008190 <vPortSetupTimerInterrupt+0x34>)
 8008180:	2207      	movs	r2, #7
 8008182:	601a      	str	r2, [r3, #0]
}
 8008184:	bf00      	nop
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	e000e010 	.word	0xe000e010
 8008194:	e000e018 	.word	0xe000e018
 8008198:	20000000 	.word	0x20000000
 800819c:	10624dd3 	.word	0x10624dd3
 80081a0:	e000e014 	.word	0xe000e014

080081a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80081b4 <vPortEnableVFP+0x10>
 80081a8:	6801      	ldr	r1, [r0, #0]
 80081aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80081ae:	6001      	str	r1, [r0, #0]
 80081b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081b2:	bf00      	nop
 80081b4:	e000ed88 	.word	0xe000ed88

080081b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081be:	f3ef 8305 	mrs	r3, IPSR
 80081c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2b0f      	cmp	r3, #15
 80081c8:	d914      	bls.n	80081f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081ca:	4a17      	ldr	r2, [pc, #92]	; (8008228 <vPortValidateInterruptPriority+0x70>)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081d4:	4b15      	ldr	r3, [pc, #84]	; (800822c <vPortValidateInterruptPriority+0x74>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	7afa      	ldrb	r2, [r7, #11]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d20a      	bcs.n	80081f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	607b      	str	r3, [r7, #4]
}
 80081f0:	bf00      	nop
 80081f2:	e7fe      	b.n	80081f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80081f4:	4b0e      	ldr	r3, [pc, #56]	; (8008230 <vPortValidateInterruptPriority+0x78>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80081fc:	4b0d      	ldr	r3, [pc, #52]	; (8008234 <vPortValidateInterruptPriority+0x7c>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	429a      	cmp	r2, r3
 8008202:	d90a      	bls.n	800821a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	603b      	str	r3, [r7, #0]
}
 8008216:	bf00      	nop
 8008218:	e7fe      	b.n	8008218 <vPortValidateInterruptPriority+0x60>
	}
 800821a:	bf00      	nop
 800821c:	3714      	adds	r7, #20
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	e000e3f0 	.word	0xe000e3f0
 800822c:	20000e14 	.word	0x20000e14
 8008230:	e000ed0c 	.word	0xe000ed0c
 8008234:	20000e18 	.word	0x20000e18

08008238 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b08a      	sub	sp, #40	; 0x28
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008240:	2300      	movs	r3, #0
 8008242:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008244:	f7fe fcee 	bl	8006c24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008248:	4b5b      	ldr	r3, [pc, #364]	; (80083b8 <pvPortMalloc+0x180>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008250:	f000 f920 	bl	8008494 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008254:	4b59      	ldr	r3, [pc, #356]	; (80083bc <pvPortMalloc+0x184>)
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4013      	ands	r3, r2
 800825c:	2b00      	cmp	r3, #0
 800825e:	f040 8093 	bne.w	8008388 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d01d      	beq.n	80082a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008268:	2208      	movs	r2, #8
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4413      	add	r3, r2
 800826e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f003 0307 	and.w	r3, r3, #7
 8008276:	2b00      	cmp	r3, #0
 8008278:	d014      	beq.n	80082a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f023 0307 	bic.w	r3, r3, #7
 8008280:	3308      	adds	r3, #8
 8008282:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f003 0307 	and.w	r3, r3, #7
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00a      	beq.n	80082a4 <pvPortMalloc+0x6c>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	617b      	str	r3, [r7, #20]
}
 80082a0:	bf00      	nop
 80082a2:	e7fe      	b.n	80082a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d06e      	beq.n	8008388 <pvPortMalloc+0x150>
 80082aa:	4b45      	ldr	r3, [pc, #276]	; (80083c0 <pvPortMalloc+0x188>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d869      	bhi.n	8008388 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082b4:	4b43      	ldr	r3, [pc, #268]	; (80083c4 <pvPortMalloc+0x18c>)
 80082b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082b8:	4b42      	ldr	r3, [pc, #264]	; (80083c4 <pvPortMalloc+0x18c>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082be:	e004      	b.n	80082ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d903      	bls.n	80082dc <pvPortMalloc+0xa4>
 80082d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1f1      	bne.n	80082c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80082dc:	4b36      	ldr	r3, [pc, #216]	; (80083b8 <pvPortMalloc+0x180>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d050      	beq.n	8008388 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2208      	movs	r2, #8
 80082ec:	4413      	add	r3, r2
 80082ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	1ad2      	subs	r2, r2, r3
 8008300:	2308      	movs	r3, #8
 8008302:	005b      	lsls	r3, r3, #1
 8008304:	429a      	cmp	r2, r3
 8008306:	d91f      	bls.n	8008348 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4413      	add	r3, r2
 800830e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	f003 0307 	and.w	r3, r3, #7
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <pvPortMalloc+0xf8>
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	613b      	str	r3, [r7, #16]
}
 800832c:	bf00      	nop
 800832e:	e7fe      	b.n	800832e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	1ad2      	subs	r2, r2, r3
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008342:	69b8      	ldr	r0, [r7, #24]
 8008344:	f000 f908 	bl	8008558 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008348:	4b1d      	ldr	r3, [pc, #116]	; (80083c0 <pvPortMalloc+0x188>)
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	4a1b      	ldr	r2, [pc, #108]	; (80083c0 <pvPortMalloc+0x188>)
 8008354:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008356:	4b1a      	ldr	r3, [pc, #104]	; (80083c0 <pvPortMalloc+0x188>)
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	4b1b      	ldr	r3, [pc, #108]	; (80083c8 <pvPortMalloc+0x190>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	429a      	cmp	r2, r3
 8008360:	d203      	bcs.n	800836a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008362:	4b17      	ldr	r3, [pc, #92]	; (80083c0 <pvPortMalloc+0x188>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a18      	ldr	r2, [pc, #96]	; (80083c8 <pvPortMalloc+0x190>)
 8008368:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	4b13      	ldr	r3, [pc, #76]	; (80083bc <pvPortMalloc+0x184>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	431a      	orrs	r2, r3
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	2200      	movs	r2, #0
 800837c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800837e:	4b13      	ldr	r3, [pc, #76]	; (80083cc <pvPortMalloc+0x194>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3301      	adds	r3, #1
 8008384:	4a11      	ldr	r2, [pc, #68]	; (80083cc <pvPortMalloc+0x194>)
 8008386:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008388:	f7fe fc5a 	bl	8006c40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	f003 0307 	and.w	r3, r3, #7
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00a      	beq.n	80083ac <pvPortMalloc+0x174>
	__asm volatile
 8008396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839a:	f383 8811 	msr	BASEPRI, r3
 800839e:	f3bf 8f6f 	isb	sy
 80083a2:	f3bf 8f4f 	dsb	sy
 80083a6:	60fb      	str	r3, [r7, #12]
}
 80083a8:	bf00      	nop
 80083aa:	e7fe      	b.n	80083aa <pvPortMalloc+0x172>
	return pvReturn;
 80083ac:	69fb      	ldr	r3, [r7, #28]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3728      	adds	r7, #40	; 0x28
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	20004a24 	.word	0x20004a24
 80083bc:	20004a38 	.word	0x20004a38
 80083c0:	20004a28 	.word	0x20004a28
 80083c4:	20004a1c 	.word	0x20004a1c
 80083c8:	20004a2c 	.word	0x20004a2c
 80083cc:	20004a30 	.word	0x20004a30

080083d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d04d      	beq.n	800847e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80083e2:	2308      	movs	r3, #8
 80083e4:	425b      	negs	r3, r3
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	4413      	add	r3, r2
 80083ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	685a      	ldr	r2, [r3, #4]
 80083f4:	4b24      	ldr	r3, [pc, #144]	; (8008488 <vPortFree+0xb8>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4013      	ands	r3, r2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10a      	bne.n	8008414 <vPortFree+0x44>
	__asm volatile
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	60fb      	str	r3, [r7, #12]
}
 8008410:	bf00      	nop
 8008412:	e7fe      	b.n	8008412 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00a      	beq.n	8008432 <vPortFree+0x62>
	__asm volatile
 800841c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	60bb      	str	r3, [r7, #8]
}
 800842e:	bf00      	nop
 8008430:	e7fe      	b.n	8008430 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	4b14      	ldr	r3, [pc, #80]	; (8008488 <vPortFree+0xb8>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4013      	ands	r3, r2
 800843c:	2b00      	cmp	r3, #0
 800843e:	d01e      	beq.n	800847e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d11a      	bne.n	800847e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	4b0e      	ldr	r3, [pc, #56]	; (8008488 <vPortFree+0xb8>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	43db      	mvns	r3, r3
 8008452:	401a      	ands	r2, r3
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008458:	f7fe fbe4 	bl	8006c24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	4b0a      	ldr	r3, [pc, #40]	; (800848c <vPortFree+0xbc>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4413      	add	r3, r2
 8008466:	4a09      	ldr	r2, [pc, #36]	; (800848c <vPortFree+0xbc>)
 8008468:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800846a:	6938      	ldr	r0, [r7, #16]
 800846c:	f000 f874 	bl	8008558 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008470:	4b07      	ldr	r3, [pc, #28]	; (8008490 <vPortFree+0xc0>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3301      	adds	r3, #1
 8008476:	4a06      	ldr	r2, [pc, #24]	; (8008490 <vPortFree+0xc0>)
 8008478:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800847a:	f7fe fbe1 	bl	8006c40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800847e:	bf00      	nop
 8008480:	3718      	adds	r7, #24
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	20004a38 	.word	0x20004a38
 800848c:	20004a28 	.word	0x20004a28
 8008490:	20004a34 	.word	0x20004a34

08008494 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800849a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800849e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084a0:	4b27      	ldr	r3, [pc, #156]	; (8008540 <prvHeapInit+0xac>)
 80084a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f003 0307 	and.w	r3, r3, #7
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00c      	beq.n	80084c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3307      	adds	r3, #7
 80084b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f023 0307 	bic.w	r3, r3, #7
 80084ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	4a1f      	ldr	r2, [pc, #124]	; (8008540 <prvHeapInit+0xac>)
 80084c4:	4413      	add	r3, r2
 80084c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084cc:	4a1d      	ldr	r2, [pc, #116]	; (8008544 <prvHeapInit+0xb0>)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084d2:	4b1c      	ldr	r3, [pc, #112]	; (8008544 <prvHeapInit+0xb0>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	4413      	add	r3, r2
 80084de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80084e0:	2208      	movs	r2, #8
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	1a9b      	subs	r3, r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f023 0307 	bic.w	r3, r3, #7
 80084ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	4a15      	ldr	r2, [pc, #84]	; (8008548 <prvHeapInit+0xb4>)
 80084f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80084f6:	4b14      	ldr	r3, [pc, #80]	; (8008548 <prvHeapInit+0xb4>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2200      	movs	r2, #0
 80084fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80084fe:	4b12      	ldr	r3, [pc, #72]	; (8008548 <prvHeapInit+0xb4>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2200      	movs	r2, #0
 8008504:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	1ad2      	subs	r2, r2, r3
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008514:	4b0c      	ldr	r3, [pc, #48]	; (8008548 <prvHeapInit+0xb4>)
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	4a0a      	ldr	r2, [pc, #40]	; (800854c <prvHeapInit+0xb8>)
 8008522:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	4a09      	ldr	r2, [pc, #36]	; (8008550 <prvHeapInit+0xbc>)
 800852a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800852c:	4b09      	ldr	r3, [pc, #36]	; (8008554 <prvHeapInit+0xc0>)
 800852e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008532:	601a      	str	r2, [r3, #0]
}
 8008534:	bf00      	nop
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	20000e1c 	.word	0x20000e1c
 8008544:	20004a1c 	.word	0x20004a1c
 8008548:	20004a24 	.word	0x20004a24
 800854c:	20004a2c 	.word	0x20004a2c
 8008550:	20004a28 	.word	0x20004a28
 8008554:	20004a38 	.word	0x20004a38

08008558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008560:	4b28      	ldr	r3, [pc, #160]	; (8008604 <prvInsertBlockIntoFreeList+0xac>)
 8008562:	60fb      	str	r3, [r7, #12]
 8008564:	e002      	b.n	800856c <prvInsertBlockIntoFreeList+0x14>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	429a      	cmp	r2, r3
 8008574:	d8f7      	bhi.n	8008566 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	4413      	add	r3, r2
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	429a      	cmp	r2, r3
 8008586:	d108      	bne.n	800859a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	441a      	add	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	441a      	add	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d118      	bne.n	80085e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	4b15      	ldr	r3, [pc, #84]	; (8008608 <prvInsertBlockIntoFreeList+0xb0>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d00d      	beq.n	80085d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	441a      	add	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	e008      	b.n	80085e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085d6:	4b0c      	ldr	r3, [pc, #48]	; (8008608 <prvInsertBlockIntoFreeList+0xb0>)
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	e003      	b.n	80085e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d002      	beq.n	80085f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085f6:	bf00      	nop
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	20004a1c 	.word	0x20004a1c
 8008608:	20004a24 	.word	0x20004a24

0800860c <__errno>:
 800860c:	4b01      	ldr	r3, [pc, #4]	; (8008614 <__errno+0x8>)
 800860e:	6818      	ldr	r0, [r3, #0]
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	20000010 	.word	0x20000010

08008618 <__libc_init_array>:
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	4d0d      	ldr	r5, [pc, #52]	; (8008650 <__libc_init_array+0x38>)
 800861c:	4c0d      	ldr	r4, [pc, #52]	; (8008654 <__libc_init_array+0x3c>)
 800861e:	1b64      	subs	r4, r4, r5
 8008620:	10a4      	asrs	r4, r4, #2
 8008622:	2600      	movs	r6, #0
 8008624:	42a6      	cmp	r6, r4
 8008626:	d109      	bne.n	800863c <__libc_init_array+0x24>
 8008628:	4d0b      	ldr	r5, [pc, #44]	; (8008658 <__libc_init_array+0x40>)
 800862a:	4c0c      	ldr	r4, [pc, #48]	; (800865c <__libc_init_array+0x44>)
 800862c:	f000 fc8e 	bl	8008f4c <_init>
 8008630:	1b64      	subs	r4, r4, r5
 8008632:	10a4      	asrs	r4, r4, #2
 8008634:	2600      	movs	r6, #0
 8008636:	42a6      	cmp	r6, r4
 8008638:	d105      	bne.n	8008646 <__libc_init_array+0x2e>
 800863a:	bd70      	pop	{r4, r5, r6, pc}
 800863c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008640:	4798      	blx	r3
 8008642:	3601      	adds	r6, #1
 8008644:	e7ee      	b.n	8008624 <__libc_init_array+0xc>
 8008646:	f855 3b04 	ldr.w	r3, [r5], #4
 800864a:	4798      	blx	r3
 800864c:	3601      	adds	r6, #1
 800864e:	e7f2      	b.n	8008636 <__libc_init_array+0x1e>
 8008650:	08009170 	.word	0x08009170
 8008654:	08009170 	.word	0x08009170
 8008658:	08009170 	.word	0x08009170
 800865c:	08009174 	.word	0x08009174

08008660 <memcpy>:
 8008660:	440a      	add	r2, r1
 8008662:	4291      	cmp	r1, r2
 8008664:	f100 33ff 	add.w	r3, r0, #4294967295
 8008668:	d100      	bne.n	800866c <memcpy+0xc>
 800866a:	4770      	bx	lr
 800866c:	b510      	push	{r4, lr}
 800866e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008672:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008676:	4291      	cmp	r1, r2
 8008678:	d1f9      	bne.n	800866e <memcpy+0xe>
 800867a:	bd10      	pop	{r4, pc}

0800867c <memset>:
 800867c:	4402      	add	r2, r0
 800867e:	4603      	mov	r3, r0
 8008680:	4293      	cmp	r3, r2
 8008682:	d100      	bne.n	8008686 <memset+0xa>
 8008684:	4770      	bx	lr
 8008686:	f803 1b01 	strb.w	r1, [r3], #1
 800868a:	e7f9      	b.n	8008680 <memset+0x4>

0800868c <siprintf>:
 800868c:	b40e      	push	{r1, r2, r3}
 800868e:	b500      	push	{lr}
 8008690:	b09c      	sub	sp, #112	; 0x70
 8008692:	ab1d      	add	r3, sp, #116	; 0x74
 8008694:	9002      	str	r0, [sp, #8]
 8008696:	9006      	str	r0, [sp, #24]
 8008698:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800869c:	4809      	ldr	r0, [pc, #36]	; (80086c4 <siprintf+0x38>)
 800869e:	9107      	str	r1, [sp, #28]
 80086a0:	9104      	str	r1, [sp, #16]
 80086a2:	4909      	ldr	r1, [pc, #36]	; (80086c8 <siprintf+0x3c>)
 80086a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086a8:	9105      	str	r1, [sp, #20]
 80086aa:	6800      	ldr	r0, [r0, #0]
 80086ac:	9301      	str	r3, [sp, #4]
 80086ae:	a902      	add	r1, sp, #8
 80086b0:	f000 f868 	bl	8008784 <_svfiprintf_r>
 80086b4:	9b02      	ldr	r3, [sp, #8]
 80086b6:	2200      	movs	r2, #0
 80086b8:	701a      	strb	r2, [r3, #0]
 80086ba:	b01c      	add	sp, #112	; 0x70
 80086bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80086c0:	b003      	add	sp, #12
 80086c2:	4770      	bx	lr
 80086c4:	20000010 	.word	0x20000010
 80086c8:	ffff0208 	.word	0xffff0208

080086cc <__ssputs_r>:
 80086cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d0:	688e      	ldr	r6, [r1, #8]
 80086d2:	429e      	cmp	r6, r3
 80086d4:	4682      	mov	sl, r0
 80086d6:	460c      	mov	r4, r1
 80086d8:	4690      	mov	r8, r2
 80086da:	461f      	mov	r7, r3
 80086dc:	d838      	bhi.n	8008750 <__ssputs_r+0x84>
 80086de:	898a      	ldrh	r2, [r1, #12]
 80086e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086e4:	d032      	beq.n	800874c <__ssputs_r+0x80>
 80086e6:	6825      	ldr	r5, [r4, #0]
 80086e8:	6909      	ldr	r1, [r1, #16]
 80086ea:	eba5 0901 	sub.w	r9, r5, r1
 80086ee:	6965      	ldr	r5, [r4, #20]
 80086f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086f8:	3301      	adds	r3, #1
 80086fa:	444b      	add	r3, r9
 80086fc:	106d      	asrs	r5, r5, #1
 80086fe:	429d      	cmp	r5, r3
 8008700:	bf38      	it	cc
 8008702:	461d      	movcc	r5, r3
 8008704:	0553      	lsls	r3, r2, #21
 8008706:	d531      	bpl.n	800876c <__ssputs_r+0xa0>
 8008708:	4629      	mov	r1, r5
 800870a:	f000 fb55 	bl	8008db8 <_malloc_r>
 800870e:	4606      	mov	r6, r0
 8008710:	b950      	cbnz	r0, 8008728 <__ssputs_r+0x5c>
 8008712:	230c      	movs	r3, #12
 8008714:	f8ca 3000 	str.w	r3, [sl]
 8008718:	89a3      	ldrh	r3, [r4, #12]
 800871a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800871e:	81a3      	strh	r3, [r4, #12]
 8008720:	f04f 30ff 	mov.w	r0, #4294967295
 8008724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008728:	6921      	ldr	r1, [r4, #16]
 800872a:	464a      	mov	r2, r9
 800872c:	f7ff ff98 	bl	8008660 <memcpy>
 8008730:	89a3      	ldrh	r3, [r4, #12]
 8008732:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800873a:	81a3      	strh	r3, [r4, #12]
 800873c:	6126      	str	r6, [r4, #16]
 800873e:	6165      	str	r5, [r4, #20]
 8008740:	444e      	add	r6, r9
 8008742:	eba5 0509 	sub.w	r5, r5, r9
 8008746:	6026      	str	r6, [r4, #0]
 8008748:	60a5      	str	r5, [r4, #8]
 800874a:	463e      	mov	r6, r7
 800874c:	42be      	cmp	r6, r7
 800874e:	d900      	bls.n	8008752 <__ssputs_r+0x86>
 8008750:	463e      	mov	r6, r7
 8008752:	6820      	ldr	r0, [r4, #0]
 8008754:	4632      	mov	r2, r6
 8008756:	4641      	mov	r1, r8
 8008758:	f000 faa8 	bl	8008cac <memmove>
 800875c:	68a3      	ldr	r3, [r4, #8]
 800875e:	1b9b      	subs	r3, r3, r6
 8008760:	60a3      	str	r3, [r4, #8]
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	4433      	add	r3, r6
 8008766:	6023      	str	r3, [r4, #0]
 8008768:	2000      	movs	r0, #0
 800876a:	e7db      	b.n	8008724 <__ssputs_r+0x58>
 800876c:	462a      	mov	r2, r5
 800876e:	f000 fb97 	bl	8008ea0 <_realloc_r>
 8008772:	4606      	mov	r6, r0
 8008774:	2800      	cmp	r0, #0
 8008776:	d1e1      	bne.n	800873c <__ssputs_r+0x70>
 8008778:	6921      	ldr	r1, [r4, #16]
 800877a:	4650      	mov	r0, sl
 800877c:	f000 fab0 	bl	8008ce0 <_free_r>
 8008780:	e7c7      	b.n	8008712 <__ssputs_r+0x46>
	...

08008784 <_svfiprintf_r>:
 8008784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008788:	4698      	mov	r8, r3
 800878a:	898b      	ldrh	r3, [r1, #12]
 800878c:	061b      	lsls	r3, r3, #24
 800878e:	b09d      	sub	sp, #116	; 0x74
 8008790:	4607      	mov	r7, r0
 8008792:	460d      	mov	r5, r1
 8008794:	4614      	mov	r4, r2
 8008796:	d50e      	bpl.n	80087b6 <_svfiprintf_r+0x32>
 8008798:	690b      	ldr	r3, [r1, #16]
 800879a:	b963      	cbnz	r3, 80087b6 <_svfiprintf_r+0x32>
 800879c:	2140      	movs	r1, #64	; 0x40
 800879e:	f000 fb0b 	bl	8008db8 <_malloc_r>
 80087a2:	6028      	str	r0, [r5, #0]
 80087a4:	6128      	str	r0, [r5, #16]
 80087a6:	b920      	cbnz	r0, 80087b2 <_svfiprintf_r+0x2e>
 80087a8:	230c      	movs	r3, #12
 80087aa:	603b      	str	r3, [r7, #0]
 80087ac:	f04f 30ff 	mov.w	r0, #4294967295
 80087b0:	e0d1      	b.n	8008956 <_svfiprintf_r+0x1d2>
 80087b2:	2340      	movs	r3, #64	; 0x40
 80087b4:	616b      	str	r3, [r5, #20]
 80087b6:	2300      	movs	r3, #0
 80087b8:	9309      	str	r3, [sp, #36]	; 0x24
 80087ba:	2320      	movs	r3, #32
 80087bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80087c4:	2330      	movs	r3, #48	; 0x30
 80087c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008970 <_svfiprintf_r+0x1ec>
 80087ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087ce:	f04f 0901 	mov.w	r9, #1
 80087d2:	4623      	mov	r3, r4
 80087d4:	469a      	mov	sl, r3
 80087d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087da:	b10a      	cbz	r2, 80087e0 <_svfiprintf_r+0x5c>
 80087dc:	2a25      	cmp	r2, #37	; 0x25
 80087de:	d1f9      	bne.n	80087d4 <_svfiprintf_r+0x50>
 80087e0:	ebba 0b04 	subs.w	fp, sl, r4
 80087e4:	d00b      	beq.n	80087fe <_svfiprintf_r+0x7a>
 80087e6:	465b      	mov	r3, fp
 80087e8:	4622      	mov	r2, r4
 80087ea:	4629      	mov	r1, r5
 80087ec:	4638      	mov	r0, r7
 80087ee:	f7ff ff6d 	bl	80086cc <__ssputs_r>
 80087f2:	3001      	adds	r0, #1
 80087f4:	f000 80aa 	beq.w	800894c <_svfiprintf_r+0x1c8>
 80087f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087fa:	445a      	add	r2, fp
 80087fc:	9209      	str	r2, [sp, #36]	; 0x24
 80087fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008802:	2b00      	cmp	r3, #0
 8008804:	f000 80a2 	beq.w	800894c <_svfiprintf_r+0x1c8>
 8008808:	2300      	movs	r3, #0
 800880a:	f04f 32ff 	mov.w	r2, #4294967295
 800880e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008812:	f10a 0a01 	add.w	sl, sl, #1
 8008816:	9304      	str	r3, [sp, #16]
 8008818:	9307      	str	r3, [sp, #28]
 800881a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800881e:	931a      	str	r3, [sp, #104]	; 0x68
 8008820:	4654      	mov	r4, sl
 8008822:	2205      	movs	r2, #5
 8008824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008828:	4851      	ldr	r0, [pc, #324]	; (8008970 <_svfiprintf_r+0x1ec>)
 800882a:	f7f7 fce1 	bl	80001f0 <memchr>
 800882e:	9a04      	ldr	r2, [sp, #16]
 8008830:	b9d8      	cbnz	r0, 800886a <_svfiprintf_r+0xe6>
 8008832:	06d0      	lsls	r0, r2, #27
 8008834:	bf44      	itt	mi
 8008836:	2320      	movmi	r3, #32
 8008838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800883c:	0711      	lsls	r1, r2, #28
 800883e:	bf44      	itt	mi
 8008840:	232b      	movmi	r3, #43	; 0x2b
 8008842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008846:	f89a 3000 	ldrb.w	r3, [sl]
 800884a:	2b2a      	cmp	r3, #42	; 0x2a
 800884c:	d015      	beq.n	800887a <_svfiprintf_r+0xf6>
 800884e:	9a07      	ldr	r2, [sp, #28]
 8008850:	4654      	mov	r4, sl
 8008852:	2000      	movs	r0, #0
 8008854:	f04f 0c0a 	mov.w	ip, #10
 8008858:	4621      	mov	r1, r4
 800885a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800885e:	3b30      	subs	r3, #48	; 0x30
 8008860:	2b09      	cmp	r3, #9
 8008862:	d94e      	bls.n	8008902 <_svfiprintf_r+0x17e>
 8008864:	b1b0      	cbz	r0, 8008894 <_svfiprintf_r+0x110>
 8008866:	9207      	str	r2, [sp, #28]
 8008868:	e014      	b.n	8008894 <_svfiprintf_r+0x110>
 800886a:	eba0 0308 	sub.w	r3, r0, r8
 800886e:	fa09 f303 	lsl.w	r3, r9, r3
 8008872:	4313      	orrs	r3, r2
 8008874:	9304      	str	r3, [sp, #16]
 8008876:	46a2      	mov	sl, r4
 8008878:	e7d2      	b.n	8008820 <_svfiprintf_r+0x9c>
 800887a:	9b03      	ldr	r3, [sp, #12]
 800887c:	1d19      	adds	r1, r3, #4
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	9103      	str	r1, [sp, #12]
 8008882:	2b00      	cmp	r3, #0
 8008884:	bfbb      	ittet	lt
 8008886:	425b      	neglt	r3, r3
 8008888:	f042 0202 	orrlt.w	r2, r2, #2
 800888c:	9307      	strge	r3, [sp, #28]
 800888e:	9307      	strlt	r3, [sp, #28]
 8008890:	bfb8      	it	lt
 8008892:	9204      	strlt	r2, [sp, #16]
 8008894:	7823      	ldrb	r3, [r4, #0]
 8008896:	2b2e      	cmp	r3, #46	; 0x2e
 8008898:	d10c      	bne.n	80088b4 <_svfiprintf_r+0x130>
 800889a:	7863      	ldrb	r3, [r4, #1]
 800889c:	2b2a      	cmp	r3, #42	; 0x2a
 800889e:	d135      	bne.n	800890c <_svfiprintf_r+0x188>
 80088a0:	9b03      	ldr	r3, [sp, #12]
 80088a2:	1d1a      	adds	r2, r3, #4
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	9203      	str	r2, [sp, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	bfb8      	it	lt
 80088ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80088b0:	3402      	adds	r4, #2
 80088b2:	9305      	str	r3, [sp, #20]
 80088b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008980 <_svfiprintf_r+0x1fc>
 80088b8:	7821      	ldrb	r1, [r4, #0]
 80088ba:	2203      	movs	r2, #3
 80088bc:	4650      	mov	r0, sl
 80088be:	f7f7 fc97 	bl	80001f0 <memchr>
 80088c2:	b140      	cbz	r0, 80088d6 <_svfiprintf_r+0x152>
 80088c4:	2340      	movs	r3, #64	; 0x40
 80088c6:	eba0 000a 	sub.w	r0, r0, sl
 80088ca:	fa03 f000 	lsl.w	r0, r3, r0
 80088ce:	9b04      	ldr	r3, [sp, #16]
 80088d0:	4303      	orrs	r3, r0
 80088d2:	3401      	adds	r4, #1
 80088d4:	9304      	str	r3, [sp, #16]
 80088d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088da:	4826      	ldr	r0, [pc, #152]	; (8008974 <_svfiprintf_r+0x1f0>)
 80088dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088e0:	2206      	movs	r2, #6
 80088e2:	f7f7 fc85 	bl	80001f0 <memchr>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	d038      	beq.n	800895c <_svfiprintf_r+0x1d8>
 80088ea:	4b23      	ldr	r3, [pc, #140]	; (8008978 <_svfiprintf_r+0x1f4>)
 80088ec:	bb1b      	cbnz	r3, 8008936 <_svfiprintf_r+0x1b2>
 80088ee:	9b03      	ldr	r3, [sp, #12]
 80088f0:	3307      	adds	r3, #7
 80088f2:	f023 0307 	bic.w	r3, r3, #7
 80088f6:	3308      	adds	r3, #8
 80088f8:	9303      	str	r3, [sp, #12]
 80088fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088fc:	4433      	add	r3, r6
 80088fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008900:	e767      	b.n	80087d2 <_svfiprintf_r+0x4e>
 8008902:	fb0c 3202 	mla	r2, ip, r2, r3
 8008906:	460c      	mov	r4, r1
 8008908:	2001      	movs	r0, #1
 800890a:	e7a5      	b.n	8008858 <_svfiprintf_r+0xd4>
 800890c:	2300      	movs	r3, #0
 800890e:	3401      	adds	r4, #1
 8008910:	9305      	str	r3, [sp, #20]
 8008912:	4619      	mov	r1, r3
 8008914:	f04f 0c0a 	mov.w	ip, #10
 8008918:	4620      	mov	r0, r4
 800891a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800891e:	3a30      	subs	r2, #48	; 0x30
 8008920:	2a09      	cmp	r2, #9
 8008922:	d903      	bls.n	800892c <_svfiprintf_r+0x1a8>
 8008924:	2b00      	cmp	r3, #0
 8008926:	d0c5      	beq.n	80088b4 <_svfiprintf_r+0x130>
 8008928:	9105      	str	r1, [sp, #20]
 800892a:	e7c3      	b.n	80088b4 <_svfiprintf_r+0x130>
 800892c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008930:	4604      	mov	r4, r0
 8008932:	2301      	movs	r3, #1
 8008934:	e7f0      	b.n	8008918 <_svfiprintf_r+0x194>
 8008936:	ab03      	add	r3, sp, #12
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	462a      	mov	r2, r5
 800893c:	4b0f      	ldr	r3, [pc, #60]	; (800897c <_svfiprintf_r+0x1f8>)
 800893e:	a904      	add	r1, sp, #16
 8008940:	4638      	mov	r0, r7
 8008942:	f3af 8000 	nop.w
 8008946:	1c42      	adds	r2, r0, #1
 8008948:	4606      	mov	r6, r0
 800894a:	d1d6      	bne.n	80088fa <_svfiprintf_r+0x176>
 800894c:	89ab      	ldrh	r3, [r5, #12]
 800894e:	065b      	lsls	r3, r3, #25
 8008950:	f53f af2c 	bmi.w	80087ac <_svfiprintf_r+0x28>
 8008954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008956:	b01d      	add	sp, #116	; 0x74
 8008958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800895c:	ab03      	add	r3, sp, #12
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	462a      	mov	r2, r5
 8008962:	4b06      	ldr	r3, [pc, #24]	; (800897c <_svfiprintf_r+0x1f8>)
 8008964:	a904      	add	r1, sp, #16
 8008966:	4638      	mov	r0, r7
 8008968:	f000 f87a 	bl	8008a60 <_printf_i>
 800896c:	e7eb      	b.n	8008946 <_svfiprintf_r+0x1c2>
 800896e:	bf00      	nop
 8008970:	08009134 	.word	0x08009134
 8008974:	0800913e 	.word	0x0800913e
 8008978:	00000000 	.word	0x00000000
 800897c:	080086cd 	.word	0x080086cd
 8008980:	0800913a 	.word	0x0800913a

08008984 <_printf_common>:
 8008984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008988:	4616      	mov	r6, r2
 800898a:	4699      	mov	r9, r3
 800898c:	688a      	ldr	r2, [r1, #8]
 800898e:	690b      	ldr	r3, [r1, #16]
 8008990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008994:	4293      	cmp	r3, r2
 8008996:	bfb8      	it	lt
 8008998:	4613      	movlt	r3, r2
 800899a:	6033      	str	r3, [r6, #0]
 800899c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089a0:	4607      	mov	r7, r0
 80089a2:	460c      	mov	r4, r1
 80089a4:	b10a      	cbz	r2, 80089aa <_printf_common+0x26>
 80089a6:	3301      	adds	r3, #1
 80089a8:	6033      	str	r3, [r6, #0]
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	0699      	lsls	r1, r3, #26
 80089ae:	bf42      	ittt	mi
 80089b0:	6833      	ldrmi	r3, [r6, #0]
 80089b2:	3302      	addmi	r3, #2
 80089b4:	6033      	strmi	r3, [r6, #0]
 80089b6:	6825      	ldr	r5, [r4, #0]
 80089b8:	f015 0506 	ands.w	r5, r5, #6
 80089bc:	d106      	bne.n	80089cc <_printf_common+0x48>
 80089be:	f104 0a19 	add.w	sl, r4, #25
 80089c2:	68e3      	ldr	r3, [r4, #12]
 80089c4:	6832      	ldr	r2, [r6, #0]
 80089c6:	1a9b      	subs	r3, r3, r2
 80089c8:	42ab      	cmp	r3, r5
 80089ca:	dc26      	bgt.n	8008a1a <_printf_common+0x96>
 80089cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089d0:	1e13      	subs	r3, r2, #0
 80089d2:	6822      	ldr	r2, [r4, #0]
 80089d4:	bf18      	it	ne
 80089d6:	2301      	movne	r3, #1
 80089d8:	0692      	lsls	r2, r2, #26
 80089da:	d42b      	bmi.n	8008a34 <_printf_common+0xb0>
 80089dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089e0:	4649      	mov	r1, r9
 80089e2:	4638      	mov	r0, r7
 80089e4:	47c0      	blx	r8
 80089e6:	3001      	adds	r0, #1
 80089e8:	d01e      	beq.n	8008a28 <_printf_common+0xa4>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	68e5      	ldr	r5, [r4, #12]
 80089ee:	6832      	ldr	r2, [r6, #0]
 80089f0:	f003 0306 	and.w	r3, r3, #6
 80089f4:	2b04      	cmp	r3, #4
 80089f6:	bf08      	it	eq
 80089f8:	1aad      	subeq	r5, r5, r2
 80089fa:	68a3      	ldr	r3, [r4, #8]
 80089fc:	6922      	ldr	r2, [r4, #16]
 80089fe:	bf0c      	ite	eq
 8008a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a04:	2500      	movne	r5, #0
 8008a06:	4293      	cmp	r3, r2
 8008a08:	bfc4      	itt	gt
 8008a0a:	1a9b      	subgt	r3, r3, r2
 8008a0c:	18ed      	addgt	r5, r5, r3
 8008a0e:	2600      	movs	r6, #0
 8008a10:	341a      	adds	r4, #26
 8008a12:	42b5      	cmp	r5, r6
 8008a14:	d11a      	bne.n	8008a4c <_printf_common+0xc8>
 8008a16:	2000      	movs	r0, #0
 8008a18:	e008      	b.n	8008a2c <_printf_common+0xa8>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	4652      	mov	r2, sl
 8008a1e:	4649      	mov	r1, r9
 8008a20:	4638      	mov	r0, r7
 8008a22:	47c0      	blx	r8
 8008a24:	3001      	adds	r0, #1
 8008a26:	d103      	bne.n	8008a30 <_printf_common+0xac>
 8008a28:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a30:	3501      	adds	r5, #1
 8008a32:	e7c6      	b.n	80089c2 <_printf_common+0x3e>
 8008a34:	18e1      	adds	r1, r4, r3
 8008a36:	1c5a      	adds	r2, r3, #1
 8008a38:	2030      	movs	r0, #48	; 0x30
 8008a3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a3e:	4422      	add	r2, r4
 8008a40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a48:	3302      	adds	r3, #2
 8008a4a:	e7c7      	b.n	80089dc <_printf_common+0x58>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	4622      	mov	r2, r4
 8008a50:	4649      	mov	r1, r9
 8008a52:	4638      	mov	r0, r7
 8008a54:	47c0      	blx	r8
 8008a56:	3001      	adds	r0, #1
 8008a58:	d0e6      	beq.n	8008a28 <_printf_common+0xa4>
 8008a5a:	3601      	adds	r6, #1
 8008a5c:	e7d9      	b.n	8008a12 <_printf_common+0x8e>
	...

08008a60 <_printf_i>:
 8008a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a64:	7e0f      	ldrb	r7, [r1, #24]
 8008a66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a68:	2f78      	cmp	r7, #120	; 0x78
 8008a6a:	4691      	mov	r9, r2
 8008a6c:	4680      	mov	r8, r0
 8008a6e:	460c      	mov	r4, r1
 8008a70:	469a      	mov	sl, r3
 8008a72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a76:	d807      	bhi.n	8008a88 <_printf_i+0x28>
 8008a78:	2f62      	cmp	r7, #98	; 0x62
 8008a7a:	d80a      	bhi.n	8008a92 <_printf_i+0x32>
 8008a7c:	2f00      	cmp	r7, #0
 8008a7e:	f000 80d8 	beq.w	8008c32 <_printf_i+0x1d2>
 8008a82:	2f58      	cmp	r7, #88	; 0x58
 8008a84:	f000 80a3 	beq.w	8008bce <_printf_i+0x16e>
 8008a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a90:	e03a      	b.n	8008b08 <_printf_i+0xa8>
 8008a92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a96:	2b15      	cmp	r3, #21
 8008a98:	d8f6      	bhi.n	8008a88 <_printf_i+0x28>
 8008a9a:	a101      	add	r1, pc, #4	; (adr r1, 8008aa0 <_printf_i+0x40>)
 8008a9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008aa0:	08008af9 	.word	0x08008af9
 8008aa4:	08008b0d 	.word	0x08008b0d
 8008aa8:	08008a89 	.word	0x08008a89
 8008aac:	08008a89 	.word	0x08008a89
 8008ab0:	08008a89 	.word	0x08008a89
 8008ab4:	08008a89 	.word	0x08008a89
 8008ab8:	08008b0d 	.word	0x08008b0d
 8008abc:	08008a89 	.word	0x08008a89
 8008ac0:	08008a89 	.word	0x08008a89
 8008ac4:	08008a89 	.word	0x08008a89
 8008ac8:	08008a89 	.word	0x08008a89
 8008acc:	08008c19 	.word	0x08008c19
 8008ad0:	08008b3d 	.word	0x08008b3d
 8008ad4:	08008bfb 	.word	0x08008bfb
 8008ad8:	08008a89 	.word	0x08008a89
 8008adc:	08008a89 	.word	0x08008a89
 8008ae0:	08008c3b 	.word	0x08008c3b
 8008ae4:	08008a89 	.word	0x08008a89
 8008ae8:	08008b3d 	.word	0x08008b3d
 8008aec:	08008a89 	.word	0x08008a89
 8008af0:	08008a89 	.word	0x08008a89
 8008af4:	08008c03 	.word	0x08008c03
 8008af8:	682b      	ldr	r3, [r5, #0]
 8008afa:	1d1a      	adds	r2, r3, #4
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	602a      	str	r2, [r5, #0]
 8008b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e0a3      	b.n	8008c54 <_printf_i+0x1f4>
 8008b0c:	6820      	ldr	r0, [r4, #0]
 8008b0e:	6829      	ldr	r1, [r5, #0]
 8008b10:	0606      	lsls	r6, r0, #24
 8008b12:	f101 0304 	add.w	r3, r1, #4
 8008b16:	d50a      	bpl.n	8008b2e <_printf_i+0xce>
 8008b18:	680e      	ldr	r6, [r1, #0]
 8008b1a:	602b      	str	r3, [r5, #0]
 8008b1c:	2e00      	cmp	r6, #0
 8008b1e:	da03      	bge.n	8008b28 <_printf_i+0xc8>
 8008b20:	232d      	movs	r3, #45	; 0x2d
 8008b22:	4276      	negs	r6, r6
 8008b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b28:	485e      	ldr	r0, [pc, #376]	; (8008ca4 <_printf_i+0x244>)
 8008b2a:	230a      	movs	r3, #10
 8008b2c:	e019      	b.n	8008b62 <_printf_i+0x102>
 8008b2e:	680e      	ldr	r6, [r1, #0]
 8008b30:	602b      	str	r3, [r5, #0]
 8008b32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b36:	bf18      	it	ne
 8008b38:	b236      	sxthne	r6, r6
 8008b3a:	e7ef      	b.n	8008b1c <_printf_i+0xbc>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	6820      	ldr	r0, [r4, #0]
 8008b40:	1d19      	adds	r1, r3, #4
 8008b42:	6029      	str	r1, [r5, #0]
 8008b44:	0601      	lsls	r1, r0, #24
 8008b46:	d501      	bpl.n	8008b4c <_printf_i+0xec>
 8008b48:	681e      	ldr	r6, [r3, #0]
 8008b4a:	e002      	b.n	8008b52 <_printf_i+0xf2>
 8008b4c:	0646      	lsls	r6, r0, #25
 8008b4e:	d5fb      	bpl.n	8008b48 <_printf_i+0xe8>
 8008b50:	881e      	ldrh	r6, [r3, #0]
 8008b52:	4854      	ldr	r0, [pc, #336]	; (8008ca4 <_printf_i+0x244>)
 8008b54:	2f6f      	cmp	r7, #111	; 0x6f
 8008b56:	bf0c      	ite	eq
 8008b58:	2308      	moveq	r3, #8
 8008b5a:	230a      	movne	r3, #10
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b62:	6865      	ldr	r5, [r4, #4]
 8008b64:	60a5      	str	r5, [r4, #8]
 8008b66:	2d00      	cmp	r5, #0
 8008b68:	bfa2      	ittt	ge
 8008b6a:	6821      	ldrge	r1, [r4, #0]
 8008b6c:	f021 0104 	bicge.w	r1, r1, #4
 8008b70:	6021      	strge	r1, [r4, #0]
 8008b72:	b90e      	cbnz	r6, 8008b78 <_printf_i+0x118>
 8008b74:	2d00      	cmp	r5, #0
 8008b76:	d04d      	beq.n	8008c14 <_printf_i+0x1b4>
 8008b78:	4615      	mov	r5, r2
 8008b7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b7e:	fb03 6711 	mls	r7, r3, r1, r6
 8008b82:	5dc7      	ldrb	r7, [r0, r7]
 8008b84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b88:	4637      	mov	r7, r6
 8008b8a:	42bb      	cmp	r3, r7
 8008b8c:	460e      	mov	r6, r1
 8008b8e:	d9f4      	bls.n	8008b7a <_printf_i+0x11a>
 8008b90:	2b08      	cmp	r3, #8
 8008b92:	d10b      	bne.n	8008bac <_printf_i+0x14c>
 8008b94:	6823      	ldr	r3, [r4, #0]
 8008b96:	07de      	lsls	r6, r3, #31
 8008b98:	d508      	bpl.n	8008bac <_printf_i+0x14c>
 8008b9a:	6923      	ldr	r3, [r4, #16]
 8008b9c:	6861      	ldr	r1, [r4, #4]
 8008b9e:	4299      	cmp	r1, r3
 8008ba0:	bfde      	ittt	le
 8008ba2:	2330      	movle	r3, #48	; 0x30
 8008ba4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ba8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008bac:	1b52      	subs	r2, r2, r5
 8008bae:	6122      	str	r2, [r4, #16]
 8008bb0:	f8cd a000 	str.w	sl, [sp]
 8008bb4:	464b      	mov	r3, r9
 8008bb6:	aa03      	add	r2, sp, #12
 8008bb8:	4621      	mov	r1, r4
 8008bba:	4640      	mov	r0, r8
 8008bbc:	f7ff fee2 	bl	8008984 <_printf_common>
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	d14c      	bne.n	8008c5e <_printf_i+0x1fe>
 8008bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc8:	b004      	add	sp, #16
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	4835      	ldr	r0, [pc, #212]	; (8008ca4 <_printf_i+0x244>)
 8008bd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008bd4:	6829      	ldr	r1, [r5, #0]
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bdc:	6029      	str	r1, [r5, #0]
 8008bde:	061d      	lsls	r5, r3, #24
 8008be0:	d514      	bpl.n	8008c0c <_printf_i+0x1ac>
 8008be2:	07df      	lsls	r7, r3, #31
 8008be4:	bf44      	itt	mi
 8008be6:	f043 0320 	orrmi.w	r3, r3, #32
 8008bea:	6023      	strmi	r3, [r4, #0]
 8008bec:	b91e      	cbnz	r6, 8008bf6 <_printf_i+0x196>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	f023 0320 	bic.w	r3, r3, #32
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	2310      	movs	r3, #16
 8008bf8:	e7b0      	b.n	8008b5c <_printf_i+0xfc>
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	f043 0320 	orr.w	r3, r3, #32
 8008c00:	6023      	str	r3, [r4, #0]
 8008c02:	2378      	movs	r3, #120	; 0x78
 8008c04:	4828      	ldr	r0, [pc, #160]	; (8008ca8 <_printf_i+0x248>)
 8008c06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c0a:	e7e3      	b.n	8008bd4 <_printf_i+0x174>
 8008c0c:	0659      	lsls	r1, r3, #25
 8008c0e:	bf48      	it	mi
 8008c10:	b2b6      	uxthmi	r6, r6
 8008c12:	e7e6      	b.n	8008be2 <_printf_i+0x182>
 8008c14:	4615      	mov	r5, r2
 8008c16:	e7bb      	b.n	8008b90 <_printf_i+0x130>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	6826      	ldr	r6, [r4, #0]
 8008c1c:	6961      	ldr	r1, [r4, #20]
 8008c1e:	1d18      	adds	r0, r3, #4
 8008c20:	6028      	str	r0, [r5, #0]
 8008c22:	0635      	lsls	r5, r6, #24
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	d501      	bpl.n	8008c2c <_printf_i+0x1cc>
 8008c28:	6019      	str	r1, [r3, #0]
 8008c2a:	e002      	b.n	8008c32 <_printf_i+0x1d2>
 8008c2c:	0670      	lsls	r0, r6, #25
 8008c2e:	d5fb      	bpl.n	8008c28 <_printf_i+0x1c8>
 8008c30:	8019      	strh	r1, [r3, #0]
 8008c32:	2300      	movs	r3, #0
 8008c34:	6123      	str	r3, [r4, #16]
 8008c36:	4615      	mov	r5, r2
 8008c38:	e7ba      	b.n	8008bb0 <_printf_i+0x150>
 8008c3a:	682b      	ldr	r3, [r5, #0]
 8008c3c:	1d1a      	adds	r2, r3, #4
 8008c3e:	602a      	str	r2, [r5, #0]
 8008c40:	681d      	ldr	r5, [r3, #0]
 8008c42:	6862      	ldr	r2, [r4, #4]
 8008c44:	2100      	movs	r1, #0
 8008c46:	4628      	mov	r0, r5
 8008c48:	f7f7 fad2 	bl	80001f0 <memchr>
 8008c4c:	b108      	cbz	r0, 8008c52 <_printf_i+0x1f2>
 8008c4e:	1b40      	subs	r0, r0, r5
 8008c50:	6060      	str	r0, [r4, #4]
 8008c52:	6863      	ldr	r3, [r4, #4]
 8008c54:	6123      	str	r3, [r4, #16]
 8008c56:	2300      	movs	r3, #0
 8008c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c5c:	e7a8      	b.n	8008bb0 <_printf_i+0x150>
 8008c5e:	6923      	ldr	r3, [r4, #16]
 8008c60:	462a      	mov	r2, r5
 8008c62:	4649      	mov	r1, r9
 8008c64:	4640      	mov	r0, r8
 8008c66:	47d0      	blx	sl
 8008c68:	3001      	adds	r0, #1
 8008c6a:	d0ab      	beq.n	8008bc4 <_printf_i+0x164>
 8008c6c:	6823      	ldr	r3, [r4, #0]
 8008c6e:	079b      	lsls	r3, r3, #30
 8008c70:	d413      	bmi.n	8008c9a <_printf_i+0x23a>
 8008c72:	68e0      	ldr	r0, [r4, #12]
 8008c74:	9b03      	ldr	r3, [sp, #12]
 8008c76:	4298      	cmp	r0, r3
 8008c78:	bfb8      	it	lt
 8008c7a:	4618      	movlt	r0, r3
 8008c7c:	e7a4      	b.n	8008bc8 <_printf_i+0x168>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	4632      	mov	r2, r6
 8008c82:	4649      	mov	r1, r9
 8008c84:	4640      	mov	r0, r8
 8008c86:	47d0      	blx	sl
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d09b      	beq.n	8008bc4 <_printf_i+0x164>
 8008c8c:	3501      	adds	r5, #1
 8008c8e:	68e3      	ldr	r3, [r4, #12]
 8008c90:	9903      	ldr	r1, [sp, #12]
 8008c92:	1a5b      	subs	r3, r3, r1
 8008c94:	42ab      	cmp	r3, r5
 8008c96:	dcf2      	bgt.n	8008c7e <_printf_i+0x21e>
 8008c98:	e7eb      	b.n	8008c72 <_printf_i+0x212>
 8008c9a:	2500      	movs	r5, #0
 8008c9c:	f104 0619 	add.w	r6, r4, #25
 8008ca0:	e7f5      	b.n	8008c8e <_printf_i+0x22e>
 8008ca2:	bf00      	nop
 8008ca4:	08009145 	.word	0x08009145
 8008ca8:	08009156 	.word	0x08009156

08008cac <memmove>:
 8008cac:	4288      	cmp	r0, r1
 8008cae:	b510      	push	{r4, lr}
 8008cb0:	eb01 0402 	add.w	r4, r1, r2
 8008cb4:	d902      	bls.n	8008cbc <memmove+0x10>
 8008cb6:	4284      	cmp	r4, r0
 8008cb8:	4623      	mov	r3, r4
 8008cba:	d807      	bhi.n	8008ccc <memmove+0x20>
 8008cbc:	1e43      	subs	r3, r0, #1
 8008cbe:	42a1      	cmp	r1, r4
 8008cc0:	d008      	beq.n	8008cd4 <memmove+0x28>
 8008cc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cca:	e7f8      	b.n	8008cbe <memmove+0x12>
 8008ccc:	4402      	add	r2, r0
 8008cce:	4601      	mov	r1, r0
 8008cd0:	428a      	cmp	r2, r1
 8008cd2:	d100      	bne.n	8008cd6 <memmove+0x2a>
 8008cd4:	bd10      	pop	{r4, pc}
 8008cd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cde:	e7f7      	b.n	8008cd0 <memmove+0x24>

08008ce0 <_free_r>:
 8008ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ce2:	2900      	cmp	r1, #0
 8008ce4:	d044      	beq.n	8008d70 <_free_r+0x90>
 8008ce6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cea:	9001      	str	r0, [sp, #4]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f1a1 0404 	sub.w	r4, r1, #4
 8008cf2:	bfb8      	it	lt
 8008cf4:	18e4      	addlt	r4, r4, r3
 8008cf6:	f000 f913 	bl	8008f20 <__malloc_lock>
 8008cfa:	4a1e      	ldr	r2, [pc, #120]	; (8008d74 <_free_r+0x94>)
 8008cfc:	9801      	ldr	r0, [sp, #4]
 8008cfe:	6813      	ldr	r3, [r2, #0]
 8008d00:	b933      	cbnz	r3, 8008d10 <_free_r+0x30>
 8008d02:	6063      	str	r3, [r4, #4]
 8008d04:	6014      	str	r4, [r2, #0]
 8008d06:	b003      	add	sp, #12
 8008d08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d0c:	f000 b90e 	b.w	8008f2c <__malloc_unlock>
 8008d10:	42a3      	cmp	r3, r4
 8008d12:	d908      	bls.n	8008d26 <_free_r+0x46>
 8008d14:	6825      	ldr	r5, [r4, #0]
 8008d16:	1961      	adds	r1, r4, r5
 8008d18:	428b      	cmp	r3, r1
 8008d1a:	bf01      	itttt	eq
 8008d1c:	6819      	ldreq	r1, [r3, #0]
 8008d1e:	685b      	ldreq	r3, [r3, #4]
 8008d20:	1949      	addeq	r1, r1, r5
 8008d22:	6021      	streq	r1, [r4, #0]
 8008d24:	e7ed      	b.n	8008d02 <_free_r+0x22>
 8008d26:	461a      	mov	r2, r3
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	b10b      	cbz	r3, 8008d30 <_free_r+0x50>
 8008d2c:	42a3      	cmp	r3, r4
 8008d2e:	d9fa      	bls.n	8008d26 <_free_r+0x46>
 8008d30:	6811      	ldr	r1, [r2, #0]
 8008d32:	1855      	adds	r5, r2, r1
 8008d34:	42a5      	cmp	r5, r4
 8008d36:	d10b      	bne.n	8008d50 <_free_r+0x70>
 8008d38:	6824      	ldr	r4, [r4, #0]
 8008d3a:	4421      	add	r1, r4
 8008d3c:	1854      	adds	r4, r2, r1
 8008d3e:	42a3      	cmp	r3, r4
 8008d40:	6011      	str	r1, [r2, #0]
 8008d42:	d1e0      	bne.n	8008d06 <_free_r+0x26>
 8008d44:	681c      	ldr	r4, [r3, #0]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	6053      	str	r3, [r2, #4]
 8008d4a:	4421      	add	r1, r4
 8008d4c:	6011      	str	r1, [r2, #0]
 8008d4e:	e7da      	b.n	8008d06 <_free_r+0x26>
 8008d50:	d902      	bls.n	8008d58 <_free_r+0x78>
 8008d52:	230c      	movs	r3, #12
 8008d54:	6003      	str	r3, [r0, #0]
 8008d56:	e7d6      	b.n	8008d06 <_free_r+0x26>
 8008d58:	6825      	ldr	r5, [r4, #0]
 8008d5a:	1961      	adds	r1, r4, r5
 8008d5c:	428b      	cmp	r3, r1
 8008d5e:	bf04      	itt	eq
 8008d60:	6819      	ldreq	r1, [r3, #0]
 8008d62:	685b      	ldreq	r3, [r3, #4]
 8008d64:	6063      	str	r3, [r4, #4]
 8008d66:	bf04      	itt	eq
 8008d68:	1949      	addeq	r1, r1, r5
 8008d6a:	6021      	streq	r1, [r4, #0]
 8008d6c:	6054      	str	r4, [r2, #4]
 8008d6e:	e7ca      	b.n	8008d06 <_free_r+0x26>
 8008d70:	b003      	add	sp, #12
 8008d72:	bd30      	pop	{r4, r5, pc}
 8008d74:	20004a3c 	.word	0x20004a3c

08008d78 <sbrk_aligned>:
 8008d78:	b570      	push	{r4, r5, r6, lr}
 8008d7a:	4e0e      	ldr	r6, [pc, #56]	; (8008db4 <sbrk_aligned+0x3c>)
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	6831      	ldr	r1, [r6, #0]
 8008d80:	4605      	mov	r5, r0
 8008d82:	b911      	cbnz	r1, 8008d8a <sbrk_aligned+0x12>
 8008d84:	f000 f8bc 	bl	8008f00 <_sbrk_r>
 8008d88:	6030      	str	r0, [r6, #0]
 8008d8a:	4621      	mov	r1, r4
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	f000 f8b7 	bl	8008f00 <_sbrk_r>
 8008d92:	1c43      	adds	r3, r0, #1
 8008d94:	d00a      	beq.n	8008dac <sbrk_aligned+0x34>
 8008d96:	1cc4      	adds	r4, r0, #3
 8008d98:	f024 0403 	bic.w	r4, r4, #3
 8008d9c:	42a0      	cmp	r0, r4
 8008d9e:	d007      	beq.n	8008db0 <sbrk_aligned+0x38>
 8008da0:	1a21      	subs	r1, r4, r0
 8008da2:	4628      	mov	r0, r5
 8008da4:	f000 f8ac 	bl	8008f00 <_sbrk_r>
 8008da8:	3001      	adds	r0, #1
 8008daa:	d101      	bne.n	8008db0 <sbrk_aligned+0x38>
 8008dac:	f04f 34ff 	mov.w	r4, #4294967295
 8008db0:	4620      	mov	r0, r4
 8008db2:	bd70      	pop	{r4, r5, r6, pc}
 8008db4:	20004a40 	.word	0x20004a40

08008db8 <_malloc_r>:
 8008db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dbc:	1ccd      	adds	r5, r1, #3
 8008dbe:	f025 0503 	bic.w	r5, r5, #3
 8008dc2:	3508      	adds	r5, #8
 8008dc4:	2d0c      	cmp	r5, #12
 8008dc6:	bf38      	it	cc
 8008dc8:	250c      	movcc	r5, #12
 8008dca:	2d00      	cmp	r5, #0
 8008dcc:	4607      	mov	r7, r0
 8008dce:	db01      	blt.n	8008dd4 <_malloc_r+0x1c>
 8008dd0:	42a9      	cmp	r1, r5
 8008dd2:	d905      	bls.n	8008de0 <_malloc_r+0x28>
 8008dd4:	230c      	movs	r3, #12
 8008dd6:	603b      	str	r3, [r7, #0]
 8008dd8:	2600      	movs	r6, #0
 8008dda:	4630      	mov	r0, r6
 8008ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008de0:	4e2e      	ldr	r6, [pc, #184]	; (8008e9c <_malloc_r+0xe4>)
 8008de2:	f000 f89d 	bl	8008f20 <__malloc_lock>
 8008de6:	6833      	ldr	r3, [r6, #0]
 8008de8:	461c      	mov	r4, r3
 8008dea:	bb34      	cbnz	r4, 8008e3a <_malloc_r+0x82>
 8008dec:	4629      	mov	r1, r5
 8008dee:	4638      	mov	r0, r7
 8008df0:	f7ff ffc2 	bl	8008d78 <sbrk_aligned>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	4604      	mov	r4, r0
 8008df8:	d14d      	bne.n	8008e96 <_malloc_r+0xde>
 8008dfa:	6834      	ldr	r4, [r6, #0]
 8008dfc:	4626      	mov	r6, r4
 8008dfe:	2e00      	cmp	r6, #0
 8008e00:	d140      	bne.n	8008e84 <_malloc_r+0xcc>
 8008e02:	6823      	ldr	r3, [r4, #0]
 8008e04:	4631      	mov	r1, r6
 8008e06:	4638      	mov	r0, r7
 8008e08:	eb04 0803 	add.w	r8, r4, r3
 8008e0c:	f000 f878 	bl	8008f00 <_sbrk_r>
 8008e10:	4580      	cmp	r8, r0
 8008e12:	d13a      	bne.n	8008e8a <_malloc_r+0xd2>
 8008e14:	6821      	ldr	r1, [r4, #0]
 8008e16:	3503      	adds	r5, #3
 8008e18:	1a6d      	subs	r5, r5, r1
 8008e1a:	f025 0503 	bic.w	r5, r5, #3
 8008e1e:	3508      	adds	r5, #8
 8008e20:	2d0c      	cmp	r5, #12
 8008e22:	bf38      	it	cc
 8008e24:	250c      	movcc	r5, #12
 8008e26:	4629      	mov	r1, r5
 8008e28:	4638      	mov	r0, r7
 8008e2a:	f7ff ffa5 	bl	8008d78 <sbrk_aligned>
 8008e2e:	3001      	adds	r0, #1
 8008e30:	d02b      	beq.n	8008e8a <_malloc_r+0xd2>
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	442b      	add	r3, r5
 8008e36:	6023      	str	r3, [r4, #0]
 8008e38:	e00e      	b.n	8008e58 <_malloc_r+0xa0>
 8008e3a:	6822      	ldr	r2, [r4, #0]
 8008e3c:	1b52      	subs	r2, r2, r5
 8008e3e:	d41e      	bmi.n	8008e7e <_malloc_r+0xc6>
 8008e40:	2a0b      	cmp	r2, #11
 8008e42:	d916      	bls.n	8008e72 <_malloc_r+0xba>
 8008e44:	1961      	adds	r1, r4, r5
 8008e46:	42a3      	cmp	r3, r4
 8008e48:	6025      	str	r5, [r4, #0]
 8008e4a:	bf18      	it	ne
 8008e4c:	6059      	strne	r1, [r3, #4]
 8008e4e:	6863      	ldr	r3, [r4, #4]
 8008e50:	bf08      	it	eq
 8008e52:	6031      	streq	r1, [r6, #0]
 8008e54:	5162      	str	r2, [r4, r5]
 8008e56:	604b      	str	r3, [r1, #4]
 8008e58:	4638      	mov	r0, r7
 8008e5a:	f104 060b 	add.w	r6, r4, #11
 8008e5e:	f000 f865 	bl	8008f2c <__malloc_unlock>
 8008e62:	f026 0607 	bic.w	r6, r6, #7
 8008e66:	1d23      	adds	r3, r4, #4
 8008e68:	1af2      	subs	r2, r6, r3
 8008e6a:	d0b6      	beq.n	8008dda <_malloc_r+0x22>
 8008e6c:	1b9b      	subs	r3, r3, r6
 8008e6e:	50a3      	str	r3, [r4, r2]
 8008e70:	e7b3      	b.n	8008dda <_malloc_r+0x22>
 8008e72:	6862      	ldr	r2, [r4, #4]
 8008e74:	42a3      	cmp	r3, r4
 8008e76:	bf0c      	ite	eq
 8008e78:	6032      	streq	r2, [r6, #0]
 8008e7a:	605a      	strne	r2, [r3, #4]
 8008e7c:	e7ec      	b.n	8008e58 <_malloc_r+0xa0>
 8008e7e:	4623      	mov	r3, r4
 8008e80:	6864      	ldr	r4, [r4, #4]
 8008e82:	e7b2      	b.n	8008dea <_malloc_r+0x32>
 8008e84:	4634      	mov	r4, r6
 8008e86:	6876      	ldr	r6, [r6, #4]
 8008e88:	e7b9      	b.n	8008dfe <_malloc_r+0x46>
 8008e8a:	230c      	movs	r3, #12
 8008e8c:	603b      	str	r3, [r7, #0]
 8008e8e:	4638      	mov	r0, r7
 8008e90:	f000 f84c 	bl	8008f2c <__malloc_unlock>
 8008e94:	e7a1      	b.n	8008dda <_malloc_r+0x22>
 8008e96:	6025      	str	r5, [r4, #0]
 8008e98:	e7de      	b.n	8008e58 <_malloc_r+0xa0>
 8008e9a:	bf00      	nop
 8008e9c:	20004a3c 	.word	0x20004a3c

08008ea0 <_realloc_r>:
 8008ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea4:	4680      	mov	r8, r0
 8008ea6:	4614      	mov	r4, r2
 8008ea8:	460e      	mov	r6, r1
 8008eaa:	b921      	cbnz	r1, 8008eb6 <_realloc_r+0x16>
 8008eac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb0:	4611      	mov	r1, r2
 8008eb2:	f7ff bf81 	b.w	8008db8 <_malloc_r>
 8008eb6:	b92a      	cbnz	r2, 8008ec4 <_realloc_r+0x24>
 8008eb8:	f7ff ff12 	bl	8008ce0 <_free_r>
 8008ebc:	4625      	mov	r5, r4
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec4:	f000 f838 	bl	8008f38 <_malloc_usable_size_r>
 8008ec8:	4284      	cmp	r4, r0
 8008eca:	4607      	mov	r7, r0
 8008ecc:	d802      	bhi.n	8008ed4 <_realloc_r+0x34>
 8008ece:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ed2:	d812      	bhi.n	8008efa <_realloc_r+0x5a>
 8008ed4:	4621      	mov	r1, r4
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	f7ff ff6e 	bl	8008db8 <_malloc_r>
 8008edc:	4605      	mov	r5, r0
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	d0ed      	beq.n	8008ebe <_realloc_r+0x1e>
 8008ee2:	42bc      	cmp	r4, r7
 8008ee4:	4622      	mov	r2, r4
 8008ee6:	4631      	mov	r1, r6
 8008ee8:	bf28      	it	cs
 8008eea:	463a      	movcs	r2, r7
 8008eec:	f7ff fbb8 	bl	8008660 <memcpy>
 8008ef0:	4631      	mov	r1, r6
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	f7ff fef4 	bl	8008ce0 <_free_r>
 8008ef8:	e7e1      	b.n	8008ebe <_realloc_r+0x1e>
 8008efa:	4635      	mov	r5, r6
 8008efc:	e7df      	b.n	8008ebe <_realloc_r+0x1e>
	...

08008f00 <_sbrk_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4d06      	ldr	r5, [pc, #24]	; (8008f1c <_sbrk_r+0x1c>)
 8008f04:	2300      	movs	r3, #0
 8008f06:	4604      	mov	r4, r0
 8008f08:	4608      	mov	r0, r1
 8008f0a:	602b      	str	r3, [r5, #0]
 8008f0c:	f7f8 fb00 	bl	8001510 <_sbrk>
 8008f10:	1c43      	adds	r3, r0, #1
 8008f12:	d102      	bne.n	8008f1a <_sbrk_r+0x1a>
 8008f14:	682b      	ldr	r3, [r5, #0]
 8008f16:	b103      	cbz	r3, 8008f1a <_sbrk_r+0x1a>
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	bd38      	pop	{r3, r4, r5, pc}
 8008f1c:	20004a44 	.word	0x20004a44

08008f20 <__malloc_lock>:
 8008f20:	4801      	ldr	r0, [pc, #4]	; (8008f28 <__malloc_lock+0x8>)
 8008f22:	f000 b811 	b.w	8008f48 <__retarget_lock_acquire_recursive>
 8008f26:	bf00      	nop
 8008f28:	20004a48 	.word	0x20004a48

08008f2c <__malloc_unlock>:
 8008f2c:	4801      	ldr	r0, [pc, #4]	; (8008f34 <__malloc_unlock+0x8>)
 8008f2e:	f000 b80c 	b.w	8008f4a <__retarget_lock_release_recursive>
 8008f32:	bf00      	nop
 8008f34:	20004a48 	.word	0x20004a48

08008f38 <_malloc_usable_size_r>:
 8008f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f3c:	1f18      	subs	r0, r3, #4
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	bfbc      	itt	lt
 8008f42:	580b      	ldrlt	r3, [r1, r0]
 8008f44:	18c0      	addlt	r0, r0, r3
 8008f46:	4770      	bx	lr

08008f48 <__retarget_lock_acquire_recursive>:
 8008f48:	4770      	bx	lr

08008f4a <__retarget_lock_release_recursive>:
 8008f4a:	4770      	bx	lr

08008f4c <_init>:
 8008f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4e:	bf00      	nop
 8008f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f52:	bc08      	pop	{r3}
 8008f54:	469e      	mov	lr, r3
 8008f56:	4770      	bx	lr

08008f58 <_fini>:
 8008f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5a:	bf00      	nop
 8008f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f5e:	bc08      	pop	{r3}
 8008f60:	469e      	mov	lr, r3
 8008f62:	4770      	bx	lr
