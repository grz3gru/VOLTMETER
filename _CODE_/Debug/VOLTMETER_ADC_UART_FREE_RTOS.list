
VOLTMETER_ADC_UART_FREE_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08007284  08007284  00017284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073b0  080073b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080073b0  080073b0  000173b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073b8  080073b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073b8  080073b8  000173b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073bc  080073bc  000173bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080073c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004668  20000074  08007434  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200046dc  08007434  000246dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191f4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bc4  00000000  00000000  00039298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  0003ce60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001368  00000000  00000000  0003e350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a399  00000000  00000000  0003f6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb64  00000000  00000000  00059a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2ed7  00000000  00000000  000755b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011848c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a38  00000000  00000000  001184dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800726c 	.word	0x0800726c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800726c 	.word	0x0800726c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800059a:	463b      	mov	r3, r7
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005a6:	4b21      	ldr	r3, [pc, #132]	; (800062c <MX_ADC1_Init+0x98>)
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <MX_ADC1_Init+0x9c>)
 80005aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <MX_ADC1_Init+0x98>)
 80005ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005b4:	4b1d      	ldr	r3, [pc, #116]	; (800062c <MX_ADC1_Init+0x98>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <MX_ADC1_Init+0x98>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c0:	4b1a      	ldr	r3, [pc, #104]	; (800062c <MX_ADC1_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c6:	4b19      	ldr	r3, [pc, #100]	; (800062c <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <MX_ADC1_Init+0x98>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <MX_ADC1_Init+0x98>)
 80005d6:	4a17      	ldr	r2, [pc, #92]	; (8000634 <MX_ADC1_Init+0xa0>)
 80005d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_ADC1_Init+0x98>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_ADC1_Init+0x98>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <MX_ADC1_Init+0x98>)
 80005f6:	f000 fccb 	bl	8000f90 <HAL_ADC_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000600:	f000 fac0 	bl	8000b84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000604:	2300      	movs	r3, #0
 8000606:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000608:	2301      	movs	r3, #1
 800060a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	4619      	mov	r1, r3
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_ADC1_Init+0x98>)
 8000616:	f000 ff79 	bl	800150c <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000620:	f000 fab0 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000090 	.word	0x20000090
 8000630:	40012000 	.word	0x40012000
 8000634:	0f000001 	.word	0x0f000001

08000638 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a1b      	ldr	r2, [pc, #108]	; (80006c4 <HAL_ADC_MspInit+0x8c>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d12f      	bne.n	80006ba <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <HAL_ADC_MspInit+0x90>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	4a19      	ldr	r2, [pc, #100]	; (80006c8 <HAL_ADC_MspInit+0x90>)
 8000664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000668:	6453      	str	r3, [r2, #68]	; 0x44
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <HAL_ADC_MspInit+0x90>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_ADC_MspInit+0x90>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <HAL_ADC_MspInit+0x90>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <HAL_ADC_MspInit+0x90>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000692:	2301      	movs	r3, #1
 8000694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000696:	2303      	movs	r3, #3
 8000698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4809      	ldr	r0, [pc, #36]	; (80006cc <HAL_ADC_MspInit+0x94>)
 80006a6:	f001 facd 	bl	8001c44 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2105      	movs	r1, #5
 80006ae:	2012      	movs	r0, #18
 80006b0:	f001 fa0c 	bl	8001acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80006b4:	2012      	movs	r0, #18
 80006b6:	f001 fa25 	bl	8001b04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000

080006d0 <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationTickHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4a07      	ldr	r2, [pc, #28]	; (8000718 <vApplicationGetIdleTaskMemory+0x2c>)
 80006fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	4a06      	ldr	r2, [pc, #24]	; (800071c <vApplicationGetIdleTaskMemory+0x30>)
 8000702:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000100 	.word	0x20000100
 800071c:	20000154 	.word	0x20000154

08000720 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4a07      	ldr	r2, [pc, #28]	; (800074c <vApplicationGetTimerTaskMemory+0x2c>)
 8000730:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	4a06      	ldr	r2, [pc, #24]	; (8000750 <vApplicationGetTimerTaskMemory+0x30>)
 8000736:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800073e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000740:	bf00      	nop
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	20000354 	.word	0x20000354
 8000750:	200003a8 	.word	0x200003a8

08000754 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000754:	b5b0      	push	{r4, r5, r7, lr}
 8000756:	b0ac      	sub	sp, #176	; 0xb0
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of MUTEX_ADC_GOING */
  osMutexDef(MUTEX_ADC_GOING);
 800075a:	2300      	movs	r3, #0
 800075c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000760:	2300      	movs	r3, #0
 8000762:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  MUTEX_ADC_GOINGHandle = osMutexCreate(osMutex(MUTEX_ADC_GOING));
 8000766:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800076a:	4618      	mov	r0, r3
 800076c:	f003 fbbf 	bl	8003eee <osMutexCreate>
 8000770:	4603      	mov	r3, r0
 8000772:	4a4d      	ldr	r2, [pc, #308]	; (80008a8 <MX_FREERTOS_Init+0x154>)
 8000774:	6013      	str	r3, [r2, #0]

  /* definition and creation of MUTEX_UART_GOING */
  osMutexDef(MUTEX_UART_GOING);
 8000776:	2300      	movs	r3, #0
 8000778:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800077c:	2300      	movs	r3, #0
 800077e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  MUTEX_UART_GOINGHandle = osMutexCreate(osMutex(MUTEX_UART_GOING));
 8000782:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000786:	4618      	mov	r0, r3
 8000788:	f003 fbb1 	bl	8003eee <osMutexCreate>
 800078c:	4603      	mov	r3, r0
 800078e:	4a47      	ldr	r2, [pc, #284]	; (80008ac <MX_FREERTOS_Init+0x158>)
 8000790:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of SEM_BIN_ADC_COMPLETE */
  osSemaphoreDef(SEM_BIN_ADC_COMPLETE);
 8000792:	2300      	movs	r3, #0
 8000794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000798:	2300      	movs	r3, #0
 800079a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  SEM_BIN_ADC_COMPLETEHandle = osSemaphoreCreate(osSemaphore(SEM_BIN_ADC_COMPLETE), 1);
 800079e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007a2:	2101      	movs	r1, #1
 80007a4:	4618      	mov	r0, r3
 80007a6:	f003 fbba 	bl	8003f1e <osSemaphoreCreate>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4a40      	ldr	r2, [pc, #256]	; (80008b0 <MX_FREERTOS_Init+0x15c>)
 80007ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of SEM_BIN_UART_COMPLETE */
  osSemaphoreDef(SEM_BIN_UART_COMPLETE);
 80007b0:	2300      	movs	r3, #0
 80007b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80007b6:	2300      	movs	r3, #0
 80007b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  SEM_BIN_UART_COMPLETEHandle = osSemaphoreCreate(osSemaphore(SEM_BIN_UART_COMPLETE), 1);
 80007bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80007c0:	2101      	movs	r1, #1
 80007c2:	4618      	mov	r0, r3
 80007c4:	f003 fbab 	bl	8003f1e <osSemaphoreCreate>
 80007c8:	4603      	mov	r3, r0
 80007ca:	4a3a      	ldr	r2, [pc, #232]	; (80008b4 <MX_FREERTOS_Init+0x160>)
 80007cc:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of ADC_QUEUE_UART */
  osMessageQDef(ADC_QUEUE_UART, 16, uint16_t);
 80007ce:	4b3a      	ldr	r3, [pc, #232]	; (80008b8 <MX_FREERTOS_Init+0x164>)
 80007d0:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80007d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ADC_QUEUE_UARTHandle = osMessageCreate(osMessageQ(ADC_QUEUE_UART), NULL);
 80007da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80007de:	2100      	movs	r1, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f003 fbce 	bl	8003f82 <osMessageCreate>
 80007e6:	4603      	mov	r3, r0
 80007e8:	4a34      	ldr	r2, [pc, #208]	; (80008bc <MX_FREERTOS_Init+0x168>)
 80007ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_QUEUE_ADC */
  osMessageQDef(UART_QUEUE_ADC, 16, uint16_t);
 80007ec:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <MX_FREERTOS_Init+0x164>)
 80007ee:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80007f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UART_QUEUE_ADCHandle = osMessageCreate(osMessageQ(UART_QUEUE_ADC), NULL);
 80007f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 fbbf 	bl	8003f82 <osMessageCreate>
 8000804:	4603      	mov	r3, r0
 8000806:	4a2e      	ldr	r2, [pc, #184]	; (80008c0 <MX_FREERTOS_Init+0x16c>)
 8000808:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 800080a:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <MX_FREERTOS_Init+0x170>)
 800080c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000810:	461d      	mov	r5, r3
 8000812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000816:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800081a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800081e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f003 fb02 	bl	8003e2e <osThreadCreate>
 800082a:	4603      	mov	r3, r0
 800082c:	4a26      	ldr	r2, [pc, #152]	; (80008c8 <MX_FREERTOS_Init+0x174>)
 800082e:	6013      	str	r3, [r2, #0]

  /* definition and creation of IDLE_TASK_1 */
  osThreadDef(IDLE_TASK_1, START_IDLE_TASK_1, osPriorityIdle, 0, 128);
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_FREERTOS_Init+0x178>)
 8000832:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000836:	461d      	mov	r5, r3
 8000838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800083a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800083c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000840:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IDLE_TASK_1Handle = osThreadCreate(osThread(IDLE_TASK_1), NULL);
 8000844:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f003 faef 	bl	8003e2e <osThreadCreate>
 8000850:	4603      	mov	r3, r0
 8000852:	4a1f      	ldr	r2, [pc, #124]	; (80008d0 <MX_FREERTOS_Init+0x17c>)
 8000854:	6013      	str	r3, [r2, #0]

  /* definition and creation of ADC_TASK */
  osThreadDef(ADC_TASK, ADC_TASK_INIT, osPriorityAboveNormal, 0, 128);
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_FREERTOS_Init+0x180>)
 8000858:	f107 041c 	add.w	r4, r7, #28
 800085c:	461d      	mov	r5, r3
 800085e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000862:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000866:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_TASKHandle = osThreadCreate(osThread(ADC_TASK), NULL);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f003 fadc 	bl	8003e2e <osThreadCreate>
 8000876:	4603      	mov	r3, r0
 8000878:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <MX_FREERTOS_Init+0x184>)
 800087a:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_TASK */
  osThreadDef(UART_TASK, UART_TASK_INIT, osPriorityNormal, 0, 128);
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_FREERTOS_Init+0x188>)
 800087e:	463c      	mov	r4, r7
 8000880:	461d      	mov	r5, r3
 8000882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000886:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800088a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_TASKHandle = osThreadCreate(osThread(UART_TASK), NULL);
 800088e:	463b      	mov	r3, r7
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f003 facb 	bl	8003e2e <osThreadCreate>
 8000898:	4603      	mov	r3, r0
 800089a:	4a11      	ldr	r2, [pc, #68]	; (80008e0 <MX_FREERTOS_Init+0x18c>)
 800089c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800089e:	bf00      	nop
 80008a0:	37b0      	adds	r7, #176	; 0xb0
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bdb0      	pop	{r4, r5, r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000f0 	.word	0x200000f0
 80008ac:	200000f4 	.word	0x200000f4
 80008b0:	200000f8 	.word	0x200000f8
 80008b4:	200000fc 	.word	0x200000fc
 80008b8:	080072b4 	.word	0x080072b4
 80008bc:	200000e8 	.word	0x200000e8
 80008c0:	200000ec 	.word	0x200000ec
 80008c4:	080072c4 	.word	0x080072c4
 80008c8:	200000d8 	.word	0x200000d8
 80008cc:	080072e0 	.word	0x080072e0
 80008d0:	200000dc 	.word	0x200000dc
 80008d4:	080072fc 	.word	0x080072fc
 80008d8:	200000e0 	.word	0x200000e0
 80008dc:	08007318 	.word	0x08007318
 80008e0:	200000e4 	.word	0x200000e4

080008e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80008ec:	2101      	movs	r1, #1
 80008ee:	4804      	ldr	r0, [pc, #16]	; (8000900 <StartDefaultTask+0x1c>)
 80008f0:	f001 fb45 	bl	8001f7e <HAL_GPIO_TogglePin>
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
	//HAL_Delay(1000);
    osDelay(1000);
 80008f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f8:	f003 fae5 	bl	8003ec6 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80008fc:	e7f6      	b.n	80008ec <StartDefaultTask+0x8>
 80008fe:	bf00      	nop
 8000900:	40020400 	.word	0x40020400

08000904 <START_IDLE_TASK_1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_START_IDLE_TASK_1 */
void START_IDLE_TASK_1(void const * argument)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN START_IDLE_TASK_1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800090c:	2001      	movs	r0, #1
 800090e:	f003 fada 	bl	8003ec6 <osDelay>
 8000912:	e7fb      	b.n	800090c <START_IDLE_TASK_1+0x8>

08000914 <ADC_TASK_INIT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADC_TASK_INIT */
void ADC_TASK_INIT(void const * argument)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	char MSG[10]; //10 CHARACTER BUFFER (80bits) TO TRANSMIT OVER UART

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 800091c:	2001      	movs	r0, #1
 800091e:	f003 fad2 	bl	8003ec6 <osDelay>

	//---------------------------------------------------------------
		  // GET ADC VALUE:

		  //START CONVERSION:
		  HAL_ADC_Start(&hadc1); // PASSING ADC HANDLING ADDRES
 8000922:	480c      	ldr	r0, [pc, #48]	; (8000954 <ADC_TASK_INIT+0x40>)
 8000924:	f000 fb78 	bl	8001018 <HAL_ADC_Start>

		  // WAIT TO ADC CONVERSION TO COMPLETE:
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000928:	f04f 31ff 	mov.w	r1, #4294967295
 800092c:	4809      	ldr	r0, [pc, #36]	; (8000954 <ADC_TASK_INIT+0x40>)
 800092e:	f000 fc27 	bl	8001180 <HAL_ADC_PollForConversion>

		  //WHEN CONVERSION IS DONE GET 12bit VALUE: (0-4095)
		  RAW = HAL_ADC_GetValue(&hadc1);
 8000932:	4808      	ldr	r0, [pc, #32]	; (8000954 <ADC_TASK_INIT+0x40>)
 8000934:	f000 fdbf 	bl	80014b6 <HAL_ADC_GetValue>
 8000938:	4603      	mov	r3, r0
 800093a:	b29b      	uxth	r3, r3
 800093c:	82fb      	strh	r3, [r7, #22]

		  //MSG[10] = "POBRANO DANE Z ADC";
		 // sprintf(MSG,"POBRANO DANE Z ADC,  %hu\r\n", RAW);
		 // HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);

		  xQueueSend(ADC_QUEUE_UARTHandle, &RAW, portMAX_DELAY);
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <ADC_TASK_INIT+0x44>)
 8000940:	6818      	ldr	r0, [r3, #0]
 8000942:	f107 0116 	add.w	r1, r7, #22
 8000946:	2300      	movs	r3, #0
 8000948:	f04f 32ff 	mov.w	r2, #4294967295
 800094c:	f003 fd7c 	bl	8004448 <xQueueGenericSend>
	  osDelay(1);
 8000950:	e7e4      	b.n	800091c <ADC_TASK_INIT+0x8>
 8000952:	bf00      	nop
 8000954:	20000090 	.word	0x20000090
 8000958:	200000e8 	.word	0x200000e8

0800095c <UART_TASK_INIT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TASK_INIT */
void UART_TASK_INIT(void const * argument)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000964:	2001      	movs	r0, #1
 8000966:	f003 faae 	bl	8003ec6 <osDelay>

    //---------------------------------------------------------------

      xQueueReceive(ADC_QUEUE_UARTHandle, &RAW, portMAX_DELAY);
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <UART_TASK_INIT+0x78>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f107 0116 	add.w	r1, r7, #22
 8000972:	f04f 32ff 	mov.w	r2, #4294967295
 8000976:	4618      	mov	r0, r3
 8000978:	f003 ff00 	bl	800477c <xQueueReceive>

      sprintf(MSG,"\033c"); // WYSYŁANIE KOMENDY CZYSZCZĄCEJ OKNO TERMINALA
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	4915      	ldr	r1, [pc, #84]	; (80009d8 <UART_TASK_INIT+0x7c>)
 8000982:	4618      	mov	r0, r3
 8000984:	f006 f812 	bl	80069ac <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fc27 	bl	80001e0 <strlen>
 8000992:	4603      	mov	r3, r0
 8000994:	b29a      	uxth	r2, r3
 8000996:	f107 010c 	add.w	r1, r7, #12
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	480f      	ldr	r0, [pc, #60]	; (80009dc <UART_TASK_INIT+0x80>)
 80009a0:	f002 fa5f 	bl	8002e62 <HAL_UART_Transmit>

   	  //CONVERT TO STRING: (HAVE TO INCLUDE LIB <string.h> <stdio.h>
      sprintf(MSG,"ADC VALUE: %hu\r\n", RAW);
 80009a4:	8afb      	ldrh	r3, [r7, #22]
 80009a6:	461a      	mov	r2, r3
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	490c      	ldr	r1, [pc, #48]	; (80009e0 <UART_TASK_INIT+0x84>)
 80009ae:	4618      	mov	r0, r3
 80009b0:	f005 fffc 	bl	80069ac <siprintf>

   	  // UART TRANSMIT:
   	  HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fc11 	bl	80001e0 <strlen>
 80009be:	4603      	mov	r3, r0
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	f107 010c 	add.w	r1, r7, #12
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	4804      	ldr	r0, [pc, #16]	; (80009dc <UART_TASK_INIT+0x80>)
 80009cc:	f002 fa49 	bl	8002e62 <HAL_UART_Transmit>
    osDelay(1);
 80009d0:	e7c8      	b.n	8000964 <UART_TASK_INIT+0x8>
 80009d2:	bf00      	nop
 80009d4:	200000e8 	.word	0x200000e8
 80009d8:	08007334 	.word	0x08007334
 80009dc:	200007f4 	.word	0x200007f4
 80009e0:	08007338 	.word	0x08007338

080009e4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_GPIO_Init+0x7c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <MX_GPIO_Init+0x7c>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_GPIO_Init+0x7c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_GPIO_Init+0x7c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <MX_GPIO_Init+0x7c>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_GPIO_Init+0x7c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2101      	movs	r1, #1
 8000a36:	480b      	ldr	r0, [pc, #44]	; (8000a64 <MX_GPIO_Init+0x80>)
 8000a38:	f001 fa88 	bl	8001f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a40:	2311      	movs	r3, #17
 8000a42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	4619      	mov	r1, r3
 8000a52:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_GPIO_Init+0x80>)
 8000a54:	f001 f8f6 	bl	8001c44 <HAL_GPIO_Init>

}
 8000a58:	bf00      	nop
 8000a5a:	3720      	adds	r7, #32
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020400 	.word	0x40020400

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6e:	f000 fa4d 	bl	8000f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a72:	f000 f80b 	bl	8000a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a76:	f7ff ffb5 	bl	80009e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a7a:	f7ff fd8b 	bl	8000594 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000a7e:	f000 f9a1 	bl	8000dc4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000a82:	f7ff fe67 	bl	8000754 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a86:	f003 f9cb 	bl	8003e20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <main+0x22>

08000a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b094      	sub	sp, #80	; 0x50
 8000a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	2230      	movs	r2, #48	; 0x30
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f005 ff7e 	bl	800699c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <SystemClock_Config+0xcc>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a27      	ldr	r2, [pc, #156]	; (8000b58 <SystemClock_Config+0xcc>)
 8000aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <SystemClock_Config+0xcc>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ad8:	4a20      	ldr	r2, [pc, #128]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aec:	2302      	movs	r3, #2
 8000aee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af0:	2301      	movs	r3, #1
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af4:	2310      	movs	r3, #16
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af8:	2302      	movs	r3, #2
 8000afa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000afc:	2300      	movs	r3, #0
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b00:	2310      	movs	r3, #16
 8000b02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b04:	23a8      	movs	r3, #168	; 0xa8
 8000b06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b10:	f107 0320 	add.w	r3, r7, #32
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 fa4d 	bl	8001fb4 <HAL_RCC_OscConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b20:	f000 f830 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b24:	230f      	movs	r3, #15
 8000b26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f001 fcaf 	bl	80024a4 <HAL_RCC_ClockConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b4c:	f000 f81a 	bl	8000b84 <Error_Handler>
  }
}
 8000b50:	bf00      	nop
 8000b52:	3750      	adds	r7, #80	; 0x50
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40007000 	.word	0x40007000

08000b60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d101      	bne.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b72:	f000 f9ed 	bl	8000f50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40014400 	.word	0x40014400

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <Error_Handler+0x8>
	...

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_MspInit+0x54>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	4a11      	ldr	r2, [pc, #68]	; (8000be4 <HAL_MspInit+0x54>)
 8000ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <HAL_MspInit+0x54>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_MspInit+0x54>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_MspInit+0x54>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_MspInit+0x54>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	210f      	movs	r1, #15
 8000bd2:	f06f 0001 	mvn.w	r0, #1
 8000bd6:	f000 ff79 	bl	8001acc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800

08000be8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08c      	sub	sp, #48	; 0x30
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	4b2e      	ldr	r3, [pc, #184]	; (8000cb8 <HAL_InitTick+0xd0>)
 8000bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c00:	4a2d      	ldr	r2, [pc, #180]	; (8000cb8 <HAL_InitTick+0xd0>)
 8000c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c06:	6453      	str	r3, [r2, #68]	; 0x44
 8000c08:	4b2b      	ldr	r3, [pc, #172]	; (8000cb8 <HAL_InitTick+0xd0>)
 8000c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c14:	f107 020c 	add.w	r2, r7, #12
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 fe20 	bl	8002864 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c24:	f001 fe0a 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 8000c28:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2c:	4a23      	ldr	r2, [pc, #140]	; (8000cbc <HAL_InitTick+0xd4>)
 8000c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c32:	0c9b      	lsrs	r3, r3, #18
 8000c34:	3b01      	subs	r3, #1
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000c38:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <HAL_InitTick+0xd8>)
 8000c3a:	4a22      	ldr	r2, [pc, #136]	; (8000cc4 <HAL_InitTick+0xdc>)
 8000c3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <HAL_InitTick+0xd8>)
 8000c40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c44:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000c46:	4a1e      	ldr	r2, [pc, #120]	; (8000cc0 <HAL_InitTick+0xd8>)
 8000c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <HAL_InitTick+0xd8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <HAL_InitTick+0xd8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <HAL_InitTick+0xd8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000c5e:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <HAL_InitTick+0xd8>)
 8000c60:	f001 fe32 	bl	80028c8 <HAL_TIM_Base_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d11b      	bne.n	8000caa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000c72:	4813      	ldr	r0, [pc, #76]	; (8000cc0 <HAL_InitTick+0xd8>)
 8000c74:	f001 fe82 	bl	800297c <HAL_TIM_Base_Start_IT>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d111      	bne.n	8000caa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c86:	2019      	movs	r0, #25
 8000c88:	f000 ff3c 	bl	8001b04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b0f      	cmp	r3, #15
 8000c90:	d808      	bhi.n	8000ca4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c92:	2200      	movs	r2, #0
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	2019      	movs	r0, #25
 8000c98:	f000 ff18 	bl	8001acc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_InitTick+0xe0>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	e002      	b.n	8000caa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000caa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3730      	adds	r7, #48	; 0x30
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	431bde83 	.word	0x431bde83
 8000cc0:	200007a8 	.word	0x200007a8
 8000cc4:	40014400 	.word	0x40014400
 8000cc8:	20000004 	.word	0x20000004

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler+0x4>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <ADC_IRQHandler+0x10>)
 8000cfe:	f000 faca 	bl	8001296 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000090 	.word	0x20000090

08000d0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d12:	f001 fe95 	bl	8002a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200007a8 	.word	0x200007a8

08000d20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <USART1_IRQHandler+0x10>)
 8000d26:	f002 f92f 	bl	8002f88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200007f4 	.word	0x200007f4

08000d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <_sbrk+0x5c>)
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <_sbrk+0x60>)
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <_sbrk+0x64>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <_sbrk+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d207      	bcs.n	8000d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d64:	f005 fde2 	bl	800692c <__errno>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	e009      	b.n	8000d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <_sbrk+0x64>)
 8000d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20018000 	.word	0x20018000
 8000d94:	00000400 	.word	0x00000400
 8000d98:	200007f0 	.word	0x200007f0
 8000d9c:	200046e0 	.word	0x200046e0

08000da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dca:	4a12      	ldr	r2, [pc, #72]	; (8000e14 <MX_USART1_UART_Init+0x50>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dfc:	f001 ffe4 	bl	8002dc8 <HAL_UART_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e06:	f7ff febd 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200007f4 	.word	0x200007f4
 8000e14:	40011000 	.word	0x40011000

08000e18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a1d      	ldr	r2, [pc, #116]	; (8000eac <HAL_UART_MspInit+0x94>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d134      	bne.n	8000ea4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a1b      	ldr	r2, [pc, #108]	; (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e44:	f043 0310 	orr.w	r3, r3, #16
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f003 0310 	and.w	r3, r3, #16
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e84:	2307      	movs	r3, #7
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <HAL_UART_MspInit+0x9c>)
 8000e90:	f000 fed8 	bl	8001c44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2105      	movs	r1, #5
 8000e98:	2025      	movs	r0, #37	; 0x25
 8000e9a:	f000 fe17 	bl	8001acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e9e:	2025      	movs	r0, #37	; 0x25
 8000ea0:	f000 fe30 	bl	8001b04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	3728      	adds	r7, #40	; 0x28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40011000 	.word	0x40011000
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000

08000eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ebe:	490e      	ldr	r1, [pc, #56]	; (8000ef8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ed4:	4c0b      	ldr	r4, [pc, #44]	; (8000f04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ee2:	f7ff ff5d 	bl	8000da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f005 fd27 	bl	8006938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eea:	f7ff fdbd 	bl	8000a68 <main>
  bx  lr    
 8000eee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ef0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000efc:	080073c0 	.word	0x080073c0
  ldr r2, =_sbss
 8000f00:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f04:	200046dc 	.word	0x200046dc

08000f08 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <DMA1_Stream0_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <HAL_Init+0x40>)
 8000f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_Init+0x40>)
 8000f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_Init+0x40>)
 8000f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 fdbe 	bl	8001ab6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3a:	200f      	movs	r0, #15
 8000f3c:	f7ff fe54 	bl	8000be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f40:	f7ff fe26 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023c00 	.word	0x40023c00

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000838 	.word	0x20000838

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000838 	.word	0x20000838

08000f90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e033      	b.n	800100e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d109      	bne.n	8000fc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff fb42 	bl	8000638 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f003 0310 	and.w	r3, r3, #16
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d118      	bne.n	8001000 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fd6:	f023 0302 	bic.w	r3, r3, #2
 8000fda:	f043 0202 	orr.w	r2, r3, #2
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 fbb4 	bl	8001750 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f023 0303 	bic.w	r3, r3, #3
 8000ff6:	f043 0201 	orr.w	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	641a      	str	r2, [r3, #64]	; 0x40
 8000ffe:	e001      	b.n	8001004 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800100c:	7bfb      	ldrb	r3, [r7, #15]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800102a:	2b01      	cmp	r3, #1
 800102c:	d101      	bne.n	8001032 <HAL_ADC_Start+0x1a>
 800102e:	2302      	movs	r3, #2
 8001030:	e097      	b.n	8001162 <HAL_ADC_Start+0x14a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2201      	movs	r2, #1
 8001036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b01      	cmp	r3, #1
 8001046:	d018      	beq.n	800107a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f042 0201 	orr.w	r2, r2, #1
 8001056:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001058:	4b45      	ldr	r3, [pc, #276]	; (8001170 <HAL_ADC_Start+0x158>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a45      	ldr	r2, [pc, #276]	; (8001174 <HAL_ADC_Start+0x15c>)
 800105e:	fba2 2303 	umull	r2, r3, r2, r3
 8001062:	0c9a      	lsrs	r2, r3, #18
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800106c:	e002      	b.n	8001074 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	3b01      	subs	r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f9      	bne.n	800106e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	2b01      	cmp	r3, #1
 8001086:	d15f      	bne.n	8001148 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001090:	f023 0301 	bic.w	r3, r3, #1
 8001094:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d007      	beq.n	80010ba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010c6:	d106      	bne.n	80010d6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010cc:	f023 0206 	bic.w	r2, r3, #6
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	645a      	str	r2, [r3, #68]	; 0x44
 80010d4:	e002      	b.n	80010dc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010e4:	4b24      	ldr	r3, [pc, #144]	; (8001178 <HAL_ADC_Start+0x160>)
 80010e6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010f0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 031f 	and.w	r3, r3, #31
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10f      	bne.n	800111e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d129      	bne.n	8001160 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	e020      	b.n	8001160 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a16      	ldr	r2, [pc, #88]	; (800117c <HAL_ADC_Start+0x164>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d11b      	bne.n	8001160 <HAL_ADC_Start+0x148>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d114      	bne.n	8001160 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	e00b      	b.n	8001160 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	f043 0210 	orr.w	r2, r3, #16
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001158:	f043 0201 	orr.w	r2, r3, #1
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000000 	.word	0x20000000
 8001174:	431bde83 	.word	0x431bde83
 8001178:	40012300 	.word	0x40012300
 800117c:	40012000 	.word	0x40012000

08001180 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800119c:	d113      	bne.n	80011c6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011ac:	d10b      	bne.n	80011c6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f043 0220 	orr.w	r2, r3, #32
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e063      	b.n	800128e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80011c6:	f7ff fed7 	bl	8000f78 <HAL_GetTick>
 80011ca:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011cc:	e021      	b.n	8001212 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d4:	d01d      	beq.n	8001212 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d007      	beq.n	80011ec <HAL_ADC_PollForConversion+0x6c>
 80011dc:	f7ff fecc 	bl	8000f78 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d212      	bcs.n	8001212 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d00b      	beq.n	8001212 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f043 0204 	orr.w	r2, r3, #4
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e03d      	b.n	800128e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b02      	cmp	r3, #2
 800121e:	d1d6      	bne.n	80011ce <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f06f 0212 	mvn.w	r2, #18
 8001228:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d123      	bne.n	800128c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001248:	2b00      	cmp	r3, #0
 800124a:	d11f      	bne.n	800128c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001252:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001256:	2b00      	cmp	r3, #0
 8001258:	d006      	beq.n	8001268 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001264:	2b00      	cmp	r3, #0
 8001266:	d111      	bne.n	800128c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d105      	bne.n	800128c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	f043 0201 	orr.w	r2, r3, #1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	f003 0320 	and.w	r3, r3, #32
 80012c4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d049      	beq.n	8001360 <HAL_ADC_IRQHandler+0xca>
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d046      	beq.n	8001360 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d105      	bne.n	80012ea <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d12b      	bne.n	8001350 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d127      	bne.n	8001350 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001306:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800130a:	2b00      	cmp	r3, #0
 800130c:	d006      	beq.n	800131c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001318:	2b00      	cmp	r3, #0
 800131a:	d119      	bne.n	8001350 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0220 	bic.w	r2, r2, #32
 800132a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d105      	bne.n	8001350 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	f043 0201 	orr.w	r2, r3, #1
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 f8bd 	bl	80014d0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f06f 0212 	mvn.w	r2, #18
 800135e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d057      	beq.n	8001426 <HAL_ADC_IRQHandler+0x190>
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d054      	beq.n	8001426 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	f003 0310 	and.w	r3, r3, #16
 8001384:	2b00      	cmp	r3, #0
 8001386:	d105      	bne.n	8001394 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d139      	bne.n	8001416 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d12b      	bne.n	8001416 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d124      	bne.n	8001416 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d11d      	bne.n	8001416 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d119      	bne.n	8001416 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013f0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001406:	2b00      	cmp	r3, #0
 8001408:	d105      	bne.n	8001416 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f043 0201 	orr.w	r2, r3, #1
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 fa96 	bl	8001948 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f06f 020c 	mvn.w	r2, #12
 8001424:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001434:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d017      	beq.n	800146c <HAL_ADC_IRQHandler+0x1d6>
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d014      	beq.n	800146c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b01      	cmp	r3, #1
 800144e:	d10d      	bne.n	800146c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f841 	bl	80014e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f06f 0201 	mvn.w	r2, #1
 800146a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0320 	and.w	r3, r3, #32
 8001472:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800147a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d015      	beq.n	80014ae <HAL_ADC_IRQHandler+0x218>
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d012      	beq.n	80014ae <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148c:	f043 0202 	orr.w	r2, r3, #2
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f06f 0220 	mvn.w	r2, #32
 800149c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f82a 	bl	80014f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f06f 0220 	mvn.w	r2, #32
 80014ac:	601a      	str	r2, [r3, #0]
  }
}
 80014ae:	bf00      	nop
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <HAL_ADC_ConfigChannel+0x1c>
 8001524:	2302      	movs	r3, #2
 8001526:	e105      	b.n	8001734 <HAL_ADC_ConfigChannel+0x228>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b09      	cmp	r3, #9
 8001536:	d925      	bls.n	8001584 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68d9      	ldr	r1, [r3, #12]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	b29b      	uxth	r3, r3
 8001544:	461a      	mov	r2, r3
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	3b1e      	subs	r3, #30
 800154e:	2207      	movs	r2, #7
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43da      	mvns	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	400a      	ands	r2, r1
 800155c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68d9      	ldr	r1, [r3, #12]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	b29b      	uxth	r3, r3
 800156e:	4618      	mov	r0, r3
 8001570:	4603      	mov	r3, r0
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4403      	add	r3, r0
 8001576:	3b1e      	subs	r3, #30
 8001578:	409a      	lsls	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	e022      	b.n	80015ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6919      	ldr	r1, [r3, #16]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	b29b      	uxth	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	2207      	movs	r2, #7
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	400a      	ands	r2, r1
 80015a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6919      	ldr	r1, [r3, #16]
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	4618      	mov	r0, r3
 80015ba:	4603      	mov	r3, r0
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4403      	add	r3, r0
 80015c0:	409a      	lsls	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b06      	cmp	r3, #6
 80015d0:	d824      	bhi.n	800161c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	3b05      	subs	r3, #5
 80015e4:	221f      	movs	r2, #31
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	400a      	ands	r2, r1
 80015f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	4618      	mov	r0, r3
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	3b05      	subs	r3, #5
 800160e:	fa00 f203 	lsl.w	r2, r0, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	635a      	str	r2, [r3, #52]	; 0x34
 800161a:	e04c      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b0c      	cmp	r3, #12
 8001622:	d824      	bhi.n	800166e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	3b23      	subs	r3, #35	; 0x23
 8001636:	221f      	movs	r2, #31
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43da      	mvns	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	400a      	ands	r2, r1
 8001644:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	b29b      	uxth	r3, r3
 8001652:	4618      	mov	r0, r3
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	3b23      	subs	r3, #35	; 0x23
 8001660:	fa00 f203 	lsl.w	r2, r0, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	631a      	str	r2, [r3, #48]	; 0x30
 800166c:	e023      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	3b41      	subs	r3, #65	; 0x41
 8001680:	221f      	movs	r2, #31
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	400a      	ands	r2, r1
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	b29b      	uxth	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	3b41      	subs	r3, #65	; 0x41
 80016aa:	fa00 f203 	lsl.w	r2, r0, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016b6:	4b22      	ldr	r3, [pc, #136]	; (8001740 <HAL_ADC_ConfigChannel+0x234>)
 80016b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a21      	ldr	r2, [pc, #132]	; (8001744 <HAL_ADC_ConfigChannel+0x238>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d109      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x1cc>
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b12      	cmp	r3, #18
 80016ca:	d105      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a19      	ldr	r2, [pc, #100]	; (8001744 <HAL_ADC_ConfigChannel+0x238>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d123      	bne.n	800172a <HAL_ADC_ConfigChannel+0x21e>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b10      	cmp	r3, #16
 80016e8:	d003      	beq.n	80016f2 <HAL_ADC_ConfigChannel+0x1e6>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b11      	cmp	r3, #17
 80016f0:	d11b      	bne.n	800172a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b10      	cmp	r3, #16
 8001704:	d111      	bne.n	800172a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_ADC_ConfigChannel+0x23c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a10      	ldr	r2, [pc, #64]	; (800174c <HAL_ADC_ConfigChannel+0x240>)
 800170c:	fba2 2303 	umull	r2, r3, r2, r3
 8001710:	0c9a      	lsrs	r2, r3, #18
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800171c:	e002      	b.n	8001724 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	3b01      	subs	r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f9      	bne.n	800171e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40012300 	.word	0x40012300
 8001744:	40012000 	.word	0x40012000
 8001748:	20000000 	.word	0x20000000
 800174c:	431bde83 	.word	0x431bde83

08001750 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001758:	4b79      	ldr	r3, [pc, #484]	; (8001940 <ADC_Init+0x1f0>)
 800175a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	431a      	orrs	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001784:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6859      	ldr	r1, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	021a      	lsls	r2, r3, #8
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6859      	ldr	r1, [r3, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6899      	ldr	r1, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e2:	4a58      	ldr	r2, [pc, #352]	; (8001944 <ADC_Init+0x1f4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d022      	beq.n	800182e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6899      	ldr	r1, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001818:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6899      	ldr	r1, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	e00f      	b.n	800184e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800183c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800184c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0202 	bic.w	r2, r2, #2
 800185c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6899      	ldr	r1, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7e1b      	ldrb	r3, [r3, #24]
 8001868:	005a      	lsls	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d01b      	beq.n	80018b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800188a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800189a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6859      	ldr	r1, [r3, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	3b01      	subs	r3, #1
 80018a8:	035a      	lsls	r2, r3, #13
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	e007      	b.n	80018c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	3b01      	subs	r3, #1
 80018e0:	051a      	lsls	r2, r3, #20
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6899      	ldr	r1, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001906:	025a      	lsls	r2, r3, #9
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800191e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6899      	ldr	r1, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	029a      	lsls	r2, r3, #10
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	609a      	str	r2, [r3, #8]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	40012300 	.word	0x40012300
 8001944:	0f000001 	.word	0x0f000001

08001948 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001978:	4013      	ands	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800198c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198e:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	60d3      	str	r3, [r2, #12]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <__NVIC_GetPriorityGrouping+0x18>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	f003 0307 	and.w	r3, r3, #7
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	db0b      	blt.n	80019ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	f003 021f 	and.w	r2, r3, #31
 80019d8:	4907      	ldr	r1, [pc, #28]	; (80019f8 <__NVIC_EnableIRQ+0x38>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	2001      	movs	r0, #1
 80019e2:	fa00 f202 	lsl.w	r2, r0, r2
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000e100 	.word	0xe000e100

080019fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db0a      	blt.n	8001a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	490c      	ldr	r1, [pc, #48]	; (8001a48 <__NVIC_SetPriority+0x4c>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	0112      	lsls	r2, r2, #4
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a24:	e00a      	b.n	8001a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4908      	ldr	r1, [pc, #32]	; (8001a4c <__NVIC_SetPriority+0x50>)
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	3b04      	subs	r3, #4
 8001a34:	0112      	lsls	r2, r2, #4
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	440b      	add	r3, r1
 8001a3a:	761a      	strb	r2, [r3, #24]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000e100 	.word	0xe000e100
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	; 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f1c3 0307 	rsb	r3, r3, #7
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	bf28      	it	cs
 8001a6e:	2304      	movcs	r3, #4
 8001a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3304      	adds	r3, #4
 8001a76:	2b06      	cmp	r3, #6
 8001a78:	d902      	bls.n	8001a80 <NVIC_EncodePriority+0x30>
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3b03      	subs	r3, #3
 8001a7e:	e000      	b.n	8001a82 <NVIC_EncodePriority+0x32>
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	43d9      	mvns	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	4313      	orrs	r3, r2
         );
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3724      	adds	r7, #36	; 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ff4c 	bl	800195c <__NVIC_SetPriorityGrouping>
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ade:	f7ff ff61 	bl	80019a4 <__NVIC_GetPriorityGrouping>
 8001ae2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	68b9      	ldr	r1, [r7, #8]
 8001ae8:	6978      	ldr	r0, [r7, #20]
 8001aea:	f7ff ffb1 	bl	8001a50 <NVIC_EncodePriority>
 8001aee:	4602      	mov	r2, r0
 8001af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af4:	4611      	mov	r1, r2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff80 	bl	80019fc <__NVIC_SetPriority>
}
 8001afc:	bf00      	nop
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff54 	bl	80019c0 <__NVIC_EnableIRQ>
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b2e:	f7ff fa23 	bl	8000f78 <HAL_GetTick>
 8001b32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d008      	beq.n	8001b52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e052      	b.n	8001bf8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0216 	bic.w	r2, r2, #22
 8001b60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d103      	bne.n	8001b82 <HAL_DMA_Abort+0x62>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0208 	bic.w	r2, r2, #8
 8001b90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0201 	bic.w	r2, r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ba2:	e013      	b.n	8001bcc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ba4:	f7ff f9e8 	bl	8000f78 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b05      	cmp	r3, #5
 8001bb0:	d90c      	bls.n	8001bcc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2203      	movs	r2, #3
 8001bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e015      	b.n	8001bf8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1e4      	bne.n	8001ba4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bde:	223f      	movs	r2, #63	; 0x3f
 8001be0:	409a      	lsls	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d004      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2280      	movs	r2, #128	; 0x80
 8001c18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00c      	b.n	8001c38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2205      	movs	r2, #5
 8001c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0201 	bic.w	r2, r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	e159      	b.n	8001f14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c60:	2201      	movs	r2, #1
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	f040 8148 	bne.w	8001f0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d005      	beq.n	8001c96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d130      	bne.n	8001cf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 0201 	and.w	r2, r3, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d017      	beq.n	8001d34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d123      	bne.n	8001d88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	08da      	lsrs	r2, r3, #3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3208      	adds	r2, #8
 8001d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	08da      	lsrs	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3208      	adds	r2, #8
 8001d82:	69b9      	ldr	r1, [r7, #24]
 8001d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0203 	and.w	r2, r3, #3
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80a2 	beq.w	8001f0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b57      	ldr	r3, [pc, #348]	; (8001f2c <HAL_GPIO_Init+0x2e8>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	4a56      	ldr	r2, [pc, #344]	; (8001f2c <HAL_GPIO_Init+0x2e8>)
 8001dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dda:	4b54      	ldr	r3, [pc, #336]	; (8001f2c <HAL_GPIO_Init+0x2e8>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001de6:	4a52      	ldr	r2, [pc, #328]	; (8001f30 <HAL_GPIO_Init+0x2ec>)
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a49      	ldr	r2, [pc, #292]	; (8001f34 <HAL_GPIO_Init+0x2f0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d019      	beq.n	8001e46 <HAL_GPIO_Init+0x202>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a48      	ldr	r2, [pc, #288]	; (8001f38 <HAL_GPIO_Init+0x2f4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d013      	beq.n	8001e42 <HAL_GPIO_Init+0x1fe>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a47      	ldr	r2, [pc, #284]	; (8001f3c <HAL_GPIO_Init+0x2f8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d00d      	beq.n	8001e3e <HAL_GPIO_Init+0x1fa>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a46      	ldr	r2, [pc, #280]	; (8001f40 <HAL_GPIO_Init+0x2fc>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d007      	beq.n	8001e3a <HAL_GPIO_Init+0x1f6>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a45      	ldr	r2, [pc, #276]	; (8001f44 <HAL_GPIO_Init+0x300>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d101      	bne.n	8001e36 <HAL_GPIO_Init+0x1f2>
 8001e32:	2304      	movs	r3, #4
 8001e34:	e008      	b.n	8001e48 <HAL_GPIO_Init+0x204>
 8001e36:	2307      	movs	r3, #7
 8001e38:	e006      	b.n	8001e48 <HAL_GPIO_Init+0x204>
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e004      	b.n	8001e48 <HAL_GPIO_Init+0x204>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e002      	b.n	8001e48 <HAL_GPIO_Init+0x204>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_GPIO_Init+0x204>
 8001e46:	2300      	movs	r3, #0
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	f002 0203 	and.w	r2, r2, #3
 8001e4e:	0092      	lsls	r2, r2, #2
 8001e50:	4093      	lsls	r3, r2
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e58:	4935      	ldr	r1, [pc, #212]	; (8001f30 <HAL_GPIO_Init+0x2ec>)
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e66:	4b38      	ldr	r3, [pc, #224]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e8a:	4a2f      	ldr	r2, [pc, #188]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e90:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eb4:	4a24      	ldr	r2, [pc, #144]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eba:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ede:	4a1a      	ldr	r2, [pc, #104]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f08:	4a0f      	ldr	r2, [pc, #60]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3301      	adds	r3, #1
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	f67f aea2 	bls.w	8001c60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3724      	adds	r7, #36	; 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40013800 	.word	0x40013800
 8001f34:	40020000 	.word	0x40020000
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	40020800 	.word	0x40020800
 8001f40:	40020c00 	.word	0x40020c00
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40013c00 	.word	0x40013c00

08001f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	807b      	strh	r3, [r7, #2]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f5c:	787b      	ldrb	r3, [r7, #1]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f68:	e003      	b.n	8001f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f6a:	887b      	ldrh	r3, [r7, #2]
 8001f6c:	041a      	lsls	r2, r3, #16
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	619a      	str	r2, [r3, #24]
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b085      	sub	sp, #20
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	460b      	mov	r3, r1
 8001f88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f90:	887a      	ldrh	r2, [r7, #2]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4013      	ands	r3, r2
 8001f96:	041a      	lsls	r2, r3, #16
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	887b      	ldrh	r3, [r7, #2]
 8001f9e:	400b      	ands	r3, r1
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	619a      	str	r2, [r3, #24]
}
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e267      	b.n	8002496 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d075      	beq.n	80020be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fd2:	4b88      	ldr	r3, [pc, #544]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d00c      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fde:	4b85      	ldr	r3, [pc, #532]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d112      	bne.n	8002010 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fea:	4b82      	ldr	r3, [pc, #520]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ff6:	d10b      	bne.n	8002010 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff8:	4b7e      	ldr	r3, [pc, #504]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d05b      	beq.n	80020bc <HAL_RCC_OscConfig+0x108>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d157      	bne.n	80020bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e242      	b.n	8002496 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002018:	d106      	bne.n	8002028 <HAL_RCC_OscConfig+0x74>
 800201a:	4b76      	ldr	r3, [pc, #472]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a75      	ldr	r2, [pc, #468]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e01d      	b.n	8002064 <HAL_RCC_OscConfig+0xb0>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002030:	d10c      	bne.n	800204c <HAL_RCC_OscConfig+0x98>
 8002032:	4b70      	ldr	r3, [pc, #448]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a6f      	ldr	r2, [pc, #444]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	4b6d      	ldr	r3, [pc, #436]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a6c      	ldr	r2, [pc, #432]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	e00b      	b.n	8002064 <HAL_RCC_OscConfig+0xb0>
 800204c:	4b69      	ldr	r3, [pc, #420]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a68      	ldr	r2, [pc, #416]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	4b66      	ldr	r3, [pc, #408]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a65      	ldr	r2, [pc, #404]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 800205e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d013      	beq.n	8002094 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7fe ff84 	bl	8000f78 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002074:	f7fe ff80 	bl	8000f78 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	; 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e207      	b.n	8002496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002086:	4b5b      	ldr	r3, [pc, #364]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0xc0>
 8002092:	e014      	b.n	80020be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7fe ff70 	bl	8000f78 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800209c:	f7fe ff6c 	bl	8000f78 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	; 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e1f3      	b.n	8002496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ae:	4b51      	ldr	r3, [pc, #324]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0xe8>
 80020ba:	e000      	b.n	80020be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d063      	beq.n	8002192 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ca:	4b4a      	ldr	r3, [pc, #296]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00b      	beq.n	80020ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020d6:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d11c      	bne.n	800211c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020e2:	4b44      	ldr	r3, [pc, #272]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d116      	bne.n	800211c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ee:	4b41      	ldr	r3, [pc, #260]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d005      	beq.n	8002106 <HAL_RCC_OscConfig+0x152>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d001      	beq.n	8002106 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e1c7      	b.n	8002496 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002106:	4b3b      	ldr	r3, [pc, #236]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4937      	ldr	r1, [pc, #220]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211a:	e03a      	b.n	8002192 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d020      	beq.n	8002166 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002124:	4b34      	ldr	r3, [pc, #208]	; (80021f8 <HAL_RCC_OscConfig+0x244>)
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212a:	f7fe ff25 	bl	8000f78 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002132:	f7fe ff21 	bl	8000f78 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e1a8      	b.n	8002496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002144:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002150:	4b28      	ldr	r3, [pc, #160]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4925      	ldr	r1, [pc, #148]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002160:	4313      	orrs	r3, r2
 8002162:	600b      	str	r3, [r1, #0]
 8002164:	e015      	b.n	8002192 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002166:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_RCC_OscConfig+0x244>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7fe ff04 	bl	8000f78 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002174:	f7fe ff00 	bl	8000f78 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e187      	b.n	8002496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002186:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d036      	beq.n	800220c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d016      	beq.n	80021d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <HAL_RCC_OscConfig+0x248>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ac:	f7fe fee4 	bl	8000f78 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b4:	f7fe fee0 	bl	8000f78 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e167      	b.n	8002496 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_RCC_OscConfig+0x240>)
 80021c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x200>
 80021d2:	e01b      	b.n	800220c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d4:	4b09      	ldr	r3, [pc, #36]	; (80021fc <HAL_RCC_OscConfig+0x248>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021da:	f7fe fecd 	bl	8000f78 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e0:	e00e      	b.n	8002200 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e2:	f7fe fec9 	bl	8000f78 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d907      	bls.n	8002200 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e150      	b.n	8002496 <HAL_RCC_OscConfig+0x4e2>
 80021f4:	40023800 	.word	0x40023800
 80021f8:	42470000 	.word	0x42470000
 80021fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002200:	4b88      	ldr	r3, [pc, #544]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 8002202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1ea      	bne.n	80021e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 8097 	beq.w	8002348 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221e:	4b81      	ldr	r3, [pc, #516]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10f      	bne.n	800224a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	4b7d      	ldr	r3, [pc, #500]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	4a7c      	ldr	r2, [pc, #496]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 8002234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002238:	6413      	str	r3, [r2, #64]	; 0x40
 800223a:	4b7a      	ldr	r3, [pc, #488]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002246:	2301      	movs	r3, #1
 8002248:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224a:	4b77      	ldr	r3, [pc, #476]	; (8002428 <HAL_RCC_OscConfig+0x474>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d118      	bne.n	8002288 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002256:	4b74      	ldr	r3, [pc, #464]	; (8002428 <HAL_RCC_OscConfig+0x474>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a73      	ldr	r2, [pc, #460]	; (8002428 <HAL_RCC_OscConfig+0x474>)
 800225c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002262:	f7fe fe89 	bl	8000f78 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226a:	f7fe fe85 	bl	8000f78 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e10c      	b.n	8002496 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227c:	4b6a      	ldr	r3, [pc, #424]	; (8002428 <HAL_RCC_OscConfig+0x474>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d106      	bne.n	800229e <HAL_RCC_OscConfig+0x2ea>
 8002290:	4b64      	ldr	r3, [pc, #400]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002294:	4a63      	ldr	r2, [pc, #396]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6713      	str	r3, [r2, #112]	; 0x70
 800229c:	e01c      	b.n	80022d8 <HAL_RCC_OscConfig+0x324>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b05      	cmp	r3, #5
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x30c>
 80022a6:	4b5f      	ldr	r3, [pc, #380]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 80022a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022aa:	4a5e      	ldr	r2, [pc, #376]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 80022ac:	f043 0304 	orr.w	r3, r3, #4
 80022b0:	6713      	str	r3, [r2, #112]	; 0x70
 80022b2:	4b5c      	ldr	r3, [pc, #368]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	4a5b      	ldr	r2, [pc, #364]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6713      	str	r3, [r2, #112]	; 0x70
 80022be:	e00b      	b.n	80022d8 <HAL_RCC_OscConfig+0x324>
 80022c0:	4b58      	ldr	r3, [pc, #352]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 80022c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c4:	4a57      	ldr	r2, [pc, #348]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 80022c6:	f023 0301 	bic.w	r3, r3, #1
 80022ca:	6713      	str	r3, [r2, #112]	; 0x70
 80022cc:	4b55      	ldr	r3, [pc, #340]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 80022ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d0:	4a54      	ldr	r2, [pc, #336]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 80022d2:	f023 0304 	bic.w	r3, r3, #4
 80022d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d015      	beq.n	800230c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e0:	f7fe fe4a 	bl	8000f78 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e8:	f7fe fe46 	bl	8000f78 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e0cb      	b.n	8002496 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fe:	4b49      	ldr	r3, [pc, #292]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0ee      	beq.n	80022e8 <HAL_RCC_OscConfig+0x334>
 800230a:	e014      	b.n	8002336 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230c:	f7fe fe34 	bl	8000f78 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002312:	e00a      	b.n	800232a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002314:	f7fe fe30 	bl	8000f78 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e0b5      	b.n	8002496 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232a:	4b3e      	ldr	r3, [pc, #248]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 800232c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1ee      	bne.n	8002314 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002336:	7dfb      	ldrb	r3, [r7, #23]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d105      	bne.n	8002348 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233c:	4b39      	ldr	r3, [pc, #228]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	4a38      	ldr	r2, [pc, #224]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 8002342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002346:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80a1 	beq.w	8002494 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002352:	4b34      	ldr	r3, [pc, #208]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	2b08      	cmp	r3, #8
 800235c:	d05c      	beq.n	8002418 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d141      	bne.n	80023ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002366:	4b31      	ldr	r3, [pc, #196]	; (800242c <HAL_RCC_OscConfig+0x478>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7fe fe04 	bl	8000f78 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002374:	f7fe fe00 	bl	8000f78 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e087      	b.n	8002496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002386:	4b27      	ldr	r3, [pc, #156]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69da      	ldr	r2, [r3, #28]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	019b      	lsls	r3, r3, #6
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	085b      	lsrs	r3, r3, #1
 80023aa:	3b01      	subs	r3, #1
 80023ac:	041b      	lsls	r3, r3, #16
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	061b      	lsls	r3, r3, #24
 80023b6:	491b      	ldr	r1, [pc, #108]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023bc:	4b1b      	ldr	r3, [pc, #108]	; (800242c <HAL_RCC_OscConfig+0x478>)
 80023be:	2201      	movs	r2, #1
 80023c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c2:	f7fe fdd9 	bl	8000f78 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ca:	f7fe fdd5 	bl	8000f78 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e05c      	b.n	8002496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x416>
 80023e8:	e054      	b.n	8002494 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <HAL_RCC_OscConfig+0x478>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fdc2 	bl	8000f78 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f8:	f7fe fdbe 	bl	8000f78 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e045      	b.n	8002496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_RCC_OscConfig+0x470>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x444>
 8002416:	e03d      	b.n	8002494 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d107      	bne.n	8002430 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e038      	b.n	8002496 <HAL_RCC_OscConfig+0x4e2>
 8002424:	40023800 	.word	0x40023800
 8002428:	40007000 	.word	0x40007000
 800242c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_RCC_OscConfig+0x4ec>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d028      	beq.n	8002490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002448:	429a      	cmp	r2, r3
 800244a:	d121      	bne.n	8002490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002456:	429a      	cmp	r2, r3
 8002458:	d11a      	bne.n	8002490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002460:	4013      	ands	r3, r2
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002466:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002468:	4293      	cmp	r3, r2
 800246a:	d111      	bne.n	8002490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002476:	085b      	lsrs	r3, r3, #1
 8002478:	3b01      	subs	r3, #1
 800247a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d107      	bne.n	8002490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800248c:	429a      	cmp	r2, r3
 800248e:	d001      	beq.n	8002494 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800

080024a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0cc      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024b8:	4b68      	ldr	r3, [pc, #416]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d90c      	bls.n	80024e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b65      	ldr	r3, [pc, #404]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b63      	ldr	r3, [pc, #396]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0b8      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d020      	beq.n	800252e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f8:	4b59      	ldr	r3, [pc, #356]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a58      	ldr	r2, [pc, #352]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002502:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002510:	4b53      	ldr	r3, [pc, #332]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4a52      	ldr	r2, [pc, #328]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800251a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800251c:	4b50      	ldr	r3, [pc, #320]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	494d      	ldr	r1, [pc, #308]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d044      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	4b47      	ldr	r3, [pc, #284]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d119      	bne.n	8002582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e07f      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d003      	beq.n	8002562 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800255e:	2b03      	cmp	r3, #3
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002562:	4b3f      	ldr	r3, [pc, #252]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e06f      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002572:	4b3b      	ldr	r3, [pc, #236]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e067      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002582:	4b37      	ldr	r3, [pc, #220]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f023 0203 	bic.w	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4934      	ldr	r1, [pc, #208]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	4313      	orrs	r3, r2
 8002592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002594:	f7fe fcf0 	bl	8000f78 <HAL_GetTick>
 8002598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259c:	f7fe fcec 	bl	8000f78 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e04f      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b2:	4b2b      	ldr	r3, [pc, #172]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 020c 	and.w	r2, r3, #12
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d1eb      	bne.n	800259c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025c4:	4b25      	ldr	r3, [pc, #148]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d20c      	bcs.n	80025ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b22      	ldr	r3, [pc, #136]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d001      	beq.n	80025ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e032      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4916      	ldr	r1, [pc, #88]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002616:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	490e      	ldr	r1, [pc, #56]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800262a:	f000 f821 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 800262e:	4602      	mov	r2, r0
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	490a      	ldr	r1, [pc, #40]	; (8002664 <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	5ccb      	ldrb	r3, [r1, r3]
 800263e:	fa22 f303 	lsr.w	r3, r2, r3
 8002642:	4a09      	ldr	r2, [pc, #36]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_RCC_ClockConfig+0x1c8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe facc 	bl	8000be8 <HAL_InitTick>

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40023c00 	.word	0x40023c00
 8002660:	40023800 	.word	0x40023800
 8002664:	08007364 	.word	0x08007364
 8002668:	20000000 	.word	0x20000000
 800266c:	20000004 	.word	0x20000004

08002670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002674:	b090      	sub	sp, #64	; 0x40
 8002676:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	637b      	str	r3, [r7, #52]	; 0x34
 800267c:	2300      	movs	r3, #0
 800267e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002680:	2300      	movs	r3, #0
 8002682:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002688:	4b59      	ldr	r3, [pc, #356]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b08      	cmp	r3, #8
 8002692:	d00d      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x40>
 8002694:	2b08      	cmp	r3, #8
 8002696:	f200 80a1 	bhi.w	80027dc <HAL_RCC_GetSysClockFreq+0x16c>
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_RCC_GetSysClockFreq+0x34>
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d003      	beq.n	80026aa <HAL_RCC_GetSysClockFreq+0x3a>
 80026a2:	e09b      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026a4:	4b53      	ldr	r3, [pc, #332]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80026a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80026a8:	e09b      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026aa:	4b53      	ldr	r3, [pc, #332]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80026ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026ae:	e098      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026b0:	4b4f      	ldr	r3, [pc, #316]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ba:	4b4d      	ldr	r3, [pc, #308]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d028      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c6:	4b4a      	ldr	r3, [pc, #296]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	099b      	lsrs	r3, r3, #6
 80026cc:	2200      	movs	r2, #0
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	627a      	str	r2, [r7, #36]	; 0x24
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80026d8:	2100      	movs	r1, #0
 80026da:	4b47      	ldr	r3, [pc, #284]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80026dc:	fb03 f201 	mul.w	r2, r3, r1
 80026e0:	2300      	movs	r3, #0
 80026e2:	fb00 f303 	mul.w	r3, r0, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	4a43      	ldr	r2, [pc, #268]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80026ea:	fba0 1202 	umull	r1, r2, r0, r2
 80026ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026f0:	460a      	mov	r2, r1
 80026f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80026f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f6:	4413      	add	r3, r2
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fc:	2200      	movs	r2, #0
 80026fe:	61bb      	str	r3, [r7, #24]
 8002700:	61fa      	str	r2, [r7, #28]
 8002702:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002706:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800270a:	f7fd fdc1 	bl	8000290 <__aeabi_uldivmod>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4613      	mov	r3, r2
 8002714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002716:	e053      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002718:	4b35      	ldr	r3, [pc, #212]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	099b      	lsrs	r3, r3, #6
 800271e:	2200      	movs	r2, #0
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	617a      	str	r2, [r7, #20]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800272a:	f04f 0b00 	mov.w	fp, #0
 800272e:	4652      	mov	r2, sl
 8002730:	465b      	mov	r3, fp
 8002732:	f04f 0000 	mov.w	r0, #0
 8002736:	f04f 0100 	mov.w	r1, #0
 800273a:	0159      	lsls	r1, r3, #5
 800273c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002740:	0150      	lsls	r0, r2, #5
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	ebb2 080a 	subs.w	r8, r2, sl
 800274a:	eb63 090b 	sbc.w	r9, r3, fp
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800275a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800275e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002762:	ebb2 0408 	subs.w	r4, r2, r8
 8002766:	eb63 0509 	sbc.w	r5, r3, r9
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	00eb      	lsls	r3, r5, #3
 8002774:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002778:	00e2      	lsls	r2, r4, #3
 800277a:	4614      	mov	r4, r2
 800277c:	461d      	mov	r5, r3
 800277e:	eb14 030a 	adds.w	r3, r4, sl
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	eb45 030b 	adc.w	r3, r5, fp
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002796:	4629      	mov	r1, r5
 8002798:	028b      	lsls	r3, r1, #10
 800279a:	4621      	mov	r1, r4
 800279c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027a0:	4621      	mov	r1, r4
 80027a2:	028a      	lsls	r2, r1, #10
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027aa:	2200      	movs	r2, #0
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	60fa      	str	r2, [r7, #12]
 80027b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027b4:	f7fd fd6c 	bl	8000290 <__aeabi_uldivmod>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4613      	mov	r3, r2
 80027be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	0c1b      	lsrs	r3, r3, #16
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	3301      	adds	r3, #1
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80027d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027da:	e002      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80027de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3740      	adds	r7, #64	; 0x40
 80027e8:	46bd      	mov	sp, r7
 80027ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	00f42400 	.word	0x00f42400
 80027f8:	017d7840 	.word	0x017d7840

080027fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <HAL_RCC_GetHCLKFreq+0x14>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000000 	.word	0x20000000

08002814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002818:	f7ff fff0 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 800281c:	4602      	mov	r2, r0
 800281e:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	0a9b      	lsrs	r3, r3, #10
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4903      	ldr	r1, [pc, #12]	; (8002838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800282a:	5ccb      	ldrb	r3, [r1, r3]
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40023800 	.word	0x40023800
 8002838:	08007374 	.word	0x08007374

0800283c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002840:	f7ff ffdc 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	0b5b      	lsrs	r3, r3, #13
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	4903      	ldr	r1, [pc, #12]	; (8002860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40023800 	.word	0x40023800
 8002860:	08007374 	.word	0x08007374

08002864 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	220f      	movs	r2, #15
 8002872:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002874:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0203 	and.w	r2, r3, #3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <HAL_RCC_GetClockConfig+0x5c>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_RCC_GetClockConfig+0x5c>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	08db      	lsrs	r3, r3, #3
 800289e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028a6:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <HAL_RCC_GetClockConfig+0x60>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0207 	and.w	r2, r3, #7
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	601a      	str	r2, [r3, #0]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40023c00 	.word	0x40023c00

080028c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e041      	b.n	800295e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f839 	bl	8002966 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3304      	adds	r3, #4
 8002904:	4619      	mov	r1, r3
 8002906:	4610      	mov	r0, r2
 8002908:	f000 f9ca 	bl	8002ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d001      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e044      	b.n	8002a1e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1e      	ldr	r2, [pc, #120]	; (8002a2c <HAL_TIM_Base_Start_IT+0xb0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d018      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0x6c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029be:	d013      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0x6c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a1a      	ldr	r2, [pc, #104]	; (8002a30 <HAL_TIM_Base_Start_IT+0xb4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00e      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0x6c>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a19      	ldr	r2, [pc, #100]	; (8002a34 <HAL_TIM_Base_Start_IT+0xb8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d009      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0x6c>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a17      	ldr	r2, [pc, #92]	; (8002a38 <HAL_TIM_Base_Start_IT+0xbc>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d004      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0x6c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a16      	ldr	r2, [pc, #88]	; (8002a3c <HAL_TIM_Base_Start_IT+0xc0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d111      	bne.n	8002a0c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d010      	beq.n	8002a1c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0a:	e007      	b.n	8002a1c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40010000 	.word	0x40010000
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40000800 	.word	0x40000800
 8002a38:	40000c00 	.word	0x40000c00
 8002a3c:	40014000 	.word	0x40014000

08002a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d122      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d11b      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0202 	mvn.w	r2, #2
 8002a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f8ee 	bl	8002c64 <HAL_TIM_IC_CaptureCallback>
 8002a88:	e005      	b.n	8002a96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f8e0 	bl	8002c50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f8f1 	bl	8002c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d122      	bne.n	8002af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d11b      	bne.n	8002af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0204 	mvn.w	r2, #4
 8002ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f8c4 	bl	8002c64 <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f8b6 	bl	8002c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f8c7 	bl	8002c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d122      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d11b      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0208 	mvn.w	r2, #8
 8002b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2204      	movs	r2, #4
 8002b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f89a 	bl	8002c64 <HAL_TIM_IC_CaptureCallback>
 8002b30:	e005      	b.n	8002b3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f88c 	bl	8002c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f89d 	bl	8002c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	2b10      	cmp	r3, #16
 8002b50:	d122      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	2b10      	cmp	r3, #16
 8002b5e:	d11b      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0210 	mvn.w	r2, #16
 8002b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2208      	movs	r2, #8
 8002b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f870 	bl	8002c64 <HAL_TIM_IC_CaptureCallback>
 8002b84:	e005      	b.n	8002b92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f862 	bl	8002c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f873 	bl	8002c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d107      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0201 	mvn.w	r2, #1
 8002bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fd ffce 	bl	8000b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bce:	2b80      	cmp	r3, #128	; 0x80
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bdc:	2b80      	cmp	r3, #128	; 0x80
 8002bde:	d107      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f8e2 	bl	8002db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	2b40      	cmp	r3, #64	; 0x40
 8002bfc:	d10e      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c08:	2b40      	cmp	r3, #64	; 0x40
 8002c0a:	d107      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f838 	bl	8002c8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	d10e      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d107      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0220 	mvn.w	r2, #32
 8002c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f8ac 	bl	8002da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a34      	ldr	r2, [pc, #208]	; (8002d84 <TIM_Base_SetConfig+0xe4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00f      	beq.n	8002cd8 <TIM_Base_SetConfig+0x38>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cbe:	d00b      	beq.n	8002cd8 <TIM_Base_SetConfig+0x38>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a31      	ldr	r2, [pc, #196]	; (8002d88 <TIM_Base_SetConfig+0xe8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d007      	beq.n	8002cd8 <TIM_Base_SetConfig+0x38>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a30      	ldr	r2, [pc, #192]	; (8002d8c <TIM_Base_SetConfig+0xec>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <TIM_Base_SetConfig+0x38>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a2f      	ldr	r2, [pc, #188]	; (8002d90 <TIM_Base_SetConfig+0xf0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d108      	bne.n	8002cea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a25      	ldr	r2, [pc, #148]	; (8002d84 <TIM_Base_SetConfig+0xe4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01b      	beq.n	8002d2a <TIM_Base_SetConfig+0x8a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf8:	d017      	beq.n	8002d2a <TIM_Base_SetConfig+0x8a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a22      	ldr	r2, [pc, #136]	; (8002d88 <TIM_Base_SetConfig+0xe8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d013      	beq.n	8002d2a <TIM_Base_SetConfig+0x8a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a21      	ldr	r2, [pc, #132]	; (8002d8c <TIM_Base_SetConfig+0xec>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00f      	beq.n	8002d2a <TIM_Base_SetConfig+0x8a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a20      	ldr	r2, [pc, #128]	; (8002d90 <TIM_Base_SetConfig+0xf0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00b      	beq.n	8002d2a <TIM_Base_SetConfig+0x8a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a1f      	ldr	r2, [pc, #124]	; (8002d94 <TIM_Base_SetConfig+0xf4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d007      	beq.n	8002d2a <TIM_Base_SetConfig+0x8a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a1e      	ldr	r2, [pc, #120]	; (8002d98 <TIM_Base_SetConfig+0xf8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d003      	beq.n	8002d2a <TIM_Base_SetConfig+0x8a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a1d      	ldr	r2, [pc, #116]	; (8002d9c <TIM_Base_SetConfig+0xfc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d108      	bne.n	8002d3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <TIM_Base_SetConfig+0xe4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d103      	bne.n	8002d70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	615a      	str	r2, [r3, #20]
}
 8002d76:	bf00      	nop
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40010000 	.word	0x40010000
 8002d88:	40000400 	.word	0x40000400
 8002d8c:	40000800 	.word	0x40000800
 8002d90:	40000c00 	.word	0x40000c00
 8002d94:	40014000 	.word	0x40014000
 8002d98:	40014400 	.word	0x40014400
 8002d9c:	40014800 	.word	0x40014800

08002da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e03f      	b.n	8002e5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fe f812 	bl	8000e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2224      	movs	r2, #36	; 0x24
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fd7b 	bl	8003908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695a      	ldr	r2, [r3, #20]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b08a      	sub	sp, #40	; 0x28
 8002e66:	af02      	add	r7, sp, #8
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	603b      	str	r3, [r7, #0]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d17c      	bne.n	8002f7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <HAL_UART_Transmit+0x2c>
 8002e88:	88fb      	ldrh	r3, [r7, #6]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e075      	b.n	8002f7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_UART_Transmit+0x3e>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e06e      	b.n	8002f7e <HAL_UART_Transmit+0x11c>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2221      	movs	r2, #33	; 0x21
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eb6:	f7fe f85f 	bl	8000f78 <HAL_GetTick>
 8002eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	88fa      	ldrh	r2, [r7, #6]
 8002ec0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	88fa      	ldrh	r2, [r7, #6]
 8002ec6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed0:	d108      	bne.n	8002ee4 <HAL_UART_Transmit+0x82>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d104      	bne.n	8002ee4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	e003      	b.n	8002eec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ef4:	e02a      	b.n	8002f4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2200      	movs	r2, #0
 8002efe:	2180      	movs	r1, #128	; 0x80
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 faf9 	bl	80034f8 <UART_WaitOnFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e036      	b.n	8002f7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10b      	bne.n	8002f2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	3302      	adds	r3, #2
 8002f2a:	61bb      	str	r3, [r7, #24]
 8002f2c:	e007      	b.n	8002f3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	781a      	ldrb	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1cf      	bne.n	8002ef6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2140      	movs	r1, #64	; 0x40
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fac9 	bl	80034f8 <UART_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e006      	b.n	8002f7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	e000      	b.n	8002f7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f7c:	2302      	movs	r3, #2
  }
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3720      	adds	r7, #32
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b0ba      	sub	sp, #232	; 0xe8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10f      	bne.n	8002fee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_UART_IRQHandler+0x66>
 8002fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fbd3 	bl	8003792 <UART_Receive_IT>
      return;
 8002fec:	e256      	b.n	800349c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 80de 	beq.w	80031b4 <HAL_UART_IRQHandler+0x22c>
 8002ff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003008:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 80d1 	beq.w	80031b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <HAL_UART_IRQHandler+0xae>
 800301e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f043 0201 	orr.w	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00b      	beq.n	800305a <HAL_UART_IRQHandler+0xd2>
 8003042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f043 0202 	orr.w	r2, r3, #2
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800305a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00b      	beq.n	800307e <HAL_UART_IRQHandler+0xf6>
 8003066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f043 0204 	orr.w	r2, r3, #4
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800307e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d011      	beq.n	80030ae <HAL_UART_IRQHandler+0x126>
 800308a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b00      	cmp	r3, #0
 8003094:	d105      	bne.n	80030a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f043 0208 	orr.w	r2, r3, #8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 81ed 	beq.w	8003492 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_UART_IRQHandler+0x14e>
 80030c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fb5e 	bl	8003792 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e0:	2b40      	cmp	r3, #64	; 0x40
 80030e2:	bf0c      	ite	eq
 80030e4:	2301      	moveq	r3, #1
 80030e6:	2300      	movne	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d103      	bne.n	8003102 <HAL_UART_IRQHandler+0x17a>
 80030fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d04f      	beq.n	80031a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fa66 	bl	80035d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003112:	2b40      	cmp	r3, #64	; 0x40
 8003114:	d141      	bne.n	800319a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3314      	adds	r3, #20
 800311c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003120:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003124:	e853 3f00 	ldrex	r3, [r3]
 8003128:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800312c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003134:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3314      	adds	r3, #20
 800313e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003142:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003146:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800314e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003152:	e841 2300 	strex	r3, r2, [r1]
 8003156:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800315a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1d9      	bne.n	8003116 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003166:	2b00      	cmp	r3, #0
 8003168:	d013      	beq.n	8003192 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316e:	4a7d      	ldr	r2, [pc, #500]	; (8003364 <HAL_UART_IRQHandler+0x3dc>)
 8003170:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003176:	4618      	mov	r0, r3
 8003178:	f7fe fd42 	bl	8001c00 <HAL_DMA_Abort_IT>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d016      	beq.n	80031b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800318c:	4610      	mov	r0, r2
 800318e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003190:	e00e      	b.n	80031b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f99a 	bl	80034cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003198:	e00a      	b.n	80031b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f996 	bl	80034cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a0:	e006      	b.n	80031b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f992 	bl	80034cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80031ae:	e170      	b.n	8003492 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b0:	bf00      	nop
    return;
 80031b2:	e16e      	b.n	8003492 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	f040 814a 	bne.w	8003452 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8143 	beq.w	8003452 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 813c 	beq.w	8003452 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031da:	2300      	movs	r3, #0
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fa:	2b40      	cmp	r3, #64	; 0x40
 80031fc:	f040 80b4 	bne.w	8003368 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800320c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 8140 	beq.w	8003496 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800321a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800321e:	429a      	cmp	r2, r3
 8003220:	f080 8139 	bcs.w	8003496 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800322a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003236:	f000 8088 	beq.w	800334a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	330c      	adds	r3, #12
 8003240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003244:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003248:	e853 3f00 	ldrex	r3, [r3]
 800324c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003250:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003258:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	330c      	adds	r3, #12
 8003262:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003266:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800326a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003272:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003276:	e841 2300 	strex	r3, r2, [r1]
 800327a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800327e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1d9      	bne.n	800323a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3314      	adds	r3, #20
 800328c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003290:	e853 3f00 	ldrex	r3, [r3]
 8003294:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003298:	f023 0301 	bic.w	r3, r3, #1
 800329c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3314      	adds	r3, #20
 80032a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e1      	bne.n	8003286 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3314      	adds	r3, #20
 80032c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032cc:	e853 3f00 	ldrex	r3, [r3]
 80032d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3314      	adds	r3, #20
 80032e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032ee:	e841 2300 	strex	r3, r2, [r1]
 80032f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1e3      	bne.n	80032c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	330c      	adds	r3, #12
 800330e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003312:	e853 3f00 	ldrex	r3, [r3]
 8003316:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800331a:	f023 0310 	bic.w	r3, r3, #16
 800331e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	330c      	adds	r3, #12
 8003328:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800332c:	65ba      	str	r2, [r7, #88]	; 0x58
 800332e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003330:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003332:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003334:	e841 2300 	strex	r3, r2, [r1]
 8003338:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800333a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1e3      	bne.n	8003308 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	4618      	mov	r0, r3
 8003346:	f7fe fbeb 	bl	8001b20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003352:	b29b      	uxth	r3, r3
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	b29b      	uxth	r3, r3
 8003358:	4619      	mov	r1, r3
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f8c0 	bl	80034e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003360:	e099      	b.n	8003496 <HAL_UART_IRQHandler+0x50e>
 8003362:	bf00      	nop
 8003364:	0800369b 	.word	0x0800369b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003370:	b29b      	uxth	r3, r3
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 808b 	beq.w	800349a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003384:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 8086 	beq.w	800349a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	330c      	adds	r3, #12
 8003394:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800339e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	330c      	adds	r3, #12
 80033ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80033b2:	647a      	str	r2, [r7, #68]	; 0x44
 80033b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033ba:	e841 2300 	strex	r3, r2, [r1]
 80033be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1e3      	bne.n	800338e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3314      	adds	r3, #20
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	e853 3f00 	ldrex	r3, [r3]
 80033d4:	623b      	str	r3, [r7, #32]
   return(result);
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	f023 0301 	bic.w	r3, r3, #1
 80033dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3314      	adds	r3, #20
 80033e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033ea:	633a      	str	r2, [r7, #48]	; 0x30
 80033ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033f2:	e841 2300 	strex	r3, r2, [r1]
 80033f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1e3      	bne.n	80033c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	330c      	adds	r3, #12
 8003412:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	e853 3f00 	ldrex	r3, [r3]
 800341a:	60fb      	str	r3, [r7, #12]
   return(result);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 0310 	bic.w	r3, r3, #16
 8003422:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	330c      	adds	r3, #12
 800342c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003430:	61fa      	str	r2, [r7, #28]
 8003432:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003434:	69b9      	ldr	r1, [r7, #24]
 8003436:	69fa      	ldr	r2, [r7, #28]
 8003438:	e841 2300 	strex	r3, r2, [r1]
 800343c:	617b      	str	r3, [r7, #20]
   return(result);
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e3      	bne.n	800340c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003444:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003448:	4619      	mov	r1, r3
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f848 	bl	80034e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003450:	e023      	b.n	800349a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345a:	2b00      	cmp	r3, #0
 800345c:	d009      	beq.n	8003472 <HAL_UART_IRQHandler+0x4ea>
 800345e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f929 	bl	80036c2 <UART_Transmit_IT>
    return;
 8003470:	e014      	b.n	800349c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00e      	beq.n	800349c <HAL_UART_IRQHandler+0x514>
 800347e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d008      	beq.n	800349c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f969 	bl	8003762 <UART_EndTransmit_IT>
    return;
 8003490:	e004      	b.n	800349c <HAL_UART_IRQHandler+0x514>
    return;
 8003492:	bf00      	nop
 8003494:	e002      	b.n	800349c <HAL_UART_IRQHandler+0x514>
      return;
 8003496:	bf00      	nop
 8003498:	e000      	b.n	800349c <HAL_UART_IRQHandler+0x514>
      return;
 800349a:	bf00      	nop
  }
}
 800349c:	37e8      	adds	r7, #232	; 0xe8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop

080034a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b090      	sub	sp, #64	; 0x40
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003508:	e050      	b.n	80035ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d04c      	beq.n	80035ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003514:	2b00      	cmp	r3, #0
 8003516:	d007      	beq.n	8003528 <UART_WaitOnFlagUntilTimeout+0x30>
 8003518:	f7fd fd2e 	bl	8000f78 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003524:	429a      	cmp	r2, r3
 8003526:	d241      	bcs.n	80035ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	330c      	adds	r3, #12
 800352e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	e853 3f00 	ldrex	r3, [r3]
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800353e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	330c      	adds	r3, #12
 8003546:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003548:	637a      	str	r2, [r7, #52]	; 0x34
 800354a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800354e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003550:	e841 2300 	strex	r3, r2, [r1]
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e5      	bne.n	8003528 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3314      	adds	r3, #20
 8003562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	e853 3f00 	ldrex	r3, [r3]
 800356a:	613b      	str	r3, [r7, #16]
   return(result);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f023 0301 	bic.w	r3, r3, #1
 8003572:	63bb      	str	r3, [r7, #56]	; 0x38
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3314      	adds	r3, #20
 800357a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800357c:	623a      	str	r2, [r7, #32]
 800357e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003580:	69f9      	ldr	r1, [r7, #28]
 8003582:	6a3a      	ldr	r2, [r7, #32]
 8003584:	e841 2300 	strex	r3, r2, [r1]
 8003588:	61bb      	str	r3, [r7, #24]
   return(result);
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1e5      	bne.n	800355c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e00f      	b.n	80035cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	4013      	ands	r3, r2
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d09f      	beq.n	800350a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3740      	adds	r7, #64	; 0x40
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b095      	sub	sp, #84	; 0x54
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	330c      	adds	r3, #12
 80035e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e6:	e853 3f00 	ldrex	r3, [r3]
 80035ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	330c      	adds	r3, #12
 80035fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035fc:	643a      	str	r2, [r7, #64]	; 0x40
 80035fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003600:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003602:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003604:	e841 2300 	strex	r3, r2, [r1]
 8003608:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800360a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1e5      	bne.n	80035dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3314      	adds	r3, #20
 8003616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	e853 3f00 	ldrex	r3, [r3]
 800361e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	64bb      	str	r3, [r7, #72]	; 0x48
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3314      	adds	r3, #20
 800362e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003630:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003638:	e841 2300 	strex	r3, r2, [r1]
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e5      	bne.n	8003610 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	2b01      	cmp	r3, #1
 800364a:	d119      	bne.n	8003680 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	330c      	adds	r3, #12
 8003652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	60bb      	str	r3, [r7, #8]
   return(result);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f023 0310 	bic.w	r3, r3, #16
 8003662:	647b      	str	r3, [r7, #68]	; 0x44
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	330c      	adds	r3, #12
 800366a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800366c:	61ba      	str	r2, [r7, #24]
 800366e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	6979      	ldr	r1, [r7, #20]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	613b      	str	r3, [r7, #16]
   return(result);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e5      	bne.n	800364c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800368e:	bf00      	nop
 8003690:	3754      	adds	r7, #84	; 0x54
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f7ff ff09 	bl	80034cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b085      	sub	sp, #20
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b21      	cmp	r3, #33	; 0x21
 80036d4:	d13e      	bne.n	8003754 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036de:	d114      	bne.n	800370a <UART_Transmit_IT+0x48>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d110      	bne.n	800370a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	1c9a      	adds	r2, r3, #2
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	621a      	str	r2, [r3, #32]
 8003708:	e008      	b.n	800371c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	1c59      	adds	r1, r3, #1
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6211      	str	r1, [r2, #32]
 8003714:	781a      	ldrb	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29b      	uxth	r3, r3
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	4619      	mov	r1, r3
 800372a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10f      	bne.n	8003750 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800373e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800374e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	e000      	b.n	8003756 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003754:	2302      	movs	r3, #2
  }
}
 8003756:	4618      	mov	r0, r3
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003778:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff fe8e 	bl	80034a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b08c      	sub	sp, #48	; 0x30
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b22      	cmp	r3, #34	; 0x22
 80037a4:	f040 80ab 	bne.w	80038fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b0:	d117      	bne.n	80037e2 <UART_Receive_IT+0x50>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d113      	bne.n	80037e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	1c9a      	adds	r2, r3, #2
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	629a      	str	r2, [r3, #40]	; 0x28
 80037e0:	e026      	b.n	8003830 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f4:	d007      	beq.n	8003806 <UART_Receive_IT+0x74>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10a      	bne.n	8003814 <UART_Receive_IT+0x82>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	b2da      	uxtb	r2, r3
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	701a      	strb	r2, [r3, #0]
 8003812:	e008      	b.n	8003826 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003820:	b2da      	uxtb	r2, r3
 8003822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003824:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29b      	uxth	r3, r3
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	4619      	mov	r1, r3
 800383e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003840:	2b00      	cmp	r3, #0
 8003842:	d15a      	bne.n	80038fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0220 	bic.w	r2, r2, #32
 8003852:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003862:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	2b01      	cmp	r3, #1
 8003882:	d135      	bne.n	80038f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	330c      	adds	r3, #12
 8003890:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	e853 3f00 	ldrex	r3, [r3]
 8003898:	613b      	str	r3, [r7, #16]
   return(result);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f023 0310 	bic.w	r3, r3, #16
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	330c      	adds	r3, #12
 80038a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038aa:	623a      	str	r2, [r7, #32]
 80038ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ae:	69f9      	ldr	r1, [r7, #28]
 80038b0:	6a3a      	ldr	r2, [r7, #32]
 80038b2:	e841 2300 	strex	r3, r2, [r1]
 80038b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1e5      	bne.n	800388a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b10      	cmp	r3, #16
 80038ca:	d10a      	bne.n	80038e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038e6:	4619      	mov	r1, r3
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff fdf9 	bl	80034e0 <HAL_UARTEx_RxEventCallback>
 80038ee:	e002      	b.n	80038f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff fde1 	bl	80034b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	e002      	b.n	8003900 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e000      	b.n	8003900 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80038fe:	2302      	movs	r3, #2
  }
}
 8003900:	4618      	mov	r0, r3
 8003902:	3730      	adds	r7, #48	; 0x30
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800390c:	b0c0      	sub	sp, #256	; 0x100
 800390e:	af00      	add	r7, sp, #0
 8003910:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003924:	68d9      	ldr	r1, [r3, #12]
 8003926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	ea40 0301 	orr.w	r3, r0, r1
 8003930:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	431a      	orrs	r2, r3
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	431a      	orrs	r2, r3
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003960:	f021 010c 	bic.w	r1, r1, #12
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800396e:	430b      	orrs	r3, r1
 8003970:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800397e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003982:	6999      	ldr	r1, [r3, #24]
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	ea40 0301 	orr.w	r3, r0, r1
 800398e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4b8f      	ldr	r3, [pc, #572]	; (8003bd4 <UART_SetConfig+0x2cc>)
 8003998:	429a      	cmp	r2, r3
 800399a:	d005      	beq.n	80039a8 <UART_SetConfig+0xa0>
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	4b8d      	ldr	r3, [pc, #564]	; (8003bd8 <UART_SetConfig+0x2d0>)
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d104      	bne.n	80039b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039a8:	f7fe ff48 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 80039ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039b0:	e003      	b.n	80039ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039b2:	f7fe ff2f 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 80039b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c4:	f040 810c 	bne.w	8003be0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039cc:	2200      	movs	r2, #0
 80039ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039da:	4622      	mov	r2, r4
 80039dc:	462b      	mov	r3, r5
 80039de:	1891      	adds	r1, r2, r2
 80039e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80039e2:	415b      	adcs	r3, r3
 80039e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039ea:	4621      	mov	r1, r4
 80039ec:	eb12 0801 	adds.w	r8, r2, r1
 80039f0:	4629      	mov	r1, r5
 80039f2:	eb43 0901 	adc.w	r9, r3, r1
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a0a:	4690      	mov	r8, r2
 8003a0c:	4699      	mov	r9, r3
 8003a0e:	4623      	mov	r3, r4
 8003a10:	eb18 0303 	adds.w	r3, r8, r3
 8003a14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a18:	462b      	mov	r3, r5
 8003a1a:	eb49 0303 	adc.w	r3, r9, r3
 8003a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a36:	460b      	mov	r3, r1
 8003a38:	18db      	adds	r3, r3, r3
 8003a3a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	eb42 0303 	adc.w	r3, r2, r3
 8003a42:	657b      	str	r3, [r7, #84]	; 0x54
 8003a44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a4c:	f7fc fc20 	bl	8000290 <__aeabi_uldivmod>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4b61      	ldr	r3, [pc, #388]	; (8003bdc <UART_SetConfig+0x2d4>)
 8003a56:	fba3 2302 	umull	r2, r3, r3, r2
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	011c      	lsls	r4, r3, #4
 8003a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a62:	2200      	movs	r2, #0
 8003a64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a70:	4642      	mov	r2, r8
 8003a72:	464b      	mov	r3, r9
 8003a74:	1891      	adds	r1, r2, r2
 8003a76:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a78:	415b      	adcs	r3, r3
 8003a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a80:	4641      	mov	r1, r8
 8003a82:	eb12 0a01 	adds.w	sl, r2, r1
 8003a86:	4649      	mov	r1, r9
 8003a88:	eb43 0b01 	adc.w	fp, r3, r1
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aa0:	4692      	mov	sl, r2
 8003aa2:	469b      	mov	fp, r3
 8003aa4:	4643      	mov	r3, r8
 8003aa6:	eb1a 0303 	adds.w	r3, sl, r3
 8003aaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003aae:	464b      	mov	r3, r9
 8003ab0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ab4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ac4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ac8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003acc:	460b      	mov	r3, r1
 8003ace:	18db      	adds	r3, r3, r3
 8003ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	eb42 0303 	adc.w	r3, r2, r3
 8003ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8003ada:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ade:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ae2:	f7fc fbd5 	bl	8000290 <__aeabi_uldivmod>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4611      	mov	r1, r2
 8003aec:	4b3b      	ldr	r3, [pc, #236]	; (8003bdc <UART_SetConfig+0x2d4>)
 8003aee:	fba3 2301 	umull	r2, r3, r3, r1
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	2264      	movs	r2, #100	; 0x64
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	1acb      	subs	r3, r1, r3
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b02:	4b36      	ldr	r3, [pc, #216]	; (8003bdc <UART_SetConfig+0x2d4>)
 8003b04:	fba3 2302 	umull	r2, r3, r3, r2
 8003b08:	095b      	lsrs	r3, r3, #5
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b10:	441c      	add	r4, r3
 8003b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b24:	4642      	mov	r2, r8
 8003b26:	464b      	mov	r3, r9
 8003b28:	1891      	adds	r1, r2, r2
 8003b2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b2c:	415b      	adcs	r3, r3
 8003b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b34:	4641      	mov	r1, r8
 8003b36:	1851      	adds	r1, r2, r1
 8003b38:	6339      	str	r1, [r7, #48]	; 0x30
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	414b      	adcs	r3, r1
 8003b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b4c:	4659      	mov	r1, fp
 8003b4e:	00cb      	lsls	r3, r1, #3
 8003b50:	4651      	mov	r1, sl
 8003b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b56:	4651      	mov	r1, sl
 8003b58:	00ca      	lsls	r2, r1, #3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4603      	mov	r3, r0
 8003b60:	4642      	mov	r2, r8
 8003b62:	189b      	adds	r3, r3, r2
 8003b64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b68:	464b      	mov	r3, r9
 8003b6a:	460a      	mov	r2, r1
 8003b6c:	eb42 0303 	adc.w	r3, r2, r3
 8003b70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b88:	460b      	mov	r3, r1
 8003b8a:	18db      	adds	r3, r3, r3
 8003b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b8e:	4613      	mov	r3, r2
 8003b90:	eb42 0303 	adc.w	r3, r2, r3
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b9e:	f7fc fb77 	bl	8000290 <__aeabi_uldivmod>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <UART_SetConfig+0x2d4>)
 8003ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	2164      	movs	r1, #100	; 0x64
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	3332      	adds	r3, #50	; 0x32
 8003bba:	4a08      	ldr	r2, [pc, #32]	; (8003bdc <UART_SetConfig+0x2d4>)
 8003bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	f003 0207 	and.w	r2, r3, #7
 8003bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4422      	add	r2, r4
 8003bce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bd0:	e105      	b.n	8003dde <UART_SetConfig+0x4d6>
 8003bd2:	bf00      	nop
 8003bd4:	40011000 	.word	0x40011000
 8003bd8:	40011400 	.word	0x40011400
 8003bdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003be4:	2200      	movs	r2, #0
 8003be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bf2:	4642      	mov	r2, r8
 8003bf4:	464b      	mov	r3, r9
 8003bf6:	1891      	adds	r1, r2, r2
 8003bf8:	6239      	str	r1, [r7, #32]
 8003bfa:	415b      	adcs	r3, r3
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c02:	4641      	mov	r1, r8
 8003c04:	1854      	adds	r4, r2, r1
 8003c06:	4649      	mov	r1, r9
 8003c08:	eb43 0501 	adc.w	r5, r3, r1
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	00eb      	lsls	r3, r5, #3
 8003c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c1a:	00e2      	lsls	r2, r4, #3
 8003c1c:	4614      	mov	r4, r2
 8003c1e:	461d      	mov	r5, r3
 8003c20:	4643      	mov	r3, r8
 8003c22:	18e3      	adds	r3, r4, r3
 8003c24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c28:	464b      	mov	r3, r9
 8003c2a:	eb45 0303 	adc.w	r3, r5, r3
 8003c2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c4e:	4629      	mov	r1, r5
 8003c50:	008b      	lsls	r3, r1, #2
 8003c52:	4621      	mov	r1, r4
 8003c54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c58:	4621      	mov	r1, r4
 8003c5a:	008a      	lsls	r2, r1, #2
 8003c5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c60:	f7fc fb16 	bl	8000290 <__aeabi_uldivmod>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4b60      	ldr	r3, [pc, #384]	; (8003dec <UART_SetConfig+0x4e4>)
 8003c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	011c      	lsls	r4, r3, #4
 8003c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c76:	2200      	movs	r2, #0
 8003c78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c84:	4642      	mov	r2, r8
 8003c86:	464b      	mov	r3, r9
 8003c88:	1891      	adds	r1, r2, r2
 8003c8a:	61b9      	str	r1, [r7, #24]
 8003c8c:	415b      	adcs	r3, r3
 8003c8e:	61fb      	str	r3, [r7, #28]
 8003c90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c94:	4641      	mov	r1, r8
 8003c96:	1851      	adds	r1, r2, r1
 8003c98:	6139      	str	r1, [r7, #16]
 8003c9a:	4649      	mov	r1, r9
 8003c9c:	414b      	adcs	r3, r1
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cac:	4659      	mov	r1, fp
 8003cae:	00cb      	lsls	r3, r1, #3
 8003cb0:	4651      	mov	r1, sl
 8003cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cb6:	4651      	mov	r1, sl
 8003cb8:	00ca      	lsls	r2, r1, #3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	4642      	mov	r2, r8
 8003cc2:	189b      	adds	r3, r3, r2
 8003cc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cc8:	464b      	mov	r3, r9
 8003cca:	460a      	mov	r2, r1
 8003ccc:	eb42 0303 	adc.w	r3, r2, r3
 8003cd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cde:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003cec:	4649      	mov	r1, r9
 8003cee:	008b      	lsls	r3, r1, #2
 8003cf0:	4641      	mov	r1, r8
 8003cf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cf6:	4641      	mov	r1, r8
 8003cf8:	008a      	lsls	r2, r1, #2
 8003cfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cfe:	f7fc fac7 	bl	8000290 <__aeabi_uldivmod>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4b39      	ldr	r3, [pc, #228]	; (8003dec <UART_SetConfig+0x4e4>)
 8003d08:	fba3 1302 	umull	r1, r3, r3, r2
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	2164      	movs	r1, #100	; 0x64
 8003d10:	fb01 f303 	mul.w	r3, r1, r3
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	3332      	adds	r3, #50	; 0x32
 8003d1a:	4a34      	ldr	r2, [pc, #208]	; (8003dec <UART_SetConfig+0x4e4>)
 8003d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d26:	441c      	add	r4, r3
 8003d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	673b      	str	r3, [r7, #112]	; 0x70
 8003d30:	677a      	str	r2, [r7, #116]	; 0x74
 8003d32:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d36:	4642      	mov	r2, r8
 8003d38:	464b      	mov	r3, r9
 8003d3a:	1891      	adds	r1, r2, r2
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	415b      	adcs	r3, r3
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d46:	4641      	mov	r1, r8
 8003d48:	1851      	adds	r1, r2, r1
 8003d4a:	6039      	str	r1, [r7, #0]
 8003d4c:	4649      	mov	r1, r9
 8003d4e:	414b      	adcs	r3, r1
 8003d50:	607b      	str	r3, [r7, #4]
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d5e:	4659      	mov	r1, fp
 8003d60:	00cb      	lsls	r3, r1, #3
 8003d62:	4651      	mov	r1, sl
 8003d64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d68:	4651      	mov	r1, sl
 8003d6a:	00ca      	lsls	r2, r1, #3
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4603      	mov	r3, r0
 8003d72:	4642      	mov	r2, r8
 8003d74:	189b      	adds	r3, r3, r2
 8003d76:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d78:	464b      	mov	r3, r9
 8003d7a:	460a      	mov	r2, r1
 8003d7c:	eb42 0303 	adc.w	r3, r2, r3
 8003d80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	663b      	str	r3, [r7, #96]	; 0x60
 8003d8c:	667a      	str	r2, [r7, #100]	; 0x64
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	008b      	lsls	r3, r1, #2
 8003d9e:	4641      	mov	r1, r8
 8003da0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003da4:	4641      	mov	r1, r8
 8003da6:	008a      	lsls	r2, r1, #2
 8003da8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003dac:	f7fc fa70 	bl	8000290 <__aeabi_uldivmod>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <UART_SetConfig+0x4e4>)
 8003db6:	fba3 1302 	umull	r1, r3, r3, r2
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2164      	movs	r1, #100	; 0x64
 8003dbe:	fb01 f303 	mul.w	r3, r1, r3
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	3332      	adds	r3, #50	; 0x32
 8003dc8:	4a08      	ldr	r2, [pc, #32]	; (8003dec <UART_SetConfig+0x4e4>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	f003 020f 	and.w	r2, r3, #15
 8003dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4422      	add	r2, r4
 8003ddc:	609a      	str	r2, [r3, #8]
}
 8003dde:	bf00      	nop
 8003de0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003de4:	46bd      	mov	sp, r7
 8003de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dea:	bf00      	nop
 8003dec:	51eb851f 	.word	0x51eb851f

08003df0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e02:	2b84      	cmp	r3, #132	; 0x84
 8003e04:	d005      	beq.n	8003e12 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3303      	adds	r3, #3
 8003e10:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e12:	68fb      	ldr	r3, [r7, #12]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e24:	f001 f8c0 	bl	8004fa8 <vTaskStartScheduler>
  
  return osOK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e30:	b089      	sub	sp, #36	; 0x24
 8003e32:	af04      	add	r7, sp, #16
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d020      	beq.n	8003e82 <osThreadCreate+0x54>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01c      	beq.n	8003e82 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685c      	ldr	r4, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681d      	ldr	r5, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691e      	ldr	r6, [r3, #16]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff ffc8 	bl	8003df0 <makeFreeRtosPriority>
 8003e60:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e6a:	9202      	str	r2, [sp, #8]
 8003e6c:	9301      	str	r3, [sp, #4]
 8003e6e:	9100      	str	r1, [sp, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	4632      	mov	r2, r6
 8003e74:	4629      	mov	r1, r5
 8003e76:	4620      	mov	r0, r4
 8003e78:	f000 fece 	bl	8004c18 <xTaskCreateStatic>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	e01c      	b.n	8003ebc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685c      	ldr	r4, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e8e:	b29e      	uxth	r6, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff ffaa 	bl	8003df0 <makeFreeRtosPriority>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	f107 030c 	add.w	r3, r7, #12
 8003ea2:	9301      	str	r3, [sp, #4]
 8003ea4:	9200      	str	r2, [sp, #0]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	4632      	mov	r2, r6
 8003eaa:	4629      	mov	r1, r5
 8003eac:	4620      	mov	r0, r4
 8003eae:	f000 ff10 	bl	8004cd2 <xTaskCreate>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d001      	beq.n	8003ebc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e000      	b.n	8003ebe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ec6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <osDelay+0x16>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	e000      	b.n	8003ede <osDelay+0x18>
 8003edc:	2301      	movs	r3, #1
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 f82e 	bl	8004f40 <vTaskDelay>
  
  return osOK;
 8003ee4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d007      	beq.n	8003f0e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	4619      	mov	r1, r3
 8003f04:	2001      	movs	r0, #1
 8003f06:	f000 fa84 	bl	8004412 <xQueueCreateMutexStatic>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	e003      	b.n	8003f16 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003f0e:	2001      	movs	r0, #1
 8003f10:	f000 fa67 	bl	80043e2 <xQueueCreateMutex>
 8003f14:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b086      	sub	sp, #24
 8003f22:	af02      	add	r7, sp, #8
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00f      	beq.n	8003f50 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d10a      	bne.n	8003f4c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	9200      	str	r2, [sp, #0]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2100      	movs	r1, #0
 8003f42:	2001      	movs	r0, #1
 8003f44:	f000 f962 	bl	800420c <xQueueGenericCreateStatic>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	e016      	b.n	8003f7a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e014      	b.n	8003f7a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d110      	bne.n	8003f78 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8003f56:	2203      	movs	r2, #3
 8003f58:	2100      	movs	r1, #0
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	f000 f9ce 	bl	80042fc <xQueueGenericCreate>
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <osSemaphoreCreate+0x56>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 fa6a 	bl	8004448 <xQueueGenericSend>
      return sema;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	e000      	b.n	8003f7a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003f78:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003f82:	b590      	push	{r4, r7, lr}
 8003f84:	b085      	sub	sp, #20
 8003f86:	af02      	add	r7, sp, #8
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d011      	beq.n	8003fb8 <osMessageCreate+0x36>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00d      	beq.n	8003fb8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6859      	ldr	r1, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	2400      	movs	r4, #0
 8003fae:	9400      	str	r4, [sp, #0]
 8003fb0:	f000 f92c 	bl	800420c <xQueueGenericCreateStatic>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	e008      	b.n	8003fca <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6818      	ldr	r0, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	f000 f99a 	bl	80042fc <xQueueGenericCreate>
 8003fc8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd90      	pop	{r4, r7, pc}

08003fd2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f103 0208 	add.w	r2, r3, #8
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f103 0208 	add.w	r2, r3, #8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f103 0208 	add.w	r2, r3, #8
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	601a      	str	r2, [r3, #0]
}
 8004068:	bf00      	nop
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408a:	d103      	bne.n	8004094 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	e00c      	b.n	80040ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3308      	adds	r3, #8
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	e002      	b.n	80040a2 <vListInsert+0x2e>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d2f6      	bcs.n	800409c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	601a      	str	r2, [r3, #0]
}
 80040da:	bf00      	nop
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040e6:	b480      	push	{r7}
 80040e8:	b085      	sub	sp, #20
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6892      	ldr	r2, [r2, #8]
 80040fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6852      	ldr	r2, [r2, #4]
 8004106:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	429a      	cmp	r2, r3
 8004110:	d103      	bne.n	800411a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	1e5a      	subs	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10a      	bne.n	8004166 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004162:	bf00      	nop
 8004164:	e7fe      	b.n	8004164 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004166:	f002 f8d5 	bl	8006314 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004172:	68f9      	ldr	r1, [r7, #12]
 8004174:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004176:	fb01 f303 	mul.w	r3, r1, r3
 800417a:	441a      	add	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004196:	3b01      	subs	r3, #1
 8004198:	68f9      	ldr	r1, [r7, #12]
 800419a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800419c:	fb01 f303 	mul.w	r3, r1, r3
 80041a0:	441a      	add	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	22ff      	movs	r2, #255	; 0xff
 80041aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	22ff      	movs	r2, #255	; 0xff
 80041b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d114      	bne.n	80041e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d01a      	beq.n	80041fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	3310      	adds	r3, #16
 80041c8:	4618      	mov	r0, r3
 80041ca:	f001 f979 	bl	80054c0 <xTaskRemoveFromEventList>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d012      	beq.n	80041fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041d4:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <xQueueGenericReset+0xcc>)
 80041d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	e009      	b.n	80041fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3310      	adds	r3, #16
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fef1 	bl	8003fd2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3324      	adds	r3, #36	; 0x24
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff feec 	bl	8003fd2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041fa:	f002 f8bb 	bl	8006374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041fe:	2301      	movs	r3, #1
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	e000ed04 	.word	0xe000ed04

0800420c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08e      	sub	sp, #56	; 0x38
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004232:	bf00      	nop
 8004234:	e7fe      	b.n	8004234 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800424e:	bf00      	nop
 8004250:	e7fe      	b.n	8004250 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <xQueueGenericCreateStatic+0x52>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <xQueueGenericCreateStatic+0x56>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <xQueueGenericCreateStatic+0x58>
 8004262:	2300      	movs	r3, #0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	623b      	str	r3, [r7, #32]
}
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d102      	bne.n	800428a <xQueueGenericCreateStatic+0x7e>
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <xQueueGenericCreateStatic+0x82>
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <xQueueGenericCreateStatic+0x84>
 800428e:	2300      	movs	r3, #0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10a      	bne.n	80042aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	61fb      	str	r3, [r7, #28]
}
 80042a6:	bf00      	nop
 80042a8:	e7fe      	b.n	80042a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80042aa:	2348      	movs	r3, #72	; 0x48
 80042ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2b48      	cmp	r3, #72	; 0x48
 80042b2:	d00a      	beq.n	80042ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	61bb      	str	r3, [r7, #24]
}
 80042c6:	bf00      	nop
 80042c8:	e7fe      	b.n	80042c8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80042ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80042d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00d      	beq.n	80042f2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80042e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	4613      	mov	r3, r2
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f83f 	bl	8004370 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3730      	adds	r7, #48	; 0x30
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08a      	sub	sp, #40	; 0x28
 8004300:	af02      	add	r7, sp, #8
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10a      	bne.n	8004326 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	613b      	str	r3, [r7, #16]
}
 8004322:	bf00      	nop
 8004324:	e7fe      	b.n	8004324 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	fb02 f303 	mul.w	r3, r2, r3
 800432e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	3348      	adds	r3, #72	; 0x48
 8004334:	4618      	mov	r0, r3
 8004336:	f002 f90f 	bl	8006558 <pvPortMalloc>
 800433a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d011      	beq.n	8004366 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	3348      	adds	r3, #72	; 0x48
 800434a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004354:	79fa      	ldrb	r2, [r7, #7]
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	4613      	mov	r3, r2
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	68b9      	ldr	r1, [r7, #8]
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f805 	bl	8004370 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004366:	69bb      	ldr	r3, [r7, #24]
	}
 8004368:	4618      	mov	r0, r3
 800436a:	3720      	adds	r7, #32
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d103      	bne.n	800438c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	e002      	b.n	8004392 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800439e:	2101      	movs	r1, #1
 80043a0:	69b8      	ldr	r0, [r7, #24]
 80043a2:	f7ff fecb 	bl	800413c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80043a6:	bf00      	nop
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b082      	sub	sp, #8
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00e      	beq.n	80043da <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80043ce:	2300      	movs	r3, #0
 80043d0:	2200      	movs	r2, #0
 80043d2:	2100      	movs	r1, #0
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f837 	bl	8004448 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b086      	sub	sp, #24
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	4603      	mov	r3, r0
 80043ea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80043ec:	2301      	movs	r3, #1
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	2300      	movs	r3, #0
 80043f2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	461a      	mov	r2, r3
 80043f8:	6939      	ldr	r1, [r7, #16]
 80043fa:	6978      	ldr	r0, [r7, #20]
 80043fc:	f7ff ff7e 	bl	80042fc <xQueueGenericCreate>
 8004400:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f7ff ffd3 	bl	80043ae <prvInitialiseMutex>

		return xNewQueue;
 8004408:	68fb      	ldr	r3, [r7, #12]
	}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004412:	b580      	push	{r7, lr}
 8004414:	b088      	sub	sp, #32
 8004416:	af02      	add	r7, sp, #8
 8004418:	4603      	mov	r3, r0
 800441a:	6039      	str	r1, [r7, #0]
 800441c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800441e:	2301      	movs	r3, #1
 8004420:	617b      	str	r3, [r7, #20]
 8004422:	2300      	movs	r3, #0
 8004424:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2200      	movs	r2, #0
 800442e:	6939      	ldr	r1, [r7, #16]
 8004430:	6978      	ldr	r0, [r7, #20]
 8004432:	f7ff feeb 	bl	800420c <xQueueGenericCreateStatic>
 8004436:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f7ff ffb8 	bl	80043ae <prvInitialiseMutex>

		return xNewQueue;
 800443e:	68fb      	ldr	r3, [r7, #12]
	}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08e      	sub	sp, #56	; 0x38
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004456:	2300      	movs	r3, #0
 8004458:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10a      	bne.n	800447a <xQueueGenericSend+0x32>
	__asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004476:	bf00      	nop
 8004478:	e7fe      	b.n	8004478 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d103      	bne.n	8004488 <xQueueGenericSend+0x40>
 8004480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <xQueueGenericSend+0x44>
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <xQueueGenericSend+0x46>
 800448c:	2300      	movs	r3, #0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10a      	bne.n	80044a8 <xQueueGenericSend+0x60>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044a4:	bf00      	nop
 80044a6:	e7fe      	b.n	80044a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d103      	bne.n	80044b6 <xQueueGenericSend+0x6e>
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <xQueueGenericSend+0x72>
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <xQueueGenericSend+0x74>
 80044ba:	2300      	movs	r3, #0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	623b      	str	r3, [r7, #32]
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044d6:	f001 f9b1 	bl	800583c <xTaskGetSchedulerState>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d102      	bne.n	80044e6 <xQueueGenericSend+0x9e>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <xQueueGenericSend+0xa2>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <xQueueGenericSend+0xa4>
 80044ea:	2300      	movs	r3, #0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10a      	bne.n	8004506 <xQueueGenericSend+0xbe>
	__asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	61fb      	str	r3, [r7, #28]
}
 8004502:	bf00      	nop
 8004504:	e7fe      	b.n	8004504 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004506:	f001 ff05 	bl	8006314 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800450e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004512:	429a      	cmp	r2, r3
 8004514:	d302      	bcc.n	800451c <xQueueGenericSend+0xd4>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b02      	cmp	r3, #2
 800451a:	d129      	bne.n	8004570 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	68b9      	ldr	r1, [r7, #8]
 8004520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004522:	f000 fa0b 	bl	800493c <prvCopyDataToQueue>
 8004526:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	2b00      	cmp	r3, #0
 800452e:	d010      	beq.n	8004552 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	3324      	adds	r3, #36	; 0x24
 8004534:	4618      	mov	r0, r3
 8004536:	f000 ffc3 	bl	80054c0 <xTaskRemoveFromEventList>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d013      	beq.n	8004568 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004540:	4b3f      	ldr	r3, [pc, #252]	; (8004640 <xQueueGenericSend+0x1f8>)
 8004542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	e00a      	b.n	8004568 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004558:	4b39      	ldr	r3, [pc, #228]	; (8004640 <xQueueGenericSend+0x1f8>)
 800455a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004568:	f001 ff04 	bl	8006374 <vPortExitCritical>
				return pdPASS;
 800456c:	2301      	movs	r3, #1
 800456e:	e063      	b.n	8004638 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d103      	bne.n	800457e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004576:	f001 fefd 	bl	8006374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800457a:	2300      	movs	r3, #0
 800457c:	e05c      	b.n	8004638 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800457e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004580:	2b00      	cmp	r3, #0
 8004582:	d106      	bne.n	8004592 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004584:	f107 0314 	add.w	r3, r7, #20
 8004588:	4618      	mov	r0, r3
 800458a:	f000 fffb 	bl	8005584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800458e:	2301      	movs	r3, #1
 8004590:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004592:	f001 feef 	bl	8006374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004596:	f000 fd6d 	bl	8005074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800459a:	f001 febb 	bl	8006314 <vPortEnterCritical>
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045a4:	b25b      	sxtb	r3, r3
 80045a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045aa:	d103      	bne.n	80045b4 <xQueueGenericSend+0x16c>
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045ba:	b25b      	sxtb	r3, r3
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c0:	d103      	bne.n	80045ca <xQueueGenericSend+0x182>
 80045c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045ca:	f001 fed3 	bl	8006374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045ce:	1d3a      	adds	r2, r7, #4
 80045d0:	f107 0314 	add.w	r3, r7, #20
 80045d4:	4611      	mov	r1, r2
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 ffea 	bl	80055b0 <xTaskCheckForTimeOut>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d124      	bne.n	800462c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80045e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045e4:	f000 faa2 	bl	8004b2c <prvIsQueueFull>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d018      	beq.n	8004620 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f0:	3310      	adds	r3, #16
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	4611      	mov	r1, r2
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 ff12 	bl	8005420 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80045fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045fe:	f000 fa2d 	bl	8004a5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004602:	f000 fd45 	bl	8005090 <xTaskResumeAll>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	f47f af7c 	bne.w	8004506 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800460e:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <xQueueGenericSend+0x1f8>)
 8004610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	e772      	b.n	8004506 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004622:	f000 fa1b 	bl	8004a5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004626:	f000 fd33 	bl	8005090 <xTaskResumeAll>
 800462a:	e76c      	b.n	8004506 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800462c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800462e:	f000 fa15 	bl	8004a5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004632:	f000 fd2d 	bl	8005090 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004636:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004638:	4618      	mov	r0, r3
 800463a:	3738      	adds	r7, #56	; 0x38
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	e000ed04 	.word	0xe000ed04

08004644 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b090      	sub	sp, #64	; 0x40
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10a      	bne.n	8004672 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800466e:	bf00      	nop
 8004670:	e7fe      	b.n	8004670 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d103      	bne.n	8004680 <xQueueGenericSendFromISR+0x3c>
 8004678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <xQueueGenericSendFromISR+0x40>
 8004680:	2301      	movs	r3, #1
 8004682:	e000      	b.n	8004686 <xQueueGenericSendFromISR+0x42>
 8004684:	2300      	movs	r3, #0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10a      	bne.n	80046a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800469c:	bf00      	nop
 800469e:	e7fe      	b.n	800469e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d103      	bne.n	80046ae <xQueueGenericSendFromISR+0x6a>
 80046a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <xQueueGenericSendFromISR+0x6e>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <xQueueGenericSendFromISR+0x70>
 80046b2:	2300      	movs	r3, #0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10a      	bne.n	80046ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	623b      	str	r3, [r7, #32]
}
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046ce:	f001 ff03 	bl	80064d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80046d2:	f3ef 8211 	mrs	r2, BASEPRI
 80046d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	61fa      	str	r2, [r7, #28]
 80046e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80046ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d302      	bcc.n	8004700 <xQueueGenericSendFromISR+0xbc>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d12f      	bne.n	8004760 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004702:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800470a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004716:	f000 f911 	bl	800493c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800471a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800471e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004722:	d112      	bne.n	800474a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	2b00      	cmp	r3, #0
 800472a:	d016      	beq.n	800475a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800472c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472e:	3324      	adds	r3, #36	; 0x24
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fec5 	bl	80054c0 <xTaskRemoveFromEventList>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00e      	beq.n	800475a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00b      	beq.n	800475a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	e007      	b.n	800475a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800474a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800474e:	3301      	adds	r3, #1
 8004750:	b2db      	uxtb	r3, r3
 8004752:	b25a      	sxtb	r2, r3
 8004754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800475a:	2301      	movs	r3, #1
 800475c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800475e:	e001      	b.n	8004764 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004760:	2300      	movs	r3, #0
 8004762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004766:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800476e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004772:	4618      	mov	r0, r3
 8004774:	3740      	adds	r7, #64	; 0x40
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08c      	sub	sp, #48	; 0x30
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004788:	2300      	movs	r3, #0
 800478a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10a      	bne.n	80047ac <xQueueReceive+0x30>
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	623b      	str	r3, [r7, #32]
}
 80047a8:	bf00      	nop
 80047aa:	e7fe      	b.n	80047aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d103      	bne.n	80047ba <xQueueReceive+0x3e>
 80047b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <xQueueReceive+0x42>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <xQueueReceive+0x44>
 80047be:	2300      	movs	r3, #0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10a      	bne.n	80047da <xQueueReceive+0x5e>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	61fb      	str	r3, [r7, #28]
}
 80047d6:	bf00      	nop
 80047d8:	e7fe      	b.n	80047d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047da:	f001 f82f 	bl	800583c <xTaskGetSchedulerState>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d102      	bne.n	80047ea <xQueueReceive+0x6e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <xQueueReceive+0x72>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <xQueueReceive+0x74>
 80047ee:	2300      	movs	r3, #0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10a      	bne.n	800480a <xQueueReceive+0x8e>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	61bb      	str	r3, [r7, #24]
}
 8004806:	bf00      	nop
 8004808:	e7fe      	b.n	8004808 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800480a:	f001 fd83 	bl	8006314 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800480e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	2b00      	cmp	r3, #0
 8004818:	d01f      	beq.n	800485a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800481a:	68b9      	ldr	r1, [r7, #8]
 800481c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800481e:	f000 f8f7 	bl	8004a10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	1e5a      	subs	r2, r3, #1
 8004826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004828:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800482a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00f      	beq.n	8004852 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	3310      	adds	r3, #16
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fe42 	bl	80054c0 <xTaskRemoveFromEventList>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004842:	4b3d      	ldr	r3, [pc, #244]	; (8004938 <xQueueReceive+0x1bc>)
 8004844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004852:	f001 fd8f 	bl	8006374 <vPortExitCritical>
				return pdPASS;
 8004856:	2301      	movs	r3, #1
 8004858:	e069      	b.n	800492e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d103      	bne.n	8004868 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004860:	f001 fd88 	bl	8006374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004864:	2300      	movs	r3, #0
 8004866:	e062      	b.n	800492e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800486e:	f107 0310 	add.w	r3, r7, #16
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fe86 	bl	8005584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004878:	2301      	movs	r3, #1
 800487a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800487c:	f001 fd7a 	bl	8006374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004880:	f000 fbf8 	bl	8005074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004884:	f001 fd46 	bl	8006314 <vPortEnterCritical>
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800488e:	b25b      	sxtb	r3, r3
 8004890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004894:	d103      	bne.n	800489e <xQueueReceive+0x122>
 8004896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048a4:	b25b      	sxtb	r3, r3
 80048a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048aa:	d103      	bne.n	80048b4 <xQueueReceive+0x138>
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048b4:	f001 fd5e 	bl	8006374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048b8:	1d3a      	adds	r2, r7, #4
 80048ba:	f107 0310 	add.w	r3, r7, #16
 80048be:	4611      	mov	r1, r2
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 fe75 	bl	80055b0 <xTaskCheckForTimeOut>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d123      	bne.n	8004914 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048ce:	f000 f917 	bl	8004b00 <prvIsQueueEmpty>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d017      	beq.n	8004908 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	3324      	adds	r3, #36	; 0x24
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	4611      	mov	r1, r2
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fd9d 	bl	8005420 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80048e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048e8:	f000 f8b8 	bl	8004a5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048ec:	f000 fbd0 	bl	8005090 <xTaskResumeAll>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d189      	bne.n	800480a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80048f6:	4b10      	ldr	r3, [pc, #64]	; (8004938 <xQueueReceive+0x1bc>)
 80048f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	e780      	b.n	800480a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800490a:	f000 f8a7 	bl	8004a5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800490e:	f000 fbbf 	bl	8005090 <xTaskResumeAll>
 8004912:	e77a      	b.n	800480a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004916:	f000 f8a1 	bl	8004a5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800491a:	f000 fbb9 	bl	8005090 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800491e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004920:	f000 f8ee 	bl	8004b00 <prvIsQueueEmpty>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	f43f af6f 	beq.w	800480a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800492c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800492e:	4618      	mov	r0, r3
 8004930:	3730      	adds	r7, #48	; 0x30
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	e000ed04 	.word	0xe000ed04

0800493c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004948:	2300      	movs	r3, #0
 800494a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004950:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10d      	bne.n	8004976 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d14d      	bne.n	80049fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	4618      	mov	r0, r3
 8004968:	f000 ff86 	bl	8005878 <xTaskPriorityDisinherit>
 800496c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	609a      	str	r2, [r3, #8]
 8004974:	e043      	b.n	80049fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d119      	bne.n	80049b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6858      	ldr	r0, [r3, #4]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	461a      	mov	r2, r3
 8004986:	68b9      	ldr	r1, [r7, #8]
 8004988:	f001 fffa 	bl	8006980 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	441a      	add	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d32b      	bcc.n	80049fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	605a      	str	r2, [r3, #4]
 80049ae:	e026      	b.n	80049fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	68d8      	ldr	r0, [r3, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	461a      	mov	r2, r3
 80049ba:	68b9      	ldr	r1, [r7, #8]
 80049bc:	f001 ffe0 	bl	8006980 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	425b      	negs	r3, r3
 80049ca:	441a      	add	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d207      	bcs.n	80049ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e4:	425b      	negs	r3, r3
 80049e6:	441a      	add	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d105      	bne.n	80049fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004a06:	697b      	ldr	r3, [r7, #20]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d018      	beq.n	8004a54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	441a      	add	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d303      	bcc.n	8004a44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68d9      	ldr	r1, [r3, #12]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	6838      	ldr	r0, [r7, #0]
 8004a50:	f001 ff96 	bl	8006980 <memcpy>
	}
}
 8004a54:	bf00      	nop
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a64:	f001 fc56 	bl	8006314 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a70:	e011      	b.n	8004a96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d012      	beq.n	8004aa0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3324      	adds	r3, #36	; 0x24
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fd1e 	bl	80054c0 <xTaskRemoveFromEventList>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a8a:	f000 fdf3 	bl	8005674 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	dce9      	bgt.n	8004a72 <prvUnlockQueue+0x16>
 8004a9e:	e000      	b.n	8004aa2 <prvUnlockQueue+0x46>
					break;
 8004aa0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	22ff      	movs	r2, #255	; 0xff
 8004aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004aaa:	f001 fc63 	bl	8006374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004aae:	f001 fc31 	bl	8006314 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ab8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004aba:	e011      	b.n	8004ae0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d012      	beq.n	8004aea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3310      	adds	r3, #16
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fcf9 	bl	80054c0 <xTaskRemoveFromEventList>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ad4:	f000 fdce 	bl	8005674 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ad8:	7bbb      	ldrb	r3, [r7, #14]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ae0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	dce9      	bgt.n	8004abc <prvUnlockQueue+0x60>
 8004ae8:	e000      	b.n	8004aec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004aea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	22ff      	movs	r2, #255	; 0xff
 8004af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004af4:	f001 fc3e 	bl	8006374 <vPortExitCritical>
}
 8004af8:	bf00      	nop
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b08:	f001 fc04 	bl	8006314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d102      	bne.n	8004b1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b14:	2301      	movs	r3, #1
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	e001      	b.n	8004b1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b1e:	f001 fc29 	bl	8006374 <vPortExitCritical>

	return xReturn;
 8004b22:	68fb      	ldr	r3, [r7, #12]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b34:	f001 fbee 	bl	8006314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d102      	bne.n	8004b4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b44:	2301      	movs	r3, #1
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	e001      	b.n	8004b4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b4e:	f001 fc11 	bl	8006374 <vPortExitCritical>

	return xReturn;
 8004b52:	68fb      	ldr	r3, [r7, #12]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	e014      	b.n	8004b96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b6c:	4a0f      	ldr	r2, [pc, #60]	; (8004bac <vQueueAddToRegistry+0x50>)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10b      	bne.n	8004b90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b78:	490c      	ldr	r1, [pc, #48]	; (8004bac <vQueueAddToRegistry+0x50>)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b82:	4a0a      	ldr	r2, [pc, #40]	; (8004bac <vQueueAddToRegistry+0x50>)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	4413      	add	r3, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b8e:	e006      	b.n	8004b9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	3301      	adds	r3, #1
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b07      	cmp	r3, #7
 8004b9a:	d9e7      	bls.n	8004b6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b9c:	bf00      	nop
 8004b9e:	bf00      	nop
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	2000083c 	.word	0x2000083c

08004bb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004bc0:	f001 fba8 	bl	8006314 <vPortEnterCritical>
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bca:	b25b      	sxtb	r3, r3
 8004bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd0:	d103      	bne.n	8004bda <vQueueWaitForMessageRestricted+0x2a>
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004be0:	b25b      	sxtb	r3, r3
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be6:	d103      	bne.n	8004bf0 <vQueueWaitForMessageRestricted+0x40>
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bf0:	f001 fbc0 	bl	8006374 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d106      	bne.n	8004c0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	3324      	adds	r3, #36	; 0x24
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fc2f 	bl	8005468 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c0a:	6978      	ldr	r0, [r7, #20]
 8004c0c:	f7ff ff26 	bl	8004a5c <prvUnlockQueue>
	}
 8004c10:	bf00      	nop
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08e      	sub	sp, #56	; 0x38
 8004c1c:	af04      	add	r7, sp, #16
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	623b      	str	r3, [r7, #32]
}
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <xTaskCreateStatic+0x46>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	61fb      	str	r3, [r7, #28]
}
 8004c5a:	bf00      	nop
 8004c5c:	e7fe      	b.n	8004c5c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c5e:	2354      	movs	r3, #84	; 0x54
 8004c60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	2b54      	cmp	r3, #84	; 0x54
 8004c66:	d00a      	beq.n	8004c7e <xTaskCreateStatic+0x66>
	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	61bb      	str	r3, [r7, #24]
}
 8004c7a:	bf00      	nop
 8004c7c:	e7fe      	b.n	8004c7c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c7e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d01e      	beq.n	8004cc4 <xTaskCreateStatic+0xac>
 8004c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01b      	beq.n	8004cc4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c94:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	2202      	movs	r2, #2
 8004c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	9303      	str	r3, [sp, #12]
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	9302      	str	r3, [sp, #8]
 8004ca6:	f107 0314 	add.w	r3, r7, #20
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 f850 	bl	8004d5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cbe:	f000 f8d5 	bl	8004e6c <prvAddNewTaskToReadyList>
 8004cc2:	e001      	b.n	8004cc8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004cc8:	697b      	ldr	r3, [r7, #20]
	}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3728      	adds	r7, #40	; 0x28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b08c      	sub	sp, #48	; 0x30
 8004cd6:	af04      	add	r7, sp, #16
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	603b      	str	r3, [r7, #0]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ce2:	88fb      	ldrh	r3, [r7, #6]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f001 fc36 	bl	8006558 <pvPortMalloc>
 8004cec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00e      	beq.n	8004d12 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004cf4:	2054      	movs	r0, #84	; 0x54
 8004cf6:	f001 fc2f 	bl	8006558 <pvPortMalloc>
 8004cfa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	631a      	str	r2, [r3, #48]	; 0x30
 8004d08:	e005      	b.n	8004d16 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d0a:	6978      	ldr	r0, [r7, #20]
 8004d0c:	f001 fcf0 	bl	80066f0 <vPortFree>
 8004d10:	e001      	b.n	8004d16 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d017      	beq.n	8004d4c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d24:	88fa      	ldrh	r2, [r7, #6]
 8004d26:	2300      	movs	r3, #0
 8004d28:	9303      	str	r3, [sp, #12]
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	9302      	str	r3, [sp, #8]
 8004d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d30:	9301      	str	r3, [sp, #4]
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f80e 	bl	8004d5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d40:	69f8      	ldr	r0, [r7, #28]
 8004d42:	f000 f893 	bl	8004e6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d46:	2301      	movs	r3, #1
 8004d48:	61bb      	str	r3, [r7, #24]
 8004d4a:	e002      	b.n	8004d52 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d50:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d52:	69bb      	ldr	r3, [r7, #24]
	}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3720      	adds	r7, #32
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d74:	3b01      	subs	r3, #1
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	f023 0307 	bic.w	r3, r3, #7
 8004d82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	617b      	str	r3, [r7, #20]
}
 8004da0:	bf00      	nop
 8004da2:	e7fe      	b.n	8004da2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d01f      	beq.n	8004dea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004daa:	2300      	movs	r3, #0
 8004dac:	61fb      	str	r3, [r7, #28]
 8004dae:	e012      	b.n	8004dd6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	4413      	add	r3, r2
 8004db6:	7819      	ldrb	r1, [r3, #0]
 8004db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	3334      	adds	r3, #52	; 0x34
 8004dc0:	460a      	mov	r2, r1
 8004dc2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	4413      	add	r3, r2
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d006      	beq.n	8004dde <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	61fb      	str	r3, [r7, #28]
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	2b0f      	cmp	r3, #15
 8004dda:	d9e9      	bls.n	8004db0 <prvInitialiseNewTask+0x54>
 8004ddc:	e000      	b.n	8004de0 <prvInitialiseNewTask+0x84>
			{
				break;
 8004dde:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004de8:	e003      	b.n	8004df2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	2b06      	cmp	r3, #6
 8004df6:	d901      	bls.n	8004dfc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004df8:	2306      	movs	r3, #6
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e06:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	3304      	adds	r3, #4
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff f8fd 	bl	8004012 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	3318      	adds	r3, #24
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff f8f8 	bl	8004012 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2a:	f1c3 0207 	rsb	r2, r3, #7
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	68f9      	ldr	r1, [r7, #12]
 8004e4a:	69b8      	ldr	r0, [r7, #24]
 8004e4c:	f001 f932 	bl	80060b4 <pxPortInitialiseStack>
 8004e50:	4602      	mov	r2, r0
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e62:	bf00      	nop
 8004e64:	3720      	adds	r7, #32
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e74:	f001 fa4e 	bl	8006314 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e78:	4b2a      	ldr	r3, [pc, #168]	; (8004f24 <prvAddNewTaskToReadyList+0xb8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	4a29      	ldr	r2, [pc, #164]	; (8004f24 <prvAddNewTaskToReadyList+0xb8>)
 8004e80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e82:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <prvAddNewTaskToReadyList+0xbc>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d109      	bne.n	8004e9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e8a:	4a27      	ldr	r2, [pc, #156]	; (8004f28 <prvAddNewTaskToReadyList+0xbc>)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e90:	4b24      	ldr	r3, [pc, #144]	; (8004f24 <prvAddNewTaskToReadyList+0xb8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d110      	bne.n	8004eba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e98:	f000 fc12 	bl	80056c0 <prvInitialiseTaskLists>
 8004e9c:	e00d      	b.n	8004eba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e9e:	4b23      	ldr	r3, [pc, #140]	; (8004f2c <prvAddNewTaskToReadyList+0xc0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d109      	bne.n	8004eba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ea6:	4b20      	ldr	r3, [pc, #128]	; (8004f28 <prvAddNewTaskToReadyList+0xbc>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d802      	bhi.n	8004eba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004eb4:	4a1c      	ldr	r2, [pc, #112]	; (8004f28 <prvAddNewTaskToReadyList+0xbc>)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004eba:	4b1d      	ldr	r3, [pc, #116]	; (8004f30 <prvAddNewTaskToReadyList+0xc4>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	4a1b      	ldr	r2, [pc, #108]	; (8004f30 <prvAddNewTaskToReadyList+0xc4>)
 8004ec2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	2201      	movs	r2, #1
 8004eca:	409a      	lsls	r2, r3
 8004ecc:	4b19      	ldr	r3, [pc, #100]	; (8004f34 <prvAddNewTaskToReadyList+0xc8>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	4a18      	ldr	r2, [pc, #96]	; (8004f34 <prvAddNewTaskToReadyList+0xc8>)
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4a15      	ldr	r2, [pc, #84]	; (8004f38 <prvAddNewTaskToReadyList+0xcc>)
 8004ee4:	441a      	add	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f7ff f89d 	bl	800402c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ef2:	f001 fa3f 	bl	8006374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <prvAddNewTaskToReadyList+0xc0>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00e      	beq.n	8004f1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004efe:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <prvAddNewTaskToReadyList+0xbc>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d207      	bcs.n	8004f1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f0c:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <prvAddNewTaskToReadyList+0xd0>)
 8004f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	2000097c 	.word	0x2000097c
 8004f28:	2000087c 	.word	0x2000087c
 8004f2c:	20000988 	.word	0x20000988
 8004f30:	20000998 	.word	0x20000998
 8004f34:	20000984 	.word	0x20000984
 8004f38:	20000880 	.word	0x20000880
 8004f3c:	e000ed04 	.word	0xe000ed04

08004f40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d017      	beq.n	8004f82 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f52:	4b13      	ldr	r3, [pc, #76]	; (8004fa0 <vTaskDelay+0x60>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <vTaskDelay+0x30>
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	60bb      	str	r3, [r7, #8]
}
 8004f6c:	bf00      	nop
 8004f6e:	e7fe      	b.n	8004f6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f70:	f000 f880 	bl	8005074 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f74:	2100      	movs	r1, #0
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fd04 	bl	8005984 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f7c:	f000 f888 	bl	8005090 <xTaskResumeAll>
 8004f80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d107      	bne.n	8004f98 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004f88:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <vTaskDelay+0x64>)
 8004f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f98:	bf00      	nop
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	200009a4 	.word	0x200009a4
 8004fa4:	e000ed04 	.word	0xe000ed04

08004fa8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08a      	sub	sp, #40	; 0x28
 8004fac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004fb6:	463a      	mov	r2, r7
 8004fb8:	1d39      	adds	r1, r7, #4
 8004fba:	f107 0308 	add.w	r3, r7, #8
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fb fb94 	bl	80006ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004fc4:	6839      	ldr	r1, [r7, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	9202      	str	r2, [sp, #8]
 8004fcc:	9301      	str	r3, [sp, #4]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	460a      	mov	r2, r1
 8004fd6:	4921      	ldr	r1, [pc, #132]	; (800505c <vTaskStartScheduler+0xb4>)
 8004fd8:	4821      	ldr	r0, [pc, #132]	; (8005060 <vTaskStartScheduler+0xb8>)
 8004fda:	f7ff fe1d 	bl	8004c18 <xTaskCreateStatic>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	4a20      	ldr	r2, [pc, #128]	; (8005064 <vTaskStartScheduler+0xbc>)
 8004fe2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fe4:	4b1f      	ldr	r3, [pc, #124]	; (8005064 <vTaskStartScheduler+0xbc>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fec:	2301      	movs	r3, #1
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	e001      	b.n	8004ff6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d102      	bne.n	8005002 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ffc:	f000 fd28 	bl	8005a50 <xTimerCreateTimerTask>
 8005000:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d116      	bne.n	8005036 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	613b      	str	r3, [r7, #16]
}
 800501a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800501c:	4b12      	ldr	r3, [pc, #72]	; (8005068 <vTaskStartScheduler+0xc0>)
 800501e:	f04f 32ff 	mov.w	r2, #4294967295
 8005022:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005024:	4b11      	ldr	r3, [pc, #68]	; (800506c <vTaskStartScheduler+0xc4>)
 8005026:	2201      	movs	r2, #1
 8005028:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800502a:	4b11      	ldr	r3, [pc, #68]	; (8005070 <vTaskStartScheduler+0xc8>)
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005030:	f001 f8ce 	bl	80061d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005034:	e00e      	b.n	8005054 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503c:	d10a      	bne.n	8005054 <vTaskStartScheduler+0xac>
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	60fb      	str	r3, [r7, #12]
}
 8005050:	bf00      	nop
 8005052:	e7fe      	b.n	8005052 <vTaskStartScheduler+0xaa>
}
 8005054:	bf00      	nop
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	0800734c 	.word	0x0800734c
 8005060:	0800568d 	.word	0x0800568d
 8005064:	200009a0 	.word	0x200009a0
 8005068:	2000099c 	.word	0x2000099c
 800506c:	20000988 	.word	0x20000988
 8005070:	20000980 	.word	0x20000980

08005074 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005078:	4b04      	ldr	r3, [pc, #16]	; (800508c <vTaskSuspendAll+0x18>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3301      	adds	r3, #1
 800507e:	4a03      	ldr	r2, [pc, #12]	; (800508c <vTaskSuspendAll+0x18>)
 8005080:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005082:	bf00      	nop
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	200009a4 	.word	0x200009a4

08005090 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800509a:	2300      	movs	r3, #0
 800509c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800509e:	4b41      	ldr	r3, [pc, #260]	; (80051a4 <xTaskResumeAll+0x114>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10a      	bne.n	80050bc <xTaskResumeAll+0x2c>
	__asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	603b      	str	r3, [r7, #0]
}
 80050b8:	bf00      	nop
 80050ba:	e7fe      	b.n	80050ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050bc:	f001 f92a 	bl	8006314 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80050c0:	4b38      	ldr	r3, [pc, #224]	; (80051a4 <xTaskResumeAll+0x114>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	4a37      	ldr	r2, [pc, #220]	; (80051a4 <xTaskResumeAll+0x114>)
 80050c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050ca:	4b36      	ldr	r3, [pc, #216]	; (80051a4 <xTaskResumeAll+0x114>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d161      	bne.n	8005196 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050d2:	4b35      	ldr	r3, [pc, #212]	; (80051a8 <xTaskResumeAll+0x118>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d05d      	beq.n	8005196 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050da:	e02e      	b.n	800513a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050dc:	4b33      	ldr	r3, [pc, #204]	; (80051ac <xTaskResumeAll+0x11c>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3318      	adds	r3, #24
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fe fffc 	bl	80040e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	3304      	adds	r3, #4
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fe fff7 	bl	80040e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	2201      	movs	r2, #1
 80050fe:	409a      	lsls	r2, r3
 8005100:	4b2b      	ldr	r3, [pc, #172]	; (80051b0 <xTaskResumeAll+0x120>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4313      	orrs	r3, r2
 8005106:	4a2a      	ldr	r2, [pc, #168]	; (80051b0 <xTaskResumeAll+0x120>)
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4a27      	ldr	r2, [pc, #156]	; (80051b4 <xTaskResumeAll+0x124>)
 8005118:	441a      	add	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3304      	adds	r3, #4
 800511e:	4619      	mov	r1, r3
 8005120:	4610      	mov	r0, r2
 8005122:	f7fe ff83 	bl	800402c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512a:	4b23      	ldr	r3, [pc, #140]	; (80051b8 <xTaskResumeAll+0x128>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	429a      	cmp	r2, r3
 8005132:	d302      	bcc.n	800513a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005134:	4b21      	ldr	r3, [pc, #132]	; (80051bc <xTaskResumeAll+0x12c>)
 8005136:	2201      	movs	r2, #1
 8005138:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800513a:	4b1c      	ldr	r3, [pc, #112]	; (80051ac <xTaskResumeAll+0x11c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1cc      	bne.n	80050dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005148:	f000 fb58 	bl	80057fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800514c:	4b1c      	ldr	r3, [pc, #112]	; (80051c0 <xTaskResumeAll+0x130>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d010      	beq.n	800517a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005158:	f000 f846 	bl	80051e8 <xTaskIncrementTick>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005162:	4b16      	ldr	r3, [pc, #88]	; (80051bc <xTaskResumeAll+0x12c>)
 8005164:	2201      	movs	r2, #1
 8005166:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3b01      	subs	r3, #1
 800516c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f1      	bne.n	8005158 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005174:	4b12      	ldr	r3, [pc, #72]	; (80051c0 <xTaskResumeAll+0x130>)
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800517a:	4b10      	ldr	r3, [pc, #64]	; (80051bc <xTaskResumeAll+0x12c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d009      	beq.n	8005196 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005182:	2301      	movs	r3, #1
 8005184:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005186:	4b0f      	ldr	r3, [pc, #60]	; (80051c4 <xTaskResumeAll+0x134>)
 8005188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005196:	f001 f8ed 	bl	8006374 <vPortExitCritical>

	return xAlreadyYielded;
 800519a:	68bb      	ldr	r3, [r7, #8]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	200009a4 	.word	0x200009a4
 80051a8:	2000097c 	.word	0x2000097c
 80051ac:	2000093c 	.word	0x2000093c
 80051b0:	20000984 	.word	0x20000984
 80051b4:	20000880 	.word	0x20000880
 80051b8:	2000087c 	.word	0x2000087c
 80051bc:	20000990 	.word	0x20000990
 80051c0:	2000098c 	.word	0x2000098c
 80051c4:	e000ed04 	.word	0xe000ed04

080051c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80051ce:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <xTaskGetTickCount+0x1c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80051d4:	687b      	ldr	r3, [r7, #4]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000980 	.word	0x20000980

080051e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051f2:	4b52      	ldr	r3, [pc, #328]	; (800533c <xTaskIncrementTick+0x154>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f040 8094 	bne.w	8005324 <xTaskIncrementTick+0x13c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051fc:	4b50      	ldr	r3, [pc, #320]	; (8005340 <xTaskIncrementTick+0x158>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3301      	adds	r3, #1
 8005202:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005204:	4a4e      	ldr	r2, [pc, #312]	; (8005340 <xTaskIncrementTick+0x158>)
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d120      	bne.n	8005252 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005210:	4b4c      	ldr	r3, [pc, #304]	; (8005344 <xTaskIncrementTick+0x15c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <xTaskIncrementTick+0x48>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	603b      	str	r3, [r7, #0]
}
 800522c:	bf00      	nop
 800522e:	e7fe      	b.n	800522e <xTaskIncrementTick+0x46>
 8005230:	4b44      	ldr	r3, [pc, #272]	; (8005344 <xTaskIncrementTick+0x15c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	4b44      	ldr	r3, [pc, #272]	; (8005348 <xTaskIncrementTick+0x160>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a42      	ldr	r2, [pc, #264]	; (8005344 <xTaskIncrementTick+0x15c>)
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	4a42      	ldr	r2, [pc, #264]	; (8005348 <xTaskIncrementTick+0x160>)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	4b41      	ldr	r3, [pc, #260]	; (800534c <xTaskIncrementTick+0x164>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3301      	adds	r3, #1
 800524a:	4a40      	ldr	r2, [pc, #256]	; (800534c <xTaskIncrementTick+0x164>)
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	f000 fad5 	bl	80057fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005252:	4b3f      	ldr	r3, [pc, #252]	; (8005350 <xTaskIncrementTick+0x168>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	429a      	cmp	r2, r3
 800525a:	d348      	bcc.n	80052ee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800525c:	4b39      	ldr	r3, [pc, #228]	; (8005344 <xTaskIncrementTick+0x15c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d104      	bne.n	8005270 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005266:	4b3a      	ldr	r3, [pc, #232]	; (8005350 <xTaskIncrementTick+0x168>)
 8005268:	f04f 32ff 	mov.w	r2, #4294967295
 800526c:	601a      	str	r2, [r3, #0]
					break;
 800526e:	e03e      	b.n	80052ee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005270:	4b34      	ldr	r3, [pc, #208]	; (8005344 <xTaskIncrementTick+0x15c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	429a      	cmp	r2, r3
 8005286:	d203      	bcs.n	8005290 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005288:	4a31      	ldr	r2, [pc, #196]	; (8005350 <xTaskIncrementTick+0x168>)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800528e:	e02e      	b.n	80052ee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	3304      	adds	r3, #4
 8005294:	4618      	mov	r0, r3
 8005296:	f7fe ff26 	bl	80040e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d004      	beq.n	80052ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	3318      	adds	r3, #24
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fe ff1d 	bl	80040e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	2201      	movs	r2, #1
 80052b2:	409a      	lsls	r2, r3
 80052b4:	4b27      	ldr	r3, [pc, #156]	; (8005354 <xTaskIncrementTick+0x16c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	4a26      	ldr	r2, [pc, #152]	; (8005354 <xTaskIncrementTick+0x16c>)
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4a23      	ldr	r2, [pc, #140]	; (8005358 <xTaskIncrementTick+0x170>)
 80052cc:	441a      	add	r2, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	3304      	adds	r3, #4
 80052d2:	4619      	mov	r1, r3
 80052d4:	4610      	mov	r0, r2
 80052d6:	f7fe fea9 	bl	800402c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052de:	4b1f      	ldr	r3, [pc, #124]	; (800535c <xTaskIncrementTick+0x174>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d3b9      	bcc.n	800525c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80052e8:	2301      	movs	r3, #1
 80052ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052ec:	e7b6      	b.n	800525c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052ee:	4b1b      	ldr	r3, [pc, #108]	; (800535c <xTaskIncrementTick+0x174>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f4:	4918      	ldr	r1, [pc, #96]	; (8005358 <xTaskIncrementTick+0x170>)
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	440b      	add	r3, r1
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d901      	bls.n	800530a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005306:	2301      	movs	r3, #1
 8005308:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800530a:	4b15      	ldr	r3, [pc, #84]	; (8005360 <xTaskIncrementTick+0x178>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <xTaskIncrementTick+0x12e>
			{
				vApplicationTickHook();
 8005312:	f7fb f9e4 	bl	80006de <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005316:	4b13      	ldr	r3, [pc, #76]	; (8005364 <xTaskIncrementTick+0x17c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d009      	beq.n	8005332 <xTaskIncrementTick+0x14a>
			{
				xSwitchRequired = pdTRUE;
 800531e:	2301      	movs	r3, #1
 8005320:	617b      	str	r3, [r7, #20]
 8005322:	e006      	b.n	8005332 <xTaskIncrementTick+0x14a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005324:	4b0e      	ldr	r3, [pc, #56]	; (8005360 <xTaskIncrementTick+0x178>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3301      	adds	r3, #1
 800532a:	4a0d      	ldr	r2, [pc, #52]	; (8005360 <xTaskIncrementTick+0x178>)
 800532c:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800532e:	f7fb f9d6 	bl	80006de <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8005332:	697b      	ldr	r3, [r7, #20]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	200009a4 	.word	0x200009a4
 8005340:	20000980 	.word	0x20000980
 8005344:	20000934 	.word	0x20000934
 8005348:	20000938 	.word	0x20000938
 800534c:	20000994 	.word	0x20000994
 8005350:	2000099c 	.word	0x2000099c
 8005354:	20000984 	.word	0x20000984
 8005358:	20000880 	.word	0x20000880
 800535c:	2000087c 	.word	0x2000087c
 8005360:	2000098c 	.word	0x2000098c
 8005364:	20000990 	.word	0x20000990

08005368 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800536e:	4b27      	ldr	r3, [pc, #156]	; (800540c <vTaskSwitchContext+0xa4>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005376:	4b26      	ldr	r3, [pc, #152]	; (8005410 <vTaskSwitchContext+0xa8>)
 8005378:	2201      	movs	r2, #1
 800537a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800537c:	e03f      	b.n	80053fe <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800537e:	4b24      	ldr	r3, [pc, #144]	; (8005410 <vTaskSwitchContext+0xa8>)
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005384:	4b23      	ldr	r3, [pc, #140]	; (8005414 <vTaskSwitchContext+0xac>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	fab3 f383 	clz	r3, r3
 8005390:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005392:	7afb      	ldrb	r3, [r7, #11]
 8005394:	f1c3 031f 	rsb	r3, r3, #31
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	491f      	ldr	r1, [pc, #124]	; (8005418 <vTaskSwitchContext+0xb0>)
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4613      	mov	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	607b      	str	r3, [r7, #4]
}
 80053c0:	bf00      	nop
 80053c2:	e7fe      	b.n	80053c2 <vTaskSwitchContext+0x5a>
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	4613      	mov	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4a12      	ldr	r2, [pc, #72]	; (8005418 <vTaskSwitchContext+0xb0>)
 80053d0:	4413      	add	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	605a      	str	r2, [r3, #4]
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	3308      	adds	r3, #8
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d104      	bne.n	80053f4 <vTaskSwitchContext+0x8c>
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	605a      	str	r2, [r3, #4]
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	4a08      	ldr	r2, [pc, #32]	; (800541c <vTaskSwitchContext+0xb4>)
 80053fc:	6013      	str	r3, [r2, #0]
}
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	200009a4 	.word	0x200009a4
 8005410:	20000990 	.word	0x20000990
 8005414:	20000984 	.word	0x20000984
 8005418:	20000880 	.word	0x20000880
 800541c:	2000087c 	.word	0x2000087c

08005420 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10a      	bne.n	8005446 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	60fb      	str	r3, [r7, #12]
}
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005446:	4b07      	ldr	r3, [pc, #28]	; (8005464 <vTaskPlaceOnEventList+0x44>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3318      	adds	r3, #24
 800544c:	4619      	mov	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fe fe10 	bl	8004074 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005454:	2101      	movs	r1, #1
 8005456:	6838      	ldr	r0, [r7, #0]
 8005458:	f000 fa94 	bl	8005984 <prvAddCurrentTaskToDelayedList>
}
 800545c:	bf00      	nop
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	2000087c 	.word	0x2000087c

08005468 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10a      	bne.n	8005490 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	617b      	str	r3, [r7, #20]
}
 800548c:	bf00      	nop
 800548e:	e7fe      	b.n	800548e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005490:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <vTaskPlaceOnEventListRestricted+0x54>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3318      	adds	r3, #24
 8005496:	4619      	mov	r1, r3
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f7fe fdc7 	bl	800402c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80054a4:	f04f 33ff 	mov.w	r3, #4294967295
 80054a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	68b8      	ldr	r0, [r7, #8]
 80054ae:	f000 fa69 	bl	8005984 <prvAddCurrentTaskToDelayedList>
	}
 80054b2:	bf00      	nop
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	2000087c 	.word	0x2000087c

080054c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10a      	bne.n	80054ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	60fb      	str	r3, [r7, #12]
}
 80054e8:	bf00      	nop
 80054ea:	e7fe      	b.n	80054ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	3318      	adds	r3, #24
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fe fdf8 	bl	80040e6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054f6:	4b1d      	ldr	r3, [pc, #116]	; (800556c <xTaskRemoveFromEventList+0xac>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d11c      	bne.n	8005538 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	3304      	adds	r3, #4
 8005502:	4618      	mov	r0, r3
 8005504:	f7fe fdef 	bl	80040e6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	2201      	movs	r2, #1
 800550e:	409a      	lsls	r2, r3
 8005510:	4b17      	ldr	r3, [pc, #92]	; (8005570 <xTaskRemoveFromEventList+0xb0>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4313      	orrs	r3, r2
 8005516:	4a16      	ldr	r2, [pc, #88]	; (8005570 <xTaskRemoveFromEventList+0xb0>)
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551e:	4613      	mov	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4a13      	ldr	r2, [pc, #76]	; (8005574 <xTaskRemoveFromEventList+0xb4>)
 8005528:	441a      	add	r2, r3
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	3304      	adds	r3, #4
 800552e:	4619      	mov	r1, r3
 8005530:	4610      	mov	r0, r2
 8005532:	f7fe fd7b 	bl	800402c <vListInsertEnd>
 8005536:	e005      	b.n	8005544 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	3318      	adds	r3, #24
 800553c:	4619      	mov	r1, r3
 800553e:	480e      	ldr	r0, [pc, #56]	; (8005578 <xTaskRemoveFromEventList+0xb8>)
 8005540:	f7fe fd74 	bl	800402c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005548:	4b0c      	ldr	r3, [pc, #48]	; (800557c <xTaskRemoveFromEventList+0xbc>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554e:	429a      	cmp	r2, r3
 8005550:	d905      	bls.n	800555e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005552:	2301      	movs	r3, #1
 8005554:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005556:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <xTaskRemoveFromEventList+0xc0>)
 8005558:	2201      	movs	r2, #1
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	e001      	b.n	8005562 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005562:	697b      	ldr	r3, [r7, #20]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	200009a4 	.word	0x200009a4
 8005570:	20000984 	.word	0x20000984
 8005574:	20000880 	.word	0x20000880
 8005578:	2000093c 	.word	0x2000093c
 800557c:	2000087c 	.word	0x2000087c
 8005580:	20000990 	.word	0x20000990

08005584 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800558c:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <vTaskInternalSetTimeOutState+0x24>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005594:	4b05      	ldr	r3, [pc, #20]	; (80055ac <vTaskInternalSetTimeOutState+0x28>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	605a      	str	r2, [r3, #4]
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	20000994 	.word	0x20000994
 80055ac:	20000980 	.word	0x20000980

080055b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10a      	bne.n	80055d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	613b      	str	r3, [r7, #16]
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	60fb      	str	r3, [r7, #12]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80055f2:	f000 fe8f 	bl	8006314 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80055f6:	4b1d      	ldr	r3, [pc, #116]	; (800566c <xTaskCheckForTimeOut+0xbc>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560e:	d102      	bne.n	8005616 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005610:	2300      	movs	r3, #0
 8005612:	61fb      	str	r3, [r7, #28]
 8005614:	e023      	b.n	800565e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	4b15      	ldr	r3, [pc, #84]	; (8005670 <xTaskCheckForTimeOut+0xc0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d007      	beq.n	8005632 <xTaskCheckForTimeOut+0x82>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	429a      	cmp	r2, r3
 800562a:	d302      	bcc.n	8005632 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800562c:	2301      	movs	r3, #1
 800562e:	61fb      	str	r3, [r7, #28]
 8005630:	e015      	b.n	800565e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	429a      	cmp	r2, r3
 800563a:	d20b      	bcs.n	8005654 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	1ad2      	subs	r2, r2, r3
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff ff9b 	bl	8005584 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800564e:	2300      	movs	r3, #0
 8005650:	61fb      	str	r3, [r7, #28]
 8005652:	e004      	b.n	800565e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800565a:	2301      	movs	r3, #1
 800565c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800565e:	f000 fe89 	bl	8006374 <vPortExitCritical>

	return xReturn;
 8005662:	69fb      	ldr	r3, [r7, #28]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3720      	adds	r7, #32
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	20000980 	.word	0x20000980
 8005670:	20000994 	.word	0x20000994

08005674 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005678:	4b03      	ldr	r3, [pc, #12]	; (8005688 <vTaskMissedYield+0x14>)
 800567a:	2201      	movs	r2, #1
 800567c:	601a      	str	r2, [r3, #0]
}
 800567e:	bf00      	nop
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	20000990 	.word	0x20000990

0800568c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005694:	f000 f854 	bl	8005740 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005698:	4b07      	ldr	r3, [pc, #28]	; (80056b8 <prvIdleTask+0x2c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d907      	bls.n	80056b0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80056a0:	4b06      	ldr	r3, [pc, #24]	; (80056bc <prvIdleTask+0x30>)
 80056a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80056b0:	f7fb f80e 	bl	80006d0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80056b4:	e7ee      	b.n	8005694 <prvIdleTask+0x8>
 80056b6:	bf00      	nop
 80056b8:	20000880 	.word	0x20000880
 80056bc:	e000ed04 	.word	0xe000ed04

080056c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056c6:	2300      	movs	r3, #0
 80056c8:	607b      	str	r3, [r7, #4]
 80056ca:	e00c      	b.n	80056e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	4613      	mov	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4a12      	ldr	r2, [pc, #72]	; (8005720 <prvInitialiseTaskLists+0x60>)
 80056d8:	4413      	add	r3, r2
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fe fc79 	bl	8003fd2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3301      	adds	r3, #1
 80056e4:	607b      	str	r3, [r7, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b06      	cmp	r3, #6
 80056ea:	d9ef      	bls.n	80056cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056ec:	480d      	ldr	r0, [pc, #52]	; (8005724 <prvInitialiseTaskLists+0x64>)
 80056ee:	f7fe fc70 	bl	8003fd2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056f2:	480d      	ldr	r0, [pc, #52]	; (8005728 <prvInitialiseTaskLists+0x68>)
 80056f4:	f7fe fc6d 	bl	8003fd2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056f8:	480c      	ldr	r0, [pc, #48]	; (800572c <prvInitialiseTaskLists+0x6c>)
 80056fa:	f7fe fc6a 	bl	8003fd2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80056fe:	480c      	ldr	r0, [pc, #48]	; (8005730 <prvInitialiseTaskLists+0x70>)
 8005700:	f7fe fc67 	bl	8003fd2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005704:	480b      	ldr	r0, [pc, #44]	; (8005734 <prvInitialiseTaskLists+0x74>)
 8005706:	f7fe fc64 	bl	8003fd2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800570a:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <prvInitialiseTaskLists+0x78>)
 800570c:	4a05      	ldr	r2, [pc, #20]	; (8005724 <prvInitialiseTaskLists+0x64>)
 800570e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005710:	4b0a      	ldr	r3, [pc, #40]	; (800573c <prvInitialiseTaskLists+0x7c>)
 8005712:	4a05      	ldr	r2, [pc, #20]	; (8005728 <prvInitialiseTaskLists+0x68>)
 8005714:	601a      	str	r2, [r3, #0]
}
 8005716:	bf00      	nop
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000880 	.word	0x20000880
 8005724:	2000090c 	.word	0x2000090c
 8005728:	20000920 	.word	0x20000920
 800572c:	2000093c 	.word	0x2000093c
 8005730:	20000950 	.word	0x20000950
 8005734:	20000968 	.word	0x20000968
 8005738:	20000934 	.word	0x20000934
 800573c:	20000938 	.word	0x20000938

08005740 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005746:	e019      	b.n	800577c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005748:	f000 fde4 	bl	8006314 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800574c:	4b10      	ldr	r3, [pc, #64]	; (8005790 <prvCheckTasksWaitingTermination+0x50>)
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3304      	adds	r3, #4
 8005758:	4618      	mov	r0, r3
 800575a:	f7fe fcc4 	bl	80040e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800575e:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <prvCheckTasksWaitingTermination+0x54>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3b01      	subs	r3, #1
 8005764:	4a0b      	ldr	r2, [pc, #44]	; (8005794 <prvCheckTasksWaitingTermination+0x54>)
 8005766:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005768:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <prvCheckTasksWaitingTermination+0x58>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3b01      	subs	r3, #1
 800576e:	4a0a      	ldr	r2, [pc, #40]	; (8005798 <prvCheckTasksWaitingTermination+0x58>)
 8005770:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005772:	f000 fdff 	bl	8006374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f810 	bl	800579c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800577c:	4b06      	ldr	r3, [pc, #24]	; (8005798 <prvCheckTasksWaitingTermination+0x58>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e1      	bne.n	8005748 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	20000950 	.word	0x20000950
 8005794:	2000097c 	.word	0x2000097c
 8005798:	20000964 	.word	0x20000964

0800579c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d108      	bne.n	80057c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 ff9c 	bl	80066f0 <vPortFree>
				vPortFree( pxTCB );
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 ff99 	bl	80066f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057be:	e018      	b.n	80057f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d103      	bne.n	80057d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 ff90 	bl	80066f0 <vPortFree>
	}
 80057d0:	e00f      	b.n	80057f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d00a      	beq.n	80057f2 <prvDeleteTCB+0x56>
	__asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	60fb      	str	r3, [r7, #12]
}
 80057ee:	bf00      	nop
 80057f0:	e7fe      	b.n	80057f0 <prvDeleteTCB+0x54>
	}
 80057f2:	bf00      	nop
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005802:	4b0c      	ldr	r3, [pc, #48]	; (8005834 <prvResetNextTaskUnblockTime+0x38>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d104      	bne.n	8005816 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800580c:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <prvResetNextTaskUnblockTime+0x3c>)
 800580e:	f04f 32ff 	mov.w	r2, #4294967295
 8005812:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005814:	e008      	b.n	8005828 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005816:	4b07      	ldr	r3, [pc, #28]	; (8005834 <prvResetNextTaskUnblockTime+0x38>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	4a04      	ldr	r2, [pc, #16]	; (8005838 <prvResetNextTaskUnblockTime+0x3c>)
 8005826:	6013      	str	r3, [r2, #0]
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	20000934 	.word	0x20000934
 8005838:	2000099c 	.word	0x2000099c

0800583c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005842:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <xTaskGetSchedulerState+0x34>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d102      	bne.n	8005850 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800584a:	2301      	movs	r3, #1
 800584c:	607b      	str	r3, [r7, #4]
 800584e:	e008      	b.n	8005862 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005850:	4b08      	ldr	r3, [pc, #32]	; (8005874 <xTaskGetSchedulerState+0x38>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d102      	bne.n	800585e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005858:	2302      	movs	r3, #2
 800585a:	607b      	str	r3, [r7, #4]
 800585c:	e001      	b.n	8005862 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800585e:	2300      	movs	r3, #0
 8005860:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005862:	687b      	ldr	r3, [r7, #4]
	}
 8005864:	4618      	mov	r0, r3
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	20000988 	.word	0x20000988
 8005874:	200009a4 	.word	0x200009a4

08005878 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005884:	2300      	movs	r3, #0
 8005886:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d06e      	beq.n	800596c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800588e:	4b3a      	ldr	r3, [pc, #232]	; (8005978 <xTaskPriorityDisinherit+0x100>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	429a      	cmp	r2, r3
 8005896:	d00a      	beq.n	80058ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	60fb      	str	r3, [r7, #12]
}
 80058aa:	bf00      	nop
 80058ac:	e7fe      	b.n	80058ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10a      	bne.n	80058cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	60bb      	str	r3, [r7, #8]
}
 80058c8:	bf00      	nop
 80058ca:	e7fe      	b.n	80058ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d0:	1e5a      	subs	r2, r3, #1
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058de:	429a      	cmp	r2, r3
 80058e0:	d044      	beq.n	800596c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d140      	bne.n	800596c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	3304      	adds	r3, #4
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe fbf9 	bl	80040e6 <uxListRemove>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d115      	bne.n	8005926 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fe:	491f      	ldr	r1, [pc, #124]	; (800597c <xTaskPriorityDisinherit+0x104>)
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	440b      	add	r3, r1
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10a      	bne.n	8005926 <xTaskPriorityDisinherit+0xae>
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	2201      	movs	r2, #1
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	43da      	mvns	r2, r3
 800591c:	4b18      	ldr	r3, [pc, #96]	; (8005980 <xTaskPriorityDisinherit+0x108>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4013      	ands	r3, r2
 8005922:	4a17      	ldr	r2, [pc, #92]	; (8005980 <xTaskPriorityDisinherit+0x108>)
 8005924:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005932:	f1c3 0207 	rsb	r2, r3, #7
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593e:	2201      	movs	r2, #1
 8005940:	409a      	lsls	r2, r3
 8005942:	4b0f      	ldr	r3, [pc, #60]	; (8005980 <xTaskPriorityDisinherit+0x108>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4313      	orrs	r3, r2
 8005948:	4a0d      	ldr	r2, [pc, #52]	; (8005980 <xTaskPriorityDisinherit+0x108>)
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4a08      	ldr	r2, [pc, #32]	; (800597c <xTaskPriorityDisinherit+0x104>)
 800595a:	441a      	add	r2, r3
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	3304      	adds	r3, #4
 8005960:	4619      	mov	r1, r3
 8005962:	4610      	mov	r0, r2
 8005964:	f7fe fb62 	bl	800402c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005968:	2301      	movs	r3, #1
 800596a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800596c:	697b      	ldr	r3, [r7, #20]
	}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	2000087c 	.word	0x2000087c
 800597c:	20000880 	.word	0x20000880
 8005980:	20000984 	.word	0x20000984

08005984 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800598e:	4b29      	ldr	r3, [pc, #164]	; (8005a34 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005994:	4b28      	ldr	r3, [pc, #160]	; (8005a38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3304      	adds	r3, #4
 800599a:	4618      	mov	r0, r3
 800599c:	f7fe fba3 	bl	80040e6 <uxListRemove>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80059a6:	4b24      	ldr	r3, [pc, #144]	; (8005a38 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	2201      	movs	r2, #1
 80059ae:	fa02 f303 	lsl.w	r3, r2, r3
 80059b2:	43da      	mvns	r2, r3
 80059b4:	4b21      	ldr	r3, [pc, #132]	; (8005a3c <prvAddCurrentTaskToDelayedList+0xb8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4013      	ands	r3, r2
 80059ba:	4a20      	ldr	r2, [pc, #128]	; (8005a3c <prvAddCurrentTaskToDelayedList+0xb8>)
 80059bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c4:	d10a      	bne.n	80059dc <prvAddCurrentTaskToDelayedList+0x58>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d007      	beq.n	80059dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059cc:	4b1a      	ldr	r3, [pc, #104]	; (8005a38 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3304      	adds	r3, #4
 80059d2:	4619      	mov	r1, r3
 80059d4:	481a      	ldr	r0, [pc, #104]	; (8005a40 <prvAddCurrentTaskToDelayedList+0xbc>)
 80059d6:	f7fe fb29 	bl	800402c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80059da:	e026      	b.n	8005a2a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4413      	add	r3, r2
 80059e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80059e4:	4b14      	ldr	r3, [pc, #80]	; (8005a38 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d209      	bcs.n	8005a08 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059f4:	4b13      	ldr	r3, [pc, #76]	; (8005a44 <prvAddCurrentTaskToDelayedList+0xc0>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	4b0f      	ldr	r3, [pc, #60]	; (8005a38 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3304      	adds	r3, #4
 80059fe:	4619      	mov	r1, r3
 8005a00:	4610      	mov	r0, r2
 8005a02:	f7fe fb37 	bl	8004074 <vListInsert>
}
 8005a06:	e010      	b.n	8005a2a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a08:	4b0f      	ldr	r3, [pc, #60]	; (8005a48 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3304      	adds	r3, #4
 8005a12:	4619      	mov	r1, r3
 8005a14:	4610      	mov	r0, r2
 8005a16:	f7fe fb2d 	bl	8004074 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a1a:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d202      	bcs.n	8005a2a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005a24:	4a09      	ldr	r2, [pc, #36]	; (8005a4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	6013      	str	r3, [r2, #0]
}
 8005a2a:	bf00      	nop
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	20000980 	.word	0x20000980
 8005a38:	2000087c 	.word	0x2000087c
 8005a3c:	20000984 	.word	0x20000984
 8005a40:	20000968 	.word	0x20000968
 8005a44:	20000938 	.word	0x20000938
 8005a48:	20000934 	.word	0x20000934
 8005a4c:	2000099c 	.word	0x2000099c

08005a50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08a      	sub	sp, #40	; 0x28
 8005a54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a5a:	f000 faeb 	bl	8006034 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a5e:	4b1c      	ldr	r3, [pc, #112]	; (8005ad0 <xTimerCreateTimerTask+0x80>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d021      	beq.n	8005aaa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a6e:	1d3a      	adds	r2, r7, #4
 8005a70:	f107 0108 	add.w	r1, r7, #8
 8005a74:	f107 030c 	add.w	r3, r7, #12
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7fa fe51 	bl	8000720 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	9202      	str	r2, [sp, #8]
 8005a86:	9301      	str	r3, [sp, #4]
 8005a88:	2302      	movs	r3, #2
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	460a      	mov	r2, r1
 8005a90:	4910      	ldr	r1, [pc, #64]	; (8005ad4 <xTimerCreateTimerTask+0x84>)
 8005a92:	4811      	ldr	r0, [pc, #68]	; (8005ad8 <xTimerCreateTimerTask+0x88>)
 8005a94:	f7ff f8c0 	bl	8004c18 <xTaskCreateStatic>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	4a10      	ldr	r2, [pc, #64]	; (8005adc <xTimerCreateTimerTask+0x8c>)
 8005a9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005a9e:	4b0f      	ldr	r3, [pc, #60]	; (8005adc <xTimerCreateTimerTask+0x8c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10a      	bne.n	8005ac6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	613b      	str	r3, [r7, #16]
}
 8005ac2:	bf00      	nop
 8005ac4:	e7fe      	b.n	8005ac4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ac6:	697b      	ldr	r3, [r7, #20]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	200009d8 	.word	0x200009d8
 8005ad4:	08007354 	.word	0x08007354
 8005ad8:	08005c15 	.word	0x08005c15
 8005adc:	200009dc 	.word	0x200009dc

08005ae0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b08a      	sub	sp, #40	; 0x28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10a      	bne.n	8005b0e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	623b      	str	r3, [r7, #32]
}
 8005b0a:	bf00      	nop
 8005b0c:	e7fe      	b.n	8005b0c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b0e:	4b1a      	ldr	r3, [pc, #104]	; (8005b78 <xTimerGenericCommand+0x98>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d02a      	beq.n	8005b6c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b05      	cmp	r3, #5
 8005b26:	dc18      	bgt.n	8005b5a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b28:	f7ff fe88 	bl	800583c <xTaskGetSchedulerState>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d109      	bne.n	8005b46 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b32:	4b11      	ldr	r3, [pc, #68]	; (8005b78 <xTimerGenericCommand+0x98>)
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	f107 0114 	add.w	r1, r7, #20
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b3e:	f7fe fc83 	bl	8004448 <xQueueGenericSend>
 8005b42:	6278      	str	r0, [r7, #36]	; 0x24
 8005b44:	e012      	b.n	8005b6c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b46:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <xTimerGenericCommand+0x98>)
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	f107 0114 	add.w	r1, r7, #20
 8005b4e:	2300      	movs	r3, #0
 8005b50:	2200      	movs	r2, #0
 8005b52:	f7fe fc79 	bl	8004448 <xQueueGenericSend>
 8005b56:	6278      	str	r0, [r7, #36]	; 0x24
 8005b58:	e008      	b.n	8005b6c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b5a:	4b07      	ldr	r3, [pc, #28]	; (8005b78 <xTimerGenericCommand+0x98>)
 8005b5c:	6818      	ldr	r0, [r3, #0]
 8005b5e:	f107 0114 	add.w	r1, r7, #20
 8005b62:	2300      	movs	r3, #0
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	f7fe fd6d 	bl	8004644 <xQueueGenericSendFromISR>
 8005b6a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3728      	adds	r7, #40	; 0x28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	200009d8 	.word	0x200009d8

08005b7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b088      	sub	sp, #32
 8005b80:	af02      	add	r7, sp, #8
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b86:	4b22      	ldr	r3, [pc, #136]	; (8005c10 <prvProcessExpiredTimer+0x94>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	3304      	adds	r3, #4
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fe faa6 	bl	80040e6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d022      	beq.n	8005bee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	699a      	ldr	r2, [r3, #24]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	18d1      	adds	r1, r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	6978      	ldr	r0, [r7, #20]
 8005bb6:	f000 f8d1 	bl	8005d5c <prvInsertTimerInActiveList>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01f      	beq.n	8005c00 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	2100      	movs	r1, #0
 8005bca:	6978      	ldr	r0, [r7, #20]
 8005bcc:	f7ff ff88 	bl	8005ae0 <xTimerGenericCommand>
 8005bd0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d113      	bne.n	8005c00 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	60fb      	str	r3, [r7, #12]
}
 8005bea:	bf00      	nop
 8005bec:	e7fe      	b.n	8005bec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bf4:	f023 0301 	bic.w	r3, r3, #1
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	6978      	ldr	r0, [r7, #20]
 8005c06:	4798      	blx	r3
}
 8005c08:	bf00      	nop
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	200009d0 	.word	0x200009d0

08005c14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c1c:	f107 0308 	add.w	r3, r7, #8
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 f857 	bl	8005cd4 <prvGetNextExpireTime>
 8005c26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 f803 	bl	8005c38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c32:	f000 f8d5 	bl	8005de0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c36:	e7f1      	b.n	8005c1c <prvTimerTask+0x8>

08005c38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c42:	f7ff fa17 	bl	8005074 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c46:	f107 0308 	add.w	r3, r7, #8
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 f866 	bl	8005d1c <prvSampleTimeNow>
 8005c50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d130      	bne.n	8005cba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10a      	bne.n	8005c74 <prvProcessTimerOrBlockTask+0x3c>
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d806      	bhi.n	8005c74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c66:	f7ff fa13 	bl	8005090 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c6a:	68f9      	ldr	r1, [r7, #12]
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff ff85 	bl	8005b7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c72:	e024      	b.n	8005cbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d008      	beq.n	8005c8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c7a:	4b13      	ldr	r3, [pc, #76]	; (8005cc8 <prvProcessTimerOrBlockTask+0x90>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <prvProcessTimerOrBlockTask+0x50>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <prvProcessTimerOrBlockTask+0x52>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c8c:	4b0f      	ldr	r3, [pc, #60]	; (8005ccc <prvProcessTimerOrBlockTask+0x94>)
 8005c8e:	6818      	ldr	r0, [r3, #0]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	f7fe ff89 	bl	8004bb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c9e:	f7ff f9f7 	bl	8005090 <xTaskResumeAll>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ca8:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <prvProcessTimerOrBlockTask+0x98>)
 8005caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	f3bf 8f6f 	isb	sy
}
 8005cb8:	e001      	b.n	8005cbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005cba:	f7ff f9e9 	bl	8005090 <xTaskResumeAll>
}
 8005cbe:	bf00      	nop
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	200009d4 	.word	0x200009d4
 8005ccc:	200009d8 	.word	0x200009d8
 8005cd0:	e000ed04 	.word	0xe000ed04

08005cd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005cdc:	4b0e      	ldr	r3, [pc, #56]	; (8005d18 <prvGetNextExpireTime+0x44>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <prvGetNextExpireTime+0x16>
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	e000      	b.n	8005cec <prvGetNextExpireTime+0x18>
 8005cea:	2200      	movs	r2, #0
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d105      	bne.n	8005d04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005cf8:	4b07      	ldr	r3, [pc, #28]	; (8005d18 <prvGetNextExpireTime+0x44>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	e001      	b.n	8005d08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d08:	68fb      	ldr	r3, [r7, #12]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	200009d0 	.word	0x200009d0

08005d1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d24:	f7ff fa50 	bl	80051c8 <xTaskGetTickCount>
 8005d28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d2a:	4b0b      	ldr	r3, [pc, #44]	; (8005d58 <prvSampleTimeNow+0x3c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d205      	bcs.n	8005d40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d34:	f000 f91a 	bl	8005f6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	e002      	b.n	8005d46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d46:	4a04      	ldr	r2, [pc, #16]	; (8005d58 <prvSampleTimeNow+0x3c>)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	200009e0 	.word	0x200009e0

08005d5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d812      	bhi.n	8005da8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	1ad2      	subs	r2, r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d302      	bcc.n	8005d96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005d90:	2301      	movs	r3, #1
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	e01b      	b.n	8005dce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d96:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <prvInsertTimerInActiveList+0x7c>)
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4610      	mov	r0, r2
 8005da2:	f7fe f967 	bl	8004074 <vListInsert>
 8005da6:	e012      	b.n	8005dce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d206      	bcs.n	8005dbe <prvInsertTimerInActiveList+0x62>
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d302      	bcc.n	8005dbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005db8:	2301      	movs	r3, #1
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	e007      	b.n	8005dce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dbe:	4b07      	ldr	r3, [pc, #28]	; (8005ddc <prvInsertTimerInActiveList+0x80>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4610      	mov	r0, r2
 8005dca:	f7fe f953 	bl	8004074 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005dce:	697b      	ldr	r3, [r7, #20]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	200009d4 	.word	0x200009d4
 8005ddc:	200009d0 	.word	0x200009d0

08005de0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08c      	sub	sp, #48	; 0x30
 8005de4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005de6:	e0ae      	b.n	8005f46 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f2c0 80aa 	blt.w	8005f44 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d004      	beq.n	8005e06 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	3304      	adds	r3, #4
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fe f970 	bl	80040e6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e06:	1d3b      	adds	r3, r7, #4
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7ff ff87 	bl	8005d1c <prvSampleTimeNow>
 8005e0e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b09      	cmp	r3, #9
 8005e14:	f200 8097 	bhi.w	8005f46 <prvProcessReceivedCommands+0x166>
 8005e18:	a201      	add	r2, pc, #4	; (adr r2, 8005e20 <prvProcessReceivedCommands+0x40>)
 8005e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1e:	bf00      	nop
 8005e20:	08005e49 	.word	0x08005e49
 8005e24:	08005e49 	.word	0x08005e49
 8005e28:	08005e49 	.word	0x08005e49
 8005e2c:	08005ebd 	.word	0x08005ebd
 8005e30:	08005ed1 	.word	0x08005ed1
 8005e34:	08005f1b 	.word	0x08005f1b
 8005e38:	08005e49 	.word	0x08005e49
 8005e3c:	08005e49 	.word	0x08005e49
 8005e40:	08005ebd 	.word	0x08005ebd
 8005e44:	08005ed1 	.word	0x08005ed1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e4e:	f043 0301 	orr.w	r3, r3, #1
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	18d1      	adds	r1, r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6a3a      	ldr	r2, [r7, #32]
 8005e66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e68:	f7ff ff78 	bl	8005d5c <prvInsertTimerInActiveList>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d069      	beq.n	8005f46 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d05e      	beq.n	8005f46 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	441a      	add	r2, r3
 8005e90:	2300      	movs	r3, #0
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	2300      	movs	r3, #0
 8005e96:	2100      	movs	r1, #0
 8005e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e9a:	f7ff fe21 	bl	8005ae0 <xTimerGenericCommand>
 8005e9e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d14f      	bne.n	8005f46 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	61bb      	str	r3, [r7, #24]
}
 8005eb8:	bf00      	nop
 8005eba:	e7fe      	b.n	8005eba <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ec2:	f023 0301 	bic.w	r3, r3, #1
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8005ece:	e03a      	b.n	8005f46 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ed6:	f043 0301 	orr.w	r3, r3, #1
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	617b      	str	r3, [r7, #20]
}
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	699a      	ldr	r2, [r3, #24]
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	18d1      	adds	r1, r2, r3
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	6a3a      	ldr	r2, [r7, #32]
 8005f12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f14:	f7ff ff22 	bl	8005d5c <prvInsertTimerInActiveList>
					break;
 8005f18:	e015      	b.n	8005f46 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d103      	bne.n	8005f30 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8005f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f2a:	f000 fbe1 	bl	80066f0 <vPortFree>
 8005f2e:	e00a      	b.n	8005f46 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f36:	f023 0301 	bic.w	r3, r3, #1
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f42:	e000      	b.n	8005f46 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005f44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f46:	4b08      	ldr	r3, [pc, #32]	; (8005f68 <prvProcessReceivedCommands+0x188>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f107 0108 	add.w	r1, r7, #8
 8005f4e:	2200      	movs	r2, #0
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7fe fc13 	bl	800477c <xQueueReceive>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f47f af45 	bne.w	8005de8 <prvProcessReceivedCommands+0x8>
	}
}
 8005f5e:	bf00      	nop
 8005f60:	bf00      	nop
 8005f62:	3728      	adds	r7, #40	; 0x28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	200009d8 	.word	0x200009d8

08005f6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f72:	e048      	b.n	8006006 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f74:	4b2d      	ldr	r3, [pc, #180]	; (800602c <prvSwitchTimerLists+0xc0>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f7e:	4b2b      	ldr	r3, [pc, #172]	; (800602c <prvSwitchTimerLists+0xc0>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fe f8aa 	bl	80040e6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d02e      	beq.n	8006006 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	4413      	add	r3, r2
 8005fb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d90e      	bls.n	8005fd8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fc6:	4b19      	ldr	r3, [pc, #100]	; (800602c <prvSwitchTimerLists+0xc0>)
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	f7fe f84f 	bl	8004074 <vListInsert>
 8005fd6:	e016      	b.n	8006006 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fd8:	2300      	movs	r3, #0
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	2300      	movs	r3, #0
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f7ff fd7c 	bl	8005ae0 <xTimerGenericCommand>
 8005fe8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10a      	bne.n	8006006 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	603b      	str	r3, [r7, #0]
}
 8006002:	bf00      	nop
 8006004:	e7fe      	b.n	8006004 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006006:	4b09      	ldr	r3, [pc, #36]	; (800602c <prvSwitchTimerLists+0xc0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1b1      	bne.n	8005f74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006010:	4b06      	ldr	r3, [pc, #24]	; (800602c <prvSwitchTimerLists+0xc0>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006016:	4b06      	ldr	r3, [pc, #24]	; (8006030 <prvSwitchTimerLists+0xc4>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a04      	ldr	r2, [pc, #16]	; (800602c <prvSwitchTimerLists+0xc0>)
 800601c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800601e:	4a04      	ldr	r2, [pc, #16]	; (8006030 <prvSwitchTimerLists+0xc4>)
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	6013      	str	r3, [r2, #0]
}
 8006024:	bf00      	nop
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	200009d0 	.word	0x200009d0
 8006030:	200009d4 	.word	0x200009d4

08006034 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800603a:	f000 f96b 	bl	8006314 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800603e:	4b15      	ldr	r3, [pc, #84]	; (8006094 <prvCheckForValidListAndQueue+0x60>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d120      	bne.n	8006088 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006046:	4814      	ldr	r0, [pc, #80]	; (8006098 <prvCheckForValidListAndQueue+0x64>)
 8006048:	f7fd ffc3 	bl	8003fd2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800604c:	4813      	ldr	r0, [pc, #76]	; (800609c <prvCheckForValidListAndQueue+0x68>)
 800604e:	f7fd ffc0 	bl	8003fd2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006052:	4b13      	ldr	r3, [pc, #76]	; (80060a0 <prvCheckForValidListAndQueue+0x6c>)
 8006054:	4a10      	ldr	r2, [pc, #64]	; (8006098 <prvCheckForValidListAndQueue+0x64>)
 8006056:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006058:	4b12      	ldr	r3, [pc, #72]	; (80060a4 <prvCheckForValidListAndQueue+0x70>)
 800605a:	4a10      	ldr	r2, [pc, #64]	; (800609c <prvCheckForValidListAndQueue+0x68>)
 800605c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800605e:	2300      	movs	r3, #0
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	4b11      	ldr	r3, [pc, #68]	; (80060a8 <prvCheckForValidListAndQueue+0x74>)
 8006064:	4a11      	ldr	r2, [pc, #68]	; (80060ac <prvCheckForValidListAndQueue+0x78>)
 8006066:	210c      	movs	r1, #12
 8006068:	200a      	movs	r0, #10
 800606a:	f7fe f8cf 	bl	800420c <xQueueGenericCreateStatic>
 800606e:	4603      	mov	r3, r0
 8006070:	4a08      	ldr	r2, [pc, #32]	; (8006094 <prvCheckForValidListAndQueue+0x60>)
 8006072:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006074:	4b07      	ldr	r3, [pc, #28]	; (8006094 <prvCheckForValidListAndQueue+0x60>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d005      	beq.n	8006088 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <prvCheckForValidListAndQueue+0x60>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	490b      	ldr	r1, [pc, #44]	; (80060b0 <prvCheckForValidListAndQueue+0x7c>)
 8006082:	4618      	mov	r0, r3
 8006084:	f7fe fd6a 	bl	8004b5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006088:	f000 f974 	bl	8006374 <vPortExitCritical>
}
 800608c:	bf00      	nop
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	200009d8 	.word	0x200009d8
 8006098:	200009a8 	.word	0x200009a8
 800609c:	200009bc 	.word	0x200009bc
 80060a0:	200009d0 	.word	0x200009d0
 80060a4:	200009d4 	.word	0x200009d4
 80060a8:	20000a5c 	.word	0x20000a5c
 80060ac:	200009e4 	.word	0x200009e4
 80060b0:	0800735c 	.word	0x0800735c

080060b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	3b04      	subs	r3, #4
 80060c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3b04      	subs	r3, #4
 80060d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f023 0201 	bic.w	r2, r3, #1
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	3b04      	subs	r3, #4
 80060e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060e4:	4a0c      	ldr	r2, [pc, #48]	; (8006118 <pxPortInitialiseStack+0x64>)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3b14      	subs	r3, #20
 80060ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3b04      	subs	r3, #4
 80060fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f06f 0202 	mvn.w	r2, #2
 8006102:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3b20      	subs	r3, #32
 8006108:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800610a:	68fb      	ldr	r3, [r7, #12]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	0800611d 	.word	0x0800611d

0800611c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006122:	2300      	movs	r3, #0
 8006124:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006126:	4b12      	ldr	r3, [pc, #72]	; (8006170 <prvTaskExitError+0x54>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612e:	d00a      	beq.n	8006146 <prvTaskExitError+0x2a>
	__asm volatile
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	60fb      	str	r3, [r7, #12]
}
 8006142:	bf00      	nop
 8006144:	e7fe      	b.n	8006144 <prvTaskExitError+0x28>
	__asm volatile
 8006146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	60bb      	str	r3, [r7, #8]
}
 8006158:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800615a:	bf00      	nop
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0fc      	beq.n	800615c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006162:	bf00      	nop
 8006164:	bf00      	nop
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	2000000c 	.word	0x2000000c
	...

08006180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006180:	4b07      	ldr	r3, [pc, #28]	; (80061a0 <pxCurrentTCBConst2>)
 8006182:	6819      	ldr	r1, [r3, #0]
 8006184:	6808      	ldr	r0, [r1, #0]
 8006186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618a:	f380 8809 	msr	PSP, r0
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f04f 0000 	mov.w	r0, #0
 8006196:	f380 8811 	msr	BASEPRI, r0
 800619a:	4770      	bx	lr
 800619c:	f3af 8000 	nop.w

080061a0 <pxCurrentTCBConst2>:
 80061a0:	2000087c 	.word	0x2000087c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop

080061a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80061a8:	4808      	ldr	r0, [pc, #32]	; (80061cc <prvPortStartFirstTask+0x24>)
 80061aa:	6800      	ldr	r0, [r0, #0]
 80061ac:	6800      	ldr	r0, [r0, #0]
 80061ae:	f380 8808 	msr	MSP, r0
 80061b2:	f04f 0000 	mov.w	r0, #0
 80061b6:	f380 8814 	msr	CONTROL, r0
 80061ba:	b662      	cpsie	i
 80061bc:	b661      	cpsie	f
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	df00      	svc	0
 80061c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061ca:	bf00      	nop
 80061cc:	e000ed08 	.word	0xe000ed08

080061d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80061d6:	4b46      	ldr	r3, [pc, #280]	; (80062f0 <xPortStartScheduler+0x120>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a46      	ldr	r2, [pc, #280]	; (80062f4 <xPortStartScheduler+0x124>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d10a      	bne.n	80061f6 <xPortStartScheduler+0x26>
	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	613b      	str	r3, [r7, #16]
}
 80061f2:	bf00      	nop
 80061f4:	e7fe      	b.n	80061f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80061f6:	4b3e      	ldr	r3, [pc, #248]	; (80062f0 <xPortStartScheduler+0x120>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a3f      	ldr	r2, [pc, #252]	; (80062f8 <xPortStartScheduler+0x128>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d10a      	bne.n	8006216 <xPortStartScheduler+0x46>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	60fb      	str	r3, [r7, #12]
}
 8006212:	bf00      	nop
 8006214:	e7fe      	b.n	8006214 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006216:	4b39      	ldr	r3, [pc, #228]	; (80062fc <xPortStartScheduler+0x12c>)
 8006218:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	b2db      	uxtb	r3, r3
 8006220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	22ff      	movs	r2, #255	; 0xff
 8006226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	b2db      	uxtb	r3, r3
 800622e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	b2db      	uxtb	r3, r3
 8006234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006238:	b2da      	uxtb	r2, r3
 800623a:	4b31      	ldr	r3, [pc, #196]	; (8006300 <xPortStartScheduler+0x130>)
 800623c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800623e:	4b31      	ldr	r3, [pc, #196]	; (8006304 <xPortStartScheduler+0x134>)
 8006240:	2207      	movs	r2, #7
 8006242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006244:	e009      	b.n	800625a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006246:	4b2f      	ldr	r3, [pc, #188]	; (8006304 <xPortStartScheduler+0x134>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3b01      	subs	r3, #1
 800624c:	4a2d      	ldr	r2, [pc, #180]	; (8006304 <xPortStartScheduler+0x134>)
 800624e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	b2db      	uxtb	r3, r3
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	b2db      	uxtb	r3, r3
 8006258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800625a:	78fb      	ldrb	r3, [r7, #3]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006262:	2b80      	cmp	r3, #128	; 0x80
 8006264:	d0ef      	beq.n	8006246 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006266:	4b27      	ldr	r3, [pc, #156]	; (8006304 <xPortStartScheduler+0x134>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f1c3 0307 	rsb	r3, r3, #7
 800626e:	2b04      	cmp	r3, #4
 8006270:	d00a      	beq.n	8006288 <xPortStartScheduler+0xb8>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	60bb      	str	r3, [r7, #8]
}
 8006284:	bf00      	nop
 8006286:	e7fe      	b.n	8006286 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006288:	4b1e      	ldr	r3, [pc, #120]	; (8006304 <xPortStartScheduler+0x134>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	021b      	lsls	r3, r3, #8
 800628e:	4a1d      	ldr	r2, [pc, #116]	; (8006304 <xPortStartScheduler+0x134>)
 8006290:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006292:	4b1c      	ldr	r3, [pc, #112]	; (8006304 <xPortStartScheduler+0x134>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800629a:	4a1a      	ldr	r2, [pc, #104]	; (8006304 <xPortStartScheduler+0x134>)
 800629c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062a6:	4b18      	ldr	r3, [pc, #96]	; (8006308 <xPortStartScheduler+0x138>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a17      	ldr	r2, [pc, #92]	; (8006308 <xPortStartScheduler+0x138>)
 80062ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062b2:	4b15      	ldr	r3, [pc, #84]	; (8006308 <xPortStartScheduler+0x138>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a14      	ldr	r2, [pc, #80]	; (8006308 <xPortStartScheduler+0x138>)
 80062b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062be:	f000 f8dd 	bl	800647c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062c2:	4b12      	ldr	r3, [pc, #72]	; (800630c <xPortStartScheduler+0x13c>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80062c8:	f000 f8fc 	bl	80064c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80062cc:	4b10      	ldr	r3, [pc, #64]	; (8006310 <xPortStartScheduler+0x140>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a0f      	ldr	r2, [pc, #60]	; (8006310 <xPortStartScheduler+0x140>)
 80062d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80062d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062d8:	f7ff ff66 	bl	80061a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062dc:	f7ff f844 	bl	8005368 <vTaskSwitchContext>
	prvTaskExitError();
 80062e0:	f7ff ff1c 	bl	800611c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	e000ed00 	.word	0xe000ed00
 80062f4:	410fc271 	.word	0x410fc271
 80062f8:	410fc270 	.word	0x410fc270
 80062fc:	e000e400 	.word	0xe000e400
 8006300:	20000aa4 	.word	0x20000aa4
 8006304:	20000aa8 	.word	0x20000aa8
 8006308:	e000ed20 	.word	0xe000ed20
 800630c:	2000000c 	.word	0x2000000c
 8006310:	e000ef34 	.word	0xe000ef34

08006314 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
	__asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	607b      	str	r3, [r7, #4]
}
 800632c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800632e:	4b0f      	ldr	r3, [pc, #60]	; (800636c <vPortEnterCritical+0x58>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3301      	adds	r3, #1
 8006334:	4a0d      	ldr	r2, [pc, #52]	; (800636c <vPortEnterCritical+0x58>)
 8006336:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006338:	4b0c      	ldr	r3, [pc, #48]	; (800636c <vPortEnterCritical+0x58>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d10f      	bne.n	8006360 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006340:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <vPortEnterCritical+0x5c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <vPortEnterCritical+0x4c>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	603b      	str	r3, [r7, #0]
}
 800635c:	bf00      	nop
 800635e:	e7fe      	b.n	800635e <vPortEnterCritical+0x4a>
	}
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	2000000c 	.word	0x2000000c
 8006370:	e000ed04 	.word	0xe000ed04

08006374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800637a:	4b12      	ldr	r3, [pc, #72]	; (80063c4 <vPortExitCritical+0x50>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10a      	bne.n	8006398 <vPortExitCritical+0x24>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	607b      	str	r3, [r7, #4]
}
 8006394:	bf00      	nop
 8006396:	e7fe      	b.n	8006396 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006398:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <vPortExitCritical+0x50>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3b01      	subs	r3, #1
 800639e:	4a09      	ldr	r2, [pc, #36]	; (80063c4 <vPortExitCritical+0x50>)
 80063a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063a2:	4b08      	ldr	r3, [pc, #32]	; (80063c4 <vPortExitCritical+0x50>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d105      	bne.n	80063b6 <vPortExitCritical+0x42>
 80063aa:	2300      	movs	r3, #0
 80063ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	f383 8811 	msr	BASEPRI, r3
}
 80063b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	2000000c 	.word	0x2000000c
	...

080063d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063d0:	f3ef 8009 	mrs	r0, PSP
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	4b15      	ldr	r3, [pc, #84]	; (8006430 <pxCurrentTCBConst>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	f01e 0f10 	tst.w	lr, #16
 80063e0:	bf08      	it	eq
 80063e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80063e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ea:	6010      	str	r0, [r2, #0]
 80063ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80063f4:	f380 8811 	msr	BASEPRI, r0
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f7fe ffb2 	bl	8005368 <vTaskSwitchContext>
 8006404:	f04f 0000 	mov.w	r0, #0
 8006408:	f380 8811 	msr	BASEPRI, r0
 800640c:	bc09      	pop	{r0, r3}
 800640e:	6819      	ldr	r1, [r3, #0]
 8006410:	6808      	ldr	r0, [r1, #0]
 8006412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006416:	f01e 0f10 	tst.w	lr, #16
 800641a:	bf08      	it	eq
 800641c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006420:	f380 8809 	msr	PSP, r0
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	f3af 8000 	nop.w

08006430 <pxCurrentTCBConst>:
 8006430:	2000087c 	.word	0x2000087c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006434:	bf00      	nop
 8006436:	bf00      	nop

08006438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	607b      	str	r3, [r7, #4]
}
 8006450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006452:	f7fe fec9 	bl	80051e8 <xTaskIncrementTick>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800645c:	4b06      	ldr	r3, [pc, #24]	; (8006478 <SysTick_Handler+0x40>)
 800645e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	2300      	movs	r3, #0
 8006466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	f383 8811 	msr	BASEPRI, r3
}
 800646e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006470:	bf00      	nop
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	e000ed04 	.word	0xe000ed04

0800647c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006480:	4b0b      	ldr	r3, [pc, #44]	; (80064b0 <vPortSetupTimerInterrupt+0x34>)
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006486:	4b0b      	ldr	r3, [pc, #44]	; (80064b4 <vPortSetupTimerInterrupt+0x38>)
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800648c:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <vPortSetupTimerInterrupt+0x3c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a0a      	ldr	r2, [pc, #40]	; (80064bc <vPortSetupTimerInterrupt+0x40>)
 8006492:	fba2 2303 	umull	r2, r3, r2, r3
 8006496:	099b      	lsrs	r3, r3, #6
 8006498:	4a09      	ldr	r2, [pc, #36]	; (80064c0 <vPortSetupTimerInterrupt+0x44>)
 800649a:	3b01      	subs	r3, #1
 800649c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800649e:	4b04      	ldr	r3, [pc, #16]	; (80064b0 <vPortSetupTimerInterrupt+0x34>)
 80064a0:	2207      	movs	r2, #7
 80064a2:	601a      	str	r2, [r3, #0]
}
 80064a4:	bf00      	nop
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	e000e010 	.word	0xe000e010
 80064b4:	e000e018 	.word	0xe000e018
 80064b8:	20000000 	.word	0x20000000
 80064bc:	10624dd3 	.word	0x10624dd3
 80064c0:	e000e014 	.word	0xe000e014

080064c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80064c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80064d4 <vPortEnableVFP+0x10>
 80064c8:	6801      	ldr	r1, [r0, #0]
 80064ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80064ce:	6001      	str	r1, [r0, #0]
 80064d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80064d2:	bf00      	nop
 80064d4:	e000ed88 	.word	0xe000ed88

080064d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80064de:	f3ef 8305 	mrs	r3, IPSR
 80064e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2b0f      	cmp	r3, #15
 80064e8:	d914      	bls.n	8006514 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80064ea:	4a17      	ldr	r2, [pc, #92]	; (8006548 <vPortValidateInterruptPriority+0x70>)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4413      	add	r3, r2
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064f4:	4b15      	ldr	r3, [pc, #84]	; (800654c <vPortValidateInterruptPriority+0x74>)
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	7afa      	ldrb	r2, [r7, #11]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d20a      	bcs.n	8006514 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	607b      	str	r3, [r7, #4]
}
 8006510:	bf00      	nop
 8006512:	e7fe      	b.n	8006512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006514:	4b0e      	ldr	r3, [pc, #56]	; (8006550 <vPortValidateInterruptPriority+0x78>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800651c:	4b0d      	ldr	r3, [pc, #52]	; (8006554 <vPortValidateInterruptPriority+0x7c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	429a      	cmp	r2, r3
 8006522:	d90a      	bls.n	800653a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006528:	f383 8811 	msr	BASEPRI, r3
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	603b      	str	r3, [r7, #0]
}
 8006536:	bf00      	nop
 8006538:	e7fe      	b.n	8006538 <vPortValidateInterruptPriority+0x60>
	}
 800653a:	bf00      	nop
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	e000e3f0 	.word	0xe000e3f0
 800654c:	20000aa4 	.word	0x20000aa4
 8006550:	e000ed0c 	.word	0xe000ed0c
 8006554:	20000aa8 	.word	0x20000aa8

08006558 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08a      	sub	sp, #40	; 0x28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006560:	2300      	movs	r3, #0
 8006562:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006564:	f7fe fd86 	bl	8005074 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006568:	4b5b      	ldr	r3, [pc, #364]	; (80066d8 <pvPortMalloc+0x180>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006570:	f000 f920 	bl	80067b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006574:	4b59      	ldr	r3, [pc, #356]	; (80066dc <pvPortMalloc+0x184>)
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4013      	ands	r3, r2
 800657c:	2b00      	cmp	r3, #0
 800657e:	f040 8093 	bne.w	80066a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01d      	beq.n	80065c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006588:	2208      	movs	r2, #8
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4413      	add	r3, r2
 800658e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	2b00      	cmp	r3, #0
 8006598:	d014      	beq.n	80065c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f023 0307 	bic.w	r3, r3, #7
 80065a0:	3308      	adds	r3, #8
 80065a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <pvPortMalloc+0x6c>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	617b      	str	r3, [r7, #20]
}
 80065c0:	bf00      	nop
 80065c2:	e7fe      	b.n	80065c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d06e      	beq.n	80066a8 <pvPortMalloc+0x150>
 80065ca:	4b45      	ldr	r3, [pc, #276]	; (80066e0 <pvPortMalloc+0x188>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d869      	bhi.n	80066a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80065d4:	4b43      	ldr	r3, [pc, #268]	; (80066e4 <pvPortMalloc+0x18c>)
 80065d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80065d8:	4b42      	ldr	r3, [pc, #264]	; (80066e4 <pvPortMalloc+0x18c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065de:	e004      	b.n	80065ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d903      	bls.n	80065fc <pvPortMalloc+0xa4>
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1f1      	bne.n	80065e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065fc:	4b36      	ldr	r3, [pc, #216]	; (80066d8 <pvPortMalloc+0x180>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006602:	429a      	cmp	r2, r3
 8006604:	d050      	beq.n	80066a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2208      	movs	r2, #8
 800660c:	4413      	add	r3, r2
 800660e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	1ad2      	subs	r2, r2, r3
 8006620:	2308      	movs	r3, #8
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	429a      	cmp	r2, r3
 8006626:	d91f      	bls.n	8006668 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4413      	add	r3, r2
 800662e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <pvPortMalloc+0xf8>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	613b      	str	r3, [r7, #16]
}
 800664c:	bf00      	nop
 800664e:	e7fe      	b.n	800664e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	1ad2      	subs	r2, r2, r3
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006662:	69b8      	ldr	r0, [r7, #24]
 8006664:	f000 f908 	bl	8006878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006668:	4b1d      	ldr	r3, [pc, #116]	; (80066e0 <pvPortMalloc+0x188>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	4a1b      	ldr	r2, [pc, #108]	; (80066e0 <pvPortMalloc+0x188>)
 8006674:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006676:	4b1a      	ldr	r3, [pc, #104]	; (80066e0 <pvPortMalloc+0x188>)
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	4b1b      	ldr	r3, [pc, #108]	; (80066e8 <pvPortMalloc+0x190>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d203      	bcs.n	800668a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006682:	4b17      	ldr	r3, [pc, #92]	; (80066e0 <pvPortMalloc+0x188>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a18      	ldr	r2, [pc, #96]	; (80066e8 <pvPortMalloc+0x190>)
 8006688:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	4b13      	ldr	r3, [pc, #76]	; (80066dc <pvPortMalloc+0x184>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	431a      	orrs	r2, r3
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800669e:	4b13      	ldr	r3, [pc, #76]	; (80066ec <pvPortMalloc+0x194>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3301      	adds	r3, #1
 80066a4:	4a11      	ldr	r2, [pc, #68]	; (80066ec <pvPortMalloc+0x194>)
 80066a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80066a8:	f7fe fcf2 	bl	8005090 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <pvPortMalloc+0x174>
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	60fb      	str	r3, [r7, #12]
}
 80066c8:	bf00      	nop
 80066ca:	e7fe      	b.n	80066ca <pvPortMalloc+0x172>
	return pvReturn;
 80066cc:	69fb      	ldr	r3, [r7, #28]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3728      	adds	r7, #40	; 0x28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	200046b4 	.word	0x200046b4
 80066dc:	200046c8 	.word	0x200046c8
 80066e0:	200046b8 	.word	0x200046b8
 80066e4:	200046ac 	.word	0x200046ac
 80066e8:	200046bc 	.word	0x200046bc
 80066ec:	200046c0 	.word	0x200046c0

080066f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d04d      	beq.n	800679e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006702:	2308      	movs	r3, #8
 8006704:	425b      	negs	r3, r3
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4413      	add	r3, r2
 800670a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <vPortFree+0xb8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4013      	ands	r3, r2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10a      	bne.n	8006734 <vPortFree+0x44>
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	60fb      	str	r3, [r7, #12]
}
 8006730:	bf00      	nop
 8006732:	e7fe      	b.n	8006732 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00a      	beq.n	8006752 <vPortFree+0x62>
	__asm volatile
 800673c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	60bb      	str	r3, [r7, #8]
}
 800674e:	bf00      	nop
 8006750:	e7fe      	b.n	8006750 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	4b14      	ldr	r3, [pc, #80]	; (80067a8 <vPortFree+0xb8>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4013      	ands	r3, r2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d01e      	beq.n	800679e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d11a      	bne.n	800679e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	4b0e      	ldr	r3, [pc, #56]	; (80067a8 <vPortFree+0xb8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	43db      	mvns	r3, r3
 8006772:	401a      	ands	r2, r3
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006778:	f7fe fc7c 	bl	8005074 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	4b0a      	ldr	r3, [pc, #40]	; (80067ac <vPortFree+0xbc>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4413      	add	r3, r2
 8006786:	4a09      	ldr	r2, [pc, #36]	; (80067ac <vPortFree+0xbc>)
 8006788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800678a:	6938      	ldr	r0, [r7, #16]
 800678c:	f000 f874 	bl	8006878 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006790:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <vPortFree+0xc0>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3301      	adds	r3, #1
 8006796:	4a06      	ldr	r2, [pc, #24]	; (80067b0 <vPortFree+0xc0>)
 8006798:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800679a:	f7fe fc79 	bl	8005090 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800679e:	bf00      	nop
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	200046c8 	.word	0x200046c8
 80067ac:	200046b8 	.word	0x200046b8
 80067b0:	200046c4 	.word	0x200046c4

080067b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80067be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80067c0:	4b27      	ldr	r3, [pc, #156]	; (8006860 <prvHeapInit+0xac>)
 80067c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00c      	beq.n	80067e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3307      	adds	r3, #7
 80067d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0307 	bic.w	r3, r3, #7
 80067da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	4a1f      	ldr	r2, [pc, #124]	; (8006860 <prvHeapInit+0xac>)
 80067e4:	4413      	add	r3, r2
 80067e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067ec:	4a1d      	ldr	r2, [pc, #116]	; (8006864 <prvHeapInit+0xb0>)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067f2:	4b1c      	ldr	r3, [pc, #112]	; (8006864 <prvHeapInit+0xb0>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	4413      	add	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006800:	2208      	movs	r2, #8
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	1a9b      	subs	r3, r3, r2
 8006806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 0307 	bic.w	r3, r3, #7
 800680e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4a15      	ldr	r2, [pc, #84]	; (8006868 <prvHeapInit+0xb4>)
 8006814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006816:	4b14      	ldr	r3, [pc, #80]	; (8006868 <prvHeapInit+0xb4>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2200      	movs	r2, #0
 800681c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800681e:	4b12      	ldr	r3, [pc, #72]	; (8006868 <prvHeapInit+0xb4>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	1ad2      	subs	r2, r2, r3
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006834:	4b0c      	ldr	r3, [pc, #48]	; (8006868 <prvHeapInit+0xb4>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	4a0a      	ldr	r2, [pc, #40]	; (800686c <prvHeapInit+0xb8>)
 8006842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	4a09      	ldr	r2, [pc, #36]	; (8006870 <prvHeapInit+0xbc>)
 800684a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800684c:	4b09      	ldr	r3, [pc, #36]	; (8006874 <prvHeapInit+0xc0>)
 800684e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006852:	601a      	str	r2, [r3, #0]
}
 8006854:	bf00      	nop
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	20000aac 	.word	0x20000aac
 8006864:	200046ac 	.word	0x200046ac
 8006868:	200046b4 	.word	0x200046b4
 800686c:	200046bc 	.word	0x200046bc
 8006870:	200046b8 	.word	0x200046b8
 8006874:	200046c8 	.word	0x200046c8

08006878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006880:	4b28      	ldr	r3, [pc, #160]	; (8006924 <prvInsertBlockIntoFreeList+0xac>)
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	e002      	b.n	800688c <prvInsertBlockIntoFreeList+0x14>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	429a      	cmp	r2, r3
 8006894:	d8f7      	bhi.n	8006886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	4413      	add	r3, r2
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d108      	bne.n	80068ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	441a      	add	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	441a      	add	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d118      	bne.n	8006900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	4b15      	ldr	r3, [pc, #84]	; (8006928 <prvInsertBlockIntoFreeList+0xb0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d00d      	beq.n	80068f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	441a      	add	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	e008      	b.n	8006908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068f6:	4b0c      	ldr	r3, [pc, #48]	; (8006928 <prvInsertBlockIntoFreeList+0xb0>)
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	e003      	b.n	8006908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	429a      	cmp	r2, r3
 800690e:	d002      	beq.n	8006916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006916:	bf00      	nop
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	200046ac 	.word	0x200046ac
 8006928:	200046b4 	.word	0x200046b4

0800692c <__errno>:
 800692c:	4b01      	ldr	r3, [pc, #4]	; (8006934 <__errno+0x8>)
 800692e:	6818      	ldr	r0, [r3, #0]
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	20000010 	.word	0x20000010

08006938 <__libc_init_array>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	4d0d      	ldr	r5, [pc, #52]	; (8006970 <__libc_init_array+0x38>)
 800693c:	4c0d      	ldr	r4, [pc, #52]	; (8006974 <__libc_init_array+0x3c>)
 800693e:	1b64      	subs	r4, r4, r5
 8006940:	10a4      	asrs	r4, r4, #2
 8006942:	2600      	movs	r6, #0
 8006944:	42a6      	cmp	r6, r4
 8006946:	d109      	bne.n	800695c <__libc_init_array+0x24>
 8006948:	4d0b      	ldr	r5, [pc, #44]	; (8006978 <__libc_init_array+0x40>)
 800694a:	4c0c      	ldr	r4, [pc, #48]	; (800697c <__libc_init_array+0x44>)
 800694c:	f000 fc8e 	bl	800726c <_init>
 8006950:	1b64      	subs	r4, r4, r5
 8006952:	10a4      	asrs	r4, r4, #2
 8006954:	2600      	movs	r6, #0
 8006956:	42a6      	cmp	r6, r4
 8006958:	d105      	bne.n	8006966 <__libc_init_array+0x2e>
 800695a:	bd70      	pop	{r4, r5, r6, pc}
 800695c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006960:	4798      	blx	r3
 8006962:	3601      	adds	r6, #1
 8006964:	e7ee      	b.n	8006944 <__libc_init_array+0xc>
 8006966:	f855 3b04 	ldr.w	r3, [r5], #4
 800696a:	4798      	blx	r3
 800696c:	3601      	adds	r6, #1
 800696e:	e7f2      	b.n	8006956 <__libc_init_array+0x1e>
 8006970:	080073b8 	.word	0x080073b8
 8006974:	080073b8 	.word	0x080073b8
 8006978:	080073b8 	.word	0x080073b8
 800697c:	080073bc 	.word	0x080073bc

08006980 <memcpy>:
 8006980:	440a      	add	r2, r1
 8006982:	4291      	cmp	r1, r2
 8006984:	f100 33ff 	add.w	r3, r0, #4294967295
 8006988:	d100      	bne.n	800698c <memcpy+0xc>
 800698a:	4770      	bx	lr
 800698c:	b510      	push	{r4, lr}
 800698e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006992:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006996:	4291      	cmp	r1, r2
 8006998:	d1f9      	bne.n	800698e <memcpy+0xe>
 800699a:	bd10      	pop	{r4, pc}

0800699c <memset>:
 800699c:	4402      	add	r2, r0
 800699e:	4603      	mov	r3, r0
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d100      	bne.n	80069a6 <memset+0xa>
 80069a4:	4770      	bx	lr
 80069a6:	f803 1b01 	strb.w	r1, [r3], #1
 80069aa:	e7f9      	b.n	80069a0 <memset+0x4>

080069ac <siprintf>:
 80069ac:	b40e      	push	{r1, r2, r3}
 80069ae:	b500      	push	{lr}
 80069b0:	b09c      	sub	sp, #112	; 0x70
 80069b2:	ab1d      	add	r3, sp, #116	; 0x74
 80069b4:	9002      	str	r0, [sp, #8]
 80069b6:	9006      	str	r0, [sp, #24]
 80069b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069bc:	4809      	ldr	r0, [pc, #36]	; (80069e4 <siprintf+0x38>)
 80069be:	9107      	str	r1, [sp, #28]
 80069c0:	9104      	str	r1, [sp, #16]
 80069c2:	4909      	ldr	r1, [pc, #36]	; (80069e8 <siprintf+0x3c>)
 80069c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069c8:	9105      	str	r1, [sp, #20]
 80069ca:	6800      	ldr	r0, [r0, #0]
 80069cc:	9301      	str	r3, [sp, #4]
 80069ce:	a902      	add	r1, sp, #8
 80069d0:	f000 f868 	bl	8006aa4 <_svfiprintf_r>
 80069d4:	9b02      	ldr	r3, [sp, #8]
 80069d6:	2200      	movs	r2, #0
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	b01c      	add	sp, #112	; 0x70
 80069dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80069e0:	b003      	add	sp, #12
 80069e2:	4770      	bx	lr
 80069e4:	20000010 	.word	0x20000010
 80069e8:	ffff0208 	.word	0xffff0208

080069ec <__ssputs_r>:
 80069ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f0:	688e      	ldr	r6, [r1, #8]
 80069f2:	429e      	cmp	r6, r3
 80069f4:	4682      	mov	sl, r0
 80069f6:	460c      	mov	r4, r1
 80069f8:	4690      	mov	r8, r2
 80069fa:	461f      	mov	r7, r3
 80069fc:	d838      	bhi.n	8006a70 <__ssputs_r+0x84>
 80069fe:	898a      	ldrh	r2, [r1, #12]
 8006a00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a04:	d032      	beq.n	8006a6c <__ssputs_r+0x80>
 8006a06:	6825      	ldr	r5, [r4, #0]
 8006a08:	6909      	ldr	r1, [r1, #16]
 8006a0a:	eba5 0901 	sub.w	r9, r5, r1
 8006a0e:	6965      	ldr	r5, [r4, #20]
 8006a10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a18:	3301      	adds	r3, #1
 8006a1a:	444b      	add	r3, r9
 8006a1c:	106d      	asrs	r5, r5, #1
 8006a1e:	429d      	cmp	r5, r3
 8006a20:	bf38      	it	cc
 8006a22:	461d      	movcc	r5, r3
 8006a24:	0553      	lsls	r3, r2, #21
 8006a26:	d531      	bpl.n	8006a8c <__ssputs_r+0xa0>
 8006a28:	4629      	mov	r1, r5
 8006a2a:	f000 fb55 	bl	80070d8 <_malloc_r>
 8006a2e:	4606      	mov	r6, r0
 8006a30:	b950      	cbnz	r0, 8006a48 <__ssputs_r+0x5c>
 8006a32:	230c      	movs	r3, #12
 8006a34:	f8ca 3000 	str.w	r3, [sl]
 8006a38:	89a3      	ldrh	r3, [r4, #12]
 8006a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3e:	81a3      	strh	r3, [r4, #12]
 8006a40:	f04f 30ff 	mov.w	r0, #4294967295
 8006a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a48:	6921      	ldr	r1, [r4, #16]
 8006a4a:	464a      	mov	r2, r9
 8006a4c:	f7ff ff98 	bl	8006980 <memcpy>
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a5a:	81a3      	strh	r3, [r4, #12]
 8006a5c:	6126      	str	r6, [r4, #16]
 8006a5e:	6165      	str	r5, [r4, #20]
 8006a60:	444e      	add	r6, r9
 8006a62:	eba5 0509 	sub.w	r5, r5, r9
 8006a66:	6026      	str	r6, [r4, #0]
 8006a68:	60a5      	str	r5, [r4, #8]
 8006a6a:	463e      	mov	r6, r7
 8006a6c:	42be      	cmp	r6, r7
 8006a6e:	d900      	bls.n	8006a72 <__ssputs_r+0x86>
 8006a70:	463e      	mov	r6, r7
 8006a72:	6820      	ldr	r0, [r4, #0]
 8006a74:	4632      	mov	r2, r6
 8006a76:	4641      	mov	r1, r8
 8006a78:	f000 faa8 	bl	8006fcc <memmove>
 8006a7c:	68a3      	ldr	r3, [r4, #8]
 8006a7e:	1b9b      	subs	r3, r3, r6
 8006a80:	60a3      	str	r3, [r4, #8]
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	4433      	add	r3, r6
 8006a86:	6023      	str	r3, [r4, #0]
 8006a88:	2000      	movs	r0, #0
 8006a8a:	e7db      	b.n	8006a44 <__ssputs_r+0x58>
 8006a8c:	462a      	mov	r2, r5
 8006a8e:	f000 fb97 	bl	80071c0 <_realloc_r>
 8006a92:	4606      	mov	r6, r0
 8006a94:	2800      	cmp	r0, #0
 8006a96:	d1e1      	bne.n	8006a5c <__ssputs_r+0x70>
 8006a98:	6921      	ldr	r1, [r4, #16]
 8006a9a:	4650      	mov	r0, sl
 8006a9c:	f000 fab0 	bl	8007000 <_free_r>
 8006aa0:	e7c7      	b.n	8006a32 <__ssputs_r+0x46>
	...

08006aa4 <_svfiprintf_r>:
 8006aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa8:	4698      	mov	r8, r3
 8006aaa:	898b      	ldrh	r3, [r1, #12]
 8006aac:	061b      	lsls	r3, r3, #24
 8006aae:	b09d      	sub	sp, #116	; 0x74
 8006ab0:	4607      	mov	r7, r0
 8006ab2:	460d      	mov	r5, r1
 8006ab4:	4614      	mov	r4, r2
 8006ab6:	d50e      	bpl.n	8006ad6 <_svfiprintf_r+0x32>
 8006ab8:	690b      	ldr	r3, [r1, #16]
 8006aba:	b963      	cbnz	r3, 8006ad6 <_svfiprintf_r+0x32>
 8006abc:	2140      	movs	r1, #64	; 0x40
 8006abe:	f000 fb0b 	bl	80070d8 <_malloc_r>
 8006ac2:	6028      	str	r0, [r5, #0]
 8006ac4:	6128      	str	r0, [r5, #16]
 8006ac6:	b920      	cbnz	r0, 8006ad2 <_svfiprintf_r+0x2e>
 8006ac8:	230c      	movs	r3, #12
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad0:	e0d1      	b.n	8006c76 <_svfiprintf_r+0x1d2>
 8006ad2:	2340      	movs	r3, #64	; 0x40
 8006ad4:	616b      	str	r3, [r5, #20]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8006ada:	2320      	movs	r3, #32
 8006adc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ae0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ae4:	2330      	movs	r3, #48	; 0x30
 8006ae6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c90 <_svfiprintf_r+0x1ec>
 8006aea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006aee:	f04f 0901 	mov.w	r9, #1
 8006af2:	4623      	mov	r3, r4
 8006af4:	469a      	mov	sl, r3
 8006af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006afa:	b10a      	cbz	r2, 8006b00 <_svfiprintf_r+0x5c>
 8006afc:	2a25      	cmp	r2, #37	; 0x25
 8006afe:	d1f9      	bne.n	8006af4 <_svfiprintf_r+0x50>
 8006b00:	ebba 0b04 	subs.w	fp, sl, r4
 8006b04:	d00b      	beq.n	8006b1e <_svfiprintf_r+0x7a>
 8006b06:	465b      	mov	r3, fp
 8006b08:	4622      	mov	r2, r4
 8006b0a:	4629      	mov	r1, r5
 8006b0c:	4638      	mov	r0, r7
 8006b0e:	f7ff ff6d 	bl	80069ec <__ssputs_r>
 8006b12:	3001      	adds	r0, #1
 8006b14:	f000 80aa 	beq.w	8006c6c <_svfiprintf_r+0x1c8>
 8006b18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b1a:	445a      	add	r2, fp
 8006b1c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b1e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 80a2 	beq.w	8006c6c <_svfiprintf_r+0x1c8>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b32:	f10a 0a01 	add.w	sl, sl, #1
 8006b36:	9304      	str	r3, [sp, #16]
 8006b38:	9307      	str	r3, [sp, #28]
 8006b3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b3e:	931a      	str	r3, [sp, #104]	; 0x68
 8006b40:	4654      	mov	r4, sl
 8006b42:	2205      	movs	r2, #5
 8006b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b48:	4851      	ldr	r0, [pc, #324]	; (8006c90 <_svfiprintf_r+0x1ec>)
 8006b4a:	f7f9 fb51 	bl	80001f0 <memchr>
 8006b4e:	9a04      	ldr	r2, [sp, #16]
 8006b50:	b9d8      	cbnz	r0, 8006b8a <_svfiprintf_r+0xe6>
 8006b52:	06d0      	lsls	r0, r2, #27
 8006b54:	bf44      	itt	mi
 8006b56:	2320      	movmi	r3, #32
 8006b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b5c:	0711      	lsls	r1, r2, #28
 8006b5e:	bf44      	itt	mi
 8006b60:	232b      	movmi	r3, #43	; 0x2b
 8006b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b66:	f89a 3000 	ldrb.w	r3, [sl]
 8006b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b6c:	d015      	beq.n	8006b9a <_svfiprintf_r+0xf6>
 8006b6e:	9a07      	ldr	r2, [sp, #28]
 8006b70:	4654      	mov	r4, sl
 8006b72:	2000      	movs	r0, #0
 8006b74:	f04f 0c0a 	mov.w	ip, #10
 8006b78:	4621      	mov	r1, r4
 8006b7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b7e:	3b30      	subs	r3, #48	; 0x30
 8006b80:	2b09      	cmp	r3, #9
 8006b82:	d94e      	bls.n	8006c22 <_svfiprintf_r+0x17e>
 8006b84:	b1b0      	cbz	r0, 8006bb4 <_svfiprintf_r+0x110>
 8006b86:	9207      	str	r2, [sp, #28]
 8006b88:	e014      	b.n	8006bb4 <_svfiprintf_r+0x110>
 8006b8a:	eba0 0308 	sub.w	r3, r0, r8
 8006b8e:	fa09 f303 	lsl.w	r3, r9, r3
 8006b92:	4313      	orrs	r3, r2
 8006b94:	9304      	str	r3, [sp, #16]
 8006b96:	46a2      	mov	sl, r4
 8006b98:	e7d2      	b.n	8006b40 <_svfiprintf_r+0x9c>
 8006b9a:	9b03      	ldr	r3, [sp, #12]
 8006b9c:	1d19      	adds	r1, r3, #4
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	9103      	str	r1, [sp, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	bfbb      	ittet	lt
 8006ba6:	425b      	neglt	r3, r3
 8006ba8:	f042 0202 	orrlt.w	r2, r2, #2
 8006bac:	9307      	strge	r3, [sp, #28]
 8006bae:	9307      	strlt	r3, [sp, #28]
 8006bb0:	bfb8      	it	lt
 8006bb2:	9204      	strlt	r2, [sp, #16]
 8006bb4:	7823      	ldrb	r3, [r4, #0]
 8006bb6:	2b2e      	cmp	r3, #46	; 0x2e
 8006bb8:	d10c      	bne.n	8006bd4 <_svfiprintf_r+0x130>
 8006bba:	7863      	ldrb	r3, [r4, #1]
 8006bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8006bbe:	d135      	bne.n	8006c2c <_svfiprintf_r+0x188>
 8006bc0:	9b03      	ldr	r3, [sp, #12]
 8006bc2:	1d1a      	adds	r2, r3, #4
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	9203      	str	r2, [sp, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	bfb8      	it	lt
 8006bcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bd0:	3402      	adds	r4, #2
 8006bd2:	9305      	str	r3, [sp, #20]
 8006bd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ca0 <_svfiprintf_r+0x1fc>
 8006bd8:	7821      	ldrb	r1, [r4, #0]
 8006bda:	2203      	movs	r2, #3
 8006bdc:	4650      	mov	r0, sl
 8006bde:	f7f9 fb07 	bl	80001f0 <memchr>
 8006be2:	b140      	cbz	r0, 8006bf6 <_svfiprintf_r+0x152>
 8006be4:	2340      	movs	r3, #64	; 0x40
 8006be6:	eba0 000a 	sub.w	r0, r0, sl
 8006bea:	fa03 f000 	lsl.w	r0, r3, r0
 8006bee:	9b04      	ldr	r3, [sp, #16]
 8006bf0:	4303      	orrs	r3, r0
 8006bf2:	3401      	adds	r4, #1
 8006bf4:	9304      	str	r3, [sp, #16]
 8006bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bfa:	4826      	ldr	r0, [pc, #152]	; (8006c94 <_svfiprintf_r+0x1f0>)
 8006bfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c00:	2206      	movs	r2, #6
 8006c02:	f7f9 faf5 	bl	80001f0 <memchr>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d038      	beq.n	8006c7c <_svfiprintf_r+0x1d8>
 8006c0a:	4b23      	ldr	r3, [pc, #140]	; (8006c98 <_svfiprintf_r+0x1f4>)
 8006c0c:	bb1b      	cbnz	r3, 8006c56 <_svfiprintf_r+0x1b2>
 8006c0e:	9b03      	ldr	r3, [sp, #12]
 8006c10:	3307      	adds	r3, #7
 8006c12:	f023 0307 	bic.w	r3, r3, #7
 8006c16:	3308      	adds	r3, #8
 8006c18:	9303      	str	r3, [sp, #12]
 8006c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c1c:	4433      	add	r3, r6
 8006c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c20:	e767      	b.n	8006af2 <_svfiprintf_r+0x4e>
 8006c22:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c26:	460c      	mov	r4, r1
 8006c28:	2001      	movs	r0, #1
 8006c2a:	e7a5      	b.n	8006b78 <_svfiprintf_r+0xd4>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	3401      	adds	r4, #1
 8006c30:	9305      	str	r3, [sp, #20]
 8006c32:	4619      	mov	r1, r3
 8006c34:	f04f 0c0a 	mov.w	ip, #10
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c3e:	3a30      	subs	r2, #48	; 0x30
 8006c40:	2a09      	cmp	r2, #9
 8006c42:	d903      	bls.n	8006c4c <_svfiprintf_r+0x1a8>
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0c5      	beq.n	8006bd4 <_svfiprintf_r+0x130>
 8006c48:	9105      	str	r1, [sp, #20]
 8006c4a:	e7c3      	b.n	8006bd4 <_svfiprintf_r+0x130>
 8006c4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c50:	4604      	mov	r4, r0
 8006c52:	2301      	movs	r3, #1
 8006c54:	e7f0      	b.n	8006c38 <_svfiprintf_r+0x194>
 8006c56:	ab03      	add	r3, sp, #12
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	462a      	mov	r2, r5
 8006c5c:	4b0f      	ldr	r3, [pc, #60]	; (8006c9c <_svfiprintf_r+0x1f8>)
 8006c5e:	a904      	add	r1, sp, #16
 8006c60:	4638      	mov	r0, r7
 8006c62:	f3af 8000 	nop.w
 8006c66:	1c42      	adds	r2, r0, #1
 8006c68:	4606      	mov	r6, r0
 8006c6a:	d1d6      	bne.n	8006c1a <_svfiprintf_r+0x176>
 8006c6c:	89ab      	ldrh	r3, [r5, #12]
 8006c6e:	065b      	lsls	r3, r3, #25
 8006c70:	f53f af2c 	bmi.w	8006acc <_svfiprintf_r+0x28>
 8006c74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c76:	b01d      	add	sp, #116	; 0x74
 8006c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7c:	ab03      	add	r3, sp, #12
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	462a      	mov	r2, r5
 8006c82:	4b06      	ldr	r3, [pc, #24]	; (8006c9c <_svfiprintf_r+0x1f8>)
 8006c84:	a904      	add	r1, sp, #16
 8006c86:	4638      	mov	r0, r7
 8006c88:	f000 f87a 	bl	8006d80 <_printf_i>
 8006c8c:	e7eb      	b.n	8006c66 <_svfiprintf_r+0x1c2>
 8006c8e:	bf00      	nop
 8006c90:	0800737c 	.word	0x0800737c
 8006c94:	08007386 	.word	0x08007386
 8006c98:	00000000 	.word	0x00000000
 8006c9c:	080069ed 	.word	0x080069ed
 8006ca0:	08007382 	.word	0x08007382

08006ca4 <_printf_common>:
 8006ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca8:	4616      	mov	r6, r2
 8006caa:	4699      	mov	r9, r3
 8006cac:	688a      	ldr	r2, [r1, #8]
 8006cae:	690b      	ldr	r3, [r1, #16]
 8006cb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	bfb8      	it	lt
 8006cb8:	4613      	movlt	r3, r2
 8006cba:	6033      	str	r3, [r6, #0]
 8006cbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cc0:	4607      	mov	r7, r0
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	b10a      	cbz	r2, 8006cca <_printf_common+0x26>
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	6033      	str	r3, [r6, #0]
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	0699      	lsls	r1, r3, #26
 8006cce:	bf42      	ittt	mi
 8006cd0:	6833      	ldrmi	r3, [r6, #0]
 8006cd2:	3302      	addmi	r3, #2
 8006cd4:	6033      	strmi	r3, [r6, #0]
 8006cd6:	6825      	ldr	r5, [r4, #0]
 8006cd8:	f015 0506 	ands.w	r5, r5, #6
 8006cdc:	d106      	bne.n	8006cec <_printf_common+0x48>
 8006cde:	f104 0a19 	add.w	sl, r4, #25
 8006ce2:	68e3      	ldr	r3, [r4, #12]
 8006ce4:	6832      	ldr	r2, [r6, #0]
 8006ce6:	1a9b      	subs	r3, r3, r2
 8006ce8:	42ab      	cmp	r3, r5
 8006cea:	dc26      	bgt.n	8006d3a <_printf_common+0x96>
 8006cec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cf0:	1e13      	subs	r3, r2, #0
 8006cf2:	6822      	ldr	r2, [r4, #0]
 8006cf4:	bf18      	it	ne
 8006cf6:	2301      	movne	r3, #1
 8006cf8:	0692      	lsls	r2, r2, #26
 8006cfa:	d42b      	bmi.n	8006d54 <_printf_common+0xb0>
 8006cfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d00:	4649      	mov	r1, r9
 8006d02:	4638      	mov	r0, r7
 8006d04:	47c0      	blx	r8
 8006d06:	3001      	adds	r0, #1
 8006d08:	d01e      	beq.n	8006d48 <_printf_common+0xa4>
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	68e5      	ldr	r5, [r4, #12]
 8006d0e:	6832      	ldr	r2, [r6, #0]
 8006d10:	f003 0306 	and.w	r3, r3, #6
 8006d14:	2b04      	cmp	r3, #4
 8006d16:	bf08      	it	eq
 8006d18:	1aad      	subeq	r5, r5, r2
 8006d1a:	68a3      	ldr	r3, [r4, #8]
 8006d1c:	6922      	ldr	r2, [r4, #16]
 8006d1e:	bf0c      	ite	eq
 8006d20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d24:	2500      	movne	r5, #0
 8006d26:	4293      	cmp	r3, r2
 8006d28:	bfc4      	itt	gt
 8006d2a:	1a9b      	subgt	r3, r3, r2
 8006d2c:	18ed      	addgt	r5, r5, r3
 8006d2e:	2600      	movs	r6, #0
 8006d30:	341a      	adds	r4, #26
 8006d32:	42b5      	cmp	r5, r6
 8006d34:	d11a      	bne.n	8006d6c <_printf_common+0xc8>
 8006d36:	2000      	movs	r0, #0
 8006d38:	e008      	b.n	8006d4c <_printf_common+0xa8>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4652      	mov	r2, sl
 8006d3e:	4649      	mov	r1, r9
 8006d40:	4638      	mov	r0, r7
 8006d42:	47c0      	blx	r8
 8006d44:	3001      	adds	r0, #1
 8006d46:	d103      	bne.n	8006d50 <_printf_common+0xac>
 8006d48:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d50:	3501      	adds	r5, #1
 8006d52:	e7c6      	b.n	8006ce2 <_printf_common+0x3e>
 8006d54:	18e1      	adds	r1, r4, r3
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	2030      	movs	r0, #48	; 0x30
 8006d5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d5e:	4422      	add	r2, r4
 8006d60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d68:	3302      	adds	r3, #2
 8006d6a:	e7c7      	b.n	8006cfc <_printf_common+0x58>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	4622      	mov	r2, r4
 8006d70:	4649      	mov	r1, r9
 8006d72:	4638      	mov	r0, r7
 8006d74:	47c0      	blx	r8
 8006d76:	3001      	adds	r0, #1
 8006d78:	d0e6      	beq.n	8006d48 <_printf_common+0xa4>
 8006d7a:	3601      	adds	r6, #1
 8006d7c:	e7d9      	b.n	8006d32 <_printf_common+0x8e>
	...

08006d80 <_printf_i>:
 8006d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d84:	7e0f      	ldrb	r7, [r1, #24]
 8006d86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d88:	2f78      	cmp	r7, #120	; 0x78
 8006d8a:	4691      	mov	r9, r2
 8006d8c:	4680      	mov	r8, r0
 8006d8e:	460c      	mov	r4, r1
 8006d90:	469a      	mov	sl, r3
 8006d92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d96:	d807      	bhi.n	8006da8 <_printf_i+0x28>
 8006d98:	2f62      	cmp	r7, #98	; 0x62
 8006d9a:	d80a      	bhi.n	8006db2 <_printf_i+0x32>
 8006d9c:	2f00      	cmp	r7, #0
 8006d9e:	f000 80d8 	beq.w	8006f52 <_printf_i+0x1d2>
 8006da2:	2f58      	cmp	r7, #88	; 0x58
 8006da4:	f000 80a3 	beq.w	8006eee <_printf_i+0x16e>
 8006da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006db0:	e03a      	b.n	8006e28 <_printf_i+0xa8>
 8006db2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006db6:	2b15      	cmp	r3, #21
 8006db8:	d8f6      	bhi.n	8006da8 <_printf_i+0x28>
 8006dba:	a101      	add	r1, pc, #4	; (adr r1, 8006dc0 <_printf_i+0x40>)
 8006dbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dc0:	08006e19 	.word	0x08006e19
 8006dc4:	08006e2d 	.word	0x08006e2d
 8006dc8:	08006da9 	.word	0x08006da9
 8006dcc:	08006da9 	.word	0x08006da9
 8006dd0:	08006da9 	.word	0x08006da9
 8006dd4:	08006da9 	.word	0x08006da9
 8006dd8:	08006e2d 	.word	0x08006e2d
 8006ddc:	08006da9 	.word	0x08006da9
 8006de0:	08006da9 	.word	0x08006da9
 8006de4:	08006da9 	.word	0x08006da9
 8006de8:	08006da9 	.word	0x08006da9
 8006dec:	08006f39 	.word	0x08006f39
 8006df0:	08006e5d 	.word	0x08006e5d
 8006df4:	08006f1b 	.word	0x08006f1b
 8006df8:	08006da9 	.word	0x08006da9
 8006dfc:	08006da9 	.word	0x08006da9
 8006e00:	08006f5b 	.word	0x08006f5b
 8006e04:	08006da9 	.word	0x08006da9
 8006e08:	08006e5d 	.word	0x08006e5d
 8006e0c:	08006da9 	.word	0x08006da9
 8006e10:	08006da9 	.word	0x08006da9
 8006e14:	08006f23 	.word	0x08006f23
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	1d1a      	adds	r2, r3, #4
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	602a      	str	r2, [r5, #0]
 8006e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e0a3      	b.n	8006f74 <_printf_i+0x1f4>
 8006e2c:	6820      	ldr	r0, [r4, #0]
 8006e2e:	6829      	ldr	r1, [r5, #0]
 8006e30:	0606      	lsls	r6, r0, #24
 8006e32:	f101 0304 	add.w	r3, r1, #4
 8006e36:	d50a      	bpl.n	8006e4e <_printf_i+0xce>
 8006e38:	680e      	ldr	r6, [r1, #0]
 8006e3a:	602b      	str	r3, [r5, #0]
 8006e3c:	2e00      	cmp	r6, #0
 8006e3e:	da03      	bge.n	8006e48 <_printf_i+0xc8>
 8006e40:	232d      	movs	r3, #45	; 0x2d
 8006e42:	4276      	negs	r6, r6
 8006e44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e48:	485e      	ldr	r0, [pc, #376]	; (8006fc4 <_printf_i+0x244>)
 8006e4a:	230a      	movs	r3, #10
 8006e4c:	e019      	b.n	8006e82 <_printf_i+0x102>
 8006e4e:	680e      	ldr	r6, [r1, #0]
 8006e50:	602b      	str	r3, [r5, #0]
 8006e52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e56:	bf18      	it	ne
 8006e58:	b236      	sxthne	r6, r6
 8006e5a:	e7ef      	b.n	8006e3c <_printf_i+0xbc>
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	6820      	ldr	r0, [r4, #0]
 8006e60:	1d19      	adds	r1, r3, #4
 8006e62:	6029      	str	r1, [r5, #0]
 8006e64:	0601      	lsls	r1, r0, #24
 8006e66:	d501      	bpl.n	8006e6c <_printf_i+0xec>
 8006e68:	681e      	ldr	r6, [r3, #0]
 8006e6a:	e002      	b.n	8006e72 <_printf_i+0xf2>
 8006e6c:	0646      	lsls	r6, r0, #25
 8006e6e:	d5fb      	bpl.n	8006e68 <_printf_i+0xe8>
 8006e70:	881e      	ldrh	r6, [r3, #0]
 8006e72:	4854      	ldr	r0, [pc, #336]	; (8006fc4 <_printf_i+0x244>)
 8006e74:	2f6f      	cmp	r7, #111	; 0x6f
 8006e76:	bf0c      	ite	eq
 8006e78:	2308      	moveq	r3, #8
 8006e7a:	230a      	movne	r3, #10
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e82:	6865      	ldr	r5, [r4, #4]
 8006e84:	60a5      	str	r5, [r4, #8]
 8006e86:	2d00      	cmp	r5, #0
 8006e88:	bfa2      	ittt	ge
 8006e8a:	6821      	ldrge	r1, [r4, #0]
 8006e8c:	f021 0104 	bicge.w	r1, r1, #4
 8006e90:	6021      	strge	r1, [r4, #0]
 8006e92:	b90e      	cbnz	r6, 8006e98 <_printf_i+0x118>
 8006e94:	2d00      	cmp	r5, #0
 8006e96:	d04d      	beq.n	8006f34 <_printf_i+0x1b4>
 8006e98:	4615      	mov	r5, r2
 8006e9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e9e:	fb03 6711 	mls	r7, r3, r1, r6
 8006ea2:	5dc7      	ldrb	r7, [r0, r7]
 8006ea4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ea8:	4637      	mov	r7, r6
 8006eaa:	42bb      	cmp	r3, r7
 8006eac:	460e      	mov	r6, r1
 8006eae:	d9f4      	bls.n	8006e9a <_printf_i+0x11a>
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	d10b      	bne.n	8006ecc <_printf_i+0x14c>
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	07de      	lsls	r6, r3, #31
 8006eb8:	d508      	bpl.n	8006ecc <_printf_i+0x14c>
 8006eba:	6923      	ldr	r3, [r4, #16]
 8006ebc:	6861      	ldr	r1, [r4, #4]
 8006ebe:	4299      	cmp	r1, r3
 8006ec0:	bfde      	ittt	le
 8006ec2:	2330      	movle	r3, #48	; 0x30
 8006ec4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ec8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ecc:	1b52      	subs	r2, r2, r5
 8006ece:	6122      	str	r2, [r4, #16]
 8006ed0:	f8cd a000 	str.w	sl, [sp]
 8006ed4:	464b      	mov	r3, r9
 8006ed6:	aa03      	add	r2, sp, #12
 8006ed8:	4621      	mov	r1, r4
 8006eda:	4640      	mov	r0, r8
 8006edc:	f7ff fee2 	bl	8006ca4 <_printf_common>
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	d14c      	bne.n	8006f7e <_printf_i+0x1fe>
 8006ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee8:	b004      	add	sp, #16
 8006eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eee:	4835      	ldr	r0, [pc, #212]	; (8006fc4 <_printf_i+0x244>)
 8006ef0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ef4:	6829      	ldr	r1, [r5, #0]
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006efc:	6029      	str	r1, [r5, #0]
 8006efe:	061d      	lsls	r5, r3, #24
 8006f00:	d514      	bpl.n	8006f2c <_printf_i+0x1ac>
 8006f02:	07df      	lsls	r7, r3, #31
 8006f04:	bf44      	itt	mi
 8006f06:	f043 0320 	orrmi.w	r3, r3, #32
 8006f0a:	6023      	strmi	r3, [r4, #0]
 8006f0c:	b91e      	cbnz	r6, 8006f16 <_printf_i+0x196>
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	f023 0320 	bic.w	r3, r3, #32
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	2310      	movs	r3, #16
 8006f18:	e7b0      	b.n	8006e7c <_printf_i+0xfc>
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	f043 0320 	orr.w	r3, r3, #32
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	2378      	movs	r3, #120	; 0x78
 8006f24:	4828      	ldr	r0, [pc, #160]	; (8006fc8 <_printf_i+0x248>)
 8006f26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f2a:	e7e3      	b.n	8006ef4 <_printf_i+0x174>
 8006f2c:	0659      	lsls	r1, r3, #25
 8006f2e:	bf48      	it	mi
 8006f30:	b2b6      	uxthmi	r6, r6
 8006f32:	e7e6      	b.n	8006f02 <_printf_i+0x182>
 8006f34:	4615      	mov	r5, r2
 8006f36:	e7bb      	b.n	8006eb0 <_printf_i+0x130>
 8006f38:	682b      	ldr	r3, [r5, #0]
 8006f3a:	6826      	ldr	r6, [r4, #0]
 8006f3c:	6961      	ldr	r1, [r4, #20]
 8006f3e:	1d18      	adds	r0, r3, #4
 8006f40:	6028      	str	r0, [r5, #0]
 8006f42:	0635      	lsls	r5, r6, #24
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	d501      	bpl.n	8006f4c <_printf_i+0x1cc>
 8006f48:	6019      	str	r1, [r3, #0]
 8006f4a:	e002      	b.n	8006f52 <_printf_i+0x1d2>
 8006f4c:	0670      	lsls	r0, r6, #25
 8006f4e:	d5fb      	bpl.n	8006f48 <_printf_i+0x1c8>
 8006f50:	8019      	strh	r1, [r3, #0]
 8006f52:	2300      	movs	r3, #0
 8006f54:	6123      	str	r3, [r4, #16]
 8006f56:	4615      	mov	r5, r2
 8006f58:	e7ba      	b.n	8006ed0 <_printf_i+0x150>
 8006f5a:	682b      	ldr	r3, [r5, #0]
 8006f5c:	1d1a      	adds	r2, r3, #4
 8006f5e:	602a      	str	r2, [r5, #0]
 8006f60:	681d      	ldr	r5, [r3, #0]
 8006f62:	6862      	ldr	r2, [r4, #4]
 8006f64:	2100      	movs	r1, #0
 8006f66:	4628      	mov	r0, r5
 8006f68:	f7f9 f942 	bl	80001f0 <memchr>
 8006f6c:	b108      	cbz	r0, 8006f72 <_printf_i+0x1f2>
 8006f6e:	1b40      	subs	r0, r0, r5
 8006f70:	6060      	str	r0, [r4, #4]
 8006f72:	6863      	ldr	r3, [r4, #4]
 8006f74:	6123      	str	r3, [r4, #16]
 8006f76:	2300      	movs	r3, #0
 8006f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f7c:	e7a8      	b.n	8006ed0 <_printf_i+0x150>
 8006f7e:	6923      	ldr	r3, [r4, #16]
 8006f80:	462a      	mov	r2, r5
 8006f82:	4649      	mov	r1, r9
 8006f84:	4640      	mov	r0, r8
 8006f86:	47d0      	blx	sl
 8006f88:	3001      	adds	r0, #1
 8006f8a:	d0ab      	beq.n	8006ee4 <_printf_i+0x164>
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	079b      	lsls	r3, r3, #30
 8006f90:	d413      	bmi.n	8006fba <_printf_i+0x23a>
 8006f92:	68e0      	ldr	r0, [r4, #12]
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	4298      	cmp	r0, r3
 8006f98:	bfb8      	it	lt
 8006f9a:	4618      	movlt	r0, r3
 8006f9c:	e7a4      	b.n	8006ee8 <_printf_i+0x168>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	4632      	mov	r2, r6
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	47d0      	blx	sl
 8006fa8:	3001      	adds	r0, #1
 8006faa:	d09b      	beq.n	8006ee4 <_printf_i+0x164>
 8006fac:	3501      	adds	r5, #1
 8006fae:	68e3      	ldr	r3, [r4, #12]
 8006fb0:	9903      	ldr	r1, [sp, #12]
 8006fb2:	1a5b      	subs	r3, r3, r1
 8006fb4:	42ab      	cmp	r3, r5
 8006fb6:	dcf2      	bgt.n	8006f9e <_printf_i+0x21e>
 8006fb8:	e7eb      	b.n	8006f92 <_printf_i+0x212>
 8006fba:	2500      	movs	r5, #0
 8006fbc:	f104 0619 	add.w	r6, r4, #25
 8006fc0:	e7f5      	b.n	8006fae <_printf_i+0x22e>
 8006fc2:	bf00      	nop
 8006fc4:	0800738d 	.word	0x0800738d
 8006fc8:	0800739e 	.word	0x0800739e

08006fcc <memmove>:
 8006fcc:	4288      	cmp	r0, r1
 8006fce:	b510      	push	{r4, lr}
 8006fd0:	eb01 0402 	add.w	r4, r1, r2
 8006fd4:	d902      	bls.n	8006fdc <memmove+0x10>
 8006fd6:	4284      	cmp	r4, r0
 8006fd8:	4623      	mov	r3, r4
 8006fda:	d807      	bhi.n	8006fec <memmove+0x20>
 8006fdc:	1e43      	subs	r3, r0, #1
 8006fde:	42a1      	cmp	r1, r4
 8006fe0:	d008      	beq.n	8006ff4 <memmove+0x28>
 8006fe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fea:	e7f8      	b.n	8006fde <memmove+0x12>
 8006fec:	4402      	add	r2, r0
 8006fee:	4601      	mov	r1, r0
 8006ff0:	428a      	cmp	r2, r1
 8006ff2:	d100      	bne.n	8006ff6 <memmove+0x2a>
 8006ff4:	bd10      	pop	{r4, pc}
 8006ff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ffa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ffe:	e7f7      	b.n	8006ff0 <memmove+0x24>

08007000 <_free_r>:
 8007000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007002:	2900      	cmp	r1, #0
 8007004:	d044      	beq.n	8007090 <_free_r+0x90>
 8007006:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800700a:	9001      	str	r0, [sp, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	f1a1 0404 	sub.w	r4, r1, #4
 8007012:	bfb8      	it	lt
 8007014:	18e4      	addlt	r4, r4, r3
 8007016:	f000 f913 	bl	8007240 <__malloc_lock>
 800701a:	4a1e      	ldr	r2, [pc, #120]	; (8007094 <_free_r+0x94>)
 800701c:	9801      	ldr	r0, [sp, #4]
 800701e:	6813      	ldr	r3, [r2, #0]
 8007020:	b933      	cbnz	r3, 8007030 <_free_r+0x30>
 8007022:	6063      	str	r3, [r4, #4]
 8007024:	6014      	str	r4, [r2, #0]
 8007026:	b003      	add	sp, #12
 8007028:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800702c:	f000 b90e 	b.w	800724c <__malloc_unlock>
 8007030:	42a3      	cmp	r3, r4
 8007032:	d908      	bls.n	8007046 <_free_r+0x46>
 8007034:	6825      	ldr	r5, [r4, #0]
 8007036:	1961      	adds	r1, r4, r5
 8007038:	428b      	cmp	r3, r1
 800703a:	bf01      	itttt	eq
 800703c:	6819      	ldreq	r1, [r3, #0]
 800703e:	685b      	ldreq	r3, [r3, #4]
 8007040:	1949      	addeq	r1, r1, r5
 8007042:	6021      	streq	r1, [r4, #0]
 8007044:	e7ed      	b.n	8007022 <_free_r+0x22>
 8007046:	461a      	mov	r2, r3
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	b10b      	cbz	r3, 8007050 <_free_r+0x50>
 800704c:	42a3      	cmp	r3, r4
 800704e:	d9fa      	bls.n	8007046 <_free_r+0x46>
 8007050:	6811      	ldr	r1, [r2, #0]
 8007052:	1855      	adds	r5, r2, r1
 8007054:	42a5      	cmp	r5, r4
 8007056:	d10b      	bne.n	8007070 <_free_r+0x70>
 8007058:	6824      	ldr	r4, [r4, #0]
 800705a:	4421      	add	r1, r4
 800705c:	1854      	adds	r4, r2, r1
 800705e:	42a3      	cmp	r3, r4
 8007060:	6011      	str	r1, [r2, #0]
 8007062:	d1e0      	bne.n	8007026 <_free_r+0x26>
 8007064:	681c      	ldr	r4, [r3, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	6053      	str	r3, [r2, #4]
 800706a:	4421      	add	r1, r4
 800706c:	6011      	str	r1, [r2, #0]
 800706e:	e7da      	b.n	8007026 <_free_r+0x26>
 8007070:	d902      	bls.n	8007078 <_free_r+0x78>
 8007072:	230c      	movs	r3, #12
 8007074:	6003      	str	r3, [r0, #0]
 8007076:	e7d6      	b.n	8007026 <_free_r+0x26>
 8007078:	6825      	ldr	r5, [r4, #0]
 800707a:	1961      	adds	r1, r4, r5
 800707c:	428b      	cmp	r3, r1
 800707e:	bf04      	itt	eq
 8007080:	6819      	ldreq	r1, [r3, #0]
 8007082:	685b      	ldreq	r3, [r3, #4]
 8007084:	6063      	str	r3, [r4, #4]
 8007086:	bf04      	itt	eq
 8007088:	1949      	addeq	r1, r1, r5
 800708a:	6021      	streq	r1, [r4, #0]
 800708c:	6054      	str	r4, [r2, #4]
 800708e:	e7ca      	b.n	8007026 <_free_r+0x26>
 8007090:	b003      	add	sp, #12
 8007092:	bd30      	pop	{r4, r5, pc}
 8007094:	200046cc 	.word	0x200046cc

08007098 <sbrk_aligned>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	4e0e      	ldr	r6, [pc, #56]	; (80070d4 <sbrk_aligned+0x3c>)
 800709c:	460c      	mov	r4, r1
 800709e:	6831      	ldr	r1, [r6, #0]
 80070a0:	4605      	mov	r5, r0
 80070a2:	b911      	cbnz	r1, 80070aa <sbrk_aligned+0x12>
 80070a4:	f000 f8bc 	bl	8007220 <_sbrk_r>
 80070a8:	6030      	str	r0, [r6, #0]
 80070aa:	4621      	mov	r1, r4
 80070ac:	4628      	mov	r0, r5
 80070ae:	f000 f8b7 	bl	8007220 <_sbrk_r>
 80070b2:	1c43      	adds	r3, r0, #1
 80070b4:	d00a      	beq.n	80070cc <sbrk_aligned+0x34>
 80070b6:	1cc4      	adds	r4, r0, #3
 80070b8:	f024 0403 	bic.w	r4, r4, #3
 80070bc:	42a0      	cmp	r0, r4
 80070be:	d007      	beq.n	80070d0 <sbrk_aligned+0x38>
 80070c0:	1a21      	subs	r1, r4, r0
 80070c2:	4628      	mov	r0, r5
 80070c4:	f000 f8ac 	bl	8007220 <_sbrk_r>
 80070c8:	3001      	adds	r0, #1
 80070ca:	d101      	bne.n	80070d0 <sbrk_aligned+0x38>
 80070cc:	f04f 34ff 	mov.w	r4, #4294967295
 80070d0:	4620      	mov	r0, r4
 80070d2:	bd70      	pop	{r4, r5, r6, pc}
 80070d4:	200046d0 	.word	0x200046d0

080070d8 <_malloc_r>:
 80070d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070dc:	1ccd      	adds	r5, r1, #3
 80070de:	f025 0503 	bic.w	r5, r5, #3
 80070e2:	3508      	adds	r5, #8
 80070e4:	2d0c      	cmp	r5, #12
 80070e6:	bf38      	it	cc
 80070e8:	250c      	movcc	r5, #12
 80070ea:	2d00      	cmp	r5, #0
 80070ec:	4607      	mov	r7, r0
 80070ee:	db01      	blt.n	80070f4 <_malloc_r+0x1c>
 80070f0:	42a9      	cmp	r1, r5
 80070f2:	d905      	bls.n	8007100 <_malloc_r+0x28>
 80070f4:	230c      	movs	r3, #12
 80070f6:	603b      	str	r3, [r7, #0]
 80070f8:	2600      	movs	r6, #0
 80070fa:	4630      	mov	r0, r6
 80070fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007100:	4e2e      	ldr	r6, [pc, #184]	; (80071bc <_malloc_r+0xe4>)
 8007102:	f000 f89d 	bl	8007240 <__malloc_lock>
 8007106:	6833      	ldr	r3, [r6, #0]
 8007108:	461c      	mov	r4, r3
 800710a:	bb34      	cbnz	r4, 800715a <_malloc_r+0x82>
 800710c:	4629      	mov	r1, r5
 800710e:	4638      	mov	r0, r7
 8007110:	f7ff ffc2 	bl	8007098 <sbrk_aligned>
 8007114:	1c43      	adds	r3, r0, #1
 8007116:	4604      	mov	r4, r0
 8007118:	d14d      	bne.n	80071b6 <_malloc_r+0xde>
 800711a:	6834      	ldr	r4, [r6, #0]
 800711c:	4626      	mov	r6, r4
 800711e:	2e00      	cmp	r6, #0
 8007120:	d140      	bne.n	80071a4 <_malloc_r+0xcc>
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	4631      	mov	r1, r6
 8007126:	4638      	mov	r0, r7
 8007128:	eb04 0803 	add.w	r8, r4, r3
 800712c:	f000 f878 	bl	8007220 <_sbrk_r>
 8007130:	4580      	cmp	r8, r0
 8007132:	d13a      	bne.n	80071aa <_malloc_r+0xd2>
 8007134:	6821      	ldr	r1, [r4, #0]
 8007136:	3503      	adds	r5, #3
 8007138:	1a6d      	subs	r5, r5, r1
 800713a:	f025 0503 	bic.w	r5, r5, #3
 800713e:	3508      	adds	r5, #8
 8007140:	2d0c      	cmp	r5, #12
 8007142:	bf38      	it	cc
 8007144:	250c      	movcc	r5, #12
 8007146:	4629      	mov	r1, r5
 8007148:	4638      	mov	r0, r7
 800714a:	f7ff ffa5 	bl	8007098 <sbrk_aligned>
 800714e:	3001      	adds	r0, #1
 8007150:	d02b      	beq.n	80071aa <_malloc_r+0xd2>
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	442b      	add	r3, r5
 8007156:	6023      	str	r3, [r4, #0]
 8007158:	e00e      	b.n	8007178 <_malloc_r+0xa0>
 800715a:	6822      	ldr	r2, [r4, #0]
 800715c:	1b52      	subs	r2, r2, r5
 800715e:	d41e      	bmi.n	800719e <_malloc_r+0xc6>
 8007160:	2a0b      	cmp	r2, #11
 8007162:	d916      	bls.n	8007192 <_malloc_r+0xba>
 8007164:	1961      	adds	r1, r4, r5
 8007166:	42a3      	cmp	r3, r4
 8007168:	6025      	str	r5, [r4, #0]
 800716a:	bf18      	it	ne
 800716c:	6059      	strne	r1, [r3, #4]
 800716e:	6863      	ldr	r3, [r4, #4]
 8007170:	bf08      	it	eq
 8007172:	6031      	streq	r1, [r6, #0]
 8007174:	5162      	str	r2, [r4, r5]
 8007176:	604b      	str	r3, [r1, #4]
 8007178:	4638      	mov	r0, r7
 800717a:	f104 060b 	add.w	r6, r4, #11
 800717e:	f000 f865 	bl	800724c <__malloc_unlock>
 8007182:	f026 0607 	bic.w	r6, r6, #7
 8007186:	1d23      	adds	r3, r4, #4
 8007188:	1af2      	subs	r2, r6, r3
 800718a:	d0b6      	beq.n	80070fa <_malloc_r+0x22>
 800718c:	1b9b      	subs	r3, r3, r6
 800718e:	50a3      	str	r3, [r4, r2]
 8007190:	e7b3      	b.n	80070fa <_malloc_r+0x22>
 8007192:	6862      	ldr	r2, [r4, #4]
 8007194:	42a3      	cmp	r3, r4
 8007196:	bf0c      	ite	eq
 8007198:	6032      	streq	r2, [r6, #0]
 800719a:	605a      	strne	r2, [r3, #4]
 800719c:	e7ec      	b.n	8007178 <_malloc_r+0xa0>
 800719e:	4623      	mov	r3, r4
 80071a0:	6864      	ldr	r4, [r4, #4]
 80071a2:	e7b2      	b.n	800710a <_malloc_r+0x32>
 80071a4:	4634      	mov	r4, r6
 80071a6:	6876      	ldr	r6, [r6, #4]
 80071a8:	e7b9      	b.n	800711e <_malloc_r+0x46>
 80071aa:	230c      	movs	r3, #12
 80071ac:	603b      	str	r3, [r7, #0]
 80071ae:	4638      	mov	r0, r7
 80071b0:	f000 f84c 	bl	800724c <__malloc_unlock>
 80071b4:	e7a1      	b.n	80070fa <_malloc_r+0x22>
 80071b6:	6025      	str	r5, [r4, #0]
 80071b8:	e7de      	b.n	8007178 <_malloc_r+0xa0>
 80071ba:	bf00      	nop
 80071bc:	200046cc 	.word	0x200046cc

080071c0 <_realloc_r>:
 80071c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c4:	4680      	mov	r8, r0
 80071c6:	4614      	mov	r4, r2
 80071c8:	460e      	mov	r6, r1
 80071ca:	b921      	cbnz	r1, 80071d6 <_realloc_r+0x16>
 80071cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071d0:	4611      	mov	r1, r2
 80071d2:	f7ff bf81 	b.w	80070d8 <_malloc_r>
 80071d6:	b92a      	cbnz	r2, 80071e4 <_realloc_r+0x24>
 80071d8:	f7ff ff12 	bl	8007000 <_free_r>
 80071dc:	4625      	mov	r5, r4
 80071de:	4628      	mov	r0, r5
 80071e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e4:	f000 f838 	bl	8007258 <_malloc_usable_size_r>
 80071e8:	4284      	cmp	r4, r0
 80071ea:	4607      	mov	r7, r0
 80071ec:	d802      	bhi.n	80071f4 <_realloc_r+0x34>
 80071ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071f2:	d812      	bhi.n	800721a <_realloc_r+0x5a>
 80071f4:	4621      	mov	r1, r4
 80071f6:	4640      	mov	r0, r8
 80071f8:	f7ff ff6e 	bl	80070d8 <_malloc_r>
 80071fc:	4605      	mov	r5, r0
 80071fe:	2800      	cmp	r0, #0
 8007200:	d0ed      	beq.n	80071de <_realloc_r+0x1e>
 8007202:	42bc      	cmp	r4, r7
 8007204:	4622      	mov	r2, r4
 8007206:	4631      	mov	r1, r6
 8007208:	bf28      	it	cs
 800720a:	463a      	movcs	r2, r7
 800720c:	f7ff fbb8 	bl	8006980 <memcpy>
 8007210:	4631      	mov	r1, r6
 8007212:	4640      	mov	r0, r8
 8007214:	f7ff fef4 	bl	8007000 <_free_r>
 8007218:	e7e1      	b.n	80071de <_realloc_r+0x1e>
 800721a:	4635      	mov	r5, r6
 800721c:	e7df      	b.n	80071de <_realloc_r+0x1e>
	...

08007220 <_sbrk_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	4d06      	ldr	r5, [pc, #24]	; (800723c <_sbrk_r+0x1c>)
 8007224:	2300      	movs	r3, #0
 8007226:	4604      	mov	r4, r0
 8007228:	4608      	mov	r0, r1
 800722a:	602b      	str	r3, [r5, #0]
 800722c:	f7f9 fd82 	bl	8000d34 <_sbrk>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d102      	bne.n	800723a <_sbrk_r+0x1a>
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	b103      	cbz	r3, 800723a <_sbrk_r+0x1a>
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	bd38      	pop	{r3, r4, r5, pc}
 800723c:	200046d4 	.word	0x200046d4

08007240 <__malloc_lock>:
 8007240:	4801      	ldr	r0, [pc, #4]	; (8007248 <__malloc_lock+0x8>)
 8007242:	f000 b811 	b.w	8007268 <__retarget_lock_acquire_recursive>
 8007246:	bf00      	nop
 8007248:	200046d8 	.word	0x200046d8

0800724c <__malloc_unlock>:
 800724c:	4801      	ldr	r0, [pc, #4]	; (8007254 <__malloc_unlock+0x8>)
 800724e:	f000 b80c 	b.w	800726a <__retarget_lock_release_recursive>
 8007252:	bf00      	nop
 8007254:	200046d8 	.word	0x200046d8

08007258 <_malloc_usable_size_r>:
 8007258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800725c:	1f18      	subs	r0, r3, #4
 800725e:	2b00      	cmp	r3, #0
 8007260:	bfbc      	itt	lt
 8007262:	580b      	ldrlt	r3, [r1, r0]
 8007264:	18c0      	addlt	r0, r0, r3
 8007266:	4770      	bx	lr

08007268 <__retarget_lock_acquire_recursive>:
 8007268:	4770      	bx	lr

0800726a <__retarget_lock_release_recursive>:
 800726a:	4770      	bx	lr

0800726c <_init>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	bf00      	nop
 8007270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007272:	bc08      	pop	{r3}
 8007274:	469e      	mov	lr, r3
 8007276:	4770      	bx	lr

08007278 <_fini>:
 8007278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727a:	bf00      	nop
 800727c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800727e:	bc08      	pop	{r3}
 8007280:	469e      	mov	lr, r3
 8007282:	4770      	bx	lr
